
Ethercat_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009424  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080096c0  080096c0  000196c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009930  08009930  00019930  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009938  08009938  00019938  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800993c  0800993c  0001993c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000050  24000000  08009940  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000074c  24000050  08009990  00020050  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400079c  08009990  0002079c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001c441  00000000  00000000  0002007e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002881  00000000  00000000  0003c4bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001558  00000000  00000000  0003ed40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001480  00000000  00000000  00040298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038a7d  00000000  00000000  00041718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000193c7  00000000  00000000  0007a195  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171130  00000000  00000000  0009355c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0020468c  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00006000  00000000  00000000  002046dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000050 	.word	0x24000050
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080096a4 	.word	0x080096a4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000054 	.word	0x24000054
 80002d4:	080096a4 	.word	0x080096a4

080002d8 <__aeabi_frsub>:
 80002d8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__addsf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_fsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002e4 <__addsf3>:
 80002e4:	0042      	lsls	r2, r0, #1
 80002e6:	bf1f      	itttt	ne
 80002e8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002ec:	ea92 0f03 	teqne	r2, r3
 80002f0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002f4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002f8:	d06a      	beq.n	80003d0 <__addsf3+0xec>
 80002fa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002fe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000302:	bfc1      	itttt	gt
 8000304:	18d2      	addgt	r2, r2, r3
 8000306:	4041      	eorgt	r1, r0
 8000308:	4048      	eorgt	r0, r1
 800030a:	4041      	eorgt	r1, r0
 800030c:	bfb8      	it	lt
 800030e:	425b      	neglt	r3, r3
 8000310:	2b19      	cmp	r3, #25
 8000312:	bf88      	it	hi
 8000314:	4770      	bxhi	lr
 8000316:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800031a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800031e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000322:	bf18      	it	ne
 8000324:	4240      	negne	r0, r0
 8000326:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800032a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 800032e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000332:	bf18      	it	ne
 8000334:	4249      	negne	r1, r1
 8000336:	ea92 0f03 	teq	r2, r3
 800033a:	d03f      	beq.n	80003bc <__addsf3+0xd8>
 800033c:	f1a2 0201 	sub.w	r2, r2, #1
 8000340:	fa41 fc03 	asr.w	ip, r1, r3
 8000344:	eb10 000c 	adds.w	r0, r0, ip
 8000348:	f1c3 0320 	rsb	r3, r3, #32
 800034c:	fa01 f103 	lsl.w	r1, r1, r3
 8000350:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000354:	d502      	bpl.n	800035c <__addsf3+0x78>
 8000356:	4249      	negs	r1, r1
 8000358:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800035c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000360:	d313      	bcc.n	800038a <__addsf3+0xa6>
 8000362:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000366:	d306      	bcc.n	8000376 <__addsf3+0x92>
 8000368:	0840      	lsrs	r0, r0, #1
 800036a:	ea4f 0131 	mov.w	r1, r1, rrx
 800036e:	f102 0201 	add.w	r2, r2, #1
 8000372:	2afe      	cmp	r2, #254	; 0xfe
 8000374:	d251      	bcs.n	800041a <__addsf3+0x136>
 8000376:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800037a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800037e:	bf08      	it	eq
 8000380:	f020 0001 	biceq.w	r0, r0, #1
 8000384:	ea40 0003 	orr.w	r0, r0, r3
 8000388:	4770      	bx	lr
 800038a:	0049      	lsls	r1, r1, #1
 800038c:	eb40 0000 	adc.w	r0, r0, r0
 8000390:	3a01      	subs	r2, #1
 8000392:	bf28      	it	cs
 8000394:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000398:	d2ed      	bcs.n	8000376 <__addsf3+0x92>
 800039a:	fab0 fc80 	clz	ip, r0
 800039e:	f1ac 0c08 	sub.w	ip, ip, #8
 80003a2:	ebb2 020c 	subs.w	r2, r2, ip
 80003a6:	fa00 f00c 	lsl.w	r0, r0, ip
 80003aa:	bfaa      	itet	ge
 80003ac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003b0:	4252      	neglt	r2, r2
 80003b2:	4318      	orrge	r0, r3
 80003b4:	bfbc      	itt	lt
 80003b6:	40d0      	lsrlt	r0, r2
 80003b8:	4318      	orrlt	r0, r3
 80003ba:	4770      	bx	lr
 80003bc:	f092 0f00 	teq	r2, #0
 80003c0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003c4:	bf06      	itte	eq
 80003c6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003ca:	3201      	addeq	r2, #1
 80003cc:	3b01      	subne	r3, #1
 80003ce:	e7b5      	b.n	800033c <__addsf3+0x58>
 80003d0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003d4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003d8:	bf18      	it	ne
 80003da:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003de:	d021      	beq.n	8000424 <__addsf3+0x140>
 80003e0:	ea92 0f03 	teq	r2, r3
 80003e4:	d004      	beq.n	80003f0 <__addsf3+0x10c>
 80003e6:	f092 0f00 	teq	r2, #0
 80003ea:	bf08      	it	eq
 80003ec:	4608      	moveq	r0, r1
 80003ee:	4770      	bx	lr
 80003f0:	ea90 0f01 	teq	r0, r1
 80003f4:	bf1c      	itt	ne
 80003f6:	2000      	movne	r0, #0
 80003f8:	4770      	bxne	lr
 80003fa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80003fe:	d104      	bne.n	800040a <__addsf3+0x126>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	bf28      	it	cs
 8000404:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000408:	4770      	bx	lr
 800040a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 800040e:	bf3c      	itt	cc
 8000410:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000414:	4770      	bxcc	lr
 8000416:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800041a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 800041e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000422:	4770      	bx	lr
 8000424:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000428:	bf16      	itet	ne
 800042a:	4608      	movne	r0, r1
 800042c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000430:	4601      	movne	r1, r0
 8000432:	0242      	lsls	r2, r0, #9
 8000434:	bf06      	itte	eq
 8000436:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800043a:	ea90 0f01 	teqeq	r0, r1
 800043e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000442:	4770      	bx	lr

08000444 <__aeabi_ui2f>:
 8000444:	f04f 0300 	mov.w	r3, #0
 8000448:	e004      	b.n	8000454 <__aeabi_i2f+0x8>
 800044a:	bf00      	nop

0800044c <__aeabi_i2f>:
 800044c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000450:	bf48      	it	mi
 8000452:	4240      	negmi	r0, r0
 8000454:	ea5f 0c00 	movs.w	ip, r0
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000460:	4601      	mov	r1, r0
 8000462:	f04f 0000 	mov.w	r0, #0
 8000466:	e01c      	b.n	80004a2 <__aeabi_l2f+0x2a>

08000468 <__aeabi_ul2f>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	f04f 0300 	mov.w	r3, #0
 8000474:	e00a      	b.n	800048c <__aeabi_l2f+0x14>
 8000476:	bf00      	nop

08000478 <__aeabi_l2f>:
 8000478:	ea50 0201 	orrs.w	r2, r0, r1
 800047c:	bf08      	it	eq
 800047e:	4770      	bxeq	lr
 8000480:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000484:	d502      	bpl.n	800048c <__aeabi_l2f+0x14>
 8000486:	4240      	negs	r0, r0
 8000488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800048c:	ea5f 0c01 	movs.w	ip, r1
 8000490:	bf02      	ittt	eq
 8000492:	4684      	moveq	ip, r0
 8000494:	4601      	moveq	r1, r0
 8000496:	2000      	moveq	r0, #0
 8000498:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 800049c:	bf08      	it	eq
 800049e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004a2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004a6:	fabc f28c 	clz	r2, ip
 80004aa:	3a08      	subs	r2, #8
 80004ac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004b0:	db10      	blt.n	80004d4 <__aeabi_l2f+0x5c>
 80004b2:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b6:	4463      	add	r3, ip
 80004b8:	fa00 fc02 	lsl.w	ip, r0, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004c4:	fa20 f202 	lsr.w	r2, r0, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	f020 0001 	biceq.w	r0, r0, #1
 80004d2:	4770      	bx	lr
 80004d4:	f102 0220 	add.w	r2, r2, #32
 80004d8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004dc:	f1c2 0220 	rsb	r2, r2, #32
 80004e0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004e4:	fa21 f202 	lsr.w	r2, r1, r2
 80004e8:	eb43 0002 	adc.w	r0, r3, r2
 80004ec:	bf08      	it	eq
 80004ee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004f2:	4770      	bx	lr

080004f4 <__aeabi_uldivmod>:
 80004f4:	b953      	cbnz	r3, 800050c <__aeabi_uldivmod+0x18>
 80004f6:	b94a      	cbnz	r2, 800050c <__aeabi_uldivmod+0x18>
 80004f8:	2900      	cmp	r1, #0
 80004fa:	bf08      	it	eq
 80004fc:	2800      	cmpeq	r0, #0
 80004fe:	bf1c      	itt	ne
 8000500:	f04f 31ff 	movne.w	r1, #4294967295
 8000504:	f04f 30ff 	movne.w	r0, #4294967295
 8000508:	f000 b974 	b.w	80007f4 <__aeabi_idiv0>
 800050c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000510:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000514:	f000 f806 	bl	8000524 <__udivmoddi4>
 8000518:	f8dd e004 	ldr.w	lr, [sp, #4]
 800051c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000520:	b004      	add	sp, #16
 8000522:	4770      	bx	lr

08000524 <__udivmoddi4>:
 8000524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000528:	9d08      	ldr	r5, [sp, #32]
 800052a:	4604      	mov	r4, r0
 800052c:	468e      	mov	lr, r1
 800052e:	2b00      	cmp	r3, #0
 8000530:	d14d      	bne.n	80005ce <__udivmoddi4+0xaa>
 8000532:	428a      	cmp	r2, r1
 8000534:	4694      	mov	ip, r2
 8000536:	d969      	bls.n	800060c <__udivmoddi4+0xe8>
 8000538:	fab2 f282 	clz	r2, r2
 800053c:	b152      	cbz	r2, 8000554 <__udivmoddi4+0x30>
 800053e:	fa01 f302 	lsl.w	r3, r1, r2
 8000542:	f1c2 0120 	rsb	r1, r2, #32
 8000546:	fa20 f101 	lsr.w	r1, r0, r1
 800054a:	fa0c fc02 	lsl.w	ip, ip, r2
 800054e:	ea41 0e03 	orr.w	lr, r1, r3
 8000552:	4094      	lsls	r4, r2
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	0c21      	lsrs	r1, r4, #16
 800055a:	fbbe f6f8 	udiv	r6, lr, r8
 800055e:	fa1f f78c 	uxth.w	r7, ip
 8000562:	fb08 e316 	mls	r3, r8, r6, lr
 8000566:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800056a:	fb06 f107 	mul.w	r1, r6, r7
 800056e:	4299      	cmp	r1, r3
 8000570:	d90a      	bls.n	8000588 <__udivmoddi4+0x64>
 8000572:	eb1c 0303 	adds.w	r3, ip, r3
 8000576:	f106 30ff 	add.w	r0, r6, #4294967295
 800057a:	f080 811f 	bcs.w	80007bc <__udivmoddi4+0x298>
 800057e:	4299      	cmp	r1, r3
 8000580:	f240 811c 	bls.w	80007bc <__udivmoddi4+0x298>
 8000584:	3e02      	subs	r6, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000590:	fb08 3310 	mls	r3, r8, r0, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb00 f707 	mul.w	r7, r0, r7
 800059c:	42a7      	cmp	r7, r4
 800059e:	d90a      	bls.n	80005b6 <__udivmoddi4+0x92>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80005a8:	f080 810a 	bcs.w	80007c0 <__udivmoddi4+0x29c>
 80005ac:	42a7      	cmp	r7, r4
 80005ae:	f240 8107 	bls.w	80007c0 <__udivmoddi4+0x29c>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80005ba:	1be4      	subs	r4, r4, r7
 80005bc:	2600      	movs	r6, #0
 80005be:	b11d      	cbz	r5, 80005c8 <__udivmoddi4+0xa4>
 80005c0:	40d4      	lsrs	r4, r2
 80005c2:	2300      	movs	r3, #0
 80005c4:	e9c5 4300 	strd	r4, r3, [r5]
 80005c8:	4631      	mov	r1, r6
 80005ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d909      	bls.n	80005e6 <__udivmoddi4+0xc2>
 80005d2:	2d00      	cmp	r5, #0
 80005d4:	f000 80ef 	beq.w	80007b6 <__udivmoddi4+0x292>
 80005d8:	2600      	movs	r6, #0
 80005da:	e9c5 0100 	strd	r0, r1, [r5]
 80005de:	4630      	mov	r0, r6
 80005e0:	4631      	mov	r1, r6
 80005e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e6:	fab3 f683 	clz	r6, r3
 80005ea:	2e00      	cmp	r6, #0
 80005ec:	d14a      	bne.n	8000684 <__udivmoddi4+0x160>
 80005ee:	428b      	cmp	r3, r1
 80005f0:	d302      	bcc.n	80005f8 <__udivmoddi4+0xd4>
 80005f2:	4282      	cmp	r2, r0
 80005f4:	f200 80f9 	bhi.w	80007ea <__udivmoddi4+0x2c6>
 80005f8:	1a84      	subs	r4, r0, r2
 80005fa:	eb61 0303 	sbc.w	r3, r1, r3
 80005fe:	2001      	movs	r0, #1
 8000600:	469e      	mov	lr, r3
 8000602:	2d00      	cmp	r5, #0
 8000604:	d0e0      	beq.n	80005c8 <__udivmoddi4+0xa4>
 8000606:	e9c5 4e00 	strd	r4, lr, [r5]
 800060a:	e7dd      	b.n	80005c8 <__udivmoddi4+0xa4>
 800060c:	b902      	cbnz	r2, 8000610 <__udivmoddi4+0xec>
 800060e:	deff      	udf	#255	; 0xff
 8000610:	fab2 f282 	clz	r2, r2
 8000614:	2a00      	cmp	r2, #0
 8000616:	f040 8092 	bne.w	800073e <__udivmoddi4+0x21a>
 800061a:	eba1 010c 	sub.w	r1, r1, ip
 800061e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000622:	fa1f fe8c 	uxth.w	lr, ip
 8000626:	2601      	movs	r6, #1
 8000628:	0c20      	lsrs	r0, r4, #16
 800062a:	fbb1 f3f7 	udiv	r3, r1, r7
 800062e:	fb07 1113 	mls	r1, r7, r3, r1
 8000632:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000636:	fb0e f003 	mul.w	r0, lr, r3
 800063a:	4288      	cmp	r0, r1
 800063c:	d908      	bls.n	8000650 <__udivmoddi4+0x12c>
 800063e:	eb1c 0101 	adds.w	r1, ip, r1
 8000642:	f103 38ff 	add.w	r8, r3, #4294967295
 8000646:	d202      	bcs.n	800064e <__udivmoddi4+0x12a>
 8000648:	4288      	cmp	r0, r1
 800064a:	f200 80cb 	bhi.w	80007e4 <__udivmoddi4+0x2c0>
 800064e:	4643      	mov	r3, r8
 8000650:	1a09      	subs	r1, r1, r0
 8000652:	b2a4      	uxth	r4, r4
 8000654:	fbb1 f0f7 	udiv	r0, r1, r7
 8000658:	fb07 1110 	mls	r1, r7, r0, r1
 800065c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000660:	fb0e fe00 	mul.w	lr, lr, r0
 8000664:	45a6      	cmp	lr, r4
 8000666:	d908      	bls.n	800067a <__udivmoddi4+0x156>
 8000668:	eb1c 0404 	adds.w	r4, ip, r4
 800066c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000670:	d202      	bcs.n	8000678 <__udivmoddi4+0x154>
 8000672:	45a6      	cmp	lr, r4
 8000674:	f200 80bb 	bhi.w	80007ee <__udivmoddi4+0x2ca>
 8000678:	4608      	mov	r0, r1
 800067a:	eba4 040e 	sub.w	r4, r4, lr
 800067e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000682:	e79c      	b.n	80005be <__udivmoddi4+0x9a>
 8000684:	f1c6 0720 	rsb	r7, r6, #32
 8000688:	40b3      	lsls	r3, r6
 800068a:	fa22 fc07 	lsr.w	ip, r2, r7
 800068e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000692:	fa20 f407 	lsr.w	r4, r0, r7
 8000696:	fa01 f306 	lsl.w	r3, r1, r6
 800069a:	431c      	orrs	r4, r3
 800069c:	40f9      	lsrs	r1, r7
 800069e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006a2:	fa00 f306 	lsl.w	r3, r0, r6
 80006a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80006aa:	0c20      	lsrs	r0, r4, #16
 80006ac:	fa1f fe8c 	uxth.w	lr, ip
 80006b0:	fb09 1118 	mls	r1, r9, r8, r1
 80006b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80006b8:	fb08 f00e 	mul.w	r0, r8, lr
 80006bc:	4288      	cmp	r0, r1
 80006be:	fa02 f206 	lsl.w	r2, r2, r6
 80006c2:	d90b      	bls.n	80006dc <__udivmoddi4+0x1b8>
 80006c4:	eb1c 0101 	adds.w	r1, ip, r1
 80006c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80006cc:	f080 8088 	bcs.w	80007e0 <__udivmoddi4+0x2bc>
 80006d0:	4288      	cmp	r0, r1
 80006d2:	f240 8085 	bls.w	80007e0 <__udivmoddi4+0x2bc>
 80006d6:	f1a8 0802 	sub.w	r8, r8, #2
 80006da:	4461      	add	r1, ip
 80006dc:	1a09      	subs	r1, r1, r0
 80006de:	b2a4      	uxth	r4, r4
 80006e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80006e4:	fb09 1110 	mls	r1, r9, r0, r1
 80006e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80006ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80006f0:	458e      	cmp	lr, r1
 80006f2:	d908      	bls.n	8000706 <__udivmoddi4+0x1e2>
 80006f4:	eb1c 0101 	adds.w	r1, ip, r1
 80006f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80006fc:	d26c      	bcs.n	80007d8 <__udivmoddi4+0x2b4>
 80006fe:	458e      	cmp	lr, r1
 8000700:	d96a      	bls.n	80007d8 <__udivmoddi4+0x2b4>
 8000702:	3802      	subs	r0, #2
 8000704:	4461      	add	r1, ip
 8000706:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800070a:	fba0 9402 	umull	r9, r4, r0, r2
 800070e:	eba1 010e 	sub.w	r1, r1, lr
 8000712:	42a1      	cmp	r1, r4
 8000714:	46c8      	mov	r8, r9
 8000716:	46a6      	mov	lr, r4
 8000718:	d356      	bcc.n	80007c8 <__udivmoddi4+0x2a4>
 800071a:	d053      	beq.n	80007c4 <__udivmoddi4+0x2a0>
 800071c:	b15d      	cbz	r5, 8000736 <__udivmoddi4+0x212>
 800071e:	ebb3 0208 	subs.w	r2, r3, r8
 8000722:	eb61 010e 	sbc.w	r1, r1, lr
 8000726:	fa01 f707 	lsl.w	r7, r1, r7
 800072a:	fa22 f306 	lsr.w	r3, r2, r6
 800072e:	40f1      	lsrs	r1, r6
 8000730:	431f      	orrs	r7, r3
 8000732:	e9c5 7100 	strd	r7, r1, [r5]
 8000736:	2600      	movs	r6, #0
 8000738:	4631      	mov	r1, r6
 800073a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800073e:	f1c2 0320 	rsb	r3, r2, #32
 8000742:	40d8      	lsrs	r0, r3
 8000744:	fa0c fc02 	lsl.w	ip, ip, r2
 8000748:	fa21 f303 	lsr.w	r3, r1, r3
 800074c:	4091      	lsls	r1, r2
 800074e:	4301      	orrs	r1, r0
 8000750:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000754:	fa1f fe8c 	uxth.w	lr, ip
 8000758:	fbb3 f0f7 	udiv	r0, r3, r7
 800075c:	fb07 3610 	mls	r6, r7, r0, r3
 8000760:	0c0b      	lsrs	r3, r1, #16
 8000762:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000766:	fb00 f60e 	mul.w	r6, r0, lr
 800076a:	429e      	cmp	r6, r3
 800076c:	fa04 f402 	lsl.w	r4, r4, r2
 8000770:	d908      	bls.n	8000784 <__udivmoddi4+0x260>
 8000772:	eb1c 0303 	adds.w	r3, ip, r3
 8000776:	f100 38ff 	add.w	r8, r0, #4294967295
 800077a:	d22f      	bcs.n	80007dc <__udivmoddi4+0x2b8>
 800077c:	429e      	cmp	r6, r3
 800077e:	d92d      	bls.n	80007dc <__udivmoddi4+0x2b8>
 8000780:	3802      	subs	r0, #2
 8000782:	4463      	add	r3, ip
 8000784:	1b9b      	subs	r3, r3, r6
 8000786:	b289      	uxth	r1, r1
 8000788:	fbb3 f6f7 	udiv	r6, r3, r7
 800078c:	fb07 3316 	mls	r3, r7, r6, r3
 8000790:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000794:	fb06 f30e 	mul.w	r3, r6, lr
 8000798:	428b      	cmp	r3, r1
 800079a:	d908      	bls.n	80007ae <__udivmoddi4+0x28a>
 800079c:	eb1c 0101 	adds.w	r1, ip, r1
 80007a0:	f106 38ff 	add.w	r8, r6, #4294967295
 80007a4:	d216      	bcs.n	80007d4 <__udivmoddi4+0x2b0>
 80007a6:	428b      	cmp	r3, r1
 80007a8:	d914      	bls.n	80007d4 <__udivmoddi4+0x2b0>
 80007aa:	3e02      	subs	r6, #2
 80007ac:	4461      	add	r1, ip
 80007ae:	1ac9      	subs	r1, r1, r3
 80007b0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80007b4:	e738      	b.n	8000628 <__udivmoddi4+0x104>
 80007b6:	462e      	mov	r6, r5
 80007b8:	4628      	mov	r0, r5
 80007ba:	e705      	b.n	80005c8 <__udivmoddi4+0xa4>
 80007bc:	4606      	mov	r6, r0
 80007be:	e6e3      	b.n	8000588 <__udivmoddi4+0x64>
 80007c0:	4618      	mov	r0, r3
 80007c2:	e6f8      	b.n	80005b6 <__udivmoddi4+0x92>
 80007c4:	454b      	cmp	r3, r9
 80007c6:	d2a9      	bcs.n	800071c <__udivmoddi4+0x1f8>
 80007c8:	ebb9 0802 	subs.w	r8, r9, r2
 80007cc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80007d0:	3801      	subs	r0, #1
 80007d2:	e7a3      	b.n	800071c <__udivmoddi4+0x1f8>
 80007d4:	4646      	mov	r6, r8
 80007d6:	e7ea      	b.n	80007ae <__udivmoddi4+0x28a>
 80007d8:	4620      	mov	r0, r4
 80007da:	e794      	b.n	8000706 <__udivmoddi4+0x1e2>
 80007dc:	4640      	mov	r0, r8
 80007de:	e7d1      	b.n	8000784 <__udivmoddi4+0x260>
 80007e0:	46d0      	mov	r8, sl
 80007e2:	e77b      	b.n	80006dc <__udivmoddi4+0x1b8>
 80007e4:	3b02      	subs	r3, #2
 80007e6:	4461      	add	r1, ip
 80007e8:	e732      	b.n	8000650 <__udivmoddi4+0x12c>
 80007ea:	4630      	mov	r0, r6
 80007ec:	e709      	b.n	8000602 <__udivmoddi4+0xde>
 80007ee:	4464      	add	r4, ip
 80007f0:	3802      	subs	r0, #2
 80007f2:	e742      	b.n	800067a <__udivmoddi4+0x156>

080007f4 <__aeabi_idiv0>:
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop

080007f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fe:	2003      	movs	r0, #3
 8000800:	f000 f98c 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000804:	f002 f870 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8000808:	4602      	mov	r2, r0
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_Init+0x68>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	0a1b      	lsrs	r3, r3, #8
 8000810:	f003 030f 	and.w	r3, r3, #15
 8000814:	4913      	ldr	r1, [pc, #76]	; (8000864 <HAL_Init+0x6c>)
 8000816:	5ccb      	ldrb	r3, [r1, r3]
 8000818:	f003 031f 	and.w	r3, r3, #31
 800081c:	fa22 f303 	lsr.w	r3, r2, r3
 8000820:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000822:	4b0f      	ldr	r3, [pc, #60]	; (8000860 <HAL_Init+0x68>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	4a0e      	ldr	r2, [pc, #56]	; (8000864 <HAL_Init+0x6c>)
 800082c:	5cd3      	ldrb	r3, [r2, r3]
 800082e:	f003 031f 	and.w	r3, r3, #31
 8000832:	687a      	ldr	r2, [r7, #4]
 8000834:	fa22 f303 	lsr.w	r3, r2, r3
 8000838:	4a0b      	ldr	r2, [pc, #44]	; (8000868 <HAL_Init+0x70>)
 800083a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800083c:	4a0b      	ldr	r2, [pc, #44]	; (800086c <HAL_Init+0x74>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000842:	200f      	movs	r0, #15
 8000844:	f000 f814 	bl	8000870 <HAL_InitTick>
 8000848:	4603      	mov	r3, r0
 800084a:	2b00      	cmp	r3, #0
 800084c:	d001      	beq.n	8000852 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800084e:	2301      	movs	r3, #1
 8000850:	e002      	b.n	8000858 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000852:	f007 fe03 	bl	800845c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000856:	2300      	movs	r3, #0
}
 8000858:	4618      	mov	r0, r3
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	58024400 	.word	0x58024400
 8000864:	08009744 	.word	0x08009744
 8000868:	2400004c 	.word	0x2400004c
 800086c:	24000048 	.word	0x24000048

08000870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b082      	sub	sp, #8
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000878:	4b15      	ldr	r3, [pc, #84]	; (80008d0 <HAL_InitTick+0x60>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d101      	bne.n	8000884 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000880:	2301      	movs	r3, #1
 8000882:	e021      	b.n	80008c8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000884:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <HAL_InitTick+0x64>)
 8000886:	681a      	ldr	r2, [r3, #0]
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_InitTick+0x60>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	4619      	mov	r1, r3
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	fbb3 f3f1 	udiv	r3, r3, r1
 8000896:	fbb2 f3f3 	udiv	r3, r2, r3
 800089a:	4618      	mov	r0, r3
 800089c:	f000 f971 	bl	8000b82 <HAL_SYSTICK_Config>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00e      	b.n	80008c8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2b0f      	cmp	r3, #15
 80008ae:	d80a      	bhi.n	80008c6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b0:	2200      	movs	r2, #0
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f000 f93b 	bl	8000b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008bc:	4a06      	ldr	r2, [pc, #24]	; (80008d8 <HAL_InitTick+0x68>)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008c2:	2300      	movs	r3, #0
 80008c4:	e000      	b.n	80008c8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	24000004 	.word	0x24000004
 80008d4:	24000048 	.word	0x24000048
 80008d8:	24000000 	.word	0x24000000

080008dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80008e0:	4b06      	ldr	r3, [pc, #24]	; (80008fc <HAL_IncTick+0x20>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_IncTick+0x24>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4413      	add	r3, r2
 80008ec:	4a04      	ldr	r2, [pc, #16]	; (8000900 <HAL_IncTick+0x24>)
 80008ee:	6013      	str	r3, [r2, #0]
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr
 80008fa:	bf00      	nop
 80008fc:	24000004 	.word	0x24000004
 8000900:	2400006c 	.word	0x2400006c

08000904 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  return uwTick;
 8000908:	4b03      	ldr	r3, [pc, #12]	; (8000918 <HAL_GetTick+0x14>)
 800090a:	681b      	ldr	r3, [r3, #0]
}
 800090c:	4618      	mov	r0, r3
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	2400006c 	.word	0x2400006c

0800091c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b084      	sub	sp, #16
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000924:	f7ff ffee 	bl	8000904 <HAL_GetTick>
 8000928:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000934:	d005      	beq.n	8000942 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000936:	4b0a      	ldr	r3, [pc, #40]	; (8000960 <HAL_Delay+0x44>)
 8000938:	781b      	ldrb	r3, [r3, #0]
 800093a:	461a      	mov	r2, r3
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	4413      	add	r3, r2
 8000940:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000942:	bf00      	nop
 8000944:	f7ff ffde 	bl	8000904 <HAL_GetTick>
 8000948:	4602      	mov	r2, r0
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	1ad3      	subs	r3, r2, r3
 800094e:	68fa      	ldr	r2, [r7, #12]
 8000950:	429a      	cmp	r2, r3
 8000952:	d8f7      	bhi.n	8000944 <HAL_Delay+0x28>
  {
  }
}
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	3710      	adds	r7, #16
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	24000004 	.word	0x24000004

08000964 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000964:	b480      	push	{r7}
 8000966:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000968:	4b03      	ldr	r3, [pc, #12]	; (8000978 <HAL_GetREVID+0x14>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	0c1b      	lsrs	r3, r3, #16
}
 800096e:	4618      	mov	r0, r3
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	5c001000 	.word	0x5c001000

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <__NVIC_SetPriorityGrouping+0x40>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009a6:	4313      	orrs	r3, r2
 80009a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009aa:	4a04      	ldr	r2, [pc, #16]	; (80009bc <__NVIC_SetPriorityGrouping+0x40>)
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	60d3      	str	r3, [r2, #12]
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	e000ed00 	.word	0xe000ed00
 80009c0:	05fa0000 	.word	0x05fa0000

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <__NVIC_EnableIRQ+0x38>)
 80009fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	88fb      	ldrh	r3, [r7, #6]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f7ff ff8e 	bl	8000a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff29 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b40:	f7ff ff40 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b44:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b46:	687a      	ldr	r2, [r7, #4]
 8000b48:	68b9      	ldr	r1, [r7, #8]
 8000b4a:	6978      	ldr	r0, [r7, #20]
 8000b4c:	f7ff ff90 	bl	8000a70 <NVIC_EncodePriority>
 8000b50:	4602      	mov	r2, r0
 8000b52:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000b56:	4611      	mov	r1, r2
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff5f 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b5e:	bf00      	nop
 8000b60:	3718      	adds	r7, #24
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}

08000b66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b66:	b580      	push	{r7, lr}
 8000b68:	b082      	sub	sp, #8
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b70:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff ff33 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b082      	sub	sp, #8
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8a:	6878      	ldr	r0, [r7, #4]
 8000b8c:	f7ff ffa4 	bl	8000ad8 <SysTick_Config>
 8000b90:	4603      	mov	r3, r0
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	3708      	adds	r7, #8
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
	...

08000b9c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000ba0:	f3bf 8f5f 	dmb	sy
}
 8000ba4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000ba6:	4b07      	ldr	r3, [pc, #28]	; (8000bc4 <HAL_MPU_Disable+0x28>)
 8000ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000baa:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_MPU_Disable+0x28>)
 8000bac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000bb0:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000bb2:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <HAL_MPU_Disable+0x2c>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
}
 8000bb8:	bf00      	nop
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc0:	4770      	bx	lr
 8000bc2:	bf00      	nop
 8000bc4:	e000ed00 	.word	0xe000ed00
 8000bc8:	e000ed90 	.word	0xe000ed90

08000bcc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b083      	sub	sp, #12
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000bd4:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <HAL_MPU_Enable+0x38>)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f043 0301 	orr.w	r3, r3, #1
 8000bdc:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_MPU_Enable+0x3c>)
 8000be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000be2:	4a09      	ldr	r2, [pc, #36]	; (8000c08 <HAL_MPU_Enable+0x3c>)
 8000be4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000bea:	f3bf 8f4f 	dsb	sy
}
 8000bee:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bf0:	f3bf 8f6f 	isb	sy
}
 8000bf4:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000bf6:	bf00      	nop
 8000bf8:	370c      	adds	r7, #12
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c00:	4770      	bx	lr
 8000c02:	bf00      	nop
 8000c04:	e000ed90 	.word	0xe000ed90
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	785a      	ldrb	r2, [r3, #1]
 8000c18:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <HAL_MPU_ConfigRegion+0x84>)
 8000c1a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d029      	beq.n	8000c78 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000c24:	4a1a      	ldr	r2, [pc, #104]	; (8000c90 <HAL_MPU_ConfigRegion+0x84>)
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	685b      	ldr	r3, [r3, #4]
 8000c2a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7b1b      	ldrb	r3, [r3, #12]
 8000c30:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	7adb      	ldrb	r3, [r3, #11]
 8000c36:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	7a9b      	ldrb	r3, [r3, #10]
 8000c3e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000c40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	7b5b      	ldrb	r3, [r3, #13]
 8000c46:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000c48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	7b9b      	ldrb	r3, [r3, #14]
 8000c4e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000c50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	7bdb      	ldrb	r3, [r3, #15]
 8000c56:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000c58:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	7a5b      	ldrb	r3, [r3, #9]
 8000c5e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000c60:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	7a1b      	ldrb	r3, [r3, #8]
 8000c66:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000c68:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000c6a:	687a      	ldr	r2, [r7, #4]
 8000c6c:	7812      	ldrb	r2, [r2, #0]
 8000c6e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000c72:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000c74:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000c76:	e005      	b.n	8000c84 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_MPU_ConfigRegion+0x84>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000c7e:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <HAL_MPU_ConfigRegion+0x84>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
}
 8000c84:	bf00      	nop
 8000c86:	370c      	adds	r7, #12
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed90 	.word	0xe000ed90

08000c94 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b098      	sub	sp, #96	; 0x60
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000c9c:	4a84      	ldr	r2, [pc, #528]	; (8000eb0 <HAL_FDCAN_Init+0x21c>)
 8000c9e:	f107 030c 	add.w	r3, r7, #12
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	224c      	movs	r2, #76	; 0x4c
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f007 fef0 	bl	8008a8c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d101      	bne.n	8000cb6 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	e1c6      	b.n	8001044 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a7e      	ldr	r2, [pc, #504]	; (8000eb4 <HAL_FDCAN_Init+0x220>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d106      	bne.n	8000cce <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000cc8:	461a      	mov	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000cd4:	b2db      	uxtb	r3, r3
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d106      	bne.n	8000ce8 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000ce2:	6878      	ldr	r0, [r7, #4]
 8000ce4:	f007 fbd4 	bl	8008490 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	699a      	ldr	r2, [r3, #24]
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	f022 0210 	bic.w	r2, r2, #16
 8000cf6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000cf8:	f7ff fe04 	bl	8000904 <HAL_GetTick>
 8000cfc:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000cfe:	e014      	b.n	8000d2a <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d00:	f7ff fe00 	bl	8000904 <HAL_GetTick>
 8000d04:	4602      	mov	r2, r0
 8000d06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d08:	1ad3      	subs	r3, r2, r3
 8000d0a:	2b0a      	cmp	r3, #10
 8000d0c:	d90d      	bls.n	8000d2a <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d14:	f043 0201 	orr.w	r2, r3, #1
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2203      	movs	r2, #3
 8000d22:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000d26:	2301      	movs	r3, #1
 8000d28:	e18c      	b.n	8001044 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	699b      	ldr	r3, [r3, #24]
 8000d30:	f003 0308 	and.w	r3, r3, #8
 8000d34:	2b08      	cmp	r3, #8
 8000d36:	d0e3      	beq.n	8000d00 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	699a      	ldr	r2, [r3, #24]
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	f042 0201 	orr.w	r2, r2, #1
 8000d46:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000d48:	f7ff fddc 	bl	8000904 <HAL_GetTick>
 8000d4c:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d4e:	e014      	b.n	8000d7a <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000d50:	f7ff fdd8 	bl	8000904 <HAL_GetTick>
 8000d54:	4602      	mov	r2, r0
 8000d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d58:	1ad3      	subs	r3, r2, r3
 8000d5a:	2b0a      	cmp	r3, #10
 8000d5c:	d90d      	bls.n	8000d7a <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000d64:	f043 0201 	orr.w	r2, r3, #1
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2203      	movs	r2, #3
 8000d72:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000d76:	2301      	movs	r3, #1
 8000d78:	e164      	b.n	8001044 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	699b      	ldr	r3, [r3, #24]
 8000d80:	f003 0301 	and.w	r3, r3, #1
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d0e3      	beq.n	8000d50 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	699a      	ldr	r2, [r3, #24]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f042 0202 	orr.w	r2, r2, #2
 8000d96:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	7c1b      	ldrb	r3, [r3, #16]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d108      	bne.n	8000db2 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	699a      	ldr	r2, [r3, #24]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000dae:	619a      	str	r2, [r3, #24]
 8000db0:	e007      	b.n	8000dc2 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	699a      	ldr	r2, [r3, #24]
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000dc0:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	7c5b      	ldrb	r3, [r3, #17]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d108      	bne.n	8000ddc <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	699a      	ldr	r2, [r3, #24]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000dd8:	619a      	str	r2, [r3, #24]
 8000dda:	e007      	b.n	8000dec <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	699a      	ldr	r2, [r3, #24]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000dea:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	7c9b      	ldrb	r3, [r3, #18]
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d108      	bne.n	8000e06 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e02:	619a      	str	r2, [r3, #24]
 8000e04:	e007      	b.n	8000e16 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	699a      	ldr	r2, [r3, #24]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e14:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	699b      	ldr	r3, [r3, #24]
 8000e1c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	689a      	ldr	r2, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	699a      	ldr	r2, [r3, #24]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000e3a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	691a      	ldr	r2, [r3, #16]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0210 	bic.w	r2, r2, #16
 8000e4a:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d108      	bne.n	8000e66 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	699a      	ldr	r2, [r3, #24]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f042 0204 	orr.w	r2, r2, #4
 8000e62:	619a      	str	r2, [r3, #24]
 8000e64:	e030      	b.n	8000ec8 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	68db      	ldr	r3, [r3, #12]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d02c      	beq.n	8000ec8 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	68db      	ldr	r3, [r3, #12]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d020      	beq.n	8000eb8 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	699a      	ldr	r2, [r3, #24]
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000e84:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	f042 0210 	orr.w	r2, r2, #16
 8000e94:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	68db      	ldr	r3, [r3, #12]
 8000e9a:	2b03      	cmp	r3, #3
 8000e9c:	d114      	bne.n	8000ec8 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	699a      	ldr	r2, [r3, #24]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f042 0220 	orr.w	r2, r2, #32
 8000eac:	619a      	str	r2, [r3, #24]
 8000eae:	e00b      	b.n	8000ec8 <HAL_FDCAN_Init+0x234>
 8000eb0:	080096c0 	.word	0x080096c0
 8000eb4:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	699a      	ldr	r2, [r3, #24]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 0220 	orr.w	r2, r2, #32
 8000ec6:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	3b01      	subs	r3, #1
 8000ece:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	69db      	ldr	r3, [r3, #28]
 8000ed4:	3b01      	subs	r3, #1
 8000ed6:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ed8:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6a1b      	ldr	r3, [r3, #32]
 8000ede:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000ee0:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	695b      	ldr	r3, [r3, #20]
 8000ee8:	3b01      	subs	r3, #1
 8000eea:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000ef0:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000ef2:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000efc:	d115      	bne.n	8000f2a <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f02:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f08:	3b01      	subs	r3, #1
 8000f0a:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000f0c:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	3b01      	subs	r3, #1
 8000f14:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000f16:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f1e:	3b01      	subs	r3, #1
 8000f20:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000f26:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000f28:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d00a      	beq.n	8000f48 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	430a      	orrs	r2, r1
 8000f44:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f50:	4413      	add	r3, r2
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d011      	beq.n	8000f7a <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8000f5e:	f023 0107 	bic.w	r1, r3, #7
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f66:	009b      	lsls	r3, r3, #2
 8000f68:	3360      	adds	r3, #96	; 0x60
 8000f6a:	443b      	add	r3, r7
 8000f6c:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	430a      	orrs	r2, r1
 8000f76:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d011      	beq.n	8000fa6 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000f8a:	f023 0107 	bic.w	r1, r3, #7
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	009b      	lsls	r3, r3, #2
 8000f94:	3360      	adds	r3, #96	; 0x60
 8000f96:	443b      	add	r3, r7
 8000f98:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	430a      	orrs	r2, r1
 8000fa2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d012      	beq.n	8000fd4 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000fb6:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fbe:	009b      	lsls	r3, r3, #2
 8000fc0:	3360      	adds	r3, #96	; 0x60
 8000fc2:	443b      	add	r3, r7
 8000fc4:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000fc8:	011a      	lsls	r2, r3, #4
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	430a      	orrs	r2, r1
 8000fd0:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d012      	beq.n	8001002 <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8000fe4:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	3360      	adds	r3, #96	; 0x60
 8000ff0:	443b      	add	r3, r7
 8000ff2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8000ff6:	021a      	lsls	r2, r3, #8
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	430a      	orrs	r2, r1
 8000ffe:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a11      	ldr	r2, [pc, #68]	; (800104c <HAL_FDCAN_Init+0x3b8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d107      	bne.n	800101c <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	689a      	ldr	r2, [r3, #8]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	f022 0203 	bic.w	r2, r2, #3
 800101a:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2201      	movs	r2, #1
 8001030:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f000 fa25 	bl	8001484 <FDCAN_CalcultateRamBlockAddresses>
 800103a:	4603      	mov	r3, r0
 800103c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001040:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001044:	4618      	mov	r0, r3
 8001046:	3760      	adds	r7, #96	; 0x60
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	4000a000 	.word	0x4000a000

08001050 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800105e:	b2db      	uxtb	r3, r3
 8001060:	2b01      	cmp	r3, #1
 8001062:	d111      	bne.n	8001088 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2202      	movs	r2, #2
 8001068:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	699a      	ldr	r2, [r3, #24]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001084:	2300      	movs	r3, #0
 8001086:	e008      	b.n	800109a <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800108e:	f043 0204 	orr.w	r2, r3, #4
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
  }
}
 800109a:	4618      	mov	r0, r3
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr

080010a6 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b02      	cmp	r3, #2
 80010bc:	d141      	bne.n	8001142 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80010c6:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010d4:	f043 0220 	orr.w	r2, r3, #32
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e038      	b.n	8001154 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d009      	beq.n	8001106 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010f8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	e026      	b.n	8001154 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800110e:	0c1b      	lsrs	r3, r3, #16
 8001110:	f003 031f 	and.w	r3, r3, #31
 8001114:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8001116:	697b      	ldr	r3, [r7, #20]
 8001118:	687a      	ldr	r2, [r7, #4]
 800111a:	68b9      	ldr	r1, [r7, #8]
 800111c:	68f8      	ldr	r0, [r7, #12]
 800111e:	f000 fb37 	bl	8001790 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2101      	movs	r1, #1
 8001128:	697a      	ldr	r2, [r7, #20]
 800112a:	fa01 f202 	lsl.w	r2, r1, r2
 800112e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 8001132:	2201      	movs	r2, #1
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	409a      	lsls	r2, r3
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 800113e:	2300      	movs	r3, #0
 8001140:	e008      	b.n	8001154 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001148:	f043 0208 	orr.w	r2, r3, #8
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
  }
}
 8001154:	4618      	mov	r0, r3
 8001156:	3718      	adds	r7, #24
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 800115c:	b480      	push	{r7}
 800115e:	b08b      	sub	sp, #44	; 0x2c
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001174:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8001176:	7efb      	ldrb	r3, [r7, #27]
 8001178:	2b02      	cmp	r3, #2
 800117a:	f040 814b 	bne.w	8001414 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b40      	cmp	r3, #64	; 0x40
 8001182:	d14d      	bne.n	8001220 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800118c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d109      	bne.n	80011a8 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800119a:	f043 0220 	orr.w	r2, r3, #32
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e13e      	b.n	8001426 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d109      	bne.n	80011cc <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011be:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e12c      	b.n	8001426 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011d4:	0e1b      	lsrs	r3, r3, #24
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	2b01      	cmp	r3, #1
 80011dc:	d10b      	bne.n	80011f6 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80011e6:	0fdb      	lsrs	r3, r3, #31
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80011f0:	d101      	bne.n	80011f6 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80011f2:	2301      	movs	r3, #1
 80011f4:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80011fe:	0a1b      	lsrs	r3, r3, #8
 8001200:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001204:	69fa      	ldr	r2, [r7, #28]
 8001206:	4413      	add	r3, r2
 8001208:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001212:	69f9      	ldr	r1, [r7, #28]
 8001214:	fb01 f303 	mul.w	r3, r1, r3
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	627b      	str	r3, [r7, #36]	; 0x24
 800121e:	e069      	b.n	80012f4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	2b41      	cmp	r3, #65	; 0x41
 8001224:	d14d      	bne.n	80012c2 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800122e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800123c:	f043 0220 	orr.w	r2, r3, #32
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e0ed      	b.n	8001426 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001256:	2b00      	cmp	r3, #0
 8001258:	d109      	bne.n	800126e <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001260:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e0db      	b.n	8001426 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001276:	0e1b      	lsrs	r3, r3, #24
 8001278:	f003 0301 	and.w	r3, r3, #1
 800127c:	2b01      	cmp	r3, #1
 800127e:	d10b      	bne.n	8001298 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001288:	0fdb      	lsrs	r3, r3, #31
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001292:	d101      	bne.n	8001298 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001294:	2301      	movs	r3, #1
 8001296:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80012a0:	0a1b      	lsrs	r3, r3, #8
 80012a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	4413      	add	r3, r2
 80012aa:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b4:	69f9      	ldr	r1, [r7, #28]
 80012b6:	fb01 f303 	mul.w	r3, r1, r3
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	e018      	b.n	80012f4 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d309      	bcc.n	80012e0 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012d2:	f043 0220 	orr.w	r2, r3, #32
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	e0a2      	b.n	8001426 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	fb01 f303 	mul.w	r3, r1, r3
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	4413      	add	r3, r2
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80012f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d107      	bne.n	8001318 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	0c9b      	lsrs	r3, r3, #18
 800130e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	e005      	b.n	8001324 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8001324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 800133c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800133e:	3304      	adds	r3, #4
 8001340:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	b29a      	uxth	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	0e1b      	lsrs	r3, r3, #24
 8001376:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 800137e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	0fda      	lsrs	r2, r3, #31
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138a:	3304      	adds	r3, #4
 800138c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800138e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001390:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001392:	2300      	movs	r3, #0
 8001394:	623b      	str	r3, [r7, #32]
 8001396:	e00a      	b.n	80013ae <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001398:	697a      	ldr	r2, [r7, #20]
 800139a:	6a3b      	ldr	r3, [r7, #32]
 800139c:	441a      	add	r2, r3
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	6a3b      	ldr	r3, [r7, #32]
 80013a2:	440b      	add	r3, r1
 80013a4:	7812      	ldrb	r2, [r2, #0]
 80013a6:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80013a8:	6a3b      	ldr	r3, [r7, #32]
 80013aa:	3301      	adds	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	0c1b      	lsrs	r3, r3, #16
 80013b4:	4a1f      	ldr	r2, [pc, #124]	; (8001434 <HAL_FDCAN_GetRxMessage+0x2d8>)
 80013b6:	5cd3      	ldrb	r3, [r2, r3]
 80013b8:	461a      	mov	r2, r3
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	4293      	cmp	r3, r2
 80013be:	d3eb      	bcc.n	8001398 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b40      	cmp	r3, #64	; 0x40
 80013c4:	d105      	bne.n	80013d2 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	69fa      	ldr	r2, [r7, #28]
 80013cc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80013d0:	e01e      	b.n	8001410 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80013d2:	68bb      	ldr	r3, [r7, #8]
 80013d4:	2b41      	cmp	r3, #65	; 0x41
 80013d6:	d105      	bne.n	80013e4 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	69fa      	ldr	r2, [r7, #28]
 80013de:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80013e2:	e015      	b.n	8001410 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b1f      	cmp	r3, #31
 80013e8:	d808      	bhi.n	80013fc <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	2101      	movs	r1, #1
 80013f0:	68ba      	ldr	r2, [r7, #8]
 80013f2:	fa01 f202 	lsl.w	r2, r1, r2
 80013f6:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80013fa:	e009      	b.n	8001410 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	f003 021f 	and.w	r2, r3, #31
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	2101      	movs	r1, #1
 8001408:	fa01 f202 	lsl.w	r2, r1, r2
 800140c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001410:	2300      	movs	r3, #0
 8001412:	e008      	b.n	8001426 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800141a:	f043 0208 	orr.w	r2, r3, #8
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
  }
}
 8001426:	4618      	mov	r0, r3
 8001428:	372c      	adds	r7, #44	; 0x2c
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	0800970c 	.word	0x0800970c

08001438 <HAL_FDCAN_GetErrorCounters>:
  *         the configuration information for the specified FDCAN.
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(FDCAN_HandleTypeDef *hfdcan, FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 8001438:	b480      	push	{r7}
 800143a:	b085      	sub	sp, #20
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
 8001440:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001448:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	b2da      	uxtb	r2, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	0bdb      	lsrs	r3, r3, #15
 8001462:	f003 0201 	and.w	r2, r3, #1
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	0c1b      	lsrs	r3, r3, #16
 800146e:	b2da      	uxtb	r2, r3
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3714      	adds	r7, #20
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr
	...

08001484 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001490:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800149a:	4ba7      	ldr	r3, [pc, #668]	; (8001738 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800149c:	4013      	ands	r3, r2
 800149e:	68ba      	ldr	r2, [r7, #8]
 80014a0:	0091      	lsls	r1, r2, #2
 80014a2:	687a      	ldr	r2, [r7, #4]
 80014a4:	6812      	ldr	r2, [r2, #0]
 80014a6:	430b      	orrs	r3, r1
 80014a8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014b4:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014bc:	041a      	lsls	r2, r3, #16
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	430a      	orrs	r2, r1
 80014c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	4413      	add	r3, r2
 80014d0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014da:	4b97      	ldr	r3, [pc, #604]	; (8001738 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80014dc:	4013      	ands	r3, r2
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	0091      	lsls	r1, r2, #2
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	430b      	orrs	r3, r1
 80014e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014f4:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014fc:	041a      	lsls	r2, r3, #16
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	68ba      	ldr	r2, [r7, #8]
 8001510:	4413      	add	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800151c:	4b86      	ldr	r3, [pc, #536]	; (8001738 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800151e:	4013      	ands	r3, r2
 8001520:	68ba      	ldr	r2, [r7, #8]
 8001522:	0091      	lsls	r1, r2, #2
 8001524:	687a      	ldr	r2, [r7, #4]
 8001526:	6812      	ldr	r2, [r2, #0]
 8001528:	430b      	orrs	r3, r1
 800152a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001536:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	041a      	lsls	r2, r3, #16
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	430a      	orrs	r2, r1
 8001546:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	4413      	add	r3, r2
 800155a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001564:	4b74      	ldr	r3, [pc, #464]	; (8001738 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001566:	4013      	ands	r3, r2
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	0091      	lsls	r1, r2, #2
 800156c:	687a      	ldr	r2, [r7, #4]
 800156e:	6812      	ldr	r2, [r2, #0]
 8001570:	430b      	orrs	r3, r1
 8001572:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800157e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001586:	041a      	lsls	r2, r3, #16
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800159a:	fb02 f303 	mul.w	r3, r2, r3
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	4413      	add	r3, r2
 80015a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80015ac:	4b62      	ldr	r3, [pc, #392]	; (8001738 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	68ba      	ldr	r2, [r7, #8]
 80015b2:	0091      	lsls	r1, r2, #2
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	6812      	ldr	r2, [r2, #0]
 80015b8:	430b      	orrs	r3, r1
 80015ba:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80015c6:	fb02 f303 	mul.w	r3, r2, r3
 80015ca:	68ba      	ldr	r2, [r7, #8]
 80015cc:	4413      	add	r3, r2
 80015ce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80015d8:	4b57      	ldr	r3, [pc, #348]	; (8001738 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80015da:	4013      	ands	r3, r2
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	0091      	lsls	r1, r2, #2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	6812      	ldr	r2, [r2, #0]
 80015e4:	430b      	orrs	r3, r1
 80015e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80015f2:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fa:	041a      	lsls	r2, r3, #16
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	430a      	orrs	r2, r1
 8001602:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	4413      	add	r3, r2
 8001610:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800161a:	4b47      	ldr	r3, [pc, #284]	; (8001738 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800161c:	4013      	ands	r3, r2
 800161e:	68ba      	ldr	r2, [r7, #8]
 8001620:	0091      	lsls	r1, r2, #2
 8001622:	687a      	ldr	r2, [r7, #4]
 8001624:	6812      	ldr	r2, [r2, #0]
 8001626:	430b      	orrs	r3, r1
 8001628:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001634:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800163c:	041a      	lsls	r2, r3, #16
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	430a      	orrs	r2, r1
 8001644:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001650:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001658:	061a      	lsls	r2, r3, #24
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	430a      	orrs	r2, r1
 8001660:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001668:	4b34      	ldr	r3, [pc, #208]	; (800173c <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800166a:	4413      	add	r3, r2
 800166c:	009a      	lsls	r2, r3, #2
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	441a      	add	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	441a      	add	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800169e:	fb01 f303 	mul.w	r3, r1, r3
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	441a      	add	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b2:	6879      	ldr	r1, [r7, #4]
 80016b4:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80016b6:	fb01 f303 	mul.w	r3, r1, r3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	441a      	add	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016ca:	6879      	ldr	r1, [r7, #4]
 80016cc:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80016ce:	fb01 f303 	mul.w	r3, r1, r3
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	441a      	add	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e6:	00db      	lsls	r3, r3, #3
 80016e8:	441a      	add	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80016fe:	fb01 f303 	mul.w	r3, r1, r3
 8001702:	009b      	lsls	r3, r3, #2
 8001704:	441a      	add	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001716:	6879      	ldr	r1, [r7, #4]
 8001718:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800171a:	fb01 f303 	mul.w	r3, r1, r3
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	441a      	add	r2, r3
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d915      	bls.n	8001760 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001734:	e006      	b.n	8001744 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001736:	bf00      	nop
 8001738:	ffff0003 	.word	0xffff0003
 800173c:	10002b00 	.word	0x10002b00
 8001740:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800174a:	f043 0220 	orr.w	r2, r3, #32
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2203      	movs	r2, #3
 8001758:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e010      	b.n	8001782 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	e005      	b.n	8001774 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2200      	movs	r2, #0
 800176c:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	3304      	adds	r3, #4
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	68fa      	ldr	r2, [r7, #12]
 800177c:	429a      	cmp	r2, r3
 800177e:	d3f3      	bcc.n	8001768 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001780:	2300      	movs	r3, #0
}
 8001782:	4618      	mov	r0, r3
 8001784:	3714      	adds	r7, #20
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop

08001790 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001790:	b480      	push	{r7}
 8001792:	b089      	sub	sp, #36	; 0x24
 8001794:	af00      	add	r7, sp, #0
 8001796:	60f8      	str	r0, [r7, #12]
 8001798:	60b9      	str	r1, [r7, #8]
 800179a:	607a      	str	r2, [r7, #4]
 800179c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800179e:	68bb      	ldr	r3, [r7, #8]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d10a      	bne.n	80017bc <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 80017ae:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61fb      	str	r3, [r7, #28]
 80017ba:	e00a      	b.n	80017d2 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 80017c4:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 80017ca:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80017cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80017d0:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80017dc:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80017e2:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80017e8:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80017ea:	68bb      	ldr	r3, [r7, #8]
 80017ec:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80017ee:	4313      	orrs	r3, r2
 80017f0:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80017fc:	6839      	ldr	r1, [r7, #0]
 80017fe:	fb01 f303 	mul.w	r3, r1, r3
 8001802:	009b      	lsls	r3, r3, #2
 8001804:	4413      	add	r3, r2
 8001806:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	69fa      	ldr	r2, [r7, #28]
 800180c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800180e:	69bb      	ldr	r3, [r7, #24]
 8001810:	3304      	adds	r3, #4
 8001812:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800181a:	69bb      	ldr	r3, [r7, #24]
 800181c:	3304      	adds	r3, #4
 800181e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001820:	2300      	movs	r3, #0
 8001822:	617b      	str	r3, [r7, #20]
 8001824:	e020      	b.n	8001868 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3303      	adds	r3, #3
 800182a:	687a      	ldr	r2, [r7, #4]
 800182c:	4413      	add	r3, r2
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3302      	adds	r3, #2
 8001836:	6879      	ldr	r1, [r7, #4]
 8001838:	440b      	add	r3, r1
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800183e:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	3301      	adds	r3, #1
 8001844:	6879      	ldr	r1, [r7, #4]
 8001846:	440b      	add	r3, r1
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800184c:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800184e:	6879      	ldr	r1, [r7, #4]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	440a      	add	r2, r1
 8001854:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001856:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	3304      	adds	r3, #4
 8001860:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001862:	697b      	ldr	r3, [r7, #20]
 8001864:	3304      	adds	r3, #4
 8001866:	617b      	str	r3, [r7, #20]
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	0c1b      	lsrs	r3, r3, #16
 800186e:	4a06      	ldr	r2, [pc, #24]	; (8001888 <FDCAN_CopyMessageToRAM+0xf8>)
 8001870:	5cd3      	ldrb	r3, [r2, r3]
 8001872:	461a      	mov	r2, r3
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	4293      	cmp	r3, r2
 8001878:	d3d5      	bcc.n	8001826 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800187a:	bf00      	nop
 800187c:	bf00      	nop
 800187e:	3724      	adds	r7, #36	; 0x24
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	0800970c 	.word	0x0800970c

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <HAL_GPIO_Init+0x234>)
 800189c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800189e:	e194      	b.n	8001bca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	2101      	movs	r1, #1
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	fa01 f303 	lsl.w	r3, r1, r3
 80018ac:	4013      	ands	r3, r2
 80018ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8186 	beq.w	8001bc4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 0303 	and.w	r3, r3, #3
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d005      	beq.n	80018d0 <HAL_GPIO_Init+0x44>
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d130      	bne.n	8001932 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	689b      	ldr	r3, [r3, #8]
 80018d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	2203      	movs	r2, #3
 80018dc:	fa02 f303 	lsl.w	r3, r2, r3
 80018e0:	43db      	mvns	r3, r3
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	68da      	ldr	r2, [r3, #12]
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001906:	2201      	movs	r2, #1
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	091b      	lsrs	r3, r3, #4
 800191c:	f003 0201 	and.w	r2, r3, #1
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	fa02 f303 	lsl.w	r3, r2, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4313      	orrs	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	69ba      	ldr	r2, [r7, #24]
 8001930:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	f003 0303 	and.w	r3, r3, #3
 800193a:	2b03      	cmp	r3, #3
 800193c:	d017      	beq.n	800196e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	005b      	lsls	r3, r3, #1
 8001948:	2203      	movs	r2, #3
 800194a:	fa02 f303 	lsl.w	r3, r2, r3
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	689a      	ldr	r2, [r3, #8]
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4313      	orrs	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f003 0303 	and.w	r3, r3, #3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d123      	bne.n	80019c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	08da      	lsrs	r2, r3, #3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	3208      	adds	r2, #8
 8001982:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001986:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f003 0307 	and.w	r3, r3, #7
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	220f      	movs	r2, #15
 8001992:	fa02 f303 	lsl.w	r3, r2, r3
 8001996:	43db      	mvns	r3, r3
 8001998:	69ba      	ldr	r2, [r7, #24]
 800199a:	4013      	ands	r3, r2
 800199c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	691a      	ldr	r2, [r3, #16]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	009b      	lsls	r3, r3, #2
 80019aa:	fa02 f303 	lsl.w	r3, r2, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	69b9      	ldr	r1, [r7, #24]
 80019be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80019c8:	69fb      	ldr	r3, [r7, #28]
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	2203      	movs	r2, #3
 80019ce:	fa02 f303 	lsl.w	r3, r2, r3
 80019d2:	43db      	mvns	r3, r3
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	4013      	ands	r3, r2
 80019d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 0203 	and.w	r2, r3, #3
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	005b      	lsls	r3, r3, #1
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	f000 80e0 	beq.w	8001bc4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a04:	4b2f      	ldr	r3, [pc, #188]	; (8001ac4 <HAL_GPIO_Init+0x238>)
 8001a06:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a0a:	4a2e      	ldr	r2, [pc, #184]	; (8001ac4 <HAL_GPIO_Init+0x238>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001a14:	4b2b      	ldr	r3, [pc, #172]	; (8001ac4 <HAL_GPIO_Init+0x238>)
 8001a16:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	60fb      	str	r3, [r7, #12]
 8001a20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a22:	4a29      	ldr	r2, [pc, #164]	; (8001ac8 <HAL_GPIO_Init+0x23c>)
 8001a24:	69fb      	ldr	r3, [r7, #28]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f003 0303 	and.w	r3, r3, #3
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	220f      	movs	r2, #15
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a20      	ldr	r2, [pc, #128]	; (8001acc <HAL_GPIO_Init+0x240>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d052      	beq.n	8001af4 <HAL_GPIO_Init+0x268>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a1f      	ldr	r2, [pc, #124]	; (8001ad0 <HAL_GPIO_Init+0x244>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d031      	beq.n	8001aba <HAL_GPIO_Init+0x22e>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a1e      	ldr	r2, [pc, #120]	; (8001ad4 <HAL_GPIO_Init+0x248>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d02b      	beq.n	8001ab6 <HAL_GPIO_Init+0x22a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a1d      	ldr	r2, [pc, #116]	; (8001ad8 <HAL_GPIO_Init+0x24c>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d025      	beq.n	8001ab2 <HAL_GPIO_Init+0x226>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <HAL_GPIO_Init+0x250>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d01f      	beq.n	8001aae <HAL_GPIO_Init+0x222>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <HAL_GPIO_Init+0x254>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d019      	beq.n	8001aaa <HAL_GPIO_Init+0x21e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a1a      	ldr	r2, [pc, #104]	; (8001ae4 <HAL_GPIO_Init+0x258>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d013      	beq.n	8001aa6 <HAL_GPIO_Init+0x21a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a19      	ldr	r2, [pc, #100]	; (8001ae8 <HAL_GPIO_Init+0x25c>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d00d      	beq.n	8001aa2 <HAL_GPIO_Init+0x216>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a18      	ldr	r2, [pc, #96]	; (8001aec <HAL_GPIO_Init+0x260>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d007      	beq.n	8001a9e <HAL_GPIO_Init+0x212>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	4a17      	ldr	r2, [pc, #92]	; (8001af0 <HAL_GPIO_Init+0x264>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d101      	bne.n	8001a9a <HAL_GPIO_Init+0x20e>
 8001a96:	2309      	movs	r3, #9
 8001a98:	e02d      	b.n	8001af6 <HAL_GPIO_Init+0x26a>
 8001a9a:	230a      	movs	r3, #10
 8001a9c:	e02b      	b.n	8001af6 <HAL_GPIO_Init+0x26a>
 8001a9e:	2308      	movs	r3, #8
 8001aa0:	e029      	b.n	8001af6 <HAL_GPIO_Init+0x26a>
 8001aa2:	2307      	movs	r3, #7
 8001aa4:	e027      	b.n	8001af6 <HAL_GPIO_Init+0x26a>
 8001aa6:	2306      	movs	r3, #6
 8001aa8:	e025      	b.n	8001af6 <HAL_GPIO_Init+0x26a>
 8001aaa:	2305      	movs	r3, #5
 8001aac:	e023      	b.n	8001af6 <HAL_GPIO_Init+0x26a>
 8001aae:	2304      	movs	r3, #4
 8001ab0:	e021      	b.n	8001af6 <HAL_GPIO_Init+0x26a>
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e01f      	b.n	8001af6 <HAL_GPIO_Init+0x26a>
 8001ab6:	2302      	movs	r3, #2
 8001ab8:	e01d      	b.n	8001af6 <HAL_GPIO_Init+0x26a>
 8001aba:	2301      	movs	r3, #1
 8001abc:	e01b      	b.n	8001af6 <HAL_GPIO_Init+0x26a>
 8001abe:	bf00      	nop
 8001ac0:	58000080 	.word	0x58000080
 8001ac4:	58024400 	.word	0x58024400
 8001ac8:	58000400 	.word	0x58000400
 8001acc:	58020000 	.word	0x58020000
 8001ad0:	58020400 	.word	0x58020400
 8001ad4:	58020800 	.word	0x58020800
 8001ad8:	58020c00 	.word	0x58020c00
 8001adc:	58021000 	.word	0x58021000
 8001ae0:	58021400 	.word	0x58021400
 8001ae4:	58021800 	.word	0x58021800
 8001ae8:	58021c00 	.word	0x58021c00
 8001aec:	58022000 	.word	0x58022000
 8001af0:	58022400 	.word	0x58022400
 8001af4:	2300      	movs	r3, #0
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	f002 0203 	and.w	r2, r2, #3
 8001afc:	0092      	lsls	r2, r2, #2
 8001afe:	4093      	lsls	r3, r2
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	4313      	orrs	r3, r2
 8001b04:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b06:	4938      	ldr	r1, [pc, #224]	; (8001be8 <HAL_GPIO_Init+0x35c>)
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	089b      	lsrs	r3, r3, #2
 8001b0c:	3302      	adds	r3, #2
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4013      	ands	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001b32:	69ba      	ldr	r2, [r7, #24]
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001b3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b3e:	69bb      	ldr	r3, [r7, #24]
 8001b40:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b42:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	43db      	mvns	r3, r3
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4013      	ands	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	685b      	ldr	r3, [r3, #4]
 8001b58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d003      	beq.n	8001b68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b68:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d003      	beq.n	8001b94 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b8c:	69ba      	ldr	r2, [r7, #24]
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	4313      	orrs	r3, r2
 8001b92:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b9a:	697b      	ldr	r3, [r7, #20]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	43db      	mvns	r3, r3
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001bb6:	69ba      	ldr	r2, [r7, #24]
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f47f ae63 	bne.w	80018a0 <HAL_GPIO_Init+0x14>
  }
}
 8001bda:	bf00      	nop
 8001bdc:	bf00      	nop
 8001bde:	3724      	adds	r7, #36	; 0x24
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	58000400 	.word	0x58000400

08001bec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	807b      	strh	r3, [r7, #2]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bfc:	787b      	ldrb	r3, [r7, #1]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c02:	887a      	ldrh	r2, [r7, #2]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001c08:	e003      	b.n	8001c12 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001c0a:	887b      	ldrh	r3, [r7, #2]
 8001c0c:	041a      	lsls	r2, r3, #16
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	619a      	str	r2, [r3, #24]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b085      	sub	sp, #20
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
 8001c26:	460b      	mov	r3, r1
 8001c28:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001c30:	887a      	ldrh	r2, [r7, #2]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	4013      	ands	r3, r2
 8001c36:	041a      	lsls	r2, r3, #16
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	887b      	ldrh	r3, [r7, #2]
 8001c3e:	400b      	ands	r3, r1
 8001c40:	431a      	orrs	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	619a      	str	r2, [r3, #24]
}
 8001c46:	bf00      	nop
 8001c48:	3714      	adds	r7, #20
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr
	...

08001c54 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0304 	and.w	r3, r3, #4
 8001c64:	2b04      	cmp	r3, #4
 8001c66:	d00a      	beq.n	8001c7e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c68:	4b16      	ldr	r3, [pc, #88]	; (8001cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0307 	and.w	r3, r3, #7
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	429a      	cmp	r2, r3
 8001c74:	d001      	beq.n	8001c7a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e01f      	b.n	8001cba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	e01d      	b.n	8001cba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c7e:	4b11      	ldr	r3, [pc, #68]	; (8001cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	f023 0207 	bic.w	r2, r3, #7
 8001c86:	490f      	ldr	r1, [pc, #60]	; (8001cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c8e:	f7fe fe39 	bl	8000904 <HAL_GetTick>
 8001c92:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c94:	e009      	b.n	8001caa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c96:	f7fe fe35 	bl	8000904 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ca4:	d901      	bls.n	8001caa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e007      	b.n	8001cba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001caa:	4b06      	ldr	r3, [pc, #24]	; (8001cc4 <HAL_PWREx_ConfigSupply+0x70>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001cb6:	d1ee      	bne.n	8001c96 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3710      	adds	r7, #16
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	58024800 	.word	0x58024800

08001cc8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08c      	sub	sp, #48	; 0x30
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	f000 bc48 	b.w	800256c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 8088 	beq.w	8001dfa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cea:	4b99      	ldr	r3, [pc, #612]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001cec:	691b      	ldr	r3, [r3, #16]
 8001cee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cf4:	4b96      	ldr	r3, [pc, #600]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001cfc:	2b10      	cmp	r3, #16
 8001cfe:	d007      	beq.n	8001d10 <HAL_RCC_OscConfig+0x48>
 8001d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d02:	2b18      	cmp	r3, #24
 8001d04:	d111      	bne.n	8001d2a <HAL_RCC_OscConfig+0x62>
 8001d06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d08:	f003 0303 	and.w	r3, r3, #3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d10c      	bne.n	8001d2a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d10:	4b8f      	ldr	r3, [pc, #572]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d06d      	beq.n	8001df8 <HAL_RCC_OscConfig+0x130>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d169      	bne.n	8001df8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	f000 bc21 	b.w	800256c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d32:	d106      	bne.n	8001d42 <HAL_RCC_OscConfig+0x7a>
 8001d34:	4b86      	ldr	r3, [pc, #536]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a85      	ldr	r2, [pc, #532]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d3e:	6013      	str	r3, [r2, #0]
 8001d40:	e02e      	b.n	8001da0 <HAL_RCC_OscConfig+0xd8>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d10c      	bne.n	8001d64 <HAL_RCC_OscConfig+0x9c>
 8001d4a:	4b81      	ldr	r3, [pc, #516]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a80      	ldr	r2, [pc, #512]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d54:	6013      	str	r3, [r2, #0]
 8001d56:	4b7e      	ldr	r3, [pc, #504]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a7d      	ldr	r2, [pc, #500]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d60:	6013      	str	r3, [r2, #0]
 8001d62:	e01d      	b.n	8001da0 <HAL_RCC_OscConfig+0xd8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0xc0>
 8001d6e:	4b78      	ldr	r3, [pc, #480]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a77      	ldr	r2, [pc, #476]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b75      	ldr	r3, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a74      	ldr	r2, [pc, #464]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e00b      	b.n	8001da0 <HAL_RCC_OscConfig+0xd8>
 8001d88:	4b71      	ldr	r3, [pc, #452]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a70      	ldr	r2, [pc, #448]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d92:	6013      	str	r3, [r2, #0]
 8001d94:	4b6e      	ldr	r3, [pc, #440]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a6d      	ldr	r2, [pc, #436]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d013      	beq.n	8001dd0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001da8:	f7fe fdac 	bl	8000904 <HAL_GetTick>
 8001dac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dae:	e008      	b.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001db0:	f7fe fda8 	bl	8000904 <HAL_GetTick>
 8001db4:	4602      	mov	r2, r0
 8001db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001db8:	1ad3      	subs	r3, r2, r3
 8001dba:	2b64      	cmp	r3, #100	; 0x64
 8001dbc:	d901      	bls.n	8001dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	e3d4      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dc2:	4b63      	ldr	r3, [pc, #396]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d0f0      	beq.n	8001db0 <HAL_RCC_OscConfig+0xe8>
 8001dce:	e014      	b.n	8001dfa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd0:	f7fe fd98 	bl	8000904 <HAL_GetTick>
 8001dd4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dd6:	e008      	b.n	8001dea <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dd8:	f7fe fd94 	bl	8000904 <HAL_GetTick>
 8001ddc:	4602      	mov	r2, r0
 8001dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	2b64      	cmp	r3, #100	; 0x64
 8001de4:	d901      	bls.n	8001dea <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001de6:	2303      	movs	r3, #3
 8001de8:	e3c0      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dea:	4b59      	ldr	r3, [pc, #356]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d1f0      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x110>
 8001df6:	e000      	b.n	8001dfa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f000 80ca 	beq.w	8001f9c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e08:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001e10:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e12:	4b4f      	ldr	r3, [pc, #316]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001e14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e16:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e18:	6a3b      	ldr	r3, [r7, #32]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d007      	beq.n	8001e2e <HAL_RCC_OscConfig+0x166>
 8001e1e:	6a3b      	ldr	r3, [r7, #32]
 8001e20:	2b18      	cmp	r3, #24
 8001e22:	d156      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x20a>
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d151      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e2e:	4b48      	ldr	r3, [pc, #288]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0304 	and.w	r3, r3, #4
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d005      	beq.n	8001e46 <HAL_RCC_OscConfig+0x17e>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d101      	bne.n	8001e46 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e392      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e46:	4b42      	ldr	r3, [pc, #264]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f023 0219 	bic.w	r2, r3, #25
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	493f      	ldr	r1, [pc, #252]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e58:	f7fe fd54 	bl	8000904 <HAL_GetTick>
 8001e5c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e5e:	e008      	b.n	8001e72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e60:	f7fe fd50 	bl	8000904 <HAL_GetTick>
 8001e64:	4602      	mov	r2, r0
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	2b02      	cmp	r3, #2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e37c      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e72:	4b37      	ldr	r3, [pc, #220]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0304 	and.w	r3, r3, #4
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d0f0      	beq.n	8001e60 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e7e:	f7fe fd71 	bl	8000964 <HAL_GetREVID>
 8001e82:	4603      	mov	r3, r0
 8001e84:	f241 0203 	movw	r2, #4099	; 0x1003
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d817      	bhi.n	8001ebc <HAL_RCC_OscConfig+0x1f4>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	691b      	ldr	r3, [r3, #16]
 8001e90:	2b40      	cmp	r3, #64	; 0x40
 8001e92:	d108      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x1de>
 8001e94:	4b2e      	ldr	r3, [pc, #184]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001e9c:	4a2c      	ldr	r2, [pc, #176]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001e9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ea2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea4:	e07a      	b.n	8001f9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b2a      	ldr	r3, [pc, #168]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	691b      	ldr	r3, [r3, #16]
 8001eb2:	031b      	lsls	r3, r3, #12
 8001eb4:	4926      	ldr	r1, [pc, #152]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eba:	e06f      	b.n	8001f9c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ebc:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	061b      	lsls	r3, r3, #24
 8001eca:	4921      	ldr	r1, [pc, #132]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ed0:	e064      	b.n	8001f9c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	68db      	ldr	r3, [r3, #12]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d047      	beq.n	8001f6a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001eda:	4b1d      	ldr	r3, [pc, #116]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 0219 	bic.w	r2, r3, #25
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	491a      	ldr	r1, [pc, #104]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eec:	f7fe fd0a 	bl	8000904 <HAL_GetTick>
 8001ef0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef2:	e008      	b.n	8001f06 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ef4:	f7fe fd06 	bl	8000904 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	2b02      	cmp	r3, #2
 8001f00:	d901      	bls.n	8001f06 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f02:	2303      	movs	r3, #3
 8001f04:	e332      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d0f0      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f12:	f7fe fd27 	bl	8000964 <HAL_GetREVID>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f241 0203 	movw	r2, #4099	; 0x1003
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d819      	bhi.n	8001f54 <HAL_RCC_OscConfig+0x28c>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	2b40      	cmp	r3, #64	; 0x40
 8001f26:	d108      	bne.n	8001f3a <HAL_RCC_OscConfig+0x272>
 8001f28:	4b09      	ldr	r3, [pc, #36]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001f30:	4a07      	ldr	r2, [pc, #28]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001f32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f36:	6053      	str	r3, [r2, #4]
 8001f38:	e030      	b.n	8001f9c <HAL_RCC_OscConfig+0x2d4>
 8001f3a:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	691b      	ldr	r3, [r3, #16]
 8001f46:	031b      	lsls	r3, r3, #12
 8001f48:	4901      	ldr	r1, [pc, #4]	; (8001f50 <HAL_RCC_OscConfig+0x288>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	604b      	str	r3, [r1, #4]
 8001f4e:	e025      	b.n	8001f9c <HAL_RCC_OscConfig+0x2d4>
 8001f50:	58024400 	.word	0x58024400
 8001f54:	4b9a      	ldr	r3, [pc, #616]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	691b      	ldr	r3, [r3, #16]
 8001f60:	061b      	lsls	r3, r3, #24
 8001f62:	4997      	ldr	r1, [pc, #604]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]
 8001f68:	e018      	b.n	8001f9c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f6a:	4b95      	ldr	r3, [pc, #596]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a94      	ldr	r2, [pc, #592]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001f70:	f023 0301 	bic.w	r3, r3, #1
 8001f74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7fe fcc5 	bl	8000904 <HAL_GetTick>
 8001f7a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f7c:	e008      	b.n	8001f90 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7e:	f7fe fcc1 	bl	8000904 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	2b02      	cmp	r3, #2
 8001f8a:	d901      	bls.n	8001f90 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	e2ed      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f90:	4b8b      	ldr	r3, [pc, #556]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0304 	and.w	r3, r3, #4
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1f0      	bne.n	8001f7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 80a9 	beq.w	80020fc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001faa:	4b85      	ldr	r3, [pc, #532]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001fac:	691b      	ldr	r3, [r3, #16]
 8001fae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fb2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fb4:	4b82      	ldr	r3, [pc, #520]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d007      	beq.n	8001fd0 <HAL_RCC_OscConfig+0x308>
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	2b18      	cmp	r3, #24
 8001fc4:	d13a      	bne.n	800203c <HAL_RCC_OscConfig+0x374>
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	f003 0303 	and.w	r3, r3, #3
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d135      	bne.n	800203c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fd0:	4b7b      	ldr	r3, [pc, #492]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x320>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	69db      	ldr	r3, [r3, #28]
 8001fe0:	2b80      	cmp	r3, #128	; 0x80
 8001fe2:	d001      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	e2c1      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fe8:	f7fe fcbc 	bl	8000964 <HAL_GetREVID>
 8001fec:	4603      	mov	r3, r0
 8001fee:	f241 0203 	movw	r2, #4099	; 0x1003
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d817      	bhi.n	8002026 <HAL_RCC_OscConfig+0x35e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	2b20      	cmp	r3, #32
 8001ffc:	d108      	bne.n	8002010 <HAL_RCC_OscConfig+0x348>
 8001ffe:	4b70      	ldr	r3, [pc, #448]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002006:	4a6e      	ldr	r2, [pc, #440]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800200c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800200e:	e075      	b.n	80020fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002010:	4b6b      	ldr	r3, [pc, #428]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	6a1b      	ldr	r3, [r3, #32]
 800201c:	069b      	lsls	r3, r3, #26
 800201e:	4968      	ldr	r1, [pc, #416]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002020:	4313      	orrs	r3, r2
 8002022:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002024:	e06a      	b.n	80020fc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002026:	4b66      	ldr	r3, [pc, #408]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a1b      	ldr	r3, [r3, #32]
 8002032:	061b      	lsls	r3, r3, #24
 8002034:	4962      	ldr	r1, [pc, #392]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002036:	4313      	orrs	r3, r2
 8002038:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800203a:	e05f      	b.n	80020fc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	69db      	ldr	r3, [r3, #28]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d042      	beq.n	80020ca <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002044:	4b5e      	ldr	r3, [pc, #376]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a5d      	ldr	r2, [pc, #372]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 800204a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800204e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe fc58 	bl	8000904 <HAL_GetTick>
 8002054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002056:	e008      	b.n	800206a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002058:	f7fe fc54 	bl	8000904 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b02      	cmp	r3, #2
 8002064:	d901      	bls.n	800206a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002066:	2303      	movs	r3, #3
 8002068:	e280      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800206a:	4b55      	ldr	r3, [pc, #340]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	2b00      	cmp	r3, #0
 8002074:	d0f0      	beq.n	8002058 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002076:	f7fe fc75 	bl	8000964 <HAL_GetREVID>
 800207a:	4603      	mov	r3, r0
 800207c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002080:	4293      	cmp	r3, r2
 8002082:	d817      	bhi.n	80020b4 <HAL_RCC_OscConfig+0x3ec>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6a1b      	ldr	r3, [r3, #32]
 8002088:	2b20      	cmp	r3, #32
 800208a:	d108      	bne.n	800209e <HAL_RCC_OscConfig+0x3d6>
 800208c:	4b4c      	ldr	r3, [pc, #304]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002094:	4a4a      	ldr	r2, [pc, #296]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002096:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800209a:	6053      	str	r3, [r2, #4]
 800209c:	e02e      	b.n	80020fc <HAL_RCC_OscConfig+0x434>
 800209e:	4b48      	ldr	r3, [pc, #288]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	069b      	lsls	r3, r3, #26
 80020ac:	4944      	ldr	r1, [pc, #272]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
 80020b2:	e023      	b.n	80020fc <HAL_RCC_OscConfig+0x434>
 80020b4:	4b42      	ldr	r3, [pc, #264]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	493f      	ldr	r1, [pc, #252]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	60cb      	str	r3, [r1, #12]
 80020c8:	e018      	b.n	80020fc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020ca:	4b3d      	ldr	r3, [pc, #244]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a3c      	ldr	r2, [pc, #240]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 80020d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020d6:	f7fe fc15 	bl	8000904 <HAL_GetTick>
 80020da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020dc:	e008      	b.n	80020f0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020de:	f7fe fc11 	bl	8000904 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e23d      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020f0:	4b33      	ldr	r3, [pc, #204]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f0      	bne.n	80020de <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 0308 	and.w	r3, r3, #8
 8002104:	2b00      	cmp	r3, #0
 8002106:	d036      	beq.n	8002176 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d019      	beq.n	8002144 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002110:	4b2b      	ldr	r3, [pc, #172]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002114:	4a2a      	ldr	r2, [pc, #168]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002116:	f043 0301 	orr.w	r3, r3, #1
 800211a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800211c:	f7fe fbf2 	bl	8000904 <HAL_GetTick>
 8002120:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002122:	e008      	b.n	8002136 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002124:	f7fe fbee 	bl	8000904 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b02      	cmp	r3, #2
 8002130:	d901      	bls.n	8002136 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e21a      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002136:	4b22      	ldr	r3, [pc, #136]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	2b00      	cmp	r3, #0
 8002140:	d0f0      	beq.n	8002124 <HAL_RCC_OscConfig+0x45c>
 8002142:	e018      	b.n	8002176 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002144:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002146:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002148:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 800214a:	f023 0301 	bic.w	r3, r3, #1
 800214e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002150:	f7fe fbd8 	bl	8000904 <HAL_GetTick>
 8002154:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002156:	e008      	b.n	800216a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002158:	f7fe fbd4 	bl	8000904 <HAL_GetTick>
 800215c:	4602      	mov	r2, r0
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	2b02      	cmp	r3, #2
 8002164:	d901      	bls.n	800216a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e200      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 800216c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800216e:	f003 0302 	and.w	r3, r3, #2
 8002172:	2b00      	cmp	r3, #0
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d039      	beq.n	80021f6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	699b      	ldr	r3, [r3, #24]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d01c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 8002190:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002194:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002196:	f7fe fbb5 	bl	8000904 <HAL_GetTick>
 800219a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800219c:	e008      	b.n	80021b0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800219e:	f7fe fbb1 	bl	8000904 <HAL_GetTick>
 80021a2:	4602      	mov	r2, r0
 80021a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	2b02      	cmp	r3, #2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e1dd      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021b0:	4b03      	ldr	r3, [pc, #12]	; (80021c0 <HAL_RCC_OscConfig+0x4f8>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d0f0      	beq.n	800219e <HAL_RCC_OscConfig+0x4d6>
 80021bc:	e01b      	b.n	80021f6 <HAL_RCC_OscConfig+0x52e>
 80021be:	bf00      	nop
 80021c0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021c4:	4b9b      	ldr	r3, [pc, #620]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a9a      	ldr	r2, [pc, #616]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80021ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80021ce:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021d0:	f7fe fb98 	bl	8000904 <HAL_GetTick>
 80021d4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021d8:	f7fe fb94 	bl	8000904 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e1c0      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021ea:	4b92      	ldr	r3, [pc, #584]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	f000 8081 	beq.w	8002306 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002204:	4b8c      	ldr	r3, [pc, #560]	; (8002438 <HAL_RCC_OscConfig+0x770>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a8b      	ldr	r2, [pc, #556]	; (8002438 <HAL_RCC_OscConfig+0x770>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002210:	f7fe fb78 	bl	8000904 <HAL_GetTick>
 8002214:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002218:	f7fe fb74 	bl	8000904 <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e1a0      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800222a:	4b83      	ldr	r3, [pc, #524]	; (8002438 <HAL_RCC_OscConfig+0x770>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d106      	bne.n	800224c <HAL_RCC_OscConfig+0x584>
 800223e:	4b7d      	ldr	r3, [pc, #500]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002242:	4a7c      	ldr	r2, [pc, #496]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002244:	f043 0301 	orr.w	r3, r3, #1
 8002248:	6713      	str	r3, [r2, #112]	; 0x70
 800224a:	e02d      	b.n	80022a8 <HAL_RCC_OscConfig+0x5e0>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0x5a6>
 8002254:	4b77      	ldr	r3, [pc, #476]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002258:	4a76      	ldr	r2, [pc, #472]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 800225a:	f023 0301 	bic.w	r3, r3, #1
 800225e:	6713      	str	r3, [r2, #112]	; 0x70
 8002260:	4b74      	ldr	r3, [pc, #464]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	4a73      	ldr	r2, [pc, #460]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002266:	f023 0304 	bic.w	r3, r3, #4
 800226a:	6713      	str	r3, [r2, #112]	; 0x70
 800226c:	e01c      	b.n	80022a8 <HAL_RCC_OscConfig+0x5e0>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	2b05      	cmp	r3, #5
 8002274:	d10c      	bne.n	8002290 <HAL_RCC_OscConfig+0x5c8>
 8002276:	4b6f      	ldr	r3, [pc, #444]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800227a:	4a6e      	ldr	r2, [pc, #440]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 800227c:	f043 0304 	orr.w	r3, r3, #4
 8002280:	6713      	str	r3, [r2, #112]	; 0x70
 8002282:	4b6c      	ldr	r3, [pc, #432]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	4a6b      	ldr	r2, [pc, #428]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002288:	f043 0301 	orr.w	r3, r3, #1
 800228c:	6713      	str	r3, [r2, #112]	; 0x70
 800228e:	e00b      	b.n	80022a8 <HAL_RCC_OscConfig+0x5e0>
 8002290:	4b68      	ldr	r3, [pc, #416]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002294:	4a67      	ldr	r2, [pc, #412]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002296:	f023 0301 	bic.w	r3, r3, #1
 800229a:	6713      	str	r3, [r2, #112]	; 0x70
 800229c:	4b65      	ldr	r3, [pc, #404]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 800229e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022a0:	4a64      	ldr	r2, [pc, #400]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80022a2:	f023 0304 	bic.w	r3, r3, #4
 80022a6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d015      	beq.n	80022dc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b0:	f7fe fb28 	bl	8000904 <HAL_GetTick>
 80022b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022b6:	e00a      	b.n	80022ce <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022b8:	f7fe fb24 	bl	8000904 <HAL_GetTick>
 80022bc:	4602      	mov	r2, r0
 80022be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c0:	1ad3      	subs	r3, r2, r3
 80022c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e14e      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ce:	4b59      	ldr	r3, [pc, #356]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80022d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0ee      	beq.n	80022b8 <HAL_RCC_OscConfig+0x5f0>
 80022da:	e014      	b.n	8002306 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022dc:	f7fe fb12 	bl	8000904 <HAL_GetTick>
 80022e0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022e2:	e00a      	b.n	80022fa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022e4:	f7fe fb0e 	bl	8000904 <HAL_GetTick>
 80022e8:	4602      	mov	r2, r0
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d901      	bls.n	80022fa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80022f6:	2303      	movs	r3, #3
 80022f8:	e138      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022fa:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ee      	bne.n	80022e4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	2b00      	cmp	r3, #0
 800230c:	f000 812d 	beq.w	800256a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002310:	4b48      	ldr	r3, [pc, #288]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002312:	691b      	ldr	r3, [r3, #16]
 8002314:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002318:	2b18      	cmp	r3, #24
 800231a:	f000 80bd 	beq.w	8002498 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	2b02      	cmp	r3, #2
 8002324:	f040 809e 	bne.w	8002464 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a41      	ldr	r2, [pc, #260]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 800232e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002332:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002334:	f7fe fae6 	bl	8000904 <HAL_GetTick>
 8002338:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233a:	e008      	b.n	800234e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800233c:	f7fe fae2 	bl	8000904 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e10e      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800234e:	4b39      	ldr	r3, [pc, #228]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d1f0      	bne.n	800233c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800235a:	4b36      	ldr	r3, [pc, #216]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 800235c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800235e:	4b37      	ldr	r3, [pc, #220]	; (800243c <HAL_RCC_OscConfig+0x774>)
 8002360:	4013      	ands	r3, r2
 8002362:	687a      	ldr	r2, [r7, #4]
 8002364:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800236a:	0112      	lsls	r2, r2, #4
 800236c:	430a      	orrs	r2, r1
 800236e:	4931      	ldr	r1, [pc, #196]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002370:	4313      	orrs	r3, r2
 8002372:	628b      	str	r3, [r1, #40]	; 0x28
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002378:	3b01      	subs	r3, #1
 800237a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002382:	3b01      	subs	r3, #1
 8002384:	025b      	lsls	r3, r3, #9
 8002386:	b29b      	uxth	r3, r3
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800238e:	3b01      	subs	r3, #1
 8002390:	041b      	lsls	r3, r3, #16
 8002392:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002396:	431a      	orrs	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800239c:	3b01      	subs	r3, #1
 800239e:	061b      	lsls	r3, r3, #24
 80023a0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80023a4:	4923      	ldr	r1, [pc, #140]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80023aa:	4b22      	ldr	r3, [pc, #136]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ae:	4a21      	ldr	r2, [pc, #132]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023b0:	f023 0301 	bic.w	r3, r3, #1
 80023b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023b6:	4b1f      	ldr	r3, [pc, #124]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ba:	4b21      	ldr	r3, [pc, #132]	; (8002440 <HAL_RCC_OscConfig+0x778>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80023c2:	00d2      	lsls	r2, r2, #3
 80023c4:	491b      	ldr	r1, [pc, #108]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023ca:	4b1a      	ldr	r3, [pc, #104]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ce:	f023 020c 	bic.w	r2, r3, #12
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d6:	4917      	ldr	r1, [pc, #92]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023d8:	4313      	orrs	r3, r2
 80023da:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023dc:	4b15      	ldr	r3, [pc, #84]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	f023 0202 	bic.w	r2, r3, #2
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023e8:	4912      	ldr	r1, [pc, #72]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023ea:	4313      	orrs	r3, r2
 80023ec:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023ee:	4b11      	ldr	r3, [pc, #68]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f2:	4a10      	ldr	r2, [pc, #64]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023fa:	4b0e      	ldr	r3, [pc, #56]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 80023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fe:	4a0d      	ldr	r2, [pc, #52]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002400:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002404:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002406:	4b0b      	ldr	r3, [pc, #44]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240a:	4a0a      	ldr	r2, [pc, #40]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002410:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002412:	4b08      	ldr	r3, [pc, #32]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	4a07      	ldr	r2, [pc, #28]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241e:	4b05      	ldr	r3, [pc, #20]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	4a04      	ldr	r2, [pc, #16]	; (8002434 <HAL_RCC_OscConfig+0x76c>)
 8002424:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242a:	f7fe fa6b 	bl	8000904 <HAL_GetTick>
 800242e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002430:	e011      	b.n	8002456 <HAL_RCC_OscConfig+0x78e>
 8002432:	bf00      	nop
 8002434:	58024400 	.word	0x58024400
 8002438:	58024800 	.word	0x58024800
 800243c:	fffffc0c 	.word	0xfffffc0c
 8002440:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7fe fa5e 	bl	8000904 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e08a      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002456:	4b47      	ldr	r3, [pc, #284]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x77c>
 8002462:	e082      	b.n	800256a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002464:	4b43      	ldr	r3, [pc, #268]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a42      	ldr	r2, [pc, #264]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 800246a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800246e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002470:	f7fe fa48 	bl	8000904 <HAL_GetTick>
 8002474:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002476:	e008      	b.n	800248a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002478:	f7fe fa44 	bl	8000904 <HAL_GetTick>
 800247c:	4602      	mov	r2, r0
 800247e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002480:	1ad3      	subs	r3, r2, r3
 8002482:	2b02      	cmp	r3, #2
 8002484:	d901      	bls.n	800248a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002486:	2303      	movs	r3, #3
 8002488:	e070      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800248a:	4b3a      	ldr	r3, [pc, #232]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f0      	bne.n	8002478 <HAL_RCC_OscConfig+0x7b0>
 8002496:	e068      	b.n	800256a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002498:	4b36      	ldr	r3, [pc, #216]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800249e:	4b35      	ldr	r3, [pc, #212]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 80024a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d031      	beq.n	8002510 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f003 0203 	and.w	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d12a      	bne.n	8002510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c6:	429a      	cmp	r2, r3
 80024c8:	d122      	bne.n	8002510 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d11a      	bne.n	8002510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	0a5b      	lsrs	r3, r3, #9
 80024de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024e8:	429a      	cmp	r2, r3
 80024ea:	d111      	bne.n	8002510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	0c1b      	lsrs	r3, r3, #16
 80024f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024f8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d108      	bne.n	8002510 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	0e1b      	lsrs	r3, r3, #24
 8002502:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e02b      	b.n	800256c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002514:	4b17      	ldr	r3, [pc, #92]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 8002516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002518:	08db      	lsrs	r3, r3, #3
 800251a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800251e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	429a      	cmp	r2, r3
 8002528:	d01f      	beq.n	800256a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800252a:	4b12      	ldr	r3, [pc, #72]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 800252c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800252e:	4a11      	ldr	r2, [pc, #68]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002536:	f7fe f9e5 	bl	8000904 <HAL_GetTick>
 800253a:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800253c:	bf00      	nop
 800253e:	f7fe f9e1 	bl	8000904 <HAL_GetTick>
 8002542:	4602      	mov	r2, r0
 8002544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002546:	4293      	cmp	r3, r2
 8002548:	d0f9      	beq.n	800253e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800254a:	4b0a      	ldr	r3, [pc, #40]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 800254c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800254e:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_RCC_OscConfig+0x8b0>)
 8002550:	4013      	ands	r3, r2
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002556:	00d2      	lsls	r2, r2, #3
 8002558:	4906      	ldr	r1, [pc, #24]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 800255a:	4313      	orrs	r3, r2
 800255c:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800255e:	4b05      	ldr	r3, [pc, #20]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	4a04      	ldr	r2, [pc, #16]	; (8002574 <HAL_RCC_OscConfig+0x8ac>)
 8002564:	f043 0301 	orr.w	r3, r3, #1
 8002568:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3730      	adds	r7, #48	; 0x30
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	58024400 	.word	0x58024400
 8002578:	ffff0007 	.word	0xffff0007

0800257c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e19c      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002590:	4b8a      	ldr	r3, [pc, #552]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 030f 	and.w	r3, r3, #15
 8002598:	683a      	ldr	r2, [r7, #0]
 800259a:	429a      	cmp	r2, r3
 800259c:	d910      	bls.n	80025c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800259e:	4b87      	ldr	r3, [pc, #540]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f023 020f 	bic.w	r2, r3, #15
 80025a6:	4985      	ldr	r1, [pc, #532]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ae:	4b83      	ldr	r3, [pc, #524]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	683a      	ldr	r2, [r7, #0]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d001      	beq.n	80025c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e184      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d010      	beq.n	80025ee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691a      	ldr	r2, [r3, #16]
 80025d0:	4b7b      	ldr	r3, [pc, #492]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80025d2:	699b      	ldr	r3, [r3, #24]
 80025d4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025d8:	429a      	cmp	r2, r3
 80025da:	d908      	bls.n	80025ee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025dc:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691b      	ldr	r3, [r3, #16]
 80025e8:	4975      	ldr	r1, [pc, #468]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0308 	and.w	r3, r3, #8
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d010      	beq.n	800261c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	695a      	ldr	r2, [r3, #20]
 80025fe:	4b70      	ldr	r3, [pc, #448]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002606:	429a      	cmp	r2, r3
 8002608:	d908      	bls.n	800261c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800260a:	4b6d      	ldr	r3, [pc, #436]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800260c:	69db      	ldr	r3, [r3, #28]
 800260e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	496a      	ldr	r1, [pc, #424]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002618:	4313      	orrs	r3, r2
 800261a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	699a      	ldr	r2, [r3, #24]
 800262c:	4b64      	ldr	r3, [pc, #400]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002634:	429a      	cmp	r2, r3
 8002636:	d908      	bls.n	800264a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002638:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	699b      	ldr	r3, [r3, #24]
 8002644:	495e      	ldr	r1, [pc, #376]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002646:	4313      	orrs	r3, r2
 8002648:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0320 	and.w	r3, r3, #32
 8002652:	2b00      	cmp	r3, #0
 8002654:	d010      	beq.n	8002678 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	69da      	ldr	r2, [r3, #28]
 800265a:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800265c:	6a1b      	ldr	r3, [r3, #32]
 800265e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002662:	429a      	cmp	r2, r3
 8002664:	d908      	bls.n	8002678 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002666:	4b56      	ldr	r3, [pc, #344]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	69db      	ldr	r3, [r3, #28]
 8002672:	4953      	ldr	r1, [pc, #332]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002674:	4313      	orrs	r3, r2
 8002676:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0302 	and.w	r3, r3, #2
 8002680:	2b00      	cmp	r3, #0
 8002682:	d010      	beq.n	80026a6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68da      	ldr	r2, [r3, #12]
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800268a:	699b      	ldr	r3, [r3, #24]
 800268c:	f003 030f 	and.w	r3, r3, #15
 8002690:	429a      	cmp	r2, r3
 8002692:	d908      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002694:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	f023 020f 	bic.w	r2, r3, #15
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	4947      	ldr	r1, [pc, #284]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d055      	beq.n	800275e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80026b2:	4b43      	ldr	r3, [pc, #268]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	4940      	ldr	r1, [pc, #256]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b02      	cmp	r3, #2
 80026ca:	d107      	bne.n	80026dc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026cc:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d121      	bne.n	800271c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e0f6      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b03      	cmp	r3, #3
 80026e2:	d107      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026e4:	4b36      	ldr	r3, [pc, #216]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d115      	bne.n	800271c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e0ea      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d107      	bne.n	800270c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026fc:	4b30      	ldr	r3, [pc, #192]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0de      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270c:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0304 	and.w	r3, r3, #4
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d6      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	f023 0207 	bic.w	r2, r3, #7
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	4925      	ldr	r1, [pc, #148]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800272a:	4313      	orrs	r3, r2
 800272c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800272e:	f7fe f8e9 	bl	8000904 <HAL_GetTick>
 8002732:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002734:	e00a      	b.n	800274c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002736:	f7fe f8e5 	bl	8000904 <HAL_GetTick>
 800273a:	4602      	mov	r2, r0
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	f241 3288 	movw	r2, #5000	; 0x1388
 8002744:	4293      	cmp	r3, r2
 8002746:	d901      	bls.n	800274c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002748:	2303      	movs	r3, #3
 800274a:	e0be      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800274e:	691b      	ldr	r3, [r3, #16]
 8002750:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	429a      	cmp	r2, r3
 800275c:	d1eb      	bne.n	8002736 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0302 	and.w	r3, r3, #2
 8002766:	2b00      	cmp	r3, #0
 8002768:	d010      	beq.n	800278c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	f003 030f 	and.w	r3, r3, #15
 8002776:	429a      	cmp	r2, r3
 8002778:	d208      	bcs.n	800278c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800277a:	4b11      	ldr	r3, [pc, #68]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 800277c:	699b      	ldr	r3, [r3, #24]
 800277e:	f023 020f 	bic.w	r2, r3, #15
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	490e      	ldr	r1, [pc, #56]	; (80027c0 <HAL_RCC_ClockConfig+0x244>)
 8002788:	4313      	orrs	r3, r2
 800278a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800278c:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f003 030f 	and.w	r3, r3, #15
 8002794:	683a      	ldr	r2, [r7, #0]
 8002796:	429a      	cmp	r2, r3
 8002798:	d214      	bcs.n	80027c4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 020f 	bic.w	r2, r3, #15
 80027a2:	4906      	ldr	r1, [pc, #24]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027aa:	4b04      	ldr	r3, [pc, #16]	; (80027bc <HAL_RCC_ClockConfig+0x240>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	683a      	ldr	r2, [r7, #0]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d005      	beq.n	80027c4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027b8:	2301      	movs	r3, #1
 80027ba:	e086      	b.n	80028ca <HAL_RCC_ClockConfig+0x34e>
 80027bc:	52002000 	.word	0x52002000
 80027c0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 0304 	and.w	r3, r3, #4
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d010      	beq.n	80027f2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	691a      	ldr	r2, [r3, #16]
 80027d4:	4b3f      	ldr	r3, [pc, #252]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027dc:	429a      	cmp	r2, r3
 80027de:	d208      	bcs.n	80027f2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027e0:	4b3c      	ldr	r3, [pc, #240]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	4939      	ldr	r1, [pc, #228]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d010      	beq.n	8002820 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	695a      	ldr	r2, [r3, #20]
 8002802:	4b34      	ldr	r3, [pc, #208]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002804:	69db      	ldr	r3, [r3, #28]
 8002806:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800280a:	429a      	cmp	r2, r3
 800280c:	d208      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800280e:	4b31      	ldr	r3, [pc, #196]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	492e      	ldr	r1, [pc, #184]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 800281c:	4313      	orrs	r3, r2
 800281e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0310 	and.w	r3, r3, #16
 8002828:	2b00      	cmp	r3, #0
 800282a:	d010      	beq.n	800284e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	4b28      	ldr	r3, [pc, #160]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002832:	69db      	ldr	r3, [r3, #28]
 8002834:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002838:	429a      	cmp	r2, r3
 800283a:	d208      	bcs.n	800284e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800283c:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 800283e:	69db      	ldr	r3, [r3, #28]
 8002840:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4922      	ldr	r1, [pc, #136]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 800284a:	4313      	orrs	r3, r2
 800284c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0320 	and.w	r3, r3, #32
 8002856:	2b00      	cmp	r3, #0
 8002858:	d010      	beq.n	800287c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	69da      	ldr	r2, [r3, #28]
 800285e:	4b1d      	ldr	r3, [pc, #116]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002866:	429a      	cmp	r2, r3
 8002868:	d208      	bcs.n	800287c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800286a:	4b1a      	ldr	r3, [pc, #104]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 800286c:	6a1b      	ldr	r3, [r3, #32]
 800286e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	4917      	ldr	r1, [pc, #92]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002878:	4313      	orrs	r3, r2
 800287a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800287c:	f000 f834 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8002880:	4602      	mov	r2, r0
 8002882:	4b14      	ldr	r3, [pc, #80]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	f003 030f 	and.w	r3, r3, #15
 800288c:	4912      	ldr	r1, [pc, #72]	; (80028d8 <HAL_RCC_ClockConfig+0x35c>)
 800288e:	5ccb      	ldrb	r3, [r1, r3]
 8002890:	f003 031f 	and.w	r3, r3, #31
 8002894:	fa22 f303 	lsr.w	r3, r2, r3
 8002898:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800289a:	4b0e      	ldr	r3, [pc, #56]	; (80028d4 <HAL_RCC_ClockConfig+0x358>)
 800289c:	699b      	ldr	r3, [r3, #24]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <HAL_RCC_ClockConfig+0x35c>)
 80028a4:	5cd3      	ldrb	r3, [r2, r3]
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	693a      	ldr	r2, [r7, #16]
 80028ac:	fa22 f303 	lsr.w	r3, r2, r3
 80028b0:	4a0a      	ldr	r2, [pc, #40]	; (80028dc <HAL_RCC_ClockConfig+0x360>)
 80028b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028b4:	4a0a      	ldr	r2, [pc, #40]	; (80028e0 <HAL_RCC_ClockConfig+0x364>)
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_RCC_ClockConfig+0x368>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7fd ffd6 	bl	8000870 <HAL_InitTick>
 80028c4:	4603      	mov	r3, r0
 80028c6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	58024400 	.word	0x58024400
 80028d8:	08009744 	.word	0x08009744
 80028dc:	2400004c 	.word	0x2400004c
 80028e0:	24000048 	.word	0x24000048
 80028e4:	24000000 	.word	0x24000000

080028e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b089      	sub	sp, #36	; 0x24
 80028ec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028ee:	4bb3      	ldr	r3, [pc, #716]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80028f6:	2b18      	cmp	r3, #24
 80028f8:	f200 8155 	bhi.w	8002ba6 <HAL_RCC_GetSysClockFreq+0x2be>
 80028fc:	a201      	add	r2, pc, #4	; (adr r2, 8002904 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002902:	bf00      	nop
 8002904:	08002969 	.word	0x08002969
 8002908:	08002ba7 	.word	0x08002ba7
 800290c:	08002ba7 	.word	0x08002ba7
 8002910:	08002ba7 	.word	0x08002ba7
 8002914:	08002ba7 	.word	0x08002ba7
 8002918:	08002ba7 	.word	0x08002ba7
 800291c:	08002ba7 	.word	0x08002ba7
 8002920:	08002ba7 	.word	0x08002ba7
 8002924:	0800298f 	.word	0x0800298f
 8002928:	08002ba7 	.word	0x08002ba7
 800292c:	08002ba7 	.word	0x08002ba7
 8002930:	08002ba7 	.word	0x08002ba7
 8002934:	08002ba7 	.word	0x08002ba7
 8002938:	08002ba7 	.word	0x08002ba7
 800293c:	08002ba7 	.word	0x08002ba7
 8002940:	08002ba7 	.word	0x08002ba7
 8002944:	08002995 	.word	0x08002995
 8002948:	08002ba7 	.word	0x08002ba7
 800294c:	08002ba7 	.word	0x08002ba7
 8002950:	08002ba7 	.word	0x08002ba7
 8002954:	08002ba7 	.word	0x08002ba7
 8002958:	08002ba7 	.word	0x08002ba7
 800295c:	08002ba7 	.word	0x08002ba7
 8002960:	08002ba7 	.word	0x08002ba7
 8002964:	0800299b 	.word	0x0800299b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002968:	4b94      	ldr	r3, [pc, #592]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0320 	and.w	r3, r3, #32
 8002970:	2b00      	cmp	r3, #0
 8002972:	d009      	beq.n	8002988 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002974:	4b91      	ldr	r3, [pc, #580]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	08db      	lsrs	r3, r3, #3
 800297a:	f003 0303 	and.w	r3, r3, #3
 800297e:	4a90      	ldr	r2, [pc, #576]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002980:	fa22 f303 	lsr.w	r3, r2, r3
 8002984:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002986:	e111      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002988:	4b8d      	ldr	r3, [pc, #564]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800298a:	61bb      	str	r3, [r7, #24]
      break;
 800298c:	e10e      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800298e:	4b8d      	ldr	r3, [pc, #564]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002990:	61bb      	str	r3, [r7, #24]
      break;
 8002992:	e10b      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002994:	4b8c      	ldr	r3, [pc, #560]	; (8002bc8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002996:	61bb      	str	r3, [r7, #24]
      break;
 8002998:	e108      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800299a:	4b88      	ldr	r3, [pc, #544]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80029a4:	4b85      	ldr	r3, [pc, #532]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80029b0:	4b82      	ldr	r3, [pc, #520]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029b4:	f003 0301 	and.w	r3, r3, #1
 80029b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029ba:	4b80      	ldr	r3, [pc, #512]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029be:	08db      	lsrs	r3, r3, #3
 80029c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029c4:	68fa      	ldr	r2, [r7, #12]
 80029c6:	fb02 f303 	mul.w	r3, r2, r3
 80029ca:	ee07 3a90 	vmov	s15, r3
 80029ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f000 80e1 	beq.w	8002ba0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	f000 8083 	beq.w	8002aec <HAL_RCC_GetSysClockFreq+0x204>
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	f200 80a1 	bhi.w	8002b30 <HAL_RCC_GetSysClockFreq+0x248>
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d003      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x114>
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d056      	beq.n	8002aa8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029fa:	e099      	b.n	8002b30 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029fc:	4b6f      	ldr	r3, [pc, #444]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0320 	and.w	r3, r3, #32
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d02d      	beq.n	8002a64 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a08:	4b6c      	ldr	r3, [pc, #432]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	08db      	lsrs	r3, r3, #3
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	4a6b      	ldr	r2, [pc, #428]	; (8002bc0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a14:	fa22 f303 	lsr.w	r3, r2, r3
 8002a18:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	ee07 3a90 	vmov	s15, r3
 8002a20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a32:	4b62      	ldr	r3, [pc, #392]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a3a:	ee07 3a90 	vmov	s15, r3
 8002a3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a46:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a5e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a62:	e087      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	ee07 3a90 	vmov	s15, r3
 8002a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a6e:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002bd0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a76:	4b51      	ldr	r3, [pc, #324]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a7e:	ee07 3a90 	vmov	s15, r3
 8002a82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a8a:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002a9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aa6:	e065      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ab2:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002bd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002ab6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aba:	4b40      	ldr	r3, [pc, #256]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ace:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ad2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ada:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ade:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ae2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ae6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002aea:	e043      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	ee07 3a90 	vmov	s15, r3
 8002af2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002af6:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002bd8 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002afa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002afe:	4b2f      	ldr	r3, [pc, #188]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b12:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b2e:	e021      	b.n	8002b74 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	ee07 3a90 	vmov	s15, r3
 8002b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b3a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002bd4 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b56:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002bcc <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b72:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b78:	0a5b      	lsrs	r3, r3, #9
 8002b7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b7e:	3301      	adds	r3, #1
 8002b80:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	ee07 3a90 	vmov	s15, r3
 8002b88:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b8c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b98:	ee17 3a90 	vmov	r3, s15
 8002b9c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b9e:	e005      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
      break;
 8002ba4:	e002      	b.n	8002bac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002ba6:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ba8:	61bb      	str	r3, [r7, #24]
      break;
 8002baa:	bf00      	nop
  }

  return sysclockfreq;
 8002bac:	69bb      	ldr	r3, [r7, #24]
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3724      	adds	r7, #36	; 0x24
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr
 8002bba:	bf00      	nop
 8002bbc:	58024400 	.word	0x58024400
 8002bc0:	03d09000 	.word	0x03d09000
 8002bc4:	003d0900 	.word	0x003d0900
 8002bc8:	00b71b00 	.word	0x00b71b00
 8002bcc:	46000000 	.word	0x46000000
 8002bd0:	4c742400 	.word	0x4c742400
 8002bd4:	4a742400 	.word	0x4a742400
 8002bd8:	4b371b00 	.word	0x4b371b00

08002bdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b082      	sub	sp, #8
 8002be0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002be2:	f7ff fe81 	bl	80028e8 <HAL_RCC_GetSysClockFreq>
 8002be6:	4602      	mov	r2, r0
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_RCC_GetHCLKFreq+0x50>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	0a1b      	lsrs	r3, r3, #8
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	490f      	ldr	r1, [pc, #60]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x54>)
 8002bf4:	5ccb      	ldrb	r3, [r1, r3]
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002bfe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c00:	4b0a      	ldr	r3, [pc, #40]	; (8002c2c <HAL_RCC_GetHCLKFreq+0x50>)
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	f003 030f 	and.w	r3, r3, #15
 8002c08:	4a09      	ldr	r2, [pc, #36]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x54>)
 8002c0a:	5cd3      	ldrb	r3, [r2, r3]
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	687a      	ldr	r2, [r7, #4]
 8002c12:	fa22 f303 	lsr.w	r3, r2, r3
 8002c16:	4a07      	ldr	r2, [pc, #28]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c18:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c1a:	4a07      	ldr	r2, [pc, #28]	; (8002c38 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3708      	adds	r7, #8
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	08009744 	.word	0x08009744
 8002c34:	2400004c 	.word	0x2400004c
 8002c38:	24000048 	.word	0x24000048

08002c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c40:	f7ff ffcc 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002c44:	4602      	mov	r2, r0
 8002c46:	4b06      	ldr	r3, [pc, #24]	; (8002c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c48:	69db      	ldr	r3, [r3, #28]
 8002c4a:	091b      	lsrs	r3, r3, #4
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	4904      	ldr	r1, [pc, #16]	; (8002c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c52:	5ccb      	ldrb	r3, [r1, r3]
 8002c54:	f003 031f 	and.w	r3, r3, #31
 8002c58:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	58024400 	.word	0x58024400
 8002c64:	08009744 	.word	0x08009744

08002c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c6c:	f7ff ffb6 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 8002c70:	4602      	mov	r2, r0
 8002c72:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	0a1b      	lsrs	r3, r3, #8
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	4904      	ldr	r1, [pc, #16]	; (8002c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c7e:	5ccb      	ldrb	r3, [r1, r3]
 8002c80:	f003 031f 	and.w	r3, r3, #31
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	58024400 	.word	0x58024400
 8002c90:	08009744 	.word	0x08009744

08002c94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c98:	b0ca      	sub	sp, #296	; 0x128
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002cb8:	2500      	movs	r5, #0
 8002cba:	ea54 0305 	orrs.w	r3, r4, r5
 8002cbe:	d049      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002cc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cca:	d02f      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002ccc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002cd0:	d828      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cd6:	d01a      	beq.n	8002d0e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002cd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002cdc:	d822      	bhi.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ce2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ce6:	d007      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002ce8:	e01c      	b.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002cea:	4bb8      	ldr	r3, [pc, #736]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cee:	4ab7      	ldr	r2, [pc, #732]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002cf6:	e01a      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cfc:	3308      	adds	r3, #8
 8002cfe:	2102      	movs	r1, #2
 8002d00:	4618      	mov	r0, r3
 8002d02:	f001 fc8f 	bl	8004624 <RCCEx_PLL2_Config>
 8002d06:	4603      	mov	r3, r0
 8002d08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d0c:	e00f      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d12:	3328      	adds	r3, #40	; 0x28
 8002d14:	2102      	movs	r1, #2
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 fd36 	bl	8004788 <RCCEx_PLL3_Config>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d22:	e004      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d2a:	e000      	b.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d36:	4ba5      	ldr	r3, [pc, #660]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8002d3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d42:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d44:	4aa1      	ldr	r2, [pc, #644]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d46:	430b      	orrs	r3, r1
 8002d48:	6513      	str	r3, [r2, #80]	; 0x50
 8002d4a:	e003      	b.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002d50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d5c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8002d60:	f04f 0900 	mov.w	r9, #0
 8002d64:	ea58 0309 	orrs.w	r3, r8, r9
 8002d68:	d047      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d70:	2b04      	cmp	r3, #4
 8002d72:	d82a      	bhi.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002d74:	a201      	add	r2, pc, #4	; (adr r2, 8002d7c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d7a:	bf00      	nop
 8002d7c:	08002d91 	.word	0x08002d91
 8002d80:	08002d9f 	.word	0x08002d9f
 8002d84:	08002db5 	.word	0x08002db5
 8002d88:	08002dd3 	.word	0x08002dd3
 8002d8c:	08002dd3 	.word	0x08002dd3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d90:	4b8e      	ldr	r3, [pc, #568]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	4a8d      	ldr	r2, [pc, #564]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002d9c:	e01a      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002d9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002da2:	3308      	adds	r3, #8
 8002da4:	2100      	movs	r1, #0
 8002da6:	4618      	mov	r0, r3
 8002da8:	f001 fc3c 	bl	8004624 <RCCEx_PLL2_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002db2:	e00f      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002db4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db8:	3328      	adds	r3, #40	; 0x28
 8002dba:	2100      	movs	r1, #0
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f001 fce3 	bl	8004788 <RCCEx_PLL3_Config>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002dc8:	e004      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002dd0:	e000      	b.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002dd2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10a      	bne.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002ddc:	4b7b      	ldr	r3, [pc, #492]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002de0:	f023 0107 	bic.w	r1, r3, #7
 8002de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dea:	4a78      	ldr	r2, [pc, #480]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dec:	430b      	orrs	r3, r1
 8002dee:	6513      	str	r3, [r2, #80]	; 0x50
 8002df0:	e003      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002df6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e02:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002e06:	f04f 0b00 	mov.w	fp, #0
 8002e0a:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e0e:	d04c      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e1a:	d030      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002e1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e20:	d829      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e22:	2bc0      	cmp	r3, #192	; 0xc0
 8002e24:	d02d      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e26:	2bc0      	cmp	r3, #192	; 0xc0
 8002e28:	d825      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e2a:	2b80      	cmp	r3, #128	; 0x80
 8002e2c:	d018      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e2e:	2b80      	cmp	r3, #128	; 0x80
 8002e30:	d821      	bhi.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d002      	beq.n	8002e3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002e36:	2b40      	cmp	r3, #64	; 0x40
 8002e38:	d007      	beq.n	8002e4a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002e3a:	e01c      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e3c:	4b63      	ldr	r3, [pc, #396]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e40:	4a62      	ldr	r2, [pc, #392]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e48:	e01c      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e4e:	3308      	adds	r3, #8
 8002e50:	2100      	movs	r1, #0
 8002e52:	4618      	mov	r0, r3
 8002e54:	f001 fbe6 	bl	8004624 <RCCEx_PLL2_Config>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e5e:	e011      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e64:	3328      	adds	r3, #40	; 0x28
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f001 fc8d 	bl	8004788 <RCCEx_PLL3_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002e74:	e006      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e7c:	e002      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e7e:	bf00      	nop
 8002e80:	e000      	b.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002e82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d10a      	bne.n	8002ea2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002e8c:	4b4f      	ldr	r3, [pc, #316]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e90:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002e94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	4a4c      	ldr	r2, [pc, #304]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6513      	str	r3, [r2, #80]	; 0x50
 8002ea0:	e003      	b.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ea6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002eaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002eb2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002eb6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002ec0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002ec4:	460b      	mov	r3, r1
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	d053      	beq.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ece:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002ed2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002ed6:	d035      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002ed8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002edc:	d82e      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ede:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ee2:	d031      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002ee4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002ee8:	d828      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002eea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002eee:	d01a      	beq.n	8002f26 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ef4:	d822      	bhi.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002efa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002efe:	d007      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f00:	e01c      	b.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f02:	4b32      	ldr	r3, [pc, #200]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f06:	4a31      	ldr	r2, [pc, #196]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f0e:	e01c      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f14:	3308      	adds	r3, #8
 8002f16:	2100      	movs	r1, #0
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f001 fb83 	bl	8004624 <RCCEx_PLL2_Config>
 8002f1e:	4603      	mov	r3, r0
 8002f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f24:	e011      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f2a:	3328      	adds	r3, #40	; 0x28
 8002f2c:	2100      	movs	r1, #0
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f001 fc2a 	bl	8004788 <RCCEx_PLL3_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f3a:	e006      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f42:	e002      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f44:	bf00      	nop
 8002f46:	e000      	b.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002f48:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10b      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002f52:	4b1e      	ldr	r3, [pc, #120]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8002f5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002f62:	4a1a      	ldr	r2, [pc, #104]	; (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f64:	430b      	orrs	r3, r1
 8002f66:	6593      	str	r3, [r2, #88]	; 0x58
 8002f68:	e003      	b.n	8002f72 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002f7e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002f82:	2300      	movs	r3, #0
 8002f84:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002f88:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	d056      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f96:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002f9a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f9e:	d038      	beq.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa4:	d831      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fa6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002faa:	d034      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002fac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002fb0:	d82b      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fb2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fb6:	d01d      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002fb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fbc:	d825      	bhi.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002fc2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002fc8:	e01f      	b.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002fca:	bf00      	nop
 8002fcc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002fd0:	4ba2      	ldr	r3, [pc, #648]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fd4:	4aa1      	ldr	r2, [pc, #644]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002fd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fda:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002fdc:	e01c      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fe2:	3308      	adds	r3, #8
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f001 fb1c 	bl	8004624 <RCCEx_PLL2_Config>
 8002fec:	4603      	mov	r3, r0
 8002fee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002ff2:	e011      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ff4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ff8:	3328      	adds	r3, #40	; 0x28
 8002ffa:	2100      	movs	r1, #0
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f001 fbc3 	bl	8004788 <RCCEx_PLL3_Config>
 8003002:	4603      	mov	r3, r0
 8003004:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003008:	e006      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003010:	e002      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003016:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003018:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800301c:	2b00      	cmp	r3, #0
 800301e:	d10b      	bne.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003020:	4b8e      	ldr	r3, [pc, #568]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003024:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003028:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800302c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003030:	4a8a      	ldr	r2, [pc, #552]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003032:	430b      	orrs	r3, r1
 8003034:	6593      	str	r3, [r2, #88]	; 0x58
 8003036:	e003      	b.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003038:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800303c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003048:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800304c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003050:	2300      	movs	r3, #0
 8003052:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003056:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800305a:	460b      	mov	r3, r1
 800305c:	4313      	orrs	r3, r2
 800305e:	d03a      	beq.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003066:	2b30      	cmp	r3, #48	; 0x30
 8003068:	d01f      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800306a:	2b30      	cmp	r3, #48	; 0x30
 800306c:	d819      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800306e:	2b20      	cmp	r3, #32
 8003070:	d00c      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003072:	2b20      	cmp	r3, #32
 8003074:	d815      	bhi.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003076:	2b00      	cmp	r3, #0
 8003078:	d019      	beq.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800307a:	2b10      	cmp	r3, #16
 800307c:	d111      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800307e:	4b77      	ldr	r3, [pc, #476]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003082:	4a76      	ldr	r2, [pc, #472]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003084:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003088:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800308a:	e011      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800308c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003090:	3308      	adds	r3, #8
 8003092:	2102      	movs	r1, #2
 8003094:	4618      	mov	r0, r3
 8003096:	f001 fac5 	bl	8004624 <RCCEx_PLL2_Config>
 800309a:	4603      	mov	r3, r0
 800309c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030a0:	e006      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030a8:	e002      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80030aa:	bf00      	nop
 80030ac:	e000      	b.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80030ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10a      	bne.n	80030ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80030b8:	4b68      	ldr	r3, [pc, #416]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030bc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80030c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	4a65      	ldr	r2, [pc, #404]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030c8:	430b      	orrs	r3, r1
 80030ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030cc:	e003      	b.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80030d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80030e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80030e6:	2300      	movs	r3, #0
 80030e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80030ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 80030f0:	460b      	mov	r3, r1
 80030f2:	4313      	orrs	r3, r2
 80030f4:	d051      	beq.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80030f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003100:	d035      	beq.n	800316e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003106:	d82e      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003108:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800310c:	d031      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800310e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003112:	d828      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003118:	d01a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800311a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800311e:	d822      	bhi.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003128:	d007      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800312a:	e01c      	b.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800312c:	4b4b      	ldr	r3, [pc, #300]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800312e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003130:	4a4a      	ldr	r2, [pc, #296]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003132:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003136:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003138:	e01c      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800313a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800313e:	3308      	adds	r3, #8
 8003140:	2100      	movs	r1, #0
 8003142:	4618      	mov	r0, r3
 8003144:	f001 fa6e 	bl	8004624 <RCCEx_PLL2_Config>
 8003148:	4603      	mov	r3, r0
 800314a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800314e:	e011      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003154:	3328      	adds	r3, #40	; 0x28
 8003156:	2100      	movs	r1, #0
 8003158:	4618      	mov	r0, r3
 800315a:	f001 fb15 	bl	8004788 <RCCEx_PLL3_Config>
 800315e:	4603      	mov	r3, r0
 8003160:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003164:	e006      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800316c:	e002      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800316e:	bf00      	nop
 8003170:	e000      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003172:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003178:	2b00      	cmp	r3, #0
 800317a:	d10a      	bne.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800317c:	4b37      	ldr	r3, [pc, #220]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800317e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003180:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800318a:	4a34      	ldr	r2, [pc, #208]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800318c:	430b      	orrs	r3, r1
 800318e:	6513      	str	r3, [r2, #80]	; 0x50
 8003190:	e003      	b.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003192:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003196:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800319a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800319e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031a2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80031a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80031aa:	2300      	movs	r3, #0
 80031ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80031b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80031b4:	460b      	mov	r3, r1
 80031b6:	4313      	orrs	r3, r2
 80031b8:	d056      	beq.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80031ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031c4:	d033      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80031c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80031ca:	d82c      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031d0:	d02f      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80031d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80031d6:	d826      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031dc:	d02b      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80031de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80031e2:	d820      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031e8:	d012      	beq.n	8003210 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80031ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031ee:	d81a      	bhi.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d022      	beq.n	800323a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d115      	bne.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031fe:	3308      	adds	r3, #8
 8003200:	2101      	movs	r1, #1
 8003202:	4618      	mov	r0, r3
 8003204:	f001 fa0e 	bl	8004624 <RCCEx_PLL2_Config>
 8003208:	4603      	mov	r3, r0
 800320a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800320e:	e015      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003214:	3328      	adds	r3, #40	; 0x28
 8003216:	2101      	movs	r1, #1
 8003218:	4618      	mov	r0, r3
 800321a:	f001 fab5 	bl	8004788 <RCCEx_PLL3_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003224:	e00a      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800322c:	e006      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800322e:	bf00      	nop
 8003230:	e004      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003232:	bf00      	nop
 8003234:	e002      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003236:	bf00      	nop
 8003238:	e000      	b.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800323a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800323c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10d      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003244:	4b05      	ldr	r3, [pc, #20]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003248:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800324c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003250:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003252:	4a02      	ldr	r2, [pc, #8]	; (800325c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003254:	430b      	orrs	r3, r1
 8003256:	6513      	str	r3, [r2, #80]	; 0x50
 8003258:	e006      	b.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800325a:	bf00      	nop
 800325c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003260:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003264:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003268:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800326c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003270:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003278:	2300      	movs	r3, #0
 800327a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800327e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003282:	460b      	mov	r3, r1
 8003284:	4313      	orrs	r3, r2
 8003286:	d055      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003294:	d033      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003296:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800329a:	d82c      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800329c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a0:	d02f      	beq.n	8003302 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80032a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032a6:	d826      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032ac:	d02b      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x672>
 80032ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80032b2:	d820      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032b8:	d012      	beq.n	80032e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80032ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032be:	d81a      	bhi.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d022      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x676>
 80032c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80032c8:	d115      	bne.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ce:	3308      	adds	r3, #8
 80032d0:	2101      	movs	r1, #1
 80032d2:	4618      	mov	r0, r3
 80032d4:	f001 f9a6 	bl	8004624 <RCCEx_PLL2_Config>
 80032d8:	4603      	mov	r3, r0
 80032da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032de:	e015      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80032e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032e4:	3328      	adds	r3, #40	; 0x28
 80032e6:	2101      	movs	r1, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f001 fa4d 	bl	8004788 <RCCEx_PLL3_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80032f4:	e00a      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032fc:	e006      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80032fe:	bf00      	nop
 8003300:	e004      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003302:	bf00      	nop
 8003304:	e002      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003306:	bf00      	nop
 8003308:	e000      	b.n	800330c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800330a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800330c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003310:	2b00      	cmp	r3, #0
 8003312:	d10b      	bne.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003314:	4ba3      	ldr	r3, [pc, #652]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003318:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800331c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003320:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003324:	4a9f      	ldr	r2, [pc, #636]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003326:	430b      	orrs	r3, r1
 8003328:	6593      	str	r3, [r2, #88]	; 0x58
 800332a:	e003      	b.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800332c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003330:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003334:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003340:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003344:	2300      	movs	r3, #0
 8003346:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800334a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800334e:	460b      	mov	r3, r1
 8003350:	4313      	orrs	r3, r2
 8003352:	d037      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800335a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800335e:	d00e      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003364:	d816      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003366:	2b00      	cmp	r3, #0
 8003368:	d018      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800336a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800336e:	d111      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003370:	4b8c      	ldr	r3, [pc, #560]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003374:	4a8b      	ldr	r2, [pc, #556]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003376:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800337a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800337c:	e00f      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003382:	3308      	adds	r3, #8
 8003384:	2101      	movs	r1, #1
 8003386:	4618      	mov	r0, r3
 8003388:	f001 f94c 	bl	8004624 <RCCEx_PLL2_Config>
 800338c:	4603      	mov	r3, r0
 800338e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003392:	e004      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800339a:	e000      	b.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800339c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800339e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d10a      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80033a6:	4b7f      	ldr	r3, [pc, #508]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80033ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b4:	4a7b      	ldr	r2, [pc, #492]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033b6:	430b      	orrs	r3, r1
 80033b8:	6513      	str	r3, [r2, #80]	; 0x50
 80033ba:	e003      	b.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80033c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80033d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80033d4:	2300      	movs	r3, #0
 80033d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80033da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80033de:	460b      	mov	r3, r1
 80033e0:	4313      	orrs	r3, r2
 80033e2:	d039      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80033e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ea:	2b03      	cmp	r3, #3
 80033ec:	d81c      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80033ee:	a201      	add	r2, pc, #4	; (adr r2, 80033f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f4:	08003431 	.word	0x08003431
 80033f8:	08003405 	.word	0x08003405
 80033fc:	08003413 	.word	0x08003413
 8003400:	08003431 	.word	0x08003431
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003404:	4b67      	ldr	r3, [pc, #412]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003408:	4a66      	ldr	r2, [pc, #408]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800340a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800340e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003410:	e00f      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003412:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003416:	3308      	adds	r3, #8
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f001 f902 	bl	8004624 <RCCEx_PLL2_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003426:	e004      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800342e:	e000      	b.n	8003432 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003430:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003432:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003436:	2b00      	cmp	r3, #0
 8003438:	d10a      	bne.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800343a:	4b5a      	ldr	r3, [pc, #360]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	f023 0103 	bic.w	r1, r3, #3
 8003442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003448:	4a56      	ldr	r2, [pc, #344]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800344a:	430b      	orrs	r3, r1
 800344c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800344e:	e003      	b.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003450:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003454:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800345c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003460:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003464:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003468:	2300      	movs	r3, #0
 800346a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800346e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003472:	460b      	mov	r3, r1
 8003474:	4313      	orrs	r3, r2
 8003476:	f000 809f 	beq.w	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800347a:	4b4b      	ldr	r3, [pc, #300]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a4a      	ldr	r2, [pc, #296]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003480:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003484:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003486:	f7fd fa3d 	bl	8000904 <HAL_GetTick>
 800348a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800348e:	e00b      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003490:	f7fd fa38 	bl	8000904 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800349a:	1ad3      	subs	r3, r2, r3
 800349c:	2b64      	cmp	r3, #100	; 0x64
 800349e:	d903      	bls.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034a6:	e005      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034a8:	4b3f      	ldr	r3, [pc, #252]	; (80035a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d0ed      	beq.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80034b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d179      	bne.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80034bc:	4b39      	ldr	r3, [pc, #228]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80034c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80034c8:	4053      	eors	r3, r2
 80034ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d015      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80034d2:	4b34      	ldr	r3, [pc, #208]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034de:	4b31      	ldr	r3, [pc, #196]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e2:	4a30      	ldr	r2, [pc, #192]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034ea:	4b2e      	ldr	r3, [pc, #184]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ee:	4a2d      	ldr	r2, [pc, #180]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80034f6:	4a2b      	ldr	r2, [pc, #172]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003502:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800350a:	d118      	bne.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800350c:	f7fd f9fa 	bl	8000904 <HAL_GetTick>
 8003510:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003514:	e00d      	b.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003516:	f7fd f9f5 	bl	8000904 <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003520:	1ad2      	subs	r2, r2, r3
 8003522:	f241 3388 	movw	r3, #5000	; 0x1388
 8003526:	429a      	cmp	r2, r3
 8003528:	d903      	bls.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003530:	e005      	b.n	800353e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003532:	4b1c      	ldr	r3, [pc, #112]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d0eb      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800353e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003542:	2b00      	cmp	r3, #0
 8003544:	d129      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800354e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003552:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003556:	d10e      	bne.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003558:	4b12      	ldr	r3, [pc, #72]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003560:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003564:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003568:	091a      	lsrs	r2, r3, #4
 800356a:	4b10      	ldr	r3, [pc, #64]	; (80035ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800356c:	4013      	ands	r3, r2
 800356e:	4a0d      	ldr	r2, [pc, #52]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003570:	430b      	orrs	r3, r1
 8003572:	6113      	str	r3, [r2, #16]
 8003574:	e005      	b.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003576:	4b0b      	ldr	r3, [pc, #44]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003578:	691b      	ldr	r3, [r3, #16]
 800357a:	4a0a      	ldr	r2, [pc, #40]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800357c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003580:	6113      	str	r3, [r2, #16]
 8003582:	4b08      	ldr	r3, [pc, #32]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003584:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003586:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800358e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003592:	4a04      	ldr	r2, [pc, #16]	; (80035a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003594:	430b      	orrs	r3, r1
 8003596:	6713      	str	r3, [r2, #112]	; 0x70
 8003598:	e00e      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800359a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800359e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80035a2:	e009      	b.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 80035a4:	58024400 	.word	0x58024400
 80035a8:	58024800 	.word	0x58024800
 80035ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80035b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c0:	f002 0301 	and.w	r3, r2, #1
 80035c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035c8:	2300      	movs	r3, #0
 80035ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80035ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035d2:	460b      	mov	r3, r1
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f000 8089 	beq.w	80036ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80035da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035e0:	2b28      	cmp	r3, #40	; 0x28
 80035e2:	d86b      	bhi.n	80036bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80035e4:	a201      	add	r2, pc, #4	; (adr r2, 80035ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80035e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ea:	bf00      	nop
 80035ec:	080036c5 	.word	0x080036c5
 80035f0:	080036bd 	.word	0x080036bd
 80035f4:	080036bd 	.word	0x080036bd
 80035f8:	080036bd 	.word	0x080036bd
 80035fc:	080036bd 	.word	0x080036bd
 8003600:	080036bd 	.word	0x080036bd
 8003604:	080036bd 	.word	0x080036bd
 8003608:	080036bd 	.word	0x080036bd
 800360c:	08003691 	.word	0x08003691
 8003610:	080036bd 	.word	0x080036bd
 8003614:	080036bd 	.word	0x080036bd
 8003618:	080036bd 	.word	0x080036bd
 800361c:	080036bd 	.word	0x080036bd
 8003620:	080036bd 	.word	0x080036bd
 8003624:	080036bd 	.word	0x080036bd
 8003628:	080036bd 	.word	0x080036bd
 800362c:	080036a7 	.word	0x080036a7
 8003630:	080036bd 	.word	0x080036bd
 8003634:	080036bd 	.word	0x080036bd
 8003638:	080036bd 	.word	0x080036bd
 800363c:	080036bd 	.word	0x080036bd
 8003640:	080036bd 	.word	0x080036bd
 8003644:	080036bd 	.word	0x080036bd
 8003648:	080036bd 	.word	0x080036bd
 800364c:	080036c5 	.word	0x080036c5
 8003650:	080036bd 	.word	0x080036bd
 8003654:	080036bd 	.word	0x080036bd
 8003658:	080036bd 	.word	0x080036bd
 800365c:	080036bd 	.word	0x080036bd
 8003660:	080036bd 	.word	0x080036bd
 8003664:	080036bd 	.word	0x080036bd
 8003668:	080036bd 	.word	0x080036bd
 800366c:	080036c5 	.word	0x080036c5
 8003670:	080036bd 	.word	0x080036bd
 8003674:	080036bd 	.word	0x080036bd
 8003678:	080036bd 	.word	0x080036bd
 800367c:	080036bd 	.word	0x080036bd
 8003680:	080036bd 	.word	0x080036bd
 8003684:	080036bd 	.word	0x080036bd
 8003688:	080036bd 	.word	0x080036bd
 800368c:	080036c5 	.word	0x080036c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003690:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003694:	3308      	adds	r3, #8
 8003696:	2101      	movs	r1, #1
 8003698:	4618      	mov	r0, r3
 800369a:	f000 ffc3 	bl	8004624 <RCCEx_PLL2_Config>
 800369e:	4603      	mov	r3, r0
 80036a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036a4:	e00f      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036aa:	3328      	adds	r3, #40	; 0x28
 80036ac:	2101      	movs	r1, #1
 80036ae:	4618      	mov	r0, r3
 80036b0:	f001 f86a 	bl	8004788 <RCCEx_PLL3_Config>
 80036b4:	4603      	mov	r3, r0
 80036b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80036ba:	e004      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036c2:	e000      	b.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80036c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10a      	bne.n	80036e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80036ce:	4bbf      	ldr	r3, [pc, #764]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80036d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036dc:	4abb      	ldr	r2, [pc, #748]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80036de:	430b      	orrs	r3, r1
 80036e0:	6553      	str	r3, [r2, #84]	; 0x54
 80036e2:	e003      	b.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f4:	f002 0302 	and.w	r3, r2, #2
 80036f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80036fc:	2300      	movs	r3, #0
 80036fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003702:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	d041      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800370c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003712:	2b05      	cmp	r3, #5
 8003714:	d824      	bhi.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003716:	a201      	add	r2, pc, #4	; (adr r2, 800371c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800371c:	08003769 	.word	0x08003769
 8003720:	08003735 	.word	0x08003735
 8003724:	0800374b 	.word	0x0800374b
 8003728:	08003769 	.word	0x08003769
 800372c:	08003769 	.word	0x08003769
 8003730:	08003769 	.word	0x08003769
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003734:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003738:	3308      	adds	r3, #8
 800373a:	2101      	movs	r1, #1
 800373c:	4618      	mov	r0, r3
 800373e:	f000 ff71 	bl	8004624 <RCCEx_PLL2_Config>
 8003742:	4603      	mov	r3, r0
 8003744:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003748:	e00f      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800374a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800374e:	3328      	adds	r3, #40	; 0x28
 8003750:	2101      	movs	r1, #1
 8003752:	4618      	mov	r0, r3
 8003754:	f001 f818 	bl	8004788 <RCCEx_PLL3_Config>
 8003758:	4603      	mov	r3, r0
 800375a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800375e:	e004      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003766:	e000      	b.n	800376a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003768:	bf00      	nop
    }

    if (ret == HAL_OK)
 800376a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10a      	bne.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003772:	4b96      	ldr	r3, [pc, #600]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003774:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003776:	f023 0107 	bic.w	r1, r3, #7
 800377a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800377e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003780:	4a92      	ldr	r2, [pc, #584]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003782:	430b      	orrs	r3, r1
 8003784:	6553      	str	r3, [r2, #84]	; 0x54
 8003786:	e003      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003788:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800378c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003798:	f002 0304 	and.w	r3, r2, #4
 800379c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037a0:	2300      	movs	r3, #0
 80037a2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037a6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80037aa:	460b      	mov	r3, r1
 80037ac:	4313      	orrs	r3, r2
 80037ae:	d044      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80037b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d825      	bhi.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80037bc:	a201      	add	r2, pc, #4	; (adr r2, 80037c4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80037be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c2:	bf00      	nop
 80037c4:	08003811 	.word	0x08003811
 80037c8:	080037dd 	.word	0x080037dd
 80037cc:	080037f3 	.word	0x080037f3
 80037d0:	08003811 	.word	0x08003811
 80037d4:	08003811 	.word	0x08003811
 80037d8:	08003811 	.word	0x08003811
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e0:	3308      	adds	r3, #8
 80037e2:	2101      	movs	r1, #1
 80037e4:	4618      	mov	r0, r3
 80037e6:	f000 ff1d 	bl	8004624 <RCCEx_PLL2_Config>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80037f0:	e00f      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037f6:	3328      	adds	r3, #40	; 0x28
 80037f8:	2101      	movs	r1, #1
 80037fa:	4618      	mov	r0, r3
 80037fc:	f000 ffc4 	bl	8004788 <RCCEx_PLL3_Config>
 8003800:	4603      	mov	r3, r0
 8003802:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003806:	e004      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800380e:	e000      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003810:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003812:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800381a:	4b6c      	ldr	r3, [pc, #432]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381e:	f023 0107 	bic.w	r1, r3, #7
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003826:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800382a:	4a68      	ldr	r2, [pc, #416]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800382c:	430b      	orrs	r3, r1
 800382e:	6593      	str	r3, [r2, #88]	; 0x58
 8003830:	e003      	b.n	800383a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003832:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003836:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800383a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003842:	f002 0320 	and.w	r3, r2, #32
 8003846:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800384a:	2300      	movs	r3, #0
 800384c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003850:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003854:	460b      	mov	r3, r1
 8003856:	4313      	orrs	r3, r2
 8003858:	d055      	beq.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800385a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800385e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003862:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003866:	d033      	beq.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003868:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800386c:	d82c      	bhi.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800386e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003872:	d02f      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003878:	d826      	bhi.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800387a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800387e:	d02b      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003880:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003884:	d820      	bhi.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003886:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800388a:	d012      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800388c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003890:	d81a      	bhi.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003892:	2b00      	cmp	r3, #0
 8003894:	d022      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003896:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800389a:	d115      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a0:	3308      	adds	r3, #8
 80038a2:	2100      	movs	r1, #0
 80038a4:	4618      	mov	r0, r3
 80038a6:	f000 febd 	bl	8004624 <RCCEx_PLL2_Config>
 80038aa:	4603      	mov	r3, r0
 80038ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038b0:	e015      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038b6:	3328      	adds	r3, #40	; 0x28
 80038b8:	2102      	movs	r1, #2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f000 ff64 	bl	8004788 <RCCEx_PLL3_Config>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80038c6:	e00a      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038c8:	2301      	movs	r3, #1
 80038ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038ce:	e006      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038d0:	bf00      	nop
 80038d2:	e004      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038d4:	bf00      	nop
 80038d6:	e002      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038d8:	bf00      	nop
 80038da:	e000      	b.n	80038de <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80038dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10b      	bne.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80038e6:	4b39      	ldr	r3, [pc, #228]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80038ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f6:	4a35      	ldr	r2, [pc, #212]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6553      	str	r3, [r2, #84]	; 0x54
 80038fc:	e003      	b.n	8003906 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003902:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003906:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800390a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800390e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003916:	2300      	movs	r3, #0
 8003918:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800391c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003920:	460b      	mov	r3, r1
 8003922:	4313      	orrs	r3, r2
 8003924:	d058      	beq.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800392e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003932:	d033      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003934:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003938:	d82c      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800393a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800393e:	d02f      	beq.n	80039a0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003944:	d826      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003946:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800394a:	d02b      	beq.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800394c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003950:	d820      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003956:	d012      	beq.n	800397e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003958:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800395c:	d81a      	bhi.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800395e:	2b00      	cmp	r3, #0
 8003960:	d022      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003962:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003966:	d115      	bne.n	8003994 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396c:	3308      	adds	r3, #8
 800396e:	2100      	movs	r1, #0
 8003970:	4618      	mov	r0, r3
 8003972:	f000 fe57 	bl	8004624 <RCCEx_PLL2_Config>
 8003976:	4603      	mov	r3, r0
 8003978:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800397c:	e015      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800397e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003982:	3328      	adds	r3, #40	; 0x28
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f000 fefe 	bl	8004788 <RCCEx_PLL3_Config>
 800398c:	4603      	mov	r3, r0
 800398e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003992:	e00a      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003994:	2301      	movs	r3, #1
 8003996:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800399a:	e006      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800399c:	bf00      	nop
 800399e:	e004      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039a0:	bf00      	nop
 80039a2:	e002      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039a4:	bf00      	nop
 80039a6:	e000      	b.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d10e      	bne.n	80039d0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80039b2:	4b06      	ldr	r3, [pc, #24]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039b6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80039ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80039c2:	4a02      	ldr	r2, [pc, #8]	; (80039cc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80039c4:	430b      	orrs	r3, r1
 80039c6:	6593      	str	r3, [r2, #88]	; 0x58
 80039c8:	e006      	b.n	80039d8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80039ca:	bf00      	nop
 80039cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80039d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80039e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039e8:	2300      	movs	r3, #0
 80039ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80039ee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80039f2:	460b      	mov	r3, r1
 80039f4:	4313      	orrs	r3, r2
 80039f6:	d055      	beq.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80039f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a04:	d033      	beq.n	8003a6e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003a06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003a0a:	d82c      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a10:	d02f      	beq.n	8003a72 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003a12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a16:	d826      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a1c:	d02b      	beq.n	8003a76 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003a1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003a22:	d820      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a28:	d012      	beq.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003a2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a2e:	d81a      	bhi.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d022      	beq.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a38:	d115      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3e:	3308      	adds	r3, #8
 8003a40:	2100      	movs	r1, #0
 8003a42:	4618      	mov	r0, r3
 8003a44:	f000 fdee 	bl	8004624 <RCCEx_PLL2_Config>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a4e:	e015      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a54:	3328      	adds	r3, #40	; 0x28
 8003a56:	2102      	movs	r1, #2
 8003a58:	4618      	mov	r0, r3
 8003a5a:	f000 fe95 	bl	8004788 <RCCEx_PLL3_Config>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003a64:	e00a      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a6c:	e006      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a6e:	bf00      	nop
 8003a70:	e004      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a72:	bf00      	nop
 8003a74:	e002      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a76:	bf00      	nop
 8003a78:	e000      	b.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003a7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10b      	bne.n	8003a9c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003a84:	4ba1      	ldr	r3, [pc, #644]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a88:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003a8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003a94:	4a9d      	ldr	r2, [pc, #628]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003a96:	430b      	orrs	r3, r1
 8003a98:	6593      	str	r3, [r2, #88]	; 0x58
 8003a9a:	e003      	b.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003aa0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003aa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aac:	f002 0308 	and.w	r3, r2, #8
 8003ab0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003aba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003abe:	460b      	mov	r3, r1
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	d01e      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003ac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003acc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ad0:	d10c      	bne.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ad2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad6:	3328      	adds	r3, #40	; 0x28
 8003ad8:	2102      	movs	r1, #2
 8003ada:	4618      	mov	r0, r3
 8003adc:	f000 fe54 	bl	8004788 <RCCEx_PLL3_Config>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d002      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003aec:	4b87      	ldr	r3, [pc, #540]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003aee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afc:	4a83      	ldr	r2, [pc, #524]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003afe:	430b      	orrs	r3, r1
 8003b00:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b0a:	f002 0310 	and.w	r3, r2, #16
 8003b0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b12:	2300      	movs	r3, #0
 8003b14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003b18:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	d01e      	beq.n	8003b60 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b2e:	d10c      	bne.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b34:	3328      	adds	r3, #40	; 0x28
 8003b36:	2102      	movs	r1, #2
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f000 fe25 	bl	8004788 <RCCEx_PLL3_Config>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d002      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003b4a:	4b70      	ldr	r3, [pc, #448]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b5a:	4a6c      	ldr	r2, [pc, #432]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b5c:	430b      	orrs	r3, r1
 8003b5e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b68:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003b6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b70:	2300      	movs	r3, #0
 8003b72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003b76:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	d03e      	beq.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003b88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b8c:	d022      	beq.n	8003bd4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003b8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b92:	d81b      	bhi.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d003      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9c:	d00b      	beq.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003b9e:	e015      	b.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba4:	3308      	adds	r3, #8
 8003ba6:	2100      	movs	r1, #0
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f000 fd3b 	bl	8004624 <RCCEx_PLL2_Config>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bb4:	e00f      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bba:	3328      	adds	r3, #40	; 0x28
 8003bbc:	2102      	movs	r1, #2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fde2 	bl	8004788 <RCCEx_PLL3_Config>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003bca:	e004      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003bd2:	e000      	b.n	8003bd6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003bd4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10b      	bne.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003bde:	4b4b      	ldr	r3, [pc, #300]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003be6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003bee:	4a47      	ldr	r2, [pc, #284]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bf0:	430b      	orrs	r3, r1
 8003bf2:	6593      	str	r3, [r2, #88]	; 0x58
 8003bf4:	e003      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bfa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c06:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003c0a:	67bb      	str	r3, [r7, #120]	; 0x78
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003c10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003c14:	460b      	mov	r3, r1
 8003c16:	4313      	orrs	r3, r2
 8003c18:	d03b      	beq.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c26:	d01f      	beq.n	8003c68 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003c28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003c2c:	d818      	bhi.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003c2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c32:	d003      	beq.n	8003c3c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003c34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003c38:	d007      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003c3a:	e011      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c3c:	4b33      	ldr	r3, [pc, #204]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c40:	4a32      	ldr	r2, [pc, #200]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c48:	e00f      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4e:	3328      	adds	r3, #40	; 0x28
 8003c50:	2101      	movs	r1, #1
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fd98 	bl	8004788 <RCCEx_PLL3_Config>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003c5e:	e004      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c66:	e000      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003c68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d10b      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003c72:	4b26      	ldr	r3, [pc, #152]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c76:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003c7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c82:	4a22      	ldr	r2, [pc, #136]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c84:	430b      	orrs	r3, r1
 8003c86:	6553      	str	r3, [r2, #84]	; 0x54
 8003c88:	e003      	b.n	8003c92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c9a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003c9e:	673b      	str	r3, [r7, #112]	; 0x70
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	677b      	str	r3, [r7, #116]	; 0x74
 8003ca4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4313      	orrs	r3, r2
 8003cac:	d034      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d003      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003cb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cbc:	d007      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003cbe:	e011      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003cc0:	4b12      	ldr	r3, [pc, #72]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc4:	4a11      	ldr	r2, [pc, #68]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ccc:	e00e      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd2:	3308      	adds	r3, #8
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	f000 fca4 	bl	8004624 <RCCEx_PLL2_Config>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003ce2:	e003      	b.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d10d      	bne.n	8003d10 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003cf4:	4b05      	ldr	r3, [pc, #20]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cf8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d02:	4a02      	ldr	r2, [pc, #8]	; (8003d0c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d04:	430b      	orrs	r3, r1
 8003d06:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d08:	e006      	b.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003d0a:	bf00      	nop
 8003d0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d20:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8003d24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003d26:	2300      	movs	r3, #0
 8003d28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003d2a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8003d2e:	460b      	mov	r3, r1
 8003d30:	4313      	orrs	r3, r2
 8003d32:	d00c      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d38:	3328      	adds	r3, #40	; 0x28
 8003d3a:	2102      	movs	r1, #2
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f000 fd23 	bl	8004788 <RCCEx_PLL3_Config>
 8003d42:	4603      	mov	r3, r0
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d002      	beq.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d56:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8003d5a:	663b      	str	r3, [r7, #96]	; 0x60
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	667b      	str	r3, [r7, #100]	; 0x64
 8003d60:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8003d64:	460b      	mov	r3, r1
 8003d66:	4313      	orrs	r3, r2
 8003d68:	d038      	beq.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d76:	d018      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003d78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d7c:	d811      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d7e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d82:	d014      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003d84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d88:	d80b      	bhi.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d011      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003d8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003d92:	d106      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d94:	4bc3      	ldr	r3, [pc, #780]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d98:	4ac2      	ldr	r2, [pc, #776]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003da0:	e008      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003da8:	e004      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003daa:	bf00      	nop
 8003dac:	e002      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003dae:	bf00      	nop
 8003db0:	e000      	b.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003db2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003db4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10b      	bne.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003dbc:	4bb9      	ldr	r3, [pc, #740]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003dcc:	4ab5      	ldr	r2, [pc, #724]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dce:	430b      	orrs	r3, r1
 8003dd0:	6553      	str	r3, [r2, #84]	; 0x54
 8003dd2:	e003      	b.n	8003ddc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dd8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8003dea:	2300      	movs	r3, #0
 8003dec:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003dee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003df2:	460b      	mov	r3, r1
 8003df4:	4313      	orrs	r3, r2
 8003df6:	d009      	beq.n	8003e0c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003df8:	4baa      	ldr	r3, [pc, #680]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dfc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e06:	4aa7      	ldr	r2, [pc, #668]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e08:	430b      	orrs	r3, r1
 8003e0a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e14:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8003e18:	653b      	str	r3, [r7, #80]	; 0x50
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	657b      	str	r3, [r7, #84]	; 0x54
 8003e1e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d00a      	beq.n	8003e3e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e28:	4b9e      	ldr	r3, [pc, #632]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e34:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003e38:	4a9a      	ldr	r2, [pc, #616]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e3a:	430b      	orrs	r3, r1
 8003e3c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e46:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8003e4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e50:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8003e54:	460b      	mov	r3, r1
 8003e56:	4313      	orrs	r3, r2
 8003e58:	d009      	beq.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e5a:	4b92      	ldr	r3, [pc, #584]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8003e62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e68:	4a8e      	ldr	r2, [pc, #568]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e6a:	430b      	orrs	r3, r1
 8003e6c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003e6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8003e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	647b      	str	r3, [r7, #68]	; 0x44
 8003e80:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003e84:	460b      	mov	r3, r1
 8003e86:	4313      	orrs	r3, r2
 8003e88:	d00e      	beq.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003e8a:	4b86      	ldr	r3, [pc, #536]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e8c:	691b      	ldr	r3, [r3, #16]
 8003e8e:	4a85      	ldr	r2, [pc, #532]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e90:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003e94:	6113      	str	r3, [r2, #16]
 8003e96:	4b83      	ldr	r3, [pc, #524]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e98:	6919      	ldr	r1, [r3, #16]
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003ea2:	4a80      	ldr	r2, [pc, #512]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003eb4:	63bb      	str	r3, [r7, #56]	; 0x38
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003eba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	d009      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003ec4:	4b77      	ldr	r3, [pc, #476]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ec6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003ecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ed2:	4a74      	ldr	r2, [pc, #464]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8003eea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	d00a      	beq.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ef4:	4b6b      	ldr	r3, [pc, #428]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ef6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ef8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8003efc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f04:	4a67      	ldr	r2, [pc, #412]	; (80040a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f06:	430b      	orrs	r3, r1
 8003f08:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	2100      	movs	r1, #0
 8003f14:	62b9      	str	r1, [r7, #40]	; 0x28
 8003f16:	f003 0301 	and.w	r3, r3, #1
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f1c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8003f20:	460b      	mov	r3, r1
 8003f22:	4313      	orrs	r3, r2
 8003f24:	d011      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2a:	3308      	adds	r3, #8
 8003f2c:	2100      	movs	r1, #0
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f000 fb78 	bl	8004624 <RCCEx_PLL2_Config>
 8003f34:	4603      	mov	r3, r0
 8003f36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d003      	beq.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003f4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f52:	2100      	movs	r1, #0
 8003f54:	6239      	str	r1, [r7, #32]
 8003f56:	f003 0302 	and.w	r3, r3, #2
 8003f5a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f5c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003f60:	460b      	mov	r3, r1
 8003f62:	4313      	orrs	r3, r2
 8003f64:	d011      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f6a:	3308      	adds	r3, #8
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fb58 	bl	8004624 <RCCEx_PLL2_Config>
 8003f74:	4603      	mov	r3, r0
 8003f76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003f7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d003      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f82:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f86:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003f8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f92:	2100      	movs	r1, #0
 8003f94:	61b9      	str	r1, [r7, #24]
 8003f96:	f003 0304 	and.w	r3, r3, #4
 8003f9a:	61fb      	str	r3, [r7, #28]
 8003f9c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	d011      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003faa:	3308      	adds	r3, #8
 8003fac:	2102      	movs	r1, #2
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f000 fb38 	bl	8004624 <RCCEx_PLL2_Config>
 8003fb4:	4603      	mov	r3, r0
 8003fb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003fba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fc6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003fca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	6139      	str	r1, [r7, #16]
 8003fd6:	f003 0308 	and.w	r3, r3, #8
 8003fda:	617b      	str	r3, [r7, #20]
 8003fdc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	d011      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fea:	3328      	adds	r3, #40	; 0x28
 8003fec:	2100      	movs	r1, #0
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f000 fbca 	bl	8004788 <RCCEx_PLL3_Config>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003ffa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004006:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	2100      	movs	r1, #0
 8004014:	60b9      	str	r1, [r7, #8]
 8004016:	f003 0310 	and.w	r3, r3, #16
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004020:	460b      	mov	r3, r1
 8004022:	4313      	orrs	r3, r2
 8004024:	d011      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402a:	3328      	adds	r3, #40	; 0x28
 800402c:	2101      	movs	r1, #1
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fbaa 	bl	8004788 <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800403a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004042:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004046:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800404a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004052:	2100      	movs	r1, #0
 8004054:	6039      	str	r1, [r7, #0]
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	607b      	str	r3, [r7, #4]
 800405c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004060:	460b      	mov	r3, r1
 8004062:	4313      	orrs	r3, r2
 8004064:	d011      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800406a:	3328      	adds	r3, #40	; 0x28
 800406c:	2102      	movs	r1, #2
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fb8a 	bl	8004788 <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800407a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800407e:	2b00      	cmp	r3, #0
 8004080:	d003      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004082:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004086:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800408a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800408e:	2b00      	cmp	r3, #0
 8004090:	d101      	bne.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004092:	2300      	movs	r3, #0
 8004094:	e000      	b.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
}
 8004098:	4618      	mov	r0, r3
 800409a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800409e:	46bd      	mov	sp, r7
 80040a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80040a4:	58024400 	.word	0x58024400

080040a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80040ac:	f7fe fd96 	bl	8002bdc <HAL_RCC_GetHCLKFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b06      	ldr	r3, [pc, #24]	; (80040cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	091b      	lsrs	r3, r3, #4
 80040b8:	f003 0307 	and.w	r3, r3, #7
 80040bc:	4904      	ldr	r1, [pc, #16]	; (80040d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	58024400 	.word	0x58024400
 80040d0:	08009744 	.word	0x08009744

080040d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b089      	sub	sp, #36	; 0x24
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80040dc:	4ba1      	ldr	r3, [pc, #644]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80040e6:	4b9f      	ldr	r3, [pc, #636]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	0b1b      	lsrs	r3, r3, #12
 80040ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80040f2:	4b9c      	ldr	r3, [pc, #624]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80040f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f6:	091b      	lsrs	r3, r3, #4
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80040fe:	4b99      	ldr	r3, [pc, #612]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004100:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004102:	08db      	lsrs	r3, r3, #3
 8004104:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	fb02 f303 	mul.w	r3, r2, r3
 800410e:	ee07 3a90 	vmov	s15, r3
 8004112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004116:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 8111 	beq.w	8004344 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	2b02      	cmp	r3, #2
 8004126:	f000 8083 	beq.w	8004230 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800412a:	69bb      	ldr	r3, [r7, #24]
 800412c:	2b02      	cmp	r3, #2
 800412e:	f200 80a1 	bhi.w	8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d003      	beq.n	8004140 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d056      	beq.n	80041ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800413e:	e099      	b.n	8004274 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004140:	4b88      	ldr	r3, [pc, #544]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0320 	and.w	r3, r3, #32
 8004148:	2b00      	cmp	r3, #0
 800414a:	d02d      	beq.n	80041a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800414c:	4b85      	ldr	r3, [pc, #532]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	08db      	lsrs	r3, r3, #3
 8004152:	f003 0303 	and.w	r3, r3, #3
 8004156:	4a84      	ldr	r2, [pc, #528]	; (8004368 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004158:	fa22 f303 	lsr.w	r3, r2, r3
 800415c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	ee07 3a90 	vmov	s15, r3
 8004164:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004176:	4b7b      	ldr	r3, [pc, #492]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800417e:	ee07 3a90 	vmov	s15, r3
 8004182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004186:	ed97 6a03 	vldr	s12, [r7, #12]
 800418a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800436c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800418e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004196:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800419a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800419e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80041a6:	e087      	b.n	80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	ee07 3a90 	vmov	s15, r3
 80041ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004370 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80041b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041ba:	4b6a      	ldr	r3, [pc, #424]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041c2:	ee07 3a90 	vmov	s15, r3
 80041c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80041ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800436c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80041de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80041ea:	e065      	b.n	80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	ee07 3a90 	vmov	s15, r3
 80041f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004374 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80041fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041fe:	4b59      	ldr	r3, [pc, #356]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800420e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004212:	eddf 5a56 	vldr	s11, [pc, #344]	; 800436c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800421a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800421e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800422a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800422e:	e043      	b.n	80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	ee07 3a90 	vmov	s15, r3
 8004236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800423a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004378 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800423e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004242:	4b48      	ldr	r3, [pc, #288]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004252:	ed97 6a03 	vldr	s12, [r7, #12]
 8004256:	eddf 5a45 	vldr	s11, [pc, #276]	; 800436c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800425a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800425e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004262:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800426a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800426e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004272:	e021      	b.n	80042b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	ee07 3a90 	vmov	s15, r3
 800427a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800427e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004374 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004282:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004286:	4b37      	ldr	r3, [pc, #220]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800428a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004296:	ed97 6a03 	vldr	s12, [r7, #12]
 800429a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800436c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800429e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80042aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80042b8:	4b2a      	ldr	r3, [pc, #168]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	0a5b      	lsrs	r3, r3, #9
 80042be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042c2:	ee07 3a90 	vmov	s15, r3
 80042c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80042d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80042d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80042de:	ee17 2a90 	vmov	r2, s15
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80042e6:	4b1f      	ldr	r3, [pc, #124]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ea:	0c1b      	lsrs	r3, r3, #16
 80042ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80042f0:	ee07 3a90 	vmov	s15, r3
 80042f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80042fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004300:	edd7 6a07 	vldr	s13, [r7, #28]
 8004304:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004308:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800430c:	ee17 2a90 	vmov	r2, s15
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004314:	4b13      	ldr	r3, [pc, #76]	; (8004364 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004318:	0e1b      	lsrs	r3, r3, #24
 800431a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800432a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800432e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800433a:	ee17 2a90 	vmov	r2, s15
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004342:	e008      	b.n	8004356 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2200      	movs	r2, #0
 8004354:	609a      	str	r2, [r3, #8]
}
 8004356:	bf00      	nop
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	58024400 	.word	0x58024400
 8004368:	03d09000 	.word	0x03d09000
 800436c:	46000000 	.word	0x46000000
 8004370:	4c742400 	.word	0x4c742400
 8004374:	4a742400 	.word	0x4a742400
 8004378:	4b371b00 	.word	0x4b371b00

0800437c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800437c:	b480      	push	{r7}
 800437e:	b089      	sub	sp, #36	; 0x24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004384:	4ba1      	ldr	r3, [pc, #644]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004388:	f003 0303 	and.w	r3, r3, #3
 800438c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800438e:	4b9f      	ldr	r3, [pc, #636]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004392:	0d1b      	lsrs	r3, r3, #20
 8004394:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004398:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800439a:	4b9c      	ldr	r3, [pc, #624]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800439c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800439e:	0a1b      	lsrs	r3, r3, #8
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80043a6:	4b99      	ldr	r3, [pc, #612]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043aa:	08db      	lsrs	r3, r3, #3
 80043ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	fb02 f303 	mul.w	r3, r2, r3
 80043b6:	ee07 3a90 	vmov	s15, r3
 80043ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80043c2:	697b      	ldr	r3, [r7, #20]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8111 	beq.w	80045ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b02      	cmp	r3, #2
 80043ce:	f000 8083 	beq.w	80044d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80043d2:	69bb      	ldr	r3, [r7, #24]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	f200 80a1 	bhi.w	800451c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d003      	beq.n	80043e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d056      	beq.n	8004494 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80043e6:	e099      	b.n	800451c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80043e8:	4b88      	ldr	r3, [pc, #544]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f003 0320 	and.w	r3, r3, #32
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d02d      	beq.n	8004450 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80043f4:	4b85      	ldr	r3, [pc, #532]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	08db      	lsrs	r3, r3, #3
 80043fa:	f003 0303 	and.w	r3, r3, #3
 80043fe:	4a84      	ldr	r2, [pc, #528]	; (8004610 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004400:	fa22 f303 	lsr.w	r3, r2, r3
 8004404:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	ee07 3a90 	vmov	s15, r3
 800440c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800441e:	4b7b      	ldr	r3, [pc, #492]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004426:	ee07 3a90 	vmov	s15, r3
 800442a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800442e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004432:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004436:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800443a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800443e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004442:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004446:	ee67 7a27 	vmul.f32	s15, s14, s15
 800444a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800444e:	e087      	b.n	8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004618 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800445e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004462:	4b6a      	ldr	r3, [pc, #424]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800446a:	ee07 3a90 	vmov	s15, r3
 800446e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004472:	ed97 6a03 	vldr	s12, [r7, #12]
 8004476:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800447a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800447e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004482:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004486:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800448a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800448e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004492:	e065      	b.n	8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	ee07 3a90 	vmov	s15, r3
 800449a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800449e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800461c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044a6:	4b59      	ldr	r3, [pc, #356]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044d6:	e043      	b.n	8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	ee07 3a90 	vmov	s15, r3
 80044de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004620 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80044e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ea:	4b48      	ldr	r3, [pc, #288]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80044fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800450e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004516:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800451a:	e021      	b.n	8004560 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800451c:	697b      	ldr	r3, [r7, #20]
 800451e:	ee07 3a90 	vmov	s15, r3
 8004522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004526:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800461c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800452a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800452e:	4b37      	ldr	r3, [pc, #220]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800453e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004542:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004614 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800454e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800455e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004560:	4b2a      	ldr	r3, [pc, #168]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004564:	0a5b      	lsrs	r3, r3, #9
 8004566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800456a:	ee07 3a90 	vmov	s15, r3
 800456e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004572:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004576:	ee37 7a87 	vadd.f32	s14, s15, s14
 800457a:	edd7 6a07 	vldr	s13, [r7, #28]
 800457e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004582:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004586:	ee17 2a90 	vmov	r2, s15
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800458e:	4b1f      	ldr	r3, [pc, #124]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	0c1b      	lsrs	r3, r3, #16
 8004594:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004598:	ee07 3a90 	vmov	s15, r3
 800459c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045a8:	edd7 6a07 	vldr	s13, [r7, #28]
 80045ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045b4:	ee17 2a90 	vmov	r2, s15
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80045bc:	4b13      	ldr	r3, [pc, #76]	; (800460c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c0:	0e1b      	lsrs	r3, r3, #24
 80045c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80045d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e2:	ee17 2a90 	vmov	r2, s15
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80045ea:	e008      	b.n	80045fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	609a      	str	r2, [r3, #8]
}
 80045fe:	bf00      	nop
 8004600:	3724      	adds	r7, #36	; 0x24
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr
 800460a:	bf00      	nop
 800460c:	58024400 	.word	0x58024400
 8004610:	03d09000 	.word	0x03d09000
 8004614:	46000000 	.word	0x46000000
 8004618:	4c742400 	.word	0x4c742400
 800461c:	4a742400 	.word	0x4a742400
 8004620:	4b371b00 	.word	0x4b371b00

08004624 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004632:	4b53      	ldr	r3, [pc, #332]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b03      	cmp	r3, #3
 800463c:	d101      	bne.n	8004642 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e099      	b.n	8004776 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004642:	4b4f      	ldr	r3, [pc, #316]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a4e      	ldr	r2, [pc, #312]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004648:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800464c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800464e:	f7fc f959 	bl	8000904 <HAL_GetTick>
 8004652:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004654:	e008      	b.n	8004668 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004656:	f7fc f955 	bl	8000904 <HAL_GetTick>
 800465a:	4602      	mov	r2, r0
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	1ad3      	subs	r3, r2, r3
 8004660:	2b02      	cmp	r3, #2
 8004662:	d901      	bls.n	8004668 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e086      	b.n	8004776 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004668:	4b45      	ldr	r3, [pc, #276]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004670:	2b00      	cmp	r3, #0
 8004672:	d1f0      	bne.n	8004656 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004674:	4b42      	ldr	r3, [pc, #264]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004678:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	031b      	lsls	r3, r3, #12
 8004682:	493f      	ldr	r1, [pc, #252]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004684:	4313      	orrs	r3, r2
 8004686:	628b      	str	r3, [r1, #40]	; 0x28
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	3b01      	subs	r3, #1
 800468e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	3b01      	subs	r3, #1
 8004698:	025b      	lsls	r3, r3, #9
 800469a:	b29b      	uxth	r3, r3
 800469c:	431a      	orrs	r2, r3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	68db      	ldr	r3, [r3, #12]
 80046a2:	3b01      	subs	r3, #1
 80046a4:	041b      	lsls	r3, r3, #16
 80046a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80046aa:	431a      	orrs	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	061b      	lsls	r3, r3, #24
 80046b4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80046b8:	4931      	ldr	r1, [pc, #196]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80046be:	4b30      	ldr	r3, [pc, #192]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	492d      	ldr	r1, [pc, #180]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80046d0:	4b2b      	ldr	r3, [pc, #172]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	f023 0220 	bic.w	r2, r3, #32
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	4928      	ldr	r1, [pc, #160]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80046e2:	4b27      	ldr	r3, [pc, #156]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	4a26      	ldr	r2, [pc, #152]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 80046e8:	f023 0310 	bic.w	r3, r3, #16
 80046ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80046ee:	4b24      	ldr	r3, [pc, #144]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 80046f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046f2:	4b24      	ldr	r3, [pc, #144]	; (8004784 <RCCEx_PLL2_Config+0x160>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	69d2      	ldr	r2, [r2, #28]
 80046fa:	00d2      	lsls	r2, r2, #3
 80046fc:	4920      	ldr	r1, [pc, #128]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 80046fe:	4313      	orrs	r3, r2
 8004700:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004702:	4b1f      	ldr	r3, [pc, #124]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004706:	4a1e      	ldr	r2, [pc, #120]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004708:	f043 0310 	orr.w	r3, r3, #16
 800470c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d106      	bne.n	8004722 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004714:	4b1a      	ldr	r3, [pc, #104]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004718:	4a19      	ldr	r2, [pc, #100]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 800471a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800471e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004720:	e00f      	b.n	8004742 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d106      	bne.n	8004736 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004728:	4b15      	ldr	r3, [pc, #84]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 800472a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472c:	4a14      	ldr	r2, [pc, #80]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 800472e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004732:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004734:	e005      	b.n	8004742 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004736:	4b12      	ldr	r3, [pc, #72]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800473a:	4a11      	ldr	r2, [pc, #68]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 800473c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004740:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 8004748:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800474c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800474e:	f7fc f8d9 	bl	8000904 <HAL_GetTick>
 8004752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004754:	e008      	b.n	8004768 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004756:	f7fc f8d5 	bl	8000904 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d901      	bls.n	8004768 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e006      	b.n	8004776 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004768:	4b05      	ldr	r3, [pc, #20]	; (8004780 <RCCEx_PLL2_Config+0x15c>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0f0      	beq.n	8004756 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004774:	7bfb      	ldrb	r3, [r7, #15]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}
 800477e:	bf00      	nop
 8004780:	58024400 	.word	0x58024400
 8004784:	ffff0007 	.word	0xffff0007

08004788 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004792:	2300      	movs	r3, #0
 8004794:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004796:	4b53      	ldr	r3, [pc, #332]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 8004798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b03      	cmp	r3, #3
 80047a0:	d101      	bne.n	80047a6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e099      	b.n	80048da <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80047a6:	4b4f      	ldr	r3, [pc, #316]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a4e      	ldr	r2, [pc, #312]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 80047ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047b2:	f7fc f8a7 	bl	8000904 <HAL_GetTick>
 80047b6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047b8:	e008      	b.n	80047cc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80047ba:	f7fc f8a3 	bl	8000904 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b02      	cmp	r3, #2
 80047c6:	d901      	bls.n	80047cc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e086      	b.n	80048da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80047cc:	4b45      	ldr	r3, [pc, #276]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d1f0      	bne.n	80047ba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80047d8:	4b42      	ldr	r3, [pc, #264]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 80047da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047dc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	051b      	lsls	r3, r3, #20
 80047e6:	493f      	ldr	r1, [pc, #252]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	628b      	str	r3, [r1, #40]	; 0x28
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	3b01      	subs	r3, #1
 80047f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	3b01      	subs	r3, #1
 80047fc:	025b      	lsls	r3, r3, #9
 80047fe:	b29b      	uxth	r3, r3
 8004800:	431a      	orrs	r2, r3
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	3b01      	subs	r3, #1
 8004808:	041b      	lsls	r3, r3, #16
 800480a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	3b01      	subs	r3, #1
 8004816:	061b      	lsls	r3, r3, #24
 8004818:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800481c:	4931      	ldr	r1, [pc, #196]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 800481e:	4313      	orrs	r3, r2
 8004820:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004822:	4b30      	ldr	r3, [pc, #192]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 8004824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004826:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	492d      	ldr	r1, [pc, #180]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 8004830:	4313      	orrs	r3, r2
 8004832:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004834:	4b2b      	ldr	r3, [pc, #172]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 8004836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004838:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	699b      	ldr	r3, [r3, #24]
 8004840:	4928      	ldr	r1, [pc, #160]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 8004842:	4313      	orrs	r3, r2
 8004844:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004846:	4b27      	ldr	r3, [pc, #156]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	4a26      	ldr	r2, [pc, #152]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 800484c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004850:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004852:	4b24      	ldr	r3, [pc, #144]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 8004854:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004856:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <RCCEx_PLL3_Config+0x160>)
 8004858:	4013      	ands	r3, r2
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	69d2      	ldr	r2, [r2, #28]
 800485e:	00d2      	lsls	r2, r2, #3
 8004860:	4920      	ldr	r1, [pc, #128]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 8004862:	4313      	orrs	r3, r2
 8004864:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004866:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 8004868:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486a:	4a1e      	ldr	r2, [pc, #120]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 800486c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004870:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d106      	bne.n	8004886 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004878:	4b1a      	ldr	r3, [pc, #104]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 800487a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800487c:	4a19      	ldr	r2, [pc, #100]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 800487e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004882:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004884:	e00f      	b.n	80048a6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b01      	cmp	r3, #1
 800488a:	d106      	bne.n	800489a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800488c:	4b15      	ldr	r3, [pc, #84]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 800488e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004890:	4a14      	ldr	r2, [pc, #80]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 8004892:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004896:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004898:	e005      	b.n	80048a6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800489a:	4b12      	ldr	r3, [pc, #72]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 800489c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800489e:	4a11      	ldr	r2, [pc, #68]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 80048a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048a4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80048a6:	4b0f      	ldr	r3, [pc, #60]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a0e      	ldr	r2, [pc, #56]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 80048ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048b2:	f7fc f827 	bl	8000904 <HAL_GetTick>
 80048b6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048b8:	e008      	b.n	80048cc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80048ba:	f7fc f823 	bl	8000904 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d901      	bls.n	80048cc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e006      	b.n	80048da <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80048cc:	4b05      	ldr	r3, [pc, #20]	; (80048e4 <RCCEx_PLL3_Config+0x15c>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	58024400 	.word	0x58024400
 80048e8:	ffff0007 	.word	0xffff0007

080048ec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d101      	bne.n	80048fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048fa:	2301      	movs	r3, #1
 80048fc:	e10f      	b.n	8004b1e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a87      	ldr	r2, [pc, #540]	; (8004b28 <HAL_SPI_Init+0x23c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00f      	beq.n	800492e <HAL_SPI_Init+0x42>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a86      	ldr	r2, [pc, #536]	; (8004b2c <HAL_SPI_Init+0x240>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00a      	beq.n	800492e <HAL_SPI_Init+0x42>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a84      	ldr	r2, [pc, #528]	; (8004b30 <HAL_SPI_Init+0x244>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d005      	beq.n	800492e <HAL_SPI_Init+0x42>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68db      	ldr	r3, [r3, #12]
 8004926:	2b0f      	cmp	r3, #15
 8004928:	d901      	bls.n	800492e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e0f7      	b.n	8004b1e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 f900 	bl	8004b34 <SPI_GetPacketSize>
 8004934:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a7b      	ldr	r2, [pc, #492]	; (8004b28 <HAL_SPI_Init+0x23c>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d00c      	beq.n	800495a <HAL_SPI_Init+0x6e>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a79      	ldr	r2, [pc, #484]	; (8004b2c <HAL_SPI_Init+0x240>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <HAL_SPI_Init+0x6e>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a78      	ldr	r2, [pc, #480]	; (8004b30 <HAL_SPI_Init+0x244>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d002      	beq.n	800495a <HAL_SPI_Init+0x6e>
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	2b08      	cmp	r3, #8
 8004958:	d811      	bhi.n	800497e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800495e:	4a72      	ldr	r2, [pc, #456]	; (8004b28 <HAL_SPI_Init+0x23c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d009      	beq.n	8004978 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a70      	ldr	r2, [pc, #448]	; (8004b2c <HAL_SPI_Init+0x240>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d004      	beq.n	8004978 <HAL_SPI_Init+0x8c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a6f      	ldr	r2, [pc, #444]	; (8004b30 <HAL_SPI_Init+0x244>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d104      	bne.n	8004982 <HAL_SPI_Init+0x96>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	2b10      	cmp	r3, #16
 800497c:	d901      	bls.n	8004982 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0cd      	b.n	8004b1e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f003 fe4a 	bl	8008630 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0201 	bic.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 80049be:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049c8:	d119      	bne.n	80049fe <HAL_SPI_Init+0x112>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049d2:	d103      	bne.n	80049dc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d008      	beq.n	80049ee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d10c      	bne.n	80049fe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80049e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ec:	d107      	bne.n	80049fe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	681a      	ldr	r2, [r3, #0]
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049fc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00f      	beq.n	8004a2a <HAL_SPI_Init+0x13e>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	68db      	ldr	r3, [r3, #12]
 8004a0e:	2b06      	cmp	r3, #6
 8004a10:	d90b      	bls.n	8004a2a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	430a      	orrs	r2, r1
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	e007      	b.n	8004a3a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681a      	ldr	r2, [r3, #0]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004a38:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69da      	ldr	r2, [r3, #28]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a42:	431a      	orrs	r2, r3
 8004a44:	68bb      	ldr	r3, [r7, #8]
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a4c:	ea42 0103 	orr.w	r1, r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	68da      	ldr	r2, [r3, #12]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	430a      	orrs	r2, r1
 8004a5a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	699b      	ldr	r3, [r3, #24]
 8004a70:	431a      	orrs	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	431a      	orrs	r2, r3
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	695b      	ldr	r3, [r3, #20]
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a1b      	ldr	r3, [r3, #32]
 8004a82:	431a      	orrs	r2, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a8e:	431a      	orrs	r2, r3
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	431a      	orrs	r2, r3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a9a:	ea42 0103 	orr.w	r1, r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d113      	bne.n	8004ada <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ac4:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004ad8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d00a      	beq.n	8004b0c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004b1c:	2300      	movs	r3, #0
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40013000 	.word	0x40013000
 8004b2c:	40003800 	.word	0x40003800
 8004b30:	40003c00 	.word	0x40003c00

08004b34 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b40:	095b      	lsrs	r3, r3, #5
 8004b42:	3301      	adds	r3, #1
 8004b44:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	3307      	adds	r3, #7
 8004b52:	08db      	lsrs	r3, r3, #3
 8004b54:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	68fa      	ldr	r2, [r7, #12]
 8004b5a:	fb02 f303 	mul.w	r3, r2, r3
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3714      	adds	r7, #20
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr

08004b6a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b6a:	b580      	push	{r7, lr}
 8004b6c:	b082      	sub	sp, #8
 8004b6e:	af00      	add	r7, sp, #0
 8004b70:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b78:	2301      	movs	r3, #1
 8004b7a:	e049      	b.n	8004c10 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d106      	bne.n	8004b96 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b90:	6878      	ldr	r0, [r7, #4]
 8004b92:	f003 fdb5 	bl	8008700 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2202      	movs	r2, #2
 8004b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	3304      	adds	r3, #4
 8004ba6:	4619      	mov	r1, r3
 8004ba8:	4610      	mov	r0, r2
 8004baa:	f000 fb5d 	bl	8005268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2201      	movs	r2, #1
 8004bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2201      	movs	r2, #1
 8004c02:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3708      	adds	r7, #8
 8004c14:	46bd      	mov	sp, r7
 8004c16:	bd80      	pop	{r7, pc}

08004c18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d001      	beq.n	8004c30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e04c      	b.n	8004cca <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2202      	movs	r2, #2
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a26      	ldr	r2, [pc, #152]	; (8004cd8 <HAL_TIM_Base_Start+0xc0>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d022      	beq.n	8004c88 <HAL_TIM_Base_Start+0x70>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c4a:	d01d      	beq.n	8004c88 <HAL_TIM_Base_Start+0x70>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <HAL_TIM_Base_Start+0xc4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d018      	beq.n	8004c88 <HAL_TIM_Base_Start+0x70>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a21      	ldr	r2, [pc, #132]	; (8004ce0 <HAL_TIM_Base_Start+0xc8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d013      	beq.n	8004c88 <HAL_TIM_Base_Start+0x70>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <HAL_TIM_Base_Start+0xcc>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d00e      	beq.n	8004c88 <HAL_TIM_Base_Start+0x70>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <HAL_TIM_Base_Start+0xd0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d009      	beq.n	8004c88 <HAL_TIM_Base_Start+0x70>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <HAL_TIM_Base_Start+0xd4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d004      	beq.n	8004c88 <HAL_TIM_Base_Start+0x70>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_TIM_Base_Start+0xd8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d115      	bne.n	8004cb4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	689a      	ldr	r2, [r3, #8]
 8004c8e:	4b19      	ldr	r3, [pc, #100]	; (8004cf4 <HAL_TIM_Base_Start+0xdc>)
 8004c90:	4013      	ands	r3, r2
 8004c92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2b06      	cmp	r3, #6
 8004c98:	d015      	beq.n	8004cc6 <HAL_TIM_Base_Start+0xae>
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca0:	d011      	beq.n	8004cc6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f042 0201 	orr.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb2:	e008      	b.n	8004cc6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	681a      	ldr	r2, [r3, #0]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f042 0201 	orr.w	r2, r2, #1
 8004cc2:	601a      	str	r2, [r3, #0]
 8004cc4:	e000      	b.n	8004cc8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	40010000 	.word	0x40010000
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40010400 	.word	0x40010400
 8004cec:	40001800 	.word	0x40001800
 8004cf0:	40014000 	.word	0x40014000
 8004cf4:	00010007 	.word	0x00010007

08004cf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d001      	beq.n	8004d10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e054      	b.n	8004dba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	68da      	ldr	r2, [r3, #12]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f042 0201 	orr.w	r2, r2, #1
 8004d26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a26      	ldr	r2, [pc, #152]	; (8004dc8 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d022      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d3a:	d01d      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a22      	ldr	r2, [pc, #136]	; (8004dcc <HAL_TIM_Base_Start_IT+0xd4>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d018      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a21      	ldr	r2, [pc, #132]	; (8004dd0 <HAL_TIM_Base_Start_IT+0xd8>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d013      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a1f      	ldr	r2, [pc, #124]	; (8004dd4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a1e      	ldr	r2, [pc, #120]	; (8004dd8 <HAL_TIM_Base_Start_IT+0xe0>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a1c      	ldr	r2, [pc, #112]	; (8004ddc <HAL_TIM_Base_Start_IT+0xe4>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIM_Base_Start_IT+0x80>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a1b      	ldr	r2, [pc, #108]	; (8004de0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d115      	bne.n	8004da4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	4b19      	ldr	r3, [pc, #100]	; (8004de4 <HAL_TIM_Base_Start_IT+0xec>)
 8004d80:	4013      	ands	r3, r2
 8004d82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d015      	beq.n	8004db6 <HAL_TIM_Base_Start_IT+0xbe>
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d90:	d011      	beq.n	8004db6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0201 	orr.w	r2, r2, #1
 8004da0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da2:	e008      	b.n	8004db6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681a      	ldr	r2, [r3, #0]
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0201 	orr.w	r2, r2, #1
 8004db2:	601a      	str	r2, [r3, #0]
 8004db4:	e000      	b.n	8004db8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004db6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004db8:	2300      	movs	r3, #0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3714      	adds	r7, #20
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
 8004dc6:	bf00      	nop
 8004dc8:	40010000 	.word	0x40010000
 8004dcc:	40000400 	.word	0x40000400
 8004dd0:	40000800 	.word	0x40000800
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	40010400 	.word	0x40010400
 8004ddc:	40001800 	.word	0x40001800
 8004de0:	40014000 	.word	0x40014000
 8004de4:	00010007 	.word	0x00010007

08004de8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	691b      	ldr	r3, [r3, #16]
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d122      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68db      	ldr	r3, [r3, #12]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d11b      	bne.n	8004e44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f06f 0202 	mvn.w	r2, #2
 8004e14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	f003 0303 	and.w	r3, r3, #3
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d003      	beq.n	8004e32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	f000 f9fe 	bl	800522c <HAL_TIM_IC_CaptureCallback>
 8004e30:	e005      	b.n	8004e3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9f0 	bl	8005218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fa01 	bl	8005240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0304 	and.w	r3, r3, #4
 8004e4e:	2b04      	cmp	r3, #4
 8004e50:	d122      	bne.n	8004e98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	68db      	ldr	r3, [r3, #12]
 8004e58:	f003 0304 	and.w	r3, r3, #4
 8004e5c:	2b04      	cmp	r3, #4
 8004e5e:	d11b      	bne.n	8004e98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0204 	mvn.w	r2, #4
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	699b      	ldr	r3, [r3, #24]
 8004e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f9d4 	bl	800522c <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f9c6 	bl	8005218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f9d7 	bl	8005240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	691b      	ldr	r3, [r3, #16]
 8004e9e:	f003 0308 	and.w	r3, r3, #8
 8004ea2:	2b08      	cmp	r3, #8
 8004ea4:	d122      	bne.n	8004eec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	f003 0308 	and.w	r3, r3, #8
 8004eb0:	2b08      	cmp	r3, #8
 8004eb2:	d11b      	bne.n	8004eec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f06f 0208 	mvn.w	r2, #8
 8004ebc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2204      	movs	r2, #4
 8004ec2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	69db      	ldr	r3, [r3, #28]
 8004eca:	f003 0303 	and.w	r3, r3, #3
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d003      	beq.n	8004eda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f000 f9aa 	bl	800522c <HAL_TIM_IC_CaptureCallback>
 8004ed8:	e005      	b.n	8004ee6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004eda:	6878      	ldr	r0, [r7, #4]
 8004edc:	f000 f99c 	bl	8005218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f000 f9ad 	bl	8005240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	691b      	ldr	r3, [r3, #16]
 8004ef2:	f003 0310 	and.w	r3, r3, #16
 8004ef6:	2b10      	cmp	r3, #16
 8004ef8:	d122      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	f003 0310 	and.w	r3, r3, #16
 8004f04:	2b10      	cmp	r3, #16
 8004f06:	d11b      	bne.n	8004f40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f06f 0210 	mvn.w	r2, #16
 8004f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2208      	movs	r2, #8
 8004f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	69db      	ldr	r3, [r3, #28]
 8004f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d003      	beq.n	8004f2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f000 f980 	bl	800522c <HAL_TIM_IC_CaptureCallback>
 8004f2c:	e005      	b.n	8004f3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	f000 f972 	bl	8005218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f983 	bl	8005240 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d10e      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	f003 0301 	and.w	r3, r3, #1
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d107      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f06f 0201 	mvn.w	r2, #1
 8004f64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f003 f978 	bl	800825c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f76:	2b80      	cmp	r3, #128	; 0x80
 8004f78:	d10e      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f84:	2b80      	cmp	r3, #128	; 0x80
 8004f86:	d107      	bne.n	8004f98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004f90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 fb38 	bl	8005608 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa6:	d10e      	bne.n	8004fc6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68db      	ldr	r3, [r3, #12]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	2b80      	cmp	r3, #128	; 0x80
 8004fb4:	d107      	bne.n	8004fc6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004fbe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fb2b 	bl	800561c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	d10e      	bne.n	8004ff2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fde:	2b40      	cmp	r3, #64	; 0x40
 8004fe0:	d107      	bne.n	8004ff2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004fea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 f931 	bl	8005254 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	691b      	ldr	r3, [r3, #16]
 8004ff8:	f003 0320 	and.w	r3, r3, #32
 8004ffc:	2b20      	cmp	r3, #32
 8004ffe:	d10e      	bne.n	800501e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68db      	ldr	r3, [r3, #12]
 8005006:	f003 0320 	and.w	r3, r3, #32
 800500a:	2b20      	cmp	r3, #32
 800500c:	d107      	bne.n	800501e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f06f 0220 	mvn.w	r2, #32
 8005016:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 faeb 	bl	80055f4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800501e:	bf00      	nop
 8005020:	3708      	adds	r7, #8
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005032:	2300      	movs	r3, #0
 8005034:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800503c:	2b01      	cmp	r3, #1
 800503e:	d101      	bne.n	8005044 <HAL_TIM_ConfigClockSource+0x1c>
 8005040:	2302      	movs	r3, #2
 8005042:	e0dc      	b.n	80051fe <HAL_TIM_ConfigClockSource+0x1d6>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	4b6a      	ldr	r3, [pc, #424]	; (8005208 <HAL_TIM_ConfigClockSource+0x1e0>)
 8005060:	4013      	ands	r3, r2
 8005062:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800506a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68ba      	ldr	r2, [r7, #8]
 8005072:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a64      	ldr	r2, [pc, #400]	; (800520c <HAL_TIM_ConfigClockSource+0x1e4>)
 800507a:	4293      	cmp	r3, r2
 800507c:	f000 80a9 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005080:	4a62      	ldr	r2, [pc, #392]	; (800520c <HAL_TIM_ConfigClockSource+0x1e4>)
 8005082:	4293      	cmp	r3, r2
 8005084:	f200 80ae 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005088:	4a61      	ldr	r2, [pc, #388]	; (8005210 <HAL_TIM_ConfigClockSource+0x1e8>)
 800508a:	4293      	cmp	r3, r2
 800508c:	f000 80a1 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005090:	4a5f      	ldr	r2, [pc, #380]	; (8005210 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	f200 80a6 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005098:	4a5e      	ldr	r2, [pc, #376]	; (8005214 <HAL_TIM_ConfigClockSource+0x1ec>)
 800509a:	4293      	cmp	r3, r2
 800509c:	f000 8099 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80050a0:	4a5c      	ldr	r2, [pc, #368]	; (8005214 <HAL_TIM_ConfigClockSource+0x1ec>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	f200 809e 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80050a8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80050ac:	f000 8091 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80050b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80050b4:	f200 8096 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80050b8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050bc:	f000 8089 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x1aa>
 80050c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80050c4:	f200 808e 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80050c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050cc:	d03e      	beq.n	800514c <HAL_TIM_ConfigClockSource+0x124>
 80050ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050d2:	f200 8087 	bhi.w	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050da:	f000 8086 	beq.w	80051ea <HAL_TIM_ConfigClockSource+0x1c2>
 80050de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e2:	d87f      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80050e4:	2b70      	cmp	r3, #112	; 0x70
 80050e6:	d01a      	beq.n	800511e <HAL_TIM_ConfigClockSource+0xf6>
 80050e8:	2b70      	cmp	r3, #112	; 0x70
 80050ea:	d87b      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80050ec:	2b60      	cmp	r3, #96	; 0x60
 80050ee:	d050      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0x16a>
 80050f0:	2b60      	cmp	r3, #96	; 0x60
 80050f2:	d877      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80050f4:	2b50      	cmp	r3, #80	; 0x50
 80050f6:	d03c      	beq.n	8005172 <HAL_TIM_ConfigClockSource+0x14a>
 80050f8:	2b50      	cmp	r3, #80	; 0x50
 80050fa:	d873      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 80050fc:	2b40      	cmp	r3, #64	; 0x40
 80050fe:	d058      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x18a>
 8005100:	2b40      	cmp	r3, #64	; 0x40
 8005102:	d86f      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005104:	2b30      	cmp	r3, #48	; 0x30
 8005106:	d064      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005108:	2b30      	cmp	r3, #48	; 0x30
 800510a:	d86b      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 800510c:	2b20      	cmp	r3, #32
 800510e:	d060      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005110:	2b20      	cmp	r3, #32
 8005112:	d867      	bhi.n	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
 8005114:	2b00      	cmp	r3, #0
 8005116:	d05c      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x1aa>
 8005118:	2b10      	cmp	r3, #16
 800511a:	d05a      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x1aa>
 800511c:	e062      	b.n	80051e4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6818      	ldr	r0, [r3, #0]
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	6899      	ldr	r1, [r3, #8]
 8005126:	683b      	ldr	r3, [r7, #0]
 8005128:	685a      	ldr	r2, [r3, #4]
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	f000 f9b3 	bl	8005498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	689b      	ldr	r3, [r3, #8]
 8005138:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005140:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	609a      	str	r2, [r3, #8]
      break;
 800514a:	e04f      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6818      	ldr	r0, [r3, #0]
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	6899      	ldr	r1, [r3, #8]
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	685a      	ldr	r2, [r3, #4]
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f000 f99c 	bl	8005498 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689a      	ldr	r2, [r3, #8]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800516e:	609a      	str	r2, [r3, #8]
      break;
 8005170:	e03c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6818      	ldr	r0, [r3, #0]
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	6859      	ldr	r1, [r3, #4]
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	461a      	mov	r2, r3
 8005180:	f000 f90c 	bl	800539c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2150      	movs	r1, #80	; 0x50
 800518a:	4618      	mov	r0, r3
 800518c:	f000 f966 	bl	800545c <TIM_ITRx_SetConfig>
      break;
 8005190:	e02c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6859      	ldr	r1, [r3, #4]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	461a      	mov	r2, r3
 80051a0:	f000 f92b 	bl	80053fa <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2160      	movs	r1, #96	; 0x60
 80051aa:	4618      	mov	r0, r3
 80051ac:	f000 f956 	bl	800545c <TIM_ITRx_SetConfig>
      break;
 80051b0:	e01c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6859      	ldr	r1, [r3, #4]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
 80051be:	461a      	mov	r2, r3
 80051c0:	f000 f8ec 	bl	800539c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2140      	movs	r1, #64	; 0x40
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 f946 	bl	800545c <TIM_ITRx_SetConfig>
      break;
 80051d0:	e00c      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4619      	mov	r1, r3
 80051dc:	4610      	mov	r0, r2
 80051de:	f000 f93d 	bl	800545c <TIM_ITRx_SetConfig>
      break;
 80051e2:	e003      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	73fb      	strb	r3, [r7, #15]
      break;
 80051e8:	e000      	b.n	80051ec <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80051ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3710      	adds	r7, #16
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	ffceff88 	.word	0xffceff88
 800520c:	00100040 	.word	0x00100040
 8005210:	00100030 	.word	0x00100030
 8005214:	00100020 	.word	0x00100020

08005218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005234:	bf00      	nop
 8005236:	370c      	adds	r7, #12
 8005238:	46bd      	mov	sp, r7
 800523a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523e:	4770      	bx	lr

08005240 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	4a40      	ldr	r2, [pc, #256]	; (800537c <TIM_Base_SetConfig+0x114>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d013      	beq.n	80052a8 <TIM_Base_SetConfig+0x40>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005286:	d00f      	beq.n	80052a8 <TIM_Base_SetConfig+0x40>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	4a3d      	ldr	r2, [pc, #244]	; (8005380 <TIM_Base_SetConfig+0x118>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d00b      	beq.n	80052a8 <TIM_Base_SetConfig+0x40>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a3c      	ldr	r2, [pc, #240]	; (8005384 <TIM_Base_SetConfig+0x11c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d007      	beq.n	80052a8 <TIM_Base_SetConfig+0x40>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a3b      	ldr	r2, [pc, #236]	; (8005388 <TIM_Base_SetConfig+0x120>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d003      	beq.n	80052a8 <TIM_Base_SetConfig+0x40>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a3a      	ldr	r2, [pc, #232]	; (800538c <TIM_Base_SetConfig+0x124>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d108      	bne.n	80052ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	68fa      	ldr	r2, [r7, #12]
 80052b6:	4313      	orrs	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	4a2f      	ldr	r2, [pc, #188]	; (800537c <TIM_Base_SetConfig+0x114>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d01f      	beq.n	8005302 <TIM_Base_SetConfig+0x9a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052c8:	d01b      	beq.n	8005302 <TIM_Base_SetConfig+0x9a>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4a2c      	ldr	r2, [pc, #176]	; (8005380 <TIM_Base_SetConfig+0x118>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d017      	beq.n	8005302 <TIM_Base_SetConfig+0x9a>
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	4a2b      	ldr	r2, [pc, #172]	; (8005384 <TIM_Base_SetConfig+0x11c>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d013      	beq.n	8005302 <TIM_Base_SetConfig+0x9a>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	4a2a      	ldr	r2, [pc, #168]	; (8005388 <TIM_Base_SetConfig+0x120>)
 80052de:	4293      	cmp	r3, r2
 80052e0:	d00f      	beq.n	8005302 <TIM_Base_SetConfig+0x9a>
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a29      	ldr	r2, [pc, #164]	; (800538c <TIM_Base_SetConfig+0x124>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d00b      	beq.n	8005302 <TIM_Base_SetConfig+0x9a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	4a28      	ldr	r2, [pc, #160]	; (8005390 <TIM_Base_SetConfig+0x128>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d007      	beq.n	8005302 <TIM_Base_SetConfig+0x9a>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	4a27      	ldr	r2, [pc, #156]	; (8005394 <TIM_Base_SetConfig+0x12c>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d003      	beq.n	8005302 <TIM_Base_SetConfig+0x9a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	4a26      	ldr	r2, [pc, #152]	; (8005398 <TIM_Base_SetConfig+0x130>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d108      	bne.n	8005314 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005308:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	68db      	ldr	r3, [r3, #12]
 800530e:	68fa      	ldr	r2, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	695b      	ldr	r3, [r3, #20]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	68fa      	ldr	r2, [r7, #12]
 8005326:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	689a      	ldr	r2, [r3, #8]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005330:	683b      	ldr	r3, [r7, #0]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a10      	ldr	r2, [pc, #64]	; (800537c <TIM_Base_SetConfig+0x114>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d00f      	beq.n	8005360 <TIM_Base_SetConfig+0xf8>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a12      	ldr	r2, [pc, #72]	; (800538c <TIM_Base_SetConfig+0x124>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d00b      	beq.n	8005360 <TIM_Base_SetConfig+0xf8>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a11      	ldr	r2, [pc, #68]	; (8005390 <TIM_Base_SetConfig+0x128>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d007      	beq.n	8005360 <TIM_Base_SetConfig+0xf8>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	4a10      	ldr	r2, [pc, #64]	; (8005394 <TIM_Base_SetConfig+0x12c>)
 8005354:	4293      	cmp	r3, r2
 8005356:	d003      	beq.n	8005360 <TIM_Base_SetConfig+0xf8>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	4a0f      	ldr	r2, [pc, #60]	; (8005398 <TIM_Base_SetConfig+0x130>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d103      	bne.n	8005368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	691a      	ldr	r2, [r3, #16]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	615a      	str	r2, [r3, #20]
}
 800536e:	bf00      	nop
 8005370:	3714      	adds	r7, #20
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
 800537a:	bf00      	nop
 800537c:	40010000 	.word	0x40010000
 8005380:	40000400 	.word	0x40000400
 8005384:	40000800 	.word	0x40000800
 8005388:	40000c00 	.word	0x40000c00
 800538c:	40010400 	.word	0x40010400
 8005390:	40014000 	.word	0x40014000
 8005394:	40014400 	.word	0x40014400
 8005398:	40014800 	.word	0x40014800

0800539c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800539c:	b480      	push	{r7}
 800539e:	b087      	sub	sp, #28
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f023 0201 	bic.w	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	699b      	ldr	r3, [r3, #24]
 80053be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	4313      	orrs	r3, r2
 80053d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	f023 030a 	bic.w	r3, r3, #10
 80053d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80053da:	697a      	ldr	r2, [r7, #20]
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	697a      	ldr	r2, [r7, #20]
 80053ec:	621a      	str	r2, [r3, #32]
}
 80053ee:	bf00      	nop
 80053f0:	371c      	adds	r7, #28
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr

080053fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b087      	sub	sp, #28
 80053fe:	af00      	add	r7, sp, #0
 8005400:	60f8      	str	r0, [r7, #12]
 8005402:	60b9      	str	r1, [r7, #8]
 8005404:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	f023 0210 	bic.w	r2, r3, #16
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005424:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	031b      	lsls	r3, r3, #12
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	4313      	orrs	r3, r2
 800542e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005436:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	011b      	lsls	r3, r3, #4
 800543c:	693a      	ldr	r2, [r7, #16]
 800543e:	4313      	orrs	r3, r2
 8005440:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	621a      	str	r2, [r3, #32]
}
 800544e:	bf00      	nop
 8005450:	371c      	adds	r7, #28
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
	...

0800545c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800545c:	b480      	push	{r7}
 800545e:	b085      	sub	sp, #20
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	689b      	ldr	r3, [r3, #8]
 800546a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800546c:	68fa      	ldr	r2, [r7, #12]
 800546e:	4b09      	ldr	r3, [pc, #36]	; (8005494 <TIM_ITRx_SetConfig+0x38>)
 8005470:	4013      	ands	r3, r2
 8005472:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005474:	683a      	ldr	r2, [r7, #0]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4313      	orrs	r3, r2
 800547a:	f043 0307 	orr.w	r3, r3, #7
 800547e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	68fa      	ldr	r2, [r7, #12]
 8005484:	609a      	str	r2, [r3, #8]
}
 8005486:	bf00      	nop
 8005488:	3714      	adds	r7, #20
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr
 8005492:	bf00      	nop
 8005494:	ffcfff8f 	.word	0xffcfff8f

08005498 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005498:	b480      	push	{r7}
 800549a:	b087      	sub	sp, #28
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	021a      	lsls	r2, r3, #8
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	431a      	orrs	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	4313      	orrs	r3, r2
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	697a      	ldr	r2, [r7, #20]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	371c      	adds	r7, #28
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80054d8:	b480      	push	{r7}
 80054da:	b085      	sub	sp, #20
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054e8:	2b01      	cmp	r3, #1
 80054ea:	d101      	bne.n	80054f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80054ec:	2302      	movs	r3, #2
 80054ee:	e06d      	b.n	80055cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2201      	movs	r2, #1
 80054f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2202      	movs	r2, #2
 80054fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	685b      	ldr	r3, [r3, #4]
 8005506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a30      	ldr	r2, [pc, #192]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d004      	beq.n	8005524 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a2f      	ldr	r2, [pc, #188]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d108      	bne.n	8005536 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800552a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	68fa      	ldr	r2, [r7, #12]
 8005532:	4313      	orrs	r3, r2
 8005534:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800553c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68fa      	ldr	r2, [r7, #12]
 800554e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a20      	ldr	r2, [pc, #128]	; (80055d8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d022      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005562:	d01d      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a1d      	ldr	r2, [pc, #116]	; (80055e0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d018      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a1c      	ldr	r2, [pc, #112]	; (80055e4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d013      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00e      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a15      	ldr	r2, [pc, #84]	; (80055dc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d009      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	4a16      	ldr	r2, [pc, #88]	; (80055ec <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d004      	beq.n	80055a0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a15      	ldr	r2, [pc, #84]	; (80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800559c:	4293      	cmp	r3, r2
 800559e:	d10c      	bne.n	80055ba <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055a6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2201      	movs	r2, #1
 80055be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2200      	movs	r2, #0
 80055c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3714      	adds	r7, #20
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr
 80055d8:	40010000 	.word	0x40010000
 80055dc:	40010400 	.word	0x40010400
 80055e0:	40000400 	.word	0x40000400
 80055e4:	40000800 	.word	0x40000800
 80055e8:	40000c00 	.word	0x40000c00
 80055ec:	40001800 	.word	0x40001800
 80055f0:	40014000 	.word	0x40014000

080055f4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b083      	sub	sp, #12
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80055fc:	bf00      	nop
 80055fe:	370c      	adds	r7, #12
 8005600:	46bd      	mov	sp, r7
 8005602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005606:	4770      	bx	lr

08005608 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005624:	bf00      	nop
 8005626:	370c      	adds	r7, #12
 8005628:	46bd      	mov	sp, r7
 800562a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562e:	4770      	bx	lr

08005630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e042      	b.n	80056c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005648:	2b00      	cmp	r3, #0
 800564a:	d106      	bne.n	800565a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f003 f8a7 	bl	80087a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2224      	movs	r2, #36	; 0x24
 800565e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f022 0201 	bic.w	r2, r2, #1
 8005670:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005672:	6878      	ldr	r0, [r7, #4]
 8005674:	f000 f82c 	bl	80056d0 <UART_SetConfig>
 8005678:	4603      	mov	r3, r0
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e022      	b.n	80056c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005686:	2b00      	cmp	r3, #0
 8005688:	d002      	beq.n	8005690 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fd88 	bl	80061a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685a      	ldr	r2, [r3, #4]
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800569e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	689a      	ldr	r2, [r3, #8]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f042 0201 	orr.w	r2, r2, #1
 80056be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f000 fe0f 	bl	80062e4 <UART_CheckIdleState>
 80056c6:	4603      	mov	r3, r0
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056d4:	b092      	sub	sp, #72	; 0x48
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056da:	2300      	movs	r3, #0
 80056dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	689a      	ldr	r2, [r3, #8]
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	691b      	ldr	r3, [r3, #16]
 80056e8:	431a      	orrs	r2, r3
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	695b      	ldr	r3, [r3, #20]
 80056ee:	431a      	orrs	r2, r3
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	4313      	orrs	r3, r2
 80056f6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681a      	ldr	r2, [r3, #0]
 80056fe:	4bbe      	ldr	r3, [pc, #760]	; (80059f8 <UART_SetConfig+0x328>)
 8005700:	4013      	ands	r3, r2
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005708:	430b      	orrs	r3, r1
 800570a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	685b      	ldr	r3, [r3, #4]
 8005712:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	68da      	ldr	r2, [r3, #12]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	430a      	orrs	r2, r1
 8005720:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005722:	697b      	ldr	r3, [r7, #20]
 8005724:	699b      	ldr	r3, [r3, #24]
 8005726:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4ab3      	ldr	r2, [pc, #716]	; (80059fc <UART_SetConfig+0x32c>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d004      	beq.n	800573c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005732:	697b      	ldr	r3, [r7, #20]
 8005734:	6a1b      	ldr	r3, [r3, #32]
 8005736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005738:	4313      	orrs	r3, r2
 800573a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	689a      	ldr	r2, [r3, #8]
 8005742:	4baf      	ldr	r3, [pc, #700]	; (8005a00 <UART_SetConfig+0x330>)
 8005744:	4013      	ands	r3, r2
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	6812      	ldr	r2, [r2, #0]
 800574a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800574c:	430b      	orrs	r3, r1
 800574e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005756:	f023 010f 	bic.w	r1, r3, #15
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	430a      	orrs	r2, r1
 8005764:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4aa6      	ldr	r2, [pc, #664]	; (8005a04 <UART_SetConfig+0x334>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d177      	bne.n	8005860 <UART_SetConfig+0x190>
 8005770:	4ba5      	ldr	r3, [pc, #660]	; (8005a08 <UART_SetConfig+0x338>)
 8005772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005774:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005778:	2b28      	cmp	r3, #40	; 0x28
 800577a:	d86d      	bhi.n	8005858 <UART_SetConfig+0x188>
 800577c:	a201      	add	r2, pc, #4	; (adr r2, 8005784 <UART_SetConfig+0xb4>)
 800577e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005782:	bf00      	nop
 8005784:	08005829 	.word	0x08005829
 8005788:	08005859 	.word	0x08005859
 800578c:	08005859 	.word	0x08005859
 8005790:	08005859 	.word	0x08005859
 8005794:	08005859 	.word	0x08005859
 8005798:	08005859 	.word	0x08005859
 800579c:	08005859 	.word	0x08005859
 80057a0:	08005859 	.word	0x08005859
 80057a4:	08005831 	.word	0x08005831
 80057a8:	08005859 	.word	0x08005859
 80057ac:	08005859 	.word	0x08005859
 80057b0:	08005859 	.word	0x08005859
 80057b4:	08005859 	.word	0x08005859
 80057b8:	08005859 	.word	0x08005859
 80057bc:	08005859 	.word	0x08005859
 80057c0:	08005859 	.word	0x08005859
 80057c4:	08005839 	.word	0x08005839
 80057c8:	08005859 	.word	0x08005859
 80057cc:	08005859 	.word	0x08005859
 80057d0:	08005859 	.word	0x08005859
 80057d4:	08005859 	.word	0x08005859
 80057d8:	08005859 	.word	0x08005859
 80057dc:	08005859 	.word	0x08005859
 80057e0:	08005859 	.word	0x08005859
 80057e4:	08005841 	.word	0x08005841
 80057e8:	08005859 	.word	0x08005859
 80057ec:	08005859 	.word	0x08005859
 80057f0:	08005859 	.word	0x08005859
 80057f4:	08005859 	.word	0x08005859
 80057f8:	08005859 	.word	0x08005859
 80057fc:	08005859 	.word	0x08005859
 8005800:	08005859 	.word	0x08005859
 8005804:	08005849 	.word	0x08005849
 8005808:	08005859 	.word	0x08005859
 800580c:	08005859 	.word	0x08005859
 8005810:	08005859 	.word	0x08005859
 8005814:	08005859 	.word	0x08005859
 8005818:	08005859 	.word	0x08005859
 800581c:	08005859 	.word	0x08005859
 8005820:	08005859 	.word	0x08005859
 8005824:	08005851 	.word	0x08005851
 8005828:	2301      	movs	r3, #1
 800582a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800582e:	e222      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005830:	2304      	movs	r3, #4
 8005832:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005836:	e21e      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005838:	2308      	movs	r3, #8
 800583a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800583e:	e21a      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005840:	2310      	movs	r3, #16
 8005842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005846:	e216      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005848:	2320      	movs	r3, #32
 800584a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800584e:	e212      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005850:	2340      	movs	r3, #64	; 0x40
 8005852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005856:	e20e      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005858:	2380      	movs	r3, #128	; 0x80
 800585a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800585e:	e20a      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005860:	697b      	ldr	r3, [r7, #20]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a69      	ldr	r2, [pc, #420]	; (8005a0c <UART_SetConfig+0x33c>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d130      	bne.n	80058cc <UART_SetConfig+0x1fc>
 800586a:	4b67      	ldr	r3, [pc, #412]	; (8005a08 <UART_SetConfig+0x338>)
 800586c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800586e:	f003 0307 	and.w	r3, r3, #7
 8005872:	2b05      	cmp	r3, #5
 8005874:	d826      	bhi.n	80058c4 <UART_SetConfig+0x1f4>
 8005876:	a201      	add	r2, pc, #4	; (adr r2, 800587c <UART_SetConfig+0x1ac>)
 8005878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800587c:	08005895 	.word	0x08005895
 8005880:	0800589d 	.word	0x0800589d
 8005884:	080058a5 	.word	0x080058a5
 8005888:	080058ad 	.word	0x080058ad
 800588c:	080058b5 	.word	0x080058b5
 8005890:	080058bd 	.word	0x080058bd
 8005894:	2300      	movs	r3, #0
 8005896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800589a:	e1ec      	b.n	8005c76 <UART_SetConfig+0x5a6>
 800589c:	2304      	movs	r3, #4
 800589e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058a2:	e1e8      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80058a4:	2308      	movs	r3, #8
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058aa:	e1e4      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80058ac:	2310      	movs	r3, #16
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058b2:	e1e0      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80058b4:	2320      	movs	r3, #32
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ba:	e1dc      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80058bc:	2340      	movs	r3, #64	; 0x40
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058c2:	e1d8      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80058c4:	2380      	movs	r3, #128	; 0x80
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80058ca:	e1d4      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80058cc:	697b      	ldr	r3, [r7, #20]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	4a4f      	ldr	r2, [pc, #316]	; (8005a10 <UART_SetConfig+0x340>)
 80058d2:	4293      	cmp	r3, r2
 80058d4:	d130      	bne.n	8005938 <UART_SetConfig+0x268>
 80058d6:	4b4c      	ldr	r3, [pc, #304]	; (8005a08 <UART_SetConfig+0x338>)
 80058d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058da:	f003 0307 	and.w	r3, r3, #7
 80058de:	2b05      	cmp	r3, #5
 80058e0:	d826      	bhi.n	8005930 <UART_SetConfig+0x260>
 80058e2:	a201      	add	r2, pc, #4	; (adr r2, 80058e8 <UART_SetConfig+0x218>)
 80058e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058e8:	08005901 	.word	0x08005901
 80058ec:	08005909 	.word	0x08005909
 80058f0:	08005911 	.word	0x08005911
 80058f4:	08005919 	.word	0x08005919
 80058f8:	08005921 	.word	0x08005921
 80058fc:	08005929 	.word	0x08005929
 8005900:	2300      	movs	r3, #0
 8005902:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005906:	e1b6      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005908:	2304      	movs	r3, #4
 800590a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800590e:	e1b2      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005910:	2308      	movs	r3, #8
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005916:	e1ae      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005918:	2310      	movs	r3, #16
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800591e:	e1aa      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005920:	2320      	movs	r3, #32
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005926:	e1a6      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005928:	2340      	movs	r3, #64	; 0x40
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800592e:	e1a2      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005930:	2380      	movs	r3, #128	; 0x80
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005936:	e19e      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	4a35      	ldr	r2, [pc, #212]	; (8005a14 <UART_SetConfig+0x344>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d130      	bne.n	80059a4 <UART_SetConfig+0x2d4>
 8005942:	4b31      	ldr	r3, [pc, #196]	; (8005a08 <UART_SetConfig+0x338>)
 8005944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005946:	f003 0307 	and.w	r3, r3, #7
 800594a:	2b05      	cmp	r3, #5
 800594c:	d826      	bhi.n	800599c <UART_SetConfig+0x2cc>
 800594e:	a201      	add	r2, pc, #4	; (adr r2, 8005954 <UART_SetConfig+0x284>)
 8005950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005954:	0800596d 	.word	0x0800596d
 8005958:	08005975 	.word	0x08005975
 800595c:	0800597d 	.word	0x0800597d
 8005960:	08005985 	.word	0x08005985
 8005964:	0800598d 	.word	0x0800598d
 8005968:	08005995 	.word	0x08005995
 800596c:	2300      	movs	r3, #0
 800596e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005972:	e180      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005974:	2304      	movs	r3, #4
 8005976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800597a:	e17c      	b.n	8005c76 <UART_SetConfig+0x5a6>
 800597c:	2308      	movs	r3, #8
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005982:	e178      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005984:	2310      	movs	r3, #16
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800598a:	e174      	b.n	8005c76 <UART_SetConfig+0x5a6>
 800598c:	2320      	movs	r3, #32
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005992:	e170      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005994:	2340      	movs	r3, #64	; 0x40
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800599a:	e16c      	b.n	8005c76 <UART_SetConfig+0x5a6>
 800599c:	2380      	movs	r3, #128	; 0x80
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059a2:	e168      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a1b      	ldr	r2, [pc, #108]	; (8005a18 <UART_SetConfig+0x348>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d142      	bne.n	8005a34 <UART_SetConfig+0x364>
 80059ae:	4b16      	ldr	r3, [pc, #88]	; (8005a08 <UART_SetConfig+0x338>)
 80059b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	2b05      	cmp	r3, #5
 80059b8:	d838      	bhi.n	8005a2c <UART_SetConfig+0x35c>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <UART_SetConfig+0x2f0>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	080059d9 	.word	0x080059d9
 80059c4:	080059e1 	.word	0x080059e1
 80059c8:	080059e9 	.word	0x080059e9
 80059cc:	080059f1 	.word	0x080059f1
 80059d0:	08005a1d 	.word	0x08005a1d
 80059d4:	08005a25 	.word	0x08005a25
 80059d8:	2300      	movs	r3, #0
 80059da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059de:	e14a      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80059e0:	2304      	movs	r3, #4
 80059e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059e6:	e146      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80059e8:	2308      	movs	r3, #8
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059ee:	e142      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80059f0:	2310      	movs	r3, #16
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80059f6:	e13e      	b.n	8005c76 <UART_SetConfig+0x5a6>
 80059f8:	cfff69f3 	.word	0xcfff69f3
 80059fc:	58000c00 	.word	0x58000c00
 8005a00:	11fff4ff 	.word	0x11fff4ff
 8005a04:	40011000 	.word	0x40011000
 8005a08:	58024400 	.word	0x58024400
 8005a0c:	40004400 	.word	0x40004400
 8005a10:	40004800 	.word	0x40004800
 8005a14:	40004c00 	.word	0x40004c00
 8005a18:	40005000 	.word	0x40005000
 8005a1c:	2320      	movs	r3, #32
 8005a1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a22:	e128      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005a24:	2340      	movs	r3, #64	; 0x40
 8005a26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a2a:	e124      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005a2c:	2380      	movs	r3, #128	; 0x80
 8005a2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005a32:	e120      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4acb      	ldr	r2, [pc, #812]	; (8005d68 <UART_SetConfig+0x698>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d176      	bne.n	8005b2c <UART_SetConfig+0x45c>
 8005a3e:	4bcb      	ldr	r3, [pc, #812]	; (8005d6c <UART_SetConfig+0x69c>)
 8005a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a42:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a46:	2b28      	cmp	r3, #40	; 0x28
 8005a48:	d86c      	bhi.n	8005b24 <UART_SetConfig+0x454>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <UART_SetConfig+0x380>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005af5 	.word	0x08005af5
 8005a54:	08005b25 	.word	0x08005b25
 8005a58:	08005b25 	.word	0x08005b25
 8005a5c:	08005b25 	.word	0x08005b25
 8005a60:	08005b25 	.word	0x08005b25
 8005a64:	08005b25 	.word	0x08005b25
 8005a68:	08005b25 	.word	0x08005b25
 8005a6c:	08005b25 	.word	0x08005b25
 8005a70:	08005afd 	.word	0x08005afd
 8005a74:	08005b25 	.word	0x08005b25
 8005a78:	08005b25 	.word	0x08005b25
 8005a7c:	08005b25 	.word	0x08005b25
 8005a80:	08005b25 	.word	0x08005b25
 8005a84:	08005b25 	.word	0x08005b25
 8005a88:	08005b25 	.word	0x08005b25
 8005a8c:	08005b25 	.word	0x08005b25
 8005a90:	08005b05 	.word	0x08005b05
 8005a94:	08005b25 	.word	0x08005b25
 8005a98:	08005b25 	.word	0x08005b25
 8005a9c:	08005b25 	.word	0x08005b25
 8005aa0:	08005b25 	.word	0x08005b25
 8005aa4:	08005b25 	.word	0x08005b25
 8005aa8:	08005b25 	.word	0x08005b25
 8005aac:	08005b25 	.word	0x08005b25
 8005ab0:	08005b0d 	.word	0x08005b0d
 8005ab4:	08005b25 	.word	0x08005b25
 8005ab8:	08005b25 	.word	0x08005b25
 8005abc:	08005b25 	.word	0x08005b25
 8005ac0:	08005b25 	.word	0x08005b25
 8005ac4:	08005b25 	.word	0x08005b25
 8005ac8:	08005b25 	.word	0x08005b25
 8005acc:	08005b25 	.word	0x08005b25
 8005ad0:	08005b15 	.word	0x08005b15
 8005ad4:	08005b25 	.word	0x08005b25
 8005ad8:	08005b25 	.word	0x08005b25
 8005adc:	08005b25 	.word	0x08005b25
 8005ae0:	08005b25 	.word	0x08005b25
 8005ae4:	08005b25 	.word	0x08005b25
 8005ae8:	08005b25 	.word	0x08005b25
 8005aec:	08005b25 	.word	0x08005b25
 8005af0:	08005b1d 	.word	0x08005b1d
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005afa:	e0bc      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005afc:	2304      	movs	r3, #4
 8005afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b02:	e0b8      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b04:	2308      	movs	r3, #8
 8005b06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b0a:	e0b4      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b0c:	2310      	movs	r3, #16
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b12:	e0b0      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b14:	2320      	movs	r3, #32
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b1a:	e0ac      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b1c:	2340      	movs	r3, #64	; 0x40
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b22:	e0a8      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b24:	2380      	movs	r3, #128	; 0x80
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b2a:	e0a4      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a8f      	ldr	r2, [pc, #572]	; (8005d70 <UART_SetConfig+0x6a0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d130      	bne.n	8005b98 <UART_SetConfig+0x4c8>
 8005b36:	4b8d      	ldr	r3, [pc, #564]	; (8005d6c <UART_SetConfig+0x69c>)
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	f003 0307 	and.w	r3, r3, #7
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	d826      	bhi.n	8005b90 <UART_SetConfig+0x4c0>
 8005b42:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <UART_SetConfig+0x478>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b61 	.word	0x08005b61
 8005b4c:	08005b69 	.word	0x08005b69
 8005b50:	08005b71 	.word	0x08005b71
 8005b54:	08005b79 	.word	0x08005b79
 8005b58:	08005b81 	.word	0x08005b81
 8005b5c:	08005b89 	.word	0x08005b89
 8005b60:	2300      	movs	r3, #0
 8005b62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b66:	e086      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b6e:	e082      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b70:	2308      	movs	r3, #8
 8005b72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b76:	e07e      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b78:	2310      	movs	r3, #16
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7e:	e07a      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b80:	2320      	movs	r3, #32
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b86:	e076      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b88:	2340      	movs	r3, #64	; 0x40
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8e:	e072      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b90:	2380      	movs	r3, #128	; 0x80
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b96:	e06e      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a75      	ldr	r2, [pc, #468]	; (8005d74 <UART_SetConfig+0x6a4>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d130      	bne.n	8005c04 <UART_SetConfig+0x534>
 8005ba2:	4b72      	ldr	r3, [pc, #456]	; (8005d6c <UART_SetConfig+0x69c>)
 8005ba4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba6:	f003 0307 	and.w	r3, r3, #7
 8005baa:	2b05      	cmp	r3, #5
 8005bac:	d826      	bhi.n	8005bfc <UART_SetConfig+0x52c>
 8005bae:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <UART_SetConfig+0x4e4>)
 8005bb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb4:	08005bcd 	.word	0x08005bcd
 8005bb8:	08005bd5 	.word	0x08005bd5
 8005bbc:	08005bdd 	.word	0x08005bdd
 8005bc0:	08005be5 	.word	0x08005be5
 8005bc4:	08005bed 	.word	0x08005bed
 8005bc8:	08005bf5 	.word	0x08005bf5
 8005bcc:	2300      	movs	r3, #0
 8005bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd2:	e050      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005bd4:	2304      	movs	r3, #4
 8005bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bda:	e04c      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005bdc:	2308      	movs	r3, #8
 8005bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be2:	e048      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005be4:	2310      	movs	r3, #16
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bea:	e044      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005bec:	2320      	movs	r3, #32
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf2:	e040      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005bf4:	2340      	movs	r3, #64	; 0x40
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfa:	e03c      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005bfc:	2380      	movs	r3, #128	; 0x80
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c02:	e038      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a5b      	ldr	r2, [pc, #364]	; (8005d78 <UART_SetConfig+0x6a8>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d130      	bne.n	8005c70 <UART_SetConfig+0x5a0>
 8005c0e:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <UART_SetConfig+0x69c>)
 8005c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c12:	f003 0307 	and.w	r3, r3, #7
 8005c16:	2b05      	cmp	r3, #5
 8005c18:	d826      	bhi.n	8005c68 <UART_SetConfig+0x598>
 8005c1a:	a201      	add	r2, pc, #4	; (adr r2, 8005c20 <UART_SetConfig+0x550>)
 8005c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c20:	08005c39 	.word	0x08005c39
 8005c24:	08005c41 	.word	0x08005c41
 8005c28:	08005c49 	.word	0x08005c49
 8005c2c:	08005c51 	.word	0x08005c51
 8005c30:	08005c59 	.word	0x08005c59
 8005c34:	08005c61 	.word	0x08005c61
 8005c38:	2302      	movs	r3, #2
 8005c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3e:	e01a      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005c40:	2304      	movs	r3, #4
 8005c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c46:	e016      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005c48:	2308      	movs	r3, #8
 8005c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4e:	e012      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005c50:	2310      	movs	r3, #16
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c56:	e00e      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005c58:	2320      	movs	r3, #32
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5e:	e00a      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005c60:	2340      	movs	r3, #64	; 0x40
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c66:	e006      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005c68:	2380      	movs	r3, #128	; 0x80
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6e:	e002      	b.n	8005c76 <UART_SetConfig+0x5a6>
 8005c70:	2380      	movs	r3, #128	; 0x80
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a3f      	ldr	r2, [pc, #252]	; (8005d78 <UART_SetConfig+0x6a8>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	f040 80f8 	bne.w	8005e72 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005c82:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005c86:	2b20      	cmp	r3, #32
 8005c88:	dc46      	bgt.n	8005d18 <UART_SetConfig+0x648>
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	f2c0 8082 	blt.w	8005d94 <UART_SetConfig+0x6c4>
 8005c90:	3b02      	subs	r3, #2
 8005c92:	2b1e      	cmp	r3, #30
 8005c94:	d87e      	bhi.n	8005d94 <UART_SetConfig+0x6c4>
 8005c96:	a201      	add	r2, pc, #4	; (adr r2, 8005c9c <UART_SetConfig+0x5cc>)
 8005c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c9c:	08005d1f 	.word	0x08005d1f
 8005ca0:	08005d95 	.word	0x08005d95
 8005ca4:	08005d27 	.word	0x08005d27
 8005ca8:	08005d95 	.word	0x08005d95
 8005cac:	08005d95 	.word	0x08005d95
 8005cb0:	08005d95 	.word	0x08005d95
 8005cb4:	08005d37 	.word	0x08005d37
 8005cb8:	08005d95 	.word	0x08005d95
 8005cbc:	08005d95 	.word	0x08005d95
 8005cc0:	08005d95 	.word	0x08005d95
 8005cc4:	08005d95 	.word	0x08005d95
 8005cc8:	08005d95 	.word	0x08005d95
 8005ccc:	08005d95 	.word	0x08005d95
 8005cd0:	08005d95 	.word	0x08005d95
 8005cd4:	08005d47 	.word	0x08005d47
 8005cd8:	08005d95 	.word	0x08005d95
 8005cdc:	08005d95 	.word	0x08005d95
 8005ce0:	08005d95 	.word	0x08005d95
 8005ce4:	08005d95 	.word	0x08005d95
 8005ce8:	08005d95 	.word	0x08005d95
 8005cec:	08005d95 	.word	0x08005d95
 8005cf0:	08005d95 	.word	0x08005d95
 8005cf4:	08005d95 	.word	0x08005d95
 8005cf8:	08005d95 	.word	0x08005d95
 8005cfc:	08005d95 	.word	0x08005d95
 8005d00:	08005d95 	.word	0x08005d95
 8005d04:	08005d95 	.word	0x08005d95
 8005d08:	08005d95 	.word	0x08005d95
 8005d0c:	08005d95 	.word	0x08005d95
 8005d10:	08005d95 	.word	0x08005d95
 8005d14:	08005d87 	.word	0x08005d87
 8005d18:	2b40      	cmp	r3, #64	; 0x40
 8005d1a:	d037      	beq.n	8005d8c <UART_SetConfig+0x6bc>
 8005d1c:	e03a      	b.n	8005d94 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005d1e:	f7fe f9c3 	bl	80040a8 <HAL_RCCEx_GetD3PCLK1Freq>
 8005d22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005d24:	e03c      	b.n	8005da0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fe f9d2 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d34:	e034      	b.n	8005da0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d36:	f107 0318 	add.w	r3, r7, #24
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fe fb1e 	bl	800437c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d44:	e02c      	b.n	8005da0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d46:	4b09      	ldr	r3, [pc, #36]	; (8005d6c <UART_SetConfig+0x69c>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 0320 	and.w	r3, r3, #32
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d016      	beq.n	8005d80 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d52:	4b06      	ldr	r3, [pc, #24]	; (8005d6c <UART_SetConfig+0x69c>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	08db      	lsrs	r3, r3, #3
 8005d58:	f003 0303 	and.w	r3, r3, #3
 8005d5c:	4a07      	ldr	r2, [pc, #28]	; (8005d7c <UART_SetConfig+0x6ac>)
 8005d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8005d62:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d64:	e01c      	b.n	8005da0 <UART_SetConfig+0x6d0>
 8005d66:	bf00      	nop
 8005d68:	40011400 	.word	0x40011400
 8005d6c:	58024400 	.word	0x58024400
 8005d70:	40007800 	.word	0x40007800
 8005d74:	40007c00 	.word	0x40007c00
 8005d78:	58000c00 	.word	0x58000c00
 8005d7c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005d80:	4b9d      	ldr	r3, [pc, #628]	; (8005ff8 <UART_SetConfig+0x928>)
 8005d82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d84:	e00c      	b.n	8005da0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d86:	4b9d      	ldr	r3, [pc, #628]	; (8005ffc <UART_SetConfig+0x92c>)
 8005d88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d8a:	e009      	b.n	8005da0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d8c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d92:	e005      	b.n	8005da0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005d98:	2301      	movs	r3, #1
 8005d9a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005d9e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005da0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	f000 81de 	beq.w	8006164 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dac:	4a94      	ldr	r2, [pc, #592]	; (8006000 <UART_SetConfig+0x930>)
 8005dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005db2:	461a      	mov	r2, r3
 8005db4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8005dba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dbc:	697b      	ldr	r3, [r7, #20]
 8005dbe:	685a      	ldr	r2, [r3, #4]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	4413      	add	r3, r2
 8005dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d305      	bcc.n	8005dd8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005dcc:	697b      	ldr	r3, [r7, #20]
 8005dce:	685b      	ldr	r3, [r3, #4]
 8005dd0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005dd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d903      	bls.n	8005de0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005dde:	e1c1      	b.n	8006164 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005de0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005de2:	2200      	movs	r2, #0
 8005de4:	60bb      	str	r3, [r7, #8]
 8005de6:	60fa      	str	r2, [r7, #12]
 8005de8:	697b      	ldr	r3, [r7, #20]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dec:	4a84      	ldr	r2, [pc, #528]	; (8006000 <UART_SetConfig+0x930>)
 8005dee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	2200      	movs	r2, #0
 8005df6:	603b      	str	r3, [r7, #0]
 8005df8:	607a      	str	r2, [r7, #4]
 8005dfa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005dfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005e02:	f7fa fb77 	bl	80004f4 <__aeabi_uldivmod>
 8005e06:	4602      	mov	r2, r0
 8005e08:	460b      	mov	r3, r1
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	4619      	mov	r1, r3
 8005e0e:	f04f 0200 	mov.w	r2, #0
 8005e12:	f04f 0300 	mov.w	r3, #0
 8005e16:	020b      	lsls	r3, r1, #8
 8005e18:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005e1c:	0202      	lsls	r2, r0, #8
 8005e1e:	6979      	ldr	r1, [r7, #20]
 8005e20:	6849      	ldr	r1, [r1, #4]
 8005e22:	0849      	lsrs	r1, r1, #1
 8005e24:	2000      	movs	r0, #0
 8005e26:	460c      	mov	r4, r1
 8005e28:	4605      	mov	r5, r0
 8005e2a:	eb12 0804 	adds.w	r8, r2, r4
 8005e2e:	eb43 0905 	adc.w	r9, r3, r5
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	2200      	movs	r2, #0
 8005e38:	469a      	mov	sl, r3
 8005e3a:	4693      	mov	fp, r2
 8005e3c:	4652      	mov	r2, sl
 8005e3e:	465b      	mov	r3, fp
 8005e40:	4640      	mov	r0, r8
 8005e42:	4649      	mov	r1, r9
 8005e44:	f7fa fb56 	bl	80004f4 <__aeabi_uldivmod>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4613      	mov	r3, r2
 8005e4e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e56:	d308      	bcc.n	8005e6a <UART_SetConfig+0x79a>
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e5e:	d204      	bcs.n	8005e6a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005e66:	60da      	str	r2, [r3, #12]
 8005e68:	e17c      	b.n	8006164 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005e70:	e178      	b.n	8006164 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e7a:	f040 80c5 	bne.w	8006008 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005e7e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005e82:	2b20      	cmp	r3, #32
 8005e84:	dc48      	bgt.n	8005f18 <UART_SetConfig+0x848>
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	db7b      	blt.n	8005f82 <UART_SetConfig+0x8b2>
 8005e8a:	2b20      	cmp	r3, #32
 8005e8c:	d879      	bhi.n	8005f82 <UART_SetConfig+0x8b2>
 8005e8e:	a201      	add	r2, pc, #4	; (adr r2, 8005e94 <UART_SetConfig+0x7c4>)
 8005e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e94:	08005f1f 	.word	0x08005f1f
 8005e98:	08005f27 	.word	0x08005f27
 8005e9c:	08005f83 	.word	0x08005f83
 8005ea0:	08005f83 	.word	0x08005f83
 8005ea4:	08005f2f 	.word	0x08005f2f
 8005ea8:	08005f83 	.word	0x08005f83
 8005eac:	08005f83 	.word	0x08005f83
 8005eb0:	08005f83 	.word	0x08005f83
 8005eb4:	08005f3f 	.word	0x08005f3f
 8005eb8:	08005f83 	.word	0x08005f83
 8005ebc:	08005f83 	.word	0x08005f83
 8005ec0:	08005f83 	.word	0x08005f83
 8005ec4:	08005f83 	.word	0x08005f83
 8005ec8:	08005f83 	.word	0x08005f83
 8005ecc:	08005f83 	.word	0x08005f83
 8005ed0:	08005f83 	.word	0x08005f83
 8005ed4:	08005f4f 	.word	0x08005f4f
 8005ed8:	08005f83 	.word	0x08005f83
 8005edc:	08005f83 	.word	0x08005f83
 8005ee0:	08005f83 	.word	0x08005f83
 8005ee4:	08005f83 	.word	0x08005f83
 8005ee8:	08005f83 	.word	0x08005f83
 8005eec:	08005f83 	.word	0x08005f83
 8005ef0:	08005f83 	.word	0x08005f83
 8005ef4:	08005f83 	.word	0x08005f83
 8005ef8:	08005f83 	.word	0x08005f83
 8005efc:	08005f83 	.word	0x08005f83
 8005f00:	08005f83 	.word	0x08005f83
 8005f04:	08005f83 	.word	0x08005f83
 8005f08:	08005f83 	.word	0x08005f83
 8005f0c:	08005f83 	.word	0x08005f83
 8005f10:	08005f83 	.word	0x08005f83
 8005f14:	08005f75 	.word	0x08005f75
 8005f18:	2b40      	cmp	r3, #64	; 0x40
 8005f1a:	d02e      	beq.n	8005f7a <UART_SetConfig+0x8aa>
 8005f1c:	e031      	b.n	8005f82 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f1e:	f7fc fe8d 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 8005f22:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f24:	e033      	b.n	8005f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f26:	f7fc fe9f 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 8005f2a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f2c:	e02f      	b.n	8005f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7fe f8ce 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005f38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f3c:	e027      	b.n	8005f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005f3e:	f107 0318 	add.w	r3, r7, #24
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7fe fa1a 	bl	800437c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f4c:	e01f      	b.n	8005f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f4e:	4b2d      	ldr	r3, [pc, #180]	; (8006004 <UART_SetConfig+0x934>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f003 0320 	and.w	r3, r3, #32
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d009      	beq.n	8005f6e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005f5a:	4b2a      	ldr	r3, [pc, #168]	; (8006004 <UART_SetConfig+0x934>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	08db      	lsrs	r3, r3, #3
 8005f60:	f003 0303 	and.w	r3, r3, #3
 8005f64:	4a24      	ldr	r2, [pc, #144]	; (8005ff8 <UART_SetConfig+0x928>)
 8005f66:	fa22 f303 	lsr.w	r3, r2, r3
 8005f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005f6c:	e00f      	b.n	8005f8e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005f6e:	4b22      	ldr	r3, [pc, #136]	; (8005ff8 <UART_SetConfig+0x928>)
 8005f70:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f72:	e00c      	b.n	8005f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005f74:	4b21      	ldr	r3, [pc, #132]	; (8005ffc <UART_SetConfig+0x92c>)
 8005f76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f78:	e009      	b.n	8005f8e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f80:	e005      	b.n	8005f8e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005f82:	2300      	movs	r3, #0
 8005f84:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005f86:	2301      	movs	r3, #1
 8005f88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005f8c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f000 80e7 	beq.w	8006164 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	4a19      	ldr	r2, [pc, #100]	; (8006000 <UART_SetConfig+0x930>)
 8005f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fa8:	005a      	lsls	r2, r3, #1
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	085b      	lsrs	r3, r3, #1
 8005fb0:	441a      	add	r2, r3
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005fbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fbe:	2b0f      	cmp	r3, #15
 8005fc0:	d916      	bls.n	8005ff0 <UART_SetConfig+0x920>
 8005fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005fc8:	d212      	bcs.n	8005ff0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	f023 030f 	bic.w	r3, r3, #15
 8005fd2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fd6:	085b      	lsrs	r3, r3, #1
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f003 0307 	and.w	r3, r3, #7
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8005fec:	60da      	str	r2, [r3, #12]
 8005fee:	e0b9      	b.n	8006164 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005ff6:	e0b5      	b.n	8006164 <UART_SetConfig+0xa94>
 8005ff8:	03d09000 	.word	0x03d09000
 8005ffc:	003d0900 	.word	0x003d0900
 8006000:	0800971c 	.word	0x0800971c
 8006004:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006008:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800600c:	2b20      	cmp	r3, #32
 800600e:	dc49      	bgt.n	80060a4 <UART_SetConfig+0x9d4>
 8006010:	2b00      	cmp	r3, #0
 8006012:	db7c      	blt.n	800610e <UART_SetConfig+0xa3e>
 8006014:	2b20      	cmp	r3, #32
 8006016:	d87a      	bhi.n	800610e <UART_SetConfig+0xa3e>
 8006018:	a201      	add	r2, pc, #4	; (adr r2, 8006020 <UART_SetConfig+0x950>)
 800601a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601e:	bf00      	nop
 8006020:	080060ab 	.word	0x080060ab
 8006024:	080060b3 	.word	0x080060b3
 8006028:	0800610f 	.word	0x0800610f
 800602c:	0800610f 	.word	0x0800610f
 8006030:	080060bb 	.word	0x080060bb
 8006034:	0800610f 	.word	0x0800610f
 8006038:	0800610f 	.word	0x0800610f
 800603c:	0800610f 	.word	0x0800610f
 8006040:	080060cb 	.word	0x080060cb
 8006044:	0800610f 	.word	0x0800610f
 8006048:	0800610f 	.word	0x0800610f
 800604c:	0800610f 	.word	0x0800610f
 8006050:	0800610f 	.word	0x0800610f
 8006054:	0800610f 	.word	0x0800610f
 8006058:	0800610f 	.word	0x0800610f
 800605c:	0800610f 	.word	0x0800610f
 8006060:	080060db 	.word	0x080060db
 8006064:	0800610f 	.word	0x0800610f
 8006068:	0800610f 	.word	0x0800610f
 800606c:	0800610f 	.word	0x0800610f
 8006070:	0800610f 	.word	0x0800610f
 8006074:	0800610f 	.word	0x0800610f
 8006078:	0800610f 	.word	0x0800610f
 800607c:	0800610f 	.word	0x0800610f
 8006080:	0800610f 	.word	0x0800610f
 8006084:	0800610f 	.word	0x0800610f
 8006088:	0800610f 	.word	0x0800610f
 800608c:	0800610f 	.word	0x0800610f
 8006090:	0800610f 	.word	0x0800610f
 8006094:	0800610f 	.word	0x0800610f
 8006098:	0800610f 	.word	0x0800610f
 800609c:	0800610f 	.word	0x0800610f
 80060a0:	08006101 	.word	0x08006101
 80060a4:	2b40      	cmp	r3, #64	; 0x40
 80060a6:	d02e      	beq.n	8006106 <UART_SetConfig+0xa36>
 80060a8:	e031      	b.n	800610e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060aa:	f7fc fdc7 	bl	8002c3c <HAL_RCC_GetPCLK1Freq>
 80060ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060b0:	e033      	b.n	800611a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060b2:	f7fc fdd9 	bl	8002c68 <HAL_RCC_GetPCLK2Freq>
 80060b6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80060b8:	e02f      	b.n	800611a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fe f808 	bl	80040d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060c8:	e027      	b.n	800611a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ca:	f107 0318 	add.w	r3, r7, #24
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe f954 	bl	800437c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060d8:	e01f      	b.n	800611a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060da:	4b2d      	ldr	r3, [pc, #180]	; (8006190 <UART_SetConfig+0xac0>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	f003 0320 	and.w	r3, r3, #32
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d009      	beq.n	80060fa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060e6:	4b2a      	ldr	r3, [pc, #168]	; (8006190 <UART_SetConfig+0xac0>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	08db      	lsrs	r3, r3, #3
 80060ec:	f003 0303 	and.w	r3, r3, #3
 80060f0:	4a28      	ldr	r2, [pc, #160]	; (8006194 <UART_SetConfig+0xac4>)
 80060f2:	fa22 f303 	lsr.w	r3, r2, r3
 80060f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060f8:	e00f      	b.n	800611a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80060fa:	4b26      	ldr	r3, [pc, #152]	; (8006194 <UART_SetConfig+0xac4>)
 80060fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060fe:	e00c      	b.n	800611a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006100:	4b25      	ldr	r3, [pc, #148]	; (8006198 <UART_SetConfig+0xac8>)
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006104:	e009      	b.n	800611a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006106:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800610a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800610c:	e005      	b.n	800611a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800610e:	2300      	movs	r3, #0
 8006110:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006112:	2301      	movs	r3, #1
 8006114:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006118:	bf00      	nop
    }

    if (pclk != 0U)
 800611a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611c:	2b00      	cmp	r3, #0
 800611e:	d021      	beq.n	8006164 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	4a1d      	ldr	r2, [pc, #116]	; (800619c <UART_SetConfig+0xacc>)
 8006126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800612a:	461a      	mov	r2, r3
 800612c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006132:	697b      	ldr	r3, [r7, #20]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	085b      	lsrs	r3, r3, #1
 8006138:	441a      	add	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006142:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006146:	2b0f      	cmp	r3, #15
 8006148:	d909      	bls.n	800615e <UART_SetConfig+0xa8e>
 800614a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800614c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006150:	d205      	bcs.n	800615e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006154:	b29a      	uxth	r2, r3
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60da      	str	r2, [r3, #12]
 800615c:	e002      	b.n	8006164 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800615e:	2301      	movs	r3, #1
 8006160:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	2201      	movs	r2, #1
 8006168:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	2201      	movs	r2, #1
 8006170:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2200      	movs	r2, #0
 8006178:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2200      	movs	r2, #0
 800617e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006180:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8006184:	4618      	mov	r0, r3
 8006186:	3748      	adds	r7, #72	; 0x48
 8006188:	46bd      	mov	sp, r7
 800618a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800618e:	bf00      	nop
 8006190:	58024400 	.word	0x58024400
 8006194:	03d09000 	.word	0x03d09000
 8006198:	003d0900 	.word	0x003d0900
 800619c:	0800971c 	.word	0x0800971c

080061a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	f003 0301 	and.w	r3, r3, #1
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00a      	beq.n	80061ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	430a      	orrs	r2, r1
 80061c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ce:	f003 0302 	and.w	r3, r3, #2
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00a      	beq.n	80061ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	430a      	orrs	r2, r1
 80061ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00a      	beq.n	800620e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	430a      	orrs	r2, r1
 800620c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006212:	f003 0308 	and.w	r3, r3, #8
 8006216:	2b00      	cmp	r3, #0
 8006218:	d00a      	beq.n	8006230 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	430a      	orrs	r2, r1
 800622e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006234:	f003 0310 	and.w	r3, r3, #16
 8006238:	2b00      	cmp	r3, #0
 800623a:	d00a      	beq.n	8006252 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	689b      	ldr	r3, [r3, #8]
 8006242:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	430a      	orrs	r2, r1
 8006250:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d00a      	beq.n	8006274 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	689b      	ldr	r3, [r3, #8]
 8006264:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006278:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800627c:	2b00      	cmp	r3, #0
 800627e:	d01a      	beq.n	80062b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	685b      	ldr	r3, [r3, #4]
 8006286:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	430a      	orrs	r2, r1
 8006294:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800629a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800629e:	d10a      	bne.n	80062b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	685b      	ldr	r3, [r3, #4]
 80062a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	430a      	orrs	r2, r1
 80062b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d00a      	beq.n	80062d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	685b      	ldr	r3, [r3, #4]
 80062c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	430a      	orrs	r2, r1
 80062d6:	605a      	str	r2, [r3, #4]
  }
}
 80062d8:	bf00      	nop
 80062da:	370c      	adds	r7, #12
 80062dc:	46bd      	mov	sp, r7
 80062de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e2:	4770      	bx	lr

080062e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b098      	sub	sp, #96	; 0x60
 80062e8:	af02      	add	r7, sp, #8
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062f4:	f7fa fb06 	bl	8000904 <HAL_GetTick>
 80062f8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f003 0308 	and.w	r3, r3, #8
 8006304:	2b08      	cmp	r3, #8
 8006306:	d12f      	bne.n	8006368 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006308:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006310:	2200      	movs	r2, #0
 8006312:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 f88e 	bl	8006438 <UART_WaitOnFlagUntilTimeout>
 800631c:	4603      	mov	r3, r0
 800631e:	2b00      	cmp	r3, #0
 8006320:	d022      	beq.n	8006368 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800632a:	e853 3f00 	ldrex	r3, [r3]
 800632e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006330:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006336:	653b      	str	r3, [r7, #80]	; 0x50
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006340:	647b      	str	r3, [r7, #68]	; 0x44
 8006342:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006344:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006346:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006348:	e841 2300 	strex	r3, r2, [r1]
 800634c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800634e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006350:	2b00      	cmp	r3, #0
 8006352:	d1e6      	bne.n	8006322 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2220      	movs	r2, #32
 8006358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006364:	2303      	movs	r3, #3
 8006366:	e063      	b.n	8006430 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	f003 0304 	and.w	r3, r3, #4
 8006372:	2b04      	cmp	r3, #4
 8006374:	d149      	bne.n	800640a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006376:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800637a:	9300      	str	r3, [sp, #0]
 800637c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800637e:	2200      	movs	r2, #0
 8006380:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f857 	bl	8006438 <UART_WaitOnFlagUntilTimeout>
 800638a:	4603      	mov	r3, r0
 800638c:	2b00      	cmp	r3, #0
 800638e:	d03c      	beq.n	800640a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	623b      	str	r3, [r7, #32]
   return(result);
 800639e:	6a3b      	ldr	r3, [r7, #32]
 80063a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80063a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	461a      	mov	r2, r3
 80063ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063ae:	633b      	str	r3, [r7, #48]	; 0x30
 80063b0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e6      	bne.n	8006390 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	3308      	adds	r3, #8
 80063c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	e853 3f00 	ldrex	r3, [r3]
 80063d0:	60fb      	str	r3, [r7, #12]
   return(result);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f023 0301 	bic.w	r3, r3, #1
 80063d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3308      	adds	r3, #8
 80063e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063e2:	61fa      	str	r2, [r7, #28]
 80063e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e6:	69b9      	ldr	r1, [r7, #24]
 80063e8:	69fa      	ldr	r2, [r7, #28]
 80063ea:	e841 2300 	strex	r3, r2, [r1]
 80063ee:	617b      	str	r3, [r7, #20]
   return(result);
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1e5      	bne.n	80063c2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2220      	movs	r2, #32
 80063fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006406:	2303      	movs	r3, #3
 8006408:	e012      	b.n	8006430 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2220      	movs	r2, #32
 800640e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2220      	movs	r2, #32
 8006416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800642e:	2300      	movs	r3, #0
}
 8006430:	4618      	mov	r0, r3
 8006432:	3758      	adds	r7, #88	; 0x58
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}

08006438 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b084      	sub	sp, #16
 800643c:	af00      	add	r7, sp, #0
 800643e:	60f8      	str	r0, [r7, #12]
 8006440:	60b9      	str	r1, [r7, #8]
 8006442:	603b      	str	r3, [r7, #0]
 8006444:	4613      	mov	r3, r2
 8006446:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006448:	e049      	b.n	80064de <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006450:	d045      	beq.n	80064de <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006452:	f7fa fa57 	bl	8000904 <HAL_GetTick>
 8006456:	4602      	mov	r2, r0
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	1ad3      	subs	r3, r2, r3
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	429a      	cmp	r2, r3
 8006460:	d302      	bcc.n	8006468 <UART_WaitOnFlagUntilTimeout+0x30>
 8006462:	69bb      	ldr	r3, [r7, #24]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d101      	bne.n	800646c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006468:	2303      	movs	r3, #3
 800646a:	e048      	b.n	80064fe <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0304 	and.w	r3, r3, #4
 8006476:	2b00      	cmp	r3, #0
 8006478:	d031      	beq.n	80064de <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	69db      	ldr	r3, [r3, #28]
 8006480:	f003 0308 	and.w	r3, r3, #8
 8006484:	2b08      	cmp	r3, #8
 8006486:	d110      	bne.n	80064aa <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2208      	movs	r2, #8
 800648e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f839 	bl	8006508 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	2208      	movs	r2, #8
 800649a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	2200      	movs	r2, #0
 80064a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80064a6:	2301      	movs	r3, #1
 80064a8:	e029      	b.n	80064fe <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	69db      	ldr	r3, [r3, #28]
 80064b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064b8:	d111      	bne.n	80064de <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80064c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064c4:	68f8      	ldr	r0, [r7, #12]
 80064c6:	f000 f81f 	bl	8006508 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2220      	movs	r2, #32
 80064ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e00f      	b.n	80064fe <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	4013      	ands	r3, r2
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	429a      	cmp	r2, r3
 80064ec:	bf0c      	ite	eq
 80064ee:	2301      	moveq	r3, #1
 80064f0:	2300      	movne	r3, #0
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	461a      	mov	r2, r3
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	429a      	cmp	r2, r3
 80064fa:	d0a6      	beq.n	800644a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	3710      	adds	r7, #16
 8006502:	46bd      	mov	sp, r7
 8006504:	bd80      	pop	{r7, pc}
	...

08006508 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006508:	b480      	push	{r7}
 800650a:	b095      	sub	sp, #84	; 0x54
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006518:	e853 3f00 	ldrex	r3, [r3]
 800651c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800651e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006524:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	461a      	mov	r2, r3
 800652c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800652e:	643b      	str	r3, [r7, #64]	; 0x40
 8006530:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006532:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006536:	e841 2300 	strex	r3, r2, [r1]
 800653a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800653c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800653e:	2b00      	cmp	r3, #0
 8006540:	d1e6      	bne.n	8006510 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3308      	adds	r3, #8
 8006548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	e853 3f00 	ldrex	r3, [r3]
 8006550:	61fb      	str	r3, [r7, #28]
   return(result);
 8006552:	69fa      	ldr	r2, [r7, #28]
 8006554:	4b1e      	ldr	r3, [pc, #120]	; (80065d0 <UART_EndRxTransfer+0xc8>)
 8006556:	4013      	ands	r3, r2
 8006558:	64bb      	str	r3, [r7, #72]	; 0x48
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3308      	adds	r3, #8
 8006560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006564:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800656a:	e841 2300 	strex	r3, r2, [r1]
 800656e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1e5      	bne.n	8006542 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d118      	bne.n	80065b0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	e853 3f00 	ldrex	r3, [r3]
 800658a:	60bb      	str	r3, [r7, #8]
   return(result);
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	f023 0310 	bic.w	r3, r3, #16
 8006592:	647b      	str	r3, [r7, #68]	; 0x44
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	461a      	mov	r2, r3
 800659a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800659c:	61bb      	str	r3, [r7, #24]
 800659e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6979      	ldr	r1, [r7, #20]
 80065a2:	69ba      	ldr	r2, [r7, #24]
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	613b      	str	r3, [r7, #16]
   return(result);
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e6      	bne.n	800657e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2220      	movs	r2, #32
 80065b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2200      	movs	r2, #0
 80065bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	675a      	str	r2, [r3, #116]	; 0x74
}
 80065c4:	bf00      	nop
 80065c6:	3754      	adds	r7, #84	; 0x54
 80065c8:	46bd      	mov	sp, r7
 80065ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ce:	4770      	bx	lr
 80065d0:	effffffe 	.word	0xeffffffe

080065d4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b085      	sub	sp, #20
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80065e2:	2b01      	cmp	r3, #1
 80065e4:	d101      	bne.n	80065ea <HAL_UARTEx_DisableFifoMode+0x16>
 80065e6:	2302      	movs	r3, #2
 80065e8:	e027      	b.n	800663a <HAL_UARTEx_DisableFifoMode+0x66>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2224      	movs	r2, #36	; 0x24
 80065f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	f022 0201 	bic.w	r2, r2, #1
 8006610:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006618:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	68fa      	ldr	r2, [r7, #12]
 8006626:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2220      	movs	r2, #32
 800662c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3714      	adds	r7, #20
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr

08006646 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006646:	b580      	push	{r7, lr}
 8006648:	b084      	sub	sp, #16
 800664a:	af00      	add	r7, sp, #0
 800664c:	6078      	str	r0, [r7, #4]
 800664e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006656:	2b01      	cmp	r3, #1
 8006658:	d101      	bne.n	800665e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800665a:	2302      	movs	r3, #2
 800665c:	e02d      	b.n	80066ba <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2224      	movs	r2, #36	; 0x24
 800666a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0201 	bic.w	r2, r2, #1
 8006684:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	683a      	ldr	r2, [r7, #0]
 8006696:	430a      	orrs	r2, r1
 8006698:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800669a:	6878      	ldr	r0, [r7, #4]
 800669c:	f000 f850 	bl	8006740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68fa      	ldr	r2, [r7, #12]
 80066a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2220      	movs	r2, #32
 80066ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066b8:	2300      	movs	r3, #0
}
 80066ba:	4618      	mov	r0, r3
 80066bc:	3710      	adds	r7, #16
 80066be:	46bd      	mov	sp, r7
 80066c0:	bd80      	pop	{r7, pc}

080066c2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b084      	sub	sp, #16
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d101      	bne.n	80066da <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80066d6:	2302      	movs	r3, #2
 80066d8:	e02d      	b.n	8006736 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2201      	movs	r2, #1
 80066de:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	2224      	movs	r2, #36	; 0x24
 80066e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	681a      	ldr	r2, [r3, #0]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f022 0201 	bic.w	r2, r2, #1
 8006700:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	683a      	ldr	r2, [r7, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f812 	bl	8006740 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68fa      	ldr	r2, [r7, #12]
 8006722:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2220      	movs	r2, #32
 8006728:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}
	...

08006740 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006740:	b480      	push	{r7}
 8006742:	b085      	sub	sp, #20
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674c:	2b00      	cmp	r3, #0
 800674e:	d108      	bne.n	8006762 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006760:	e031      	b.n	80067c6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006762:	2310      	movs	r3, #16
 8006764:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006766:	2310      	movs	r3, #16
 8006768:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	0e5b      	lsrs	r3, r3, #25
 8006772:	b2db      	uxtb	r3, r3
 8006774:	f003 0307 	and.w	r3, r3, #7
 8006778:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	689b      	ldr	r3, [r3, #8]
 8006780:	0f5b      	lsrs	r3, r3, #29
 8006782:	b2db      	uxtb	r3, r3
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	7b3a      	ldrb	r2, [r7, #12]
 800678e:	4911      	ldr	r1, [pc, #68]	; (80067d4 <UARTEx_SetNbDataToProcess+0x94>)
 8006790:	5c8a      	ldrb	r2, [r1, r2]
 8006792:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006796:	7b3a      	ldrb	r2, [r7, #12]
 8006798:	490f      	ldr	r1, [pc, #60]	; (80067d8 <UARTEx_SetNbDataToProcess+0x98>)
 800679a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800679c:	fb93 f3f2 	sdiv	r3, r3, r2
 80067a0:	b29a      	uxth	r2, r3
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067a8:	7bfb      	ldrb	r3, [r7, #15]
 80067aa:	7b7a      	ldrb	r2, [r7, #13]
 80067ac:	4909      	ldr	r1, [pc, #36]	; (80067d4 <UARTEx_SetNbDataToProcess+0x94>)
 80067ae:	5c8a      	ldrb	r2, [r1, r2]
 80067b0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80067b4:	7b7a      	ldrb	r2, [r7, #13]
 80067b6:	4908      	ldr	r1, [pc, #32]	; (80067d8 <UARTEx_SetNbDataToProcess+0x98>)
 80067b8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80067ba:	fb93 f3f2 	sdiv	r3, r3, r2
 80067be:	b29a      	uxth	r2, r3
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80067c6:	bf00      	nop
 80067c8:	3714      	adds	r7, #20
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr
 80067d2:	bf00      	nop
 80067d4:	08009734 	.word	0x08009734
 80067d8:	0800973c 	.word	0x0800973c

080067dc <delay_us>:
static void MX_TIM5_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

void delay_us(uint16_t us)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4603      	mov	r3, r0
 80067e4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0); 
 80067e6:	4b09      	ldr	r3, [pc, #36]	; (800680c <delay_us+0x30>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2200      	movs	r2, #0
 80067ec:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us) ;
 80067ee:	bf00      	nop
 80067f0:	4b06      	ldr	r3, [pc, #24]	; (800680c <delay_us+0x30>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d3f9      	bcc.n	80067f0 <delay_us+0x14>
}
 80067fc:	bf00      	nop
 80067fe:	bf00      	nop
 8006800:	370c      	adds	r7, #12
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	24000364 	.word	0x24000364

08006810 <unpack_reply>:

void unpack_reply(FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *data)
{
 8006810:	b480      	push	{r7}
 8006812:	b08b      	sub	sp, #44	; 0x2c
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
 8006818:	6039      	str	r1, [r7, #0]
	//TODO 
	if (pRxHeader->DataLength == FDCAN_DLC_BYTES_8)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8006822:	f040 8383 	bne.w	8006f2c <unpack_reply+0x71c>
	{
		int id = pRxHeader->Identifier - 0x140;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800682e:	60fb      	str	r3, [r7, #12]
		if (id > 0 && id < 7)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2b00      	cmp	r3, #0
 8006834:	f340 837a 	ble.w	8006f2c <unpack_reply+0x71c>
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2b06      	cmp	r3, #6
 800683c:	f300 8376 	bgt.w	8006f2c <unpack_reply+0x71c>
		{
			if (id > 0 && id < 5)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	2b00      	cmp	r3, #0
 8006844:	dd20      	ble.n	8006888 <unpack_reply+0x78>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	2b04      	cmp	r3, #4
 800684a:	dc1d      	bgt.n	8006888 <unpack_reply+0x78>
			{
				if (data[0] == 0xae)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	2bae      	cmp	r3, #174	; 0xae
 8006852:	d12e      	bne.n	80068b2 <unpack_reply+0xa2>
				{
					for (size_t i = 0; i < 6; i++)
 8006854:	2300      	movs	r3, #0
 8006856:	627b      	str	r3, [r7, #36]	; 0x24
 8006858:	e00c      	b.n	8006874 <unpack_reply+0x64>
						byte_8_reply.buffer[i] = data[i + 2];
 800685a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685c:	3302      	adds	r3, #2
 800685e:	683a      	ldr	r2, [r7, #0]
 8006860:	4413      	add	r3, r2
 8006862:	7819      	ldrb	r1, [r3, #0]
 8006864:	4a8a      	ldr	r2, [pc, #552]	; (8006a90 <unpack_reply+0x280>)
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	4413      	add	r3, r2
 800686a:	460a      	mov	r2, r1
 800686c:	701a      	strb	r2, [r3, #0]
					for (size_t i = 0; i < 6; i++)
 800686e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006870:	3301      	adds	r3, #1
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	2b05      	cmp	r3, #5
 8006878:	d9ef      	bls.n	800685a <unpack_reply+0x4a>
					byte_8_reply.buffer[6] = 0x00;
 800687a:	4b85      	ldr	r3, [pc, #532]	; (8006a90 <unpack_reply+0x280>)
 800687c:	2200      	movs	r2, #0
 800687e:	719a      	strb	r2, [r3, #6]
					byte_8_reply.buffer[7] = 0x00;
 8006880:	4b83      	ldr	r3, [pc, #524]	; (8006a90 <unpack_reply+0x280>)
 8006882:	2200      	movs	r2, #0
 8006884:	71da      	strb	r2, [r3, #7]
				if (data[0] == 0xae)
 8006886:	e014      	b.n	80068b2 <unpack_reply+0xa2>
				}
			}
			else if (id == 5)
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	2b05      	cmp	r3, #5
 800688c:	d111      	bne.n	80068b2 <unpack_reply+0xa2>
			{
				for (size_t i = 0; i < 8; i++)
 800688e:	2300      	movs	r3, #0
 8006890:	623b      	str	r3, [r7, #32]
 8006892:	e00b      	b.n	80068ac <unpack_reply+0x9c>
					byte_8_reply.buffer[i] = data[i];
 8006894:	683a      	ldr	r2, [r7, #0]
 8006896:	6a3b      	ldr	r3, [r7, #32]
 8006898:	4413      	add	r3, r2
 800689a:	7819      	ldrb	r1, [r3, #0]
 800689c:	4a7c      	ldr	r2, [pc, #496]	; (8006a90 <unpack_reply+0x280>)
 800689e:	6a3b      	ldr	r3, [r7, #32]
 80068a0:	4413      	add	r3, r2
 80068a2:	460a      	mov	r2, r1
 80068a4:	701a      	strb	r2, [r3, #0]
				for (size_t i = 0; i < 8; i++)
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	3301      	adds	r3, #1
 80068aa:	623b      	str	r3, [r7, #32]
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	2b07      	cmp	r3, #7
 80068b0:	d9f0      	bls.n	8006894 <unpack_reply+0x84>
			}		
			joint_r_data[id - 1] = byte_8_reply.udata;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	1e59      	subs	r1, r3, #1
 80068b6:	4b76      	ldr	r3, [pc, #472]	; (8006a90 <unpack_reply+0x280>)
 80068b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068bc:	4875      	ldr	r0, [pc, #468]	; (8006a94 <unpack_reply+0x284>)
 80068be:	00c9      	lsls	r1, r1, #3
 80068c0:	4401      	add	r1, r0
 80068c2:	e9c1 2300 	strd	r2, r3, [r1]
			reply_hs[id - 1] = hs_;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	1e59      	subs	r1, r3, #1
 80068ca:	4b73      	ldr	r3, [pc, #460]	; (8006a98 <unpack_reply+0x288>)
 80068cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068d0:	4872      	ldr	r0, [pc, #456]	; (8006a9c <unpack_reply+0x28c>)
 80068d2:	00c9      	lsls	r1, r1, #3
 80068d4:	4401      	add	r1, r0
 80068d6:	e9c1 2300 	strd	r2, r3, [r1]

			if (id == 1)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	f040 8197 	bne.w	8006c10 <unpack_reply+0x400>
			{
				byte_2_reply.buffer[0] = data[2];
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	3302      	adds	r3, #2
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	b25a      	sxtb	r2, r3
 80068ea:	4b6d      	ldr	r3, [pc, #436]	; (8006aa0 <unpack_reply+0x290>)
 80068ec:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[3];
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	3303      	adds	r3, #3
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	b25a      	sxtb	r2, r3
 80068f6:	4b6a      	ldr	r3, [pc, #424]	; (8006aa0 <unpack_reply+0x290>)
 80068f8:	705a      	strb	r2, [r3, #1]
				pos1 = (float_t)byte_2_reply.udata * 0.01;
 80068fa:	4b69      	ldr	r3, [pc, #420]	; (8006aa0 <unpack_reply+0x290>)
 80068fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006900:	ee07 3a90 	vmov	s15, r3
 8006904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006908:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800690c:	ed9f 6b58 	vldr	d6, [pc, #352]	; 8006a70 <unpack_reply+0x260>
 8006910:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006914:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006918:	4b62      	ldr	r3, [pc, #392]	; (8006aa4 <unpack_reply+0x294>)
 800691a:	edc3 7a00 	vstr	s15, [r3]
				if (pos1>180)
 800691e:	4b61      	ldr	r3, [pc, #388]	; (8006aa4 <unpack_reply+0x294>)
 8006920:	edd3 7a00 	vldr	s15, [r3]
 8006924:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8006aa8 <unpack_reply+0x298>
 8006928:	eef4 7ac7 	vcmpe.f32	s15, s14
 800692c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006930:	dd09      	ble.n	8006946 <unpack_reply+0x136>
					pos1=pos1-360;
 8006932:	4b5c      	ldr	r3, [pc, #368]	; (8006aa4 <unpack_reply+0x294>)
 8006934:	edd3 7a00 	vldr	s15, [r3]
 8006938:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8006aac <unpack_reply+0x29c>
 800693c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006940:	4b58      	ldr	r3, [pc, #352]	; (8006aa4 <unpack_reply+0x294>)
 8006942:	edc3 7a00 	vstr	s15, [r3]
				if (pos1<-180)
 8006946:	4b57      	ldr	r3, [pc, #348]	; (8006aa4 <unpack_reply+0x294>)
 8006948:	edd3 7a00 	vldr	s15, [r3]
 800694c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8006ab0 <unpack_reply+0x2a0>
 8006950:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006958:	d509      	bpl.n	800696e <unpack_reply+0x15e>
					pos1=pos1+360;
 800695a:	4b52      	ldr	r3, [pc, #328]	; (8006aa4 <unpack_reply+0x294>)
 800695c:	edd3 7a00 	vldr	s15, [r3]
 8006960:	ed9f 7a52 	vldr	s14, [pc, #328]	; 8006aac <unpack_reply+0x29c>
 8006964:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006968:	4b4e      	ldr	r3, [pc, #312]	; (8006aa4 <unpack_reply+0x294>)
 800696a:	edc3 7a00 	vstr	s15, [r3]

				// vel from the diff of pos
				float_t tmp;
				tmp=(pos1-pos1_old)/0.001;
 800696e:	4b4d      	ldr	r3, [pc, #308]	; (8006aa4 <unpack_reply+0x294>)
 8006970:	ed93 7a00 	vldr	s14, [r3]
 8006974:	4b4f      	ldr	r3, [pc, #316]	; (8006ab4 <unpack_reply+0x2a4>)
 8006976:	edd3 7a00 	vldr	s15, [r3]
 800697a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800697e:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8006982:	ed9f 5b3d 	vldr	d5, [pc, #244]	; 8006a78 <unpack_reply+0x268>
 8006986:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800698a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800698e:	edc7 7a07 	vstr	s15, [r7, #28]
				if (tmp>1000 || tmp<-1000)
 8006992:	edd7 7a07 	vldr	s15, [r7, #28]
 8006996:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8006ab8 <unpack_reply+0x2a8>
 800699a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800699e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a2:	dc08      	bgt.n	80069b6 <unpack_reply+0x1a6>
 80069a4:	edd7 7a07 	vldr	s15, [r7, #28]
 80069a8:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8006abc <unpack_reply+0x2ac>
 80069ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069b4:	d502      	bpl.n	80069bc <unpack_reply+0x1ac>
					tmp=0;
 80069b6:	f04f 0300 	mov.w	r3, #0
 80069ba:	61fb      	str	r3, [r7, #28]
				vel1_cal=tmp;
 80069bc:	4a40      	ldr	r2, [pc, #256]	; (8006ac0 <unpack_reply+0x2b0>)
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	6013      	str	r3, [r2, #0]
				// ----

				byte_2_reply.buffer[0] = data[4];
 80069c2:	683b      	ldr	r3, [r7, #0]
 80069c4:	3304      	adds	r3, #4
 80069c6:	781b      	ldrb	r3, [r3, #0]
 80069c8:	b25a      	sxtb	r2, r3
 80069ca:	4b35      	ldr	r3, [pc, #212]	; (8006aa0 <unpack_reply+0x290>)
 80069cc:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[5];
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	3305      	adds	r3, #5
 80069d2:	781b      	ldrb	r3, [r3, #0]
 80069d4:	b25a      	sxtb	r2, r3
 80069d6:	4b32      	ldr	r3, [pc, #200]	; (8006aa0 <unpack_reply+0x290>)
 80069d8:	705a      	strb	r2, [r3, #1]
				vel1 = (float_t)byte_2_reply.udata;
 80069da:	4b31      	ldr	r3, [pc, #196]	; (8006aa0 <unpack_reply+0x290>)
 80069dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80069e0:	ee07 3a90 	vmov	s15, r3
 80069e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80069e8:	4b36      	ldr	r3, [pc, #216]	; (8006ac4 <unpack_reply+0x2b4>)
 80069ea:	edc3 7a00 	vstr	s15, [r3]
				byte_2_reply.buffer[0] = data[6];
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	3306      	adds	r3, #6
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	b25a      	sxtb	r2, r3
 80069f6:	4b2a      	ldr	r3, [pc, #168]	; (8006aa0 <unpack_reply+0x290>)
 80069f8:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[7];
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	3307      	adds	r3, #7
 80069fe:	781b      	ldrb	r3, [r3, #0]
 8006a00:	b25a      	sxtb	r2, r3
 8006a02:	4b27      	ldr	r3, [pc, #156]	; (8006aa0 <unpack_reply+0x290>)
 8006a04:	705a      	strb	r2, [r3, #1]
				tor1 = (float_t)byte_2_reply.udata * 66.0 / 4096;
 8006a06:	4b26      	ldr	r3, [pc, #152]	; (8006aa0 <unpack_reply+0x290>)
 8006a08:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006a0c:	ee07 3a90 	vmov	s15, r3
 8006a10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006a14:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006a18:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8006a80 <unpack_reply+0x270>
 8006a1c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006a20:	ed9f 5b19 	vldr	d5, [pc, #100]	; 8006a88 <unpack_reply+0x278>
 8006a24:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006a28:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006a2c:	4b26      	ldr	r3, [pc, #152]	; (8006ac8 <unpack_reply+0x2b8>)
 8006a2e:	edc3 7a00 	vstr	s15, [r3]

				// vel from low pass of vel feedback
				for (int i=0;i<2;i++)
 8006a32:	2300      	movs	r3, #0
 8006a34:	61bb      	str	r3, [r7, #24]
 8006a36:	e00d      	b.n	8006a54 <unpack_reply+0x244>
					vel1_rec[i]=vel1_rec[i+1];
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	3301      	adds	r3, #1
 8006a3c:	4a23      	ldr	r2, [pc, #140]	; (8006acc <unpack_reply+0x2bc>)
 8006a3e:	009b      	lsls	r3, r3, #2
 8006a40:	4413      	add	r3, r2
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	4921      	ldr	r1, [pc, #132]	; (8006acc <unpack_reply+0x2bc>)
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	009b      	lsls	r3, r3, #2
 8006a4a:	440b      	add	r3, r1
 8006a4c:	601a      	str	r2, [r3, #0]
				for (int i=0;i<2;i++)
 8006a4e:	69bb      	ldr	r3, [r7, #24]
 8006a50:	3301      	adds	r3, #1
 8006a52:	61bb      	str	r3, [r7, #24]
 8006a54:	69bb      	ldr	r3, [r7, #24]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	ddee      	ble.n	8006a38 <unpack_reply+0x228>
				vel1_rec[2]=vel1;
 8006a5a:	4b1a      	ldr	r3, [pc, #104]	; (8006ac4 <unpack_reply+0x2b4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a1b      	ldr	r2, [pc, #108]	; (8006acc <unpack_reply+0x2bc>)
 8006a60:	6093      	str	r3, [r2, #8]

				float_t tmp2=0;
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	617b      	str	r3, [r7, #20]
				for (int i=0;i<3;i++)
 8006a68:	2300      	movs	r3, #0
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	e047      	b.n	8006afe <unpack_reply+0x2ee>
 8006a6e:	bf00      	nop
 8006a70:	47ae147b 	.word	0x47ae147b
 8006a74:	3f847ae1 	.word	0x3f847ae1
 8006a78:	d2f1a9fc 	.word	0xd2f1a9fc
 8006a7c:	3f50624d 	.word	0x3f50624d
 8006a80:	00000000 	.word	0x00000000
 8006a84:	40508000 	.word	0x40508000
 8006a88:	00000000 	.word	0x00000000
 8006a8c:	40b00000 	.word	0x40b00000
 8006a90:	24000678 	.word	0x24000678
 8006a94:	24000598 	.word	0x24000598
 8006a98:	240005f8 	.word	0x240005f8
 8006a9c:	24000728 	.word	0x24000728
 8006aa0:	24000680 	.word	0x24000680
 8006aa4:	2400068c 	.word	0x2400068c
 8006aa8:	43340000 	.word	0x43340000
 8006aac:	43b40000 	.word	0x43b40000
 8006ab0:	c3340000 	.word	0xc3340000
 8006ab4:	24000698 	.word	0x24000698
 8006ab8:	447a0000 	.word	0x447a0000
 8006abc:	c47a0000 	.word	0xc47a0000
 8006ac0:	2400069c 	.word	0x2400069c
 8006ac4:	24000690 	.word	0x24000690
 8006ac8:	24000694 	.word	0x24000694
 8006acc:	24000758 	.word	0x24000758
					tmp2+=vel1_rec[i]*fir_par[i];
 8006ad0:	4a34      	ldr	r2, [pc, #208]	; (8006ba4 <unpack_reply+0x394>)
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	4413      	add	r3, r2
 8006ad8:	ed93 7a00 	vldr	s14, [r3]
 8006adc:	4a32      	ldr	r2, [pc, #200]	; (8006ba8 <unpack_reply+0x398>)
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	4413      	add	r3, r2
 8006ae4:	edd3 7a00 	vldr	s15, [r3]
 8006ae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006aec:	ed97 7a05 	vldr	s14, [r7, #20]
 8006af0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006af4:	edc7 7a05 	vstr	s15, [r7, #20]
				for (int i=0;i<3;i++)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	3301      	adds	r3, #1
 8006afc:	613b      	str	r3, [r7, #16]
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	dde5      	ble.n	8006ad0 <unpack_reply+0x2c0>
				//---

				if (TD_iniCount==0)
 8006b04:	4b29      	ldr	r3, [pc, #164]	; (8006bac <unpack_reply+0x39c>)
 8006b06:	edd3 7a00 	vldr	s15, [r3]
 8006b0a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b12:	d15b      	bne.n	8006bcc <unpack_reply+0x3bc>
				{
					TD_x1=TD_x1_old+TD_h*TD_x2_old;
 8006b14:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8006bb0 <unpack_reply+0x3a0>
 8006b18:	4b26      	ldr	r3, [pc, #152]	; (8006bb4 <unpack_reply+0x3a4>)
 8006b1a:	edd3 7a00 	vldr	s15, [r3]
 8006b1e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006b22:	4b25      	ldr	r3, [pc, #148]	; (8006bb8 <unpack_reply+0x3a8>)
 8006b24:	edd3 7a00 	vldr	s15, [r3]
 8006b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b2c:	4b23      	ldr	r3, [pc, #140]	; (8006bbc <unpack_reply+0x3ac>)
 8006b2e:	edc3 7a00 	vstr	s15, [r3]
					TD_x2=TD_x2_old-TD_h*(TD_r*TD_r*TD_x1_old+2*TD_r*TD_x2_old-TD_r*TD_r*pos1);
 8006b32:	4b20      	ldr	r3, [pc, #128]	; (8006bb4 <unpack_reply+0x3a4>)
 8006b34:	ed93 7a00 	vldr	s14, [r3]
 8006b38:	eddf 6a21 	vldr	s13, [pc, #132]	; 8006bc0 <unpack_reply+0x3b0>
 8006b3c:	eddf 7a20 	vldr	s15, [pc, #128]	; 8006bc0 <unpack_reply+0x3b0>
 8006b40:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006b44:	4b1c      	ldr	r3, [pc, #112]	; (8006bb8 <unpack_reply+0x3a8>)
 8006b46:	edd3 7a00 	vldr	s15, [r3]
 8006b4a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8006b4e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006bc0 <unpack_reply+0x3b0>
 8006b52:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8006b56:	4b17      	ldr	r3, [pc, #92]	; (8006bb4 <unpack_reply+0x3a4>)
 8006b58:	edd3 7a00 	vldr	s15, [r3]
 8006b5c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006b60:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8006b64:	ed9f 6a16 	vldr	s12, [pc, #88]	; 8006bc0 <unpack_reply+0x3b0>
 8006b68:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006bc0 <unpack_reply+0x3b0>
 8006b6c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8006b70:	4b14      	ldr	r3, [pc, #80]	; (8006bc4 <unpack_reply+0x3b4>)
 8006b72:	edd3 7a00 	vldr	s15, [r3]
 8006b76:	ee66 7a27 	vmul.f32	s15, s12, s15
 8006b7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006b7e:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8006bb0 <unpack_reply+0x3a0>
 8006b82:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006b86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b8a:	4b0f      	ldr	r3, [pc, #60]	; (8006bc8 <unpack_reply+0x3b8>)
 8006b8c:	edc3 7a00 	vstr	s15, [r3]
					TD_x1_old=TD_x1;
 8006b90:	4b0a      	ldr	r3, [pc, #40]	; (8006bbc <unpack_reply+0x3ac>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a08      	ldr	r2, [pc, #32]	; (8006bb8 <unpack_reply+0x3a8>)
 8006b96:	6013      	str	r3, [r2, #0]
					TD_x2_old=TD_x2;
 8006b98:	4b0b      	ldr	r3, [pc, #44]	; (8006bc8 <unpack_reply+0x3b8>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a05      	ldr	r2, [pc, #20]	; (8006bb4 <unpack_reply+0x3a4>)
 8006b9e:	6013      	str	r3, [r2, #0]
 8006ba0:	e02e      	b.n	8006c00 <unpack_reply+0x3f0>
 8006ba2:	bf00      	nop
 8006ba4:	24000758 	.word	0x24000758
 8006ba8:	24000038 	.word	0x24000038
 8006bac:	24000044 	.word	0x24000044
 8006bb0:	3a83126f 	.word	0x3a83126f
 8006bb4:	24000770 	.word	0x24000770
 8006bb8:	24000768 	.word	0x24000768
 8006bbc:	2400076c 	.word	0x2400076c
 8006bc0:	43480000 	.word	0x43480000
 8006bc4:	2400068c 	.word	0x2400068c
 8006bc8:	24000774 	.word	0x24000774
				}
				else
				{
					TD_iniCount--;
 8006bcc:	4bb2      	ldr	r3, [pc, #712]	; (8006e98 <unpack_reply+0x688>)
 8006bce:	edd3 7a00 	vldr	s15, [r3]
 8006bd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bd6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006bda:	4baf      	ldr	r3, [pc, #700]	; (8006e98 <unpack_reply+0x688>)
 8006bdc:	edc3 7a00 	vstr	s15, [r3]
					TD_x1_old=pos1;
 8006be0:	4bae      	ldr	r3, [pc, #696]	; (8006e9c <unpack_reply+0x68c>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4aae      	ldr	r2, [pc, #696]	; (8006ea0 <unpack_reply+0x690>)
 8006be6:	6013      	str	r3, [r2, #0]
					TD_x2_old=vel1;
 8006be8:	4bae      	ldr	r3, [pc, #696]	; (8006ea4 <unpack_reply+0x694>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4aae      	ldr	r2, [pc, #696]	; (8006ea8 <unpack_reply+0x698>)
 8006bee:	6013      	str	r3, [r2, #0]
					TD_x1=pos1;
 8006bf0:	4baa      	ldr	r3, [pc, #680]	; (8006e9c <unpack_reply+0x68c>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4aad      	ldr	r2, [pc, #692]	; (8006eac <unpack_reply+0x69c>)
 8006bf6:	6013      	str	r3, [r2, #0]
					TD_x2=vel1;
 8006bf8:	4baa      	ldr	r3, [pc, #680]	; (8006ea4 <unpack_reply+0x694>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4aac      	ldr	r2, [pc, #688]	; (8006eb0 <unpack_reply+0x6a0>)
 8006bfe:	6013      	str	r3, [r2, #0]
				}

				vel1_fil=TD_x2;
 8006c00:	4bab      	ldr	r3, [pc, #684]	; (8006eb0 <unpack_reply+0x6a0>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4aab      	ldr	r2, [pc, #684]	; (8006eb4 <unpack_reply+0x6a4>)
 8006c06:	6013      	str	r3, [r2, #0]

				pos1_old=pos1;
 8006c08:	4ba4      	ldr	r3, [pc, #656]	; (8006e9c <unpack_reply+0x68c>)
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4aaa      	ldr	r2, [pc, #680]	; (8006eb8 <unpack_reply+0x6a8>)
 8006c0e:	6013      	str	r3, [r2, #0]
			}			
			if (id == 2)
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2b02      	cmp	r3, #2
 8006c14:	d14d      	bne.n	8006cb2 <unpack_reply+0x4a2>
			{
				byte_2_reply.buffer[0] = data[2];
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	3302      	adds	r3, #2
 8006c1a:	781b      	ldrb	r3, [r3, #0]
 8006c1c:	b25a      	sxtb	r2, r3
 8006c1e:	4ba7      	ldr	r3, [pc, #668]	; (8006ebc <unpack_reply+0x6ac>)
 8006c20:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[3];
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	3303      	adds	r3, #3
 8006c26:	781b      	ldrb	r3, [r3, #0]
 8006c28:	b25a      	sxtb	r2, r3
 8006c2a:	4ba4      	ldr	r3, [pc, #656]	; (8006ebc <unpack_reply+0x6ac>)
 8006c2c:	705a      	strb	r2, [r3, #1]
				pos2 = (double_t)byte_2_reply.udata * 0.01;
 8006c2e:	4ba3      	ldr	r3, [pc, #652]	; (8006ebc <unpack_reply+0x6ac>)
 8006c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c34:	ee07 3a90 	vmov	s15, r3
 8006c38:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c3c:	ed9f 6b8c 	vldr	d6, [pc, #560]	; 8006e70 <unpack_reply+0x660>
 8006c40:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006c44:	4b9e      	ldr	r3, [pc, #632]	; (8006ec0 <unpack_reply+0x6b0>)
 8006c46:	ed83 7b00 	vstr	d7, [r3]
				byte_2_reply.buffer[0] = data[4];
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	3304      	adds	r3, #4
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	b25a      	sxtb	r2, r3
 8006c52:	4b9a      	ldr	r3, [pc, #616]	; (8006ebc <unpack_reply+0x6ac>)
 8006c54:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[5];
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	3305      	adds	r3, #5
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	b25a      	sxtb	r2, r3
 8006c5e:	4b97      	ldr	r3, [pc, #604]	; (8006ebc <unpack_reply+0x6ac>)
 8006c60:	705a      	strb	r2, [r3, #1]
				vel2 = (double_t)byte_2_reply.udata;
 8006c62:	4b96      	ldr	r3, [pc, #600]	; (8006ebc <unpack_reply+0x6ac>)
 8006c64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c68:	ee07 3a90 	vmov	s15, r3
 8006c6c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c70:	4b94      	ldr	r3, [pc, #592]	; (8006ec4 <unpack_reply+0x6b4>)
 8006c72:	ed83 7b00 	vstr	d7, [r3]
				byte_2_reply.buffer[0] = data[6];
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	3306      	adds	r3, #6
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	b25a      	sxtb	r2, r3
 8006c7e:	4b8f      	ldr	r3, [pc, #572]	; (8006ebc <unpack_reply+0x6ac>)
 8006c80:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[7];
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	3307      	adds	r3, #7
 8006c86:	781b      	ldrb	r3, [r3, #0]
 8006c88:	b25a      	sxtb	r2, r3
 8006c8a:	4b8c      	ldr	r3, [pc, #560]	; (8006ebc <unpack_reply+0x6ac>)
 8006c8c:	705a      	strb	r2, [r3, #1]
				tor2 = (double_t)byte_2_reply.udata * 66.0 / 4096;
 8006c8e:	4b8b      	ldr	r3, [pc, #556]	; (8006ebc <unpack_reply+0x6ac>)
 8006c90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006c94:	ee07 3a90 	vmov	s15, r3
 8006c98:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006c9c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8006e78 <unpack_reply+0x668>
 8006ca0:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006ca4:	ed9f 5b76 	vldr	d5, [pc, #472]	; 8006e80 <unpack_reply+0x670>
 8006ca8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006cac:	4b86      	ldr	r3, [pc, #536]	; (8006ec8 <unpack_reply+0x6b8>)
 8006cae:	ed83 7b00 	vstr	d7, [r3]
			}
			if (id == 3)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2b03      	cmp	r3, #3
 8006cb6:	d14d      	bne.n	8006d54 <unpack_reply+0x544>
			{
				byte_2_reply.buffer[0] = data[2];
 8006cb8:	683b      	ldr	r3, [r7, #0]
 8006cba:	3302      	adds	r3, #2
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	b25a      	sxtb	r2, r3
 8006cc0:	4b7e      	ldr	r3, [pc, #504]	; (8006ebc <unpack_reply+0x6ac>)
 8006cc2:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[3];
 8006cc4:	683b      	ldr	r3, [r7, #0]
 8006cc6:	3303      	adds	r3, #3
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	b25a      	sxtb	r2, r3
 8006ccc:	4b7b      	ldr	r3, [pc, #492]	; (8006ebc <unpack_reply+0x6ac>)
 8006cce:	705a      	strb	r2, [r3, #1]
				pos3 = (double_t)byte_2_reply.udata * 0.01;
 8006cd0:	4b7a      	ldr	r3, [pc, #488]	; (8006ebc <unpack_reply+0x6ac>)
 8006cd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006cd6:	ee07 3a90 	vmov	s15, r3
 8006cda:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006cde:	ed9f 6b64 	vldr	d6, [pc, #400]	; 8006e70 <unpack_reply+0x660>
 8006ce2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ce6:	4b79      	ldr	r3, [pc, #484]	; (8006ecc <unpack_reply+0x6bc>)
 8006ce8:	ed83 7b00 	vstr	d7, [r3]
				byte_2_reply.buffer[0] = data[4];
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	3304      	adds	r3, #4
 8006cf0:	781b      	ldrb	r3, [r3, #0]
 8006cf2:	b25a      	sxtb	r2, r3
 8006cf4:	4b71      	ldr	r3, [pc, #452]	; (8006ebc <unpack_reply+0x6ac>)
 8006cf6:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[5];
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	3305      	adds	r3, #5
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	b25a      	sxtb	r2, r3
 8006d00:	4b6e      	ldr	r3, [pc, #440]	; (8006ebc <unpack_reply+0x6ac>)
 8006d02:	705a      	strb	r2, [r3, #1]
				vel3 = (double_t)byte_2_reply.udata;
 8006d04:	4b6d      	ldr	r3, [pc, #436]	; (8006ebc <unpack_reply+0x6ac>)
 8006d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d0a:	ee07 3a90 	vmov	s15, r3
 8006d0e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d12:	4b6f      	ldr	r3, [pc, #444]	; (8006ed0 <unpack_reply+0x6c0>)
 8006d14:	ed83 7b00 	vstr	d7, [r3]
				byte_2_reply.buffer[0] = data[6];
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	3306      	adds	r3, #6
 8006d1c:	781b      	ldrb	r3, [r3, #0]
 8006d1e:	b25a      	sxtb	r2, r3
 8006d20:	4b66      	ldr	r3, [pc, #408]	; (8006ebc <unpack_reply+0x6ac>)
 8006d22:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[7];
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	3307      	adds	r3, #7
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	b25a      	sxtb	r2, r3
 8006d2c:	4b63      	ldr	r3, [pc, #396]	; (8006ebc <unpack_reply+0x6ac>)
 8006d2e:	705a      	strb	r2, [r3, #1]
				tor3 = (double_t)byte_2_reply.udata * 66.0 / 4096;			
 8006d30:	4b62      	ldr	r3, [pc, #392]	; (8006ebc <unpack_reply+0x6ac>)
 8006d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d36:	ee07 3a90 	vmov	s15, r3
 8006d3a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d3e:	ed9f 6b4e 	vldr	d6, [pc, #312]	; 8006e78 <unpack_reply+0x668>
 8006d42:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006d46:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 8006e80 <unpack_reply+0x670>
 8006d4a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006d4e:	4b61      	ldr	r3, [pc, #388]	; (8006ed4 <unpack_reply+0x6c4>)
 8006d50:	ed83 7b00 	vstr	d7, [r3]
			}			
			
			if (id == 4)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d14d      	bne.n	8006df6 <unpack_reply+0x5e6>
			{
				byte_2_reply.buffer[0] = data[2];
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	3302      	adds	r3, #2
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b25a      	sxtb	r2, r3
 8006d62:	4b56      	ldr	r3, [pc, #344]	; (8006ebc <unpack_reply+0x6ac>)
 8006d64:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[3];
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	3303      	adds	r3, #3
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b25a      	sxtb	r2, r3
 8006d6e:	4b53      	ldr	r3, [pc, #332]	; (8006ebc <unpack_reply+0x6ac>)
 8006d70:	705a      	strb	r2, [r3, #1]
				pos4 = (double_t)byte_2_reply.udata * 0.01;
 8006d72:	4b52      	ldr	r3, [pc, #328]	; (8006ebc <unpack_reply+0x6ac>)
 8006d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d78:	ee07 3a90 	vmov	s15, r3
 8006d7c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006d80:	ed9f 6b3b 	vldr	d6, [pc, #236]	; 8006e70 <unpack_reply+0x660>
 8006d84:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d88:	4b53      	ldr	r3, [pc, #332]	; (8006ed8 <unpack_reply+0x6c8>)
 8006d8a:	ed83 7b00 	vstr	d7, [r3]
				byte_2_reply.buffer[0] = data[4];
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	3304      	adds	r3, #4
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	b25a      	sxtb	r2, r3
 8006d96:	4b49      	ldr	r3, [pc, #292]	; (8006ebc <unpack_reply+0x6ac>)
 8006d98:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[5];
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	3305      	adds	r3, #5
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b25a      	sxtb	r2, r3
 8006da2:	4b46      	ldr	r3, [pc, #280]	; (8006ebc <unpack_reply+0x6ac>)
 8006da4:	705a      	strb	r2, [r3, #1]
				vel4 = (double_t)byte_2_reply.udata;
 8006da6:	4b45      	ldr	r3, [pc, #276]	; (8006ebc <unpack_reply+0x6ac>)
 8006da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dac:	ee07 3a90 	vmov	s15, r3
 8006db0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006db4:	4b49      	ldr	r3, [pc, #292]	; (8006edc <unpack_reply+0x6cc>)
 8006db6:	ed83 7b00 	vstr	d7, [r3]
				byte_2_reply.buffer[0] = data[6];
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	3306      	adds	r3, #6
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	b25a      	sxtb	r2, r3
 8006dc2:	4b3e      	ldr	r3, [pc, #248]	; (8006ebc <unpack_reply+0x6ac>)
 8006dc4:	701a      	strb	r2, [r3, #0]
				byte_2_reply.buffer[1] = data[7];
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	3307      	adds	r3, #7
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	b25a      	sxtb	r2, r3
 8006dce:	4b3b      	ldr	r3, [pc, #236]	; (8006ebc <unpack_reply+0x6ac>)
 8006dd0:	705a      	strb	r2, [r3, #1]
				tor4 = (double_t)byte_2_reply.udata * 66.0 / 4096;
 8006dd2:	4b3a      	ldr	r3, [pc, #232]	; (8006ebc <unpack_reply+0x6ac>)
 8006dd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006dd8:	ee07 3a90 	vmov	s15, r3
 8006ddc:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006de0:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8006e78 <unpack_reply+0x668>
 8006de4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006de8:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8006e80 <unpack_reply+0x670>
 8006dec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006df0:	4b3b      	ldr	r3, [pc, #236]	; (8006ee0 <unpack_reply+0x6d0>)
 8006df2:	ed83 7b00 	vstr	d7, [r3]
			}
			if (id == 5)
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2b05      	cmp	r3, #5
 8006dfa:	f040 8097 	bne.w	8006f2c <unpack_reply+0x71c>
			{
				byte_2u_reply.buffer[0] = data[0];
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781a      	ldrb	r2, [r3, #0]
 8006e02:	4b38      	ldr	r3, [pc, #224]	; (8006ee4 <unpack_reply+0x6d4>)
 8006e04:	701a      	strb	r2, [r3, #0]
				byte_2u_reply.buffer[1] = data[1];
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	785a      	ldrb	r2, [r3, #1]
 8006e0a:	4b36      	ldr	r3, [pc, #216]	; (8006ee4 <unpack_reply+0x6d4>)
 8006e0c:	705a      	strb	r2, [r3, #1]
				pos_p1 = (double_t)byte_2u_reply.udata / 65536 * 360.0;
 8006e0e:	4b35      	ldr	r3, [pc, #212]	; (8006ee4 <unpack_reply+0x6d4>)
 8006e10:	881b      	ldrh	r3, [r3, #0]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006e1a:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 8006e88 <unpack_reply+0x678>
 8006e1e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006e22:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 8006e90 <unpack_reply+0x680>
 8006e26:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e2a:	4b2f      	ldr	r3, [pc, #188]	; (8006ee8 <unpack_reply+0x6d8>)
 8006e2c:	ed83 7b00 	vstr	d7, [r3]
				byte_2u_reply.buffer[0] = data[2];
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	789a      	ldrb	r2, [r3, #2]
 8006e34:	4b2b      	ldr	r3, [pc, #172]	; (8006ee4 <unpack_reply+0x6d4>)
 8006e36:	701a      	strb	r2, [r3, #0]
				byte_2u_reply.buffer[1] = data[3];
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	78da      	ldrb	r2, [r3, #3]
 8006e3c:	4b29      	ldr	r3, [pc, #164]	; (8006ee4 <unpack_reply+0x6d4>)
 8006e3e:	705a      	strb	r2, [r3, #1]
				pos_p2 = (double_t)byte_2u_reply.udata / 65536 * 360.0;
 8006e40:	4b28      	ldr	r3, [pc, #160]	; (8006ee4 <unpack_reply+0x6d4>)
 8006e42:	881b      	ldrh	r3, [r3, #0]
 8006e44:	ee07 3a90 	vmov	s15, r3
 8006e48:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006e4c:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8006e88 <unpack_reply+0x678>
 8006e50:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006e54:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8006e90 <unpack_reply+0x680>
 8006e58:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e5c:	4b23      	ldr	r3, [pc, #140]	; (8006eec <unpack_reply+0x6dc>)
 8006e5e:	ed83 7b00 	vstr	d7, [r3]
				byte_4_reply.buffer[0] = data[4];
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	791a      	ldrb	r2, [r3, #4]
 8006e66:	4b22      	ldr	r3, [pc, #136]	; (8006ef0 <unpack_reply+0x6e0>)
 8006e68:	701a      	strb	r2, [r3, #0]
				byte_4_reply.buffer[1] = data[5];
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	e042      	b.n	8006ef4 <unpack_reply+0x6e4>
 8006e6e:	bf00      	nop
 8006e70:	47ae147b 	.word	0x47ae147b
 8006e74:	3f847ae1 	.word	0x3f847ae1
 8006e78:	00000000 	.word	0x00000000
 8006e7c:	40508000 	.word	0x40508000
 8006e80:	00000000 	.word	0x00000000
 8006e84:	40b00000 	.word	0x40b00000
 8006e88:	00000000 	.word	0x00000000
 8006e8c:	40f00000 	.word	0x40f00000
 8006e90:	00000000 	.word	0x00000000
 8006e94:	40768000 	.word	0x40768000
 8006e98:	24000044 	.word	0x24000044
 8006e9c:	2400068c 	.word	0x2400068c
 8006ea0:	24000768 	.word	0x24000768
 8006ea4:	24000690 	.word	0x24000690
 8006ea8:	24000770 	.word	0x24000770
 8006eac:	2400076c 	.word	0x2400076c
 8006eb0:	24000774 	.word	0x24000774
 8006eb4:	24000764 	.word	0x24000764
 8006eb8:	24000698 	.word	0x24000698
 8006ebc:	24000680 	.word	0x24000680
 8006ec0:	240006a0 	.word	0x240006a0
 8006ec4:	240006a8 	.word	0x240006a8
 8006ec8:	240006b0 	.word	0x240006b0
 8006ecc:	240006b8 	.word	0x240006b8
 8006ed0:	240006c0 	.word	0x240006c0
 8006ed4:	240006c8 	.word	0x240006c8
 8006ed8:	240006d0 	.word	0x240006d0
 8006edc:	240006d8 	.word	0x240006d8
 8006ee0:	240006e0 	.word	0x240006e0
 8006ee4:	24000684 	.word	0x24000684
 8006ee8:	24000708 	.word	0x24000708
 8006eec:	24000710 	.word	0x24000710
 8006ef0:	24000688 	.word	0x24000688
 8006ef4:	795a      	ldrb	r2, [r3, #5]
 8006ef6:	4b14      	ldr	r3, [pc, #80]	; (8006f48 <unpack_reply+0x738>)
 8006ef8:	705a      	strb	r2, [r3, #1]
				byte_4_reply.buffer[2] = data[6];
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	799a      	ldrb	r2, [r3, #6]
 8006efe:	4b12      	ldr	r3, [pc, #72]	; (8006f48 <unpack_reply+0x738>)
 8006f00:	709a      	strb	r2, [r3, #2]
				byte_4_reply.buffer[3] = data[7];
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	79da      	ldrb	r2, [r3, #7]
 8006f06:	4b10      	ldr	r3, [pc, #64]	; (8006f48 <unpack_reply+0x738>)
 8006f08:	70da      	strb	r2, [r3, #3]
				pos_s = (double_t)byte_4_reply.udata / 4096 * 360.0;				
 8006f0a:	4b0f      	ldr	r3, [pc, #60]	; (8006f48 <unpack_reply+0x738>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	ee07 3a90 	vmov	s15, r3
 8006f12:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006f16:	ed9f 5b08 	vldr	d5, [pc, #32]	; 8006f38 <unpack_reply+0x728>
 8006f1a:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f1e:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8006f40 <unpack_reply+0x730>
 8006f22:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f26:	4b09      	ldr	r3, [pc, #36]	; (8006f4c <unpack_reply+0x73c>)
 8006f28:	ed83 7b00 	vstr	d7, [r3]
			}		
		}
	}	
}
 8006f2c:	bf00      	nop
 8006f2e:	372c      	adds	r7, #44	; 0x2c
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	00000000 	.word	0x00000000
 8006f3c:	40b00000 	.word	0x40b00000
 8006f40:	00000000 	.word	0x00000000
 8006f44:	40768000 	.word	0x40768000
 8006f48:	24000688 	.word	0x24000688
 8006f4c:	24000700 	.word	0x24000700

08006f50 <motor_pd0>:
	data_buffer[6] = 0xff;
	data_buffer[7] = 0xfc;
}

void motor_pd0(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006f62:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	601a      	str	r2, [r3, #0]
	data_buffer[0] = 0xaf;
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	22af      	movs	r2, #175	; 0xaf
 8006f72:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x01;
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	3301      	adds	r3, #1
 8006f78:	2201      	movs	r2, #1
 8006f7a:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	3302      	adds	r3, #2
 8006f80:	2200      	movs	r2, #0
 8006f82:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	3303      	adds	r3, #3
 8006f88:	2200      	movs	r2, #0
 8006f8a:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 8006f8c:	68bb      	ldr	r3, [r7, #8]
 8006f8e:	3304      	adds	r3, #4
 8006f90:	2200      	movs	r2, #0
 8006f92:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	3305      	adds	r3, #5
 8006f98:	2200      	movs	r2, #0
 8006f9a:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	3306      	adds	r3, #6
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	3307      	adds	r3, #7
 8006fa8:	2200      	movs	r2, #0
 8006faa:	701a      	strb	r2, [r3, #0]
}
 8006fac:	bf00      	nop
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr

08006fb8 <motor_pvt0>:

void motor_pvt0(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b085      	sub	sp, #20
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006fca:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	601a      	str	r2, [r3, #0]
	data_buffer[0] = 0xae;
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	22ae      	movs	r2, #174	; 0xae
 8006fda:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	3301      	adds	r3, #1
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	3302      	adds	r3, #2
 8006fe8:	2200      	movs	r2, #0
 8006fea:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	3303      	adds	r3, #3
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	3304      	adds	r3, #4
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	3305      	adds	r3, #5
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3306      	adds	r3, #6
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3307      	adds	r3, #7
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
}
 8007014:	bf00      	nop
 8007016:	3714      	adds	r7, #20
 8007018:	46bd      	mov	sp, r7
 800701a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701e:	4770      	bx	lr

08007020 <motor_pvt>:
	data_buffer[5] = byte_8.buffer[3];
	data_buffer[6] = 0x00;
	data_buffer[7] = 0x00;
}
void motor_pvt(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint64_t data_in, uint32_t Id)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	60f8      	str	r0, [r7, #12]
 8007028:	60b9      	str	r1, [r7, #8]
 800702a:	e9c7 2300 	strd	r2, r3, [r7]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007034:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8007036:	69bb      	ldr	r3, [r7, #24]
 8007038:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	601a      	str	r2, [r3, #0]
	byte_8.udata = data_in;	
 8007040:	4917      	ldr	r1, [pc, #92]	; (80070a0 <motor_pvt+0x80>)
 8007042:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007046:	e9c1 2300 	strd	r2, r3, [r1]
	
	data_buffer[0] = 0xae;
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	22ae      	movs	r2, #174	; 0xae
 800704e:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;		
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	3301      	adds	r3, #1
 8007054:	2200      	movs	r2, #0
 8007056:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = byte_8.buffer[0];
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	3302      	adds	r3, #2
 800705c:	4a10      	ldr	r2, [pc, #64]	; (80070a0 <motor_pvt+0x80>)
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = byte_8.buffer[1];
 8007062:	68bb      	ldr	r3, [r7, #8]
 8007064:	3303      	adds	r3, #3
 8007066:	4a0e      	ldr	r2, [pc, #56]	; (80070a0 <motor_pvt+0x80>)
 8007068:	7852      	ldrb	r2, [r2, #1]
 800706a:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = byte_8.buffer[2];
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	3304      	adds	r3, #4
 8007070:	4a0b      	ldr	r2, [pc, #44]	; (80070a0 <motor_pvt+0x80>)
 8007072:	7892      	ldrb	r2, [r2, #2]
 8007074:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = byte_8.buffer[3];
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	3305      	adds	r3, #5
 800707a:	4a09      	ldr	r2, [pc, #36]	; (80070a0 <motor_pvt+0x80>)
 800707c:	78d2      	ldrb	r2, [r2, #3]
 800707e:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = byte_8.buffer[4];
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	3306      	adds	r3, #6
 8007084:	4a06      	ldr	r2, [pc, #24]	; (80070a0 <motor_pvt+0x80>)
 8007086:	7912      	ldrb	r2, [r2, #4]
 8007088:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = byte_8.buffer[5];
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	3307      	adds	r3, #7
 800708e:	4a04      	ldr	r2, [pc, #16]	; (80070a0 <motor_pvt+0x80>)
 8007090:	7952      	ldrb	r2, [r2, #5]
 8007092:	701a      	strb	r2, [r3, #0]
}
 8007094:	bf00      	nop
 8007096:	3714      	adds	r7, #20
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	24000670 	.word	0x24000670

080070a4 <motor_es>:

void motor_es(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b085      	sub	sp, #20
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	60b9      	str	r1, [r7, #8]
 80070ae:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80070b6:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	601a      	str	r2, [r3, #0]
	
	data_buffer[0] = 0x08;
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2208      	movs	r2, #8
 80070c6:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;		
 80070c8:	68bb      	ldr	r3, [r7, #8]
 80070ca:	3301      	adds	r3, #1
 80070cc:	2200      	movs	r2, #0
 80070ce:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	3302      	adds	r3, #2
 80070d4:	2200      	movs	r2, #0
 80070d6:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	3303      	adds	r3, #3
 80070dc:	2200      	movs	r2, #0
 80070de:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	3304      	adds	r3, #4
 80070e4:	2200      	movs	r2, #0
 80070e6:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	3305      	adds	r3, #5
 80070ec:	2200      	movs	r2, #0
 80070ee:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	3306      	adds	r3, #6
 80070f4:	2200      	movs	r2, #0
 80070f6:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	3307      	adds	r3, #7
 80070fc:	2200      	movs	r2, #0
 80070fe:	701a      	strb	r2, [r3, #0]
}
 8007100:	bf00      	nop
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr

0800710c <motor_steer_init>:


void motor_steer_init(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800711e:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]
	
	data_buffer[0] = 0x02;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	2202      	movs	r2, #2
 800712e:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;		
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	3301      	adds	r3, #1
 8007134:	2200      	movs	r2, #0
 8007136:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 8007138:	68bb      	ldr	r3, [r7, #8]
 800713a:	3302      	adds	r3, #2
 800713c:	2200      	movs	r2, #0
 800713e:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	3303      	adds	r3, #3
 8007144:	2200      	movs	r2, #0
 8007146:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	3304      	adds	r3, #4
 800714c:	2200      	movs	r2, #0
 800714e:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	3305      	adds	r3, #5
 8007154:	2200      	movs	r2, #0
 8007156:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8007158:	68bb      	ldr	r3, [r7, #8]
 800715a:	3306      	adds	r3, #6
 800715c:	2200      	movs	r2, #0
 800715e:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	3307      	adds	r3, #7
 8007164:	2200      	movs	r2, #0
 8007166:	701a      	strb	r2, [r3, #0]
}
 8007168:	bf00      	nop
 800716a:	3714      	adds	r7, #20
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <motor_null>:
	data_buffer[6] = 0x00;
	data_buffer[7] = 0x00;
}

void motor_null(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
 800717a:	60f8      	str	r0, [r7, #12]
 800717c:	60b9      	str	r1, [r7, #8]
 800717e:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007186:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;	
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	601a      	str	r2, [r3, #0]
	
	data_buffer[0] = 0x00;
 8007192:	68bb      	ldr	r3, [r7, #8]
 8007194:	2200      	movs	r2, #0
 8007196:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;		
 8007198:	68bb      	ldr	r3, [r7, #8]
 800719a:	3301      	adds	r3, #1
 800719c:	2200      	movs	r2, #0
 800719e:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	3302      	adds	r3, #2
 80071a4:	2200      	movs	r2, #0
 80071a6:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	3303      	adds	r3, #3
 80071ac:	2200      	movs	r2, #0
 80071ae:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	3304      	adds	r3, #4
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	3305      	adds	r3, #5
 80071bc:	2200      	movs	r2, #0
 80071be:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 80071c0:	68bb      	ldr	r3, [r7, #8]
 80071c2:	3306      	adds	r3, #6
 80071c4:	2200      	movs	r2, #0
 80071c6:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	3307      	adds	r3, #7
 80071cc:	2200      	movs	r2, #0
 80071ce:	701a      	strb	r2, [r3, #0]
}
 80071d0:	bf00      	nop
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <sign_dbl>:
	data_buffer[6] = byte_8.buffer[4];
	data_buffer[7] = byte_8.buffer[5];
}

float_t sign_dbl(float_t data)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	ed87 0a01 	vstr	s0, [r7, #4]
	if (data>0)
 80071e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80071ea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80071ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071f2:	dd02      	ble.n	80071fa <sign_dbl+0x1e>
		return 1.0;
 80071f4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80071f8:	e00a      	b.n	8007210 <sign_dbl+0x34>
	else if (data<0)
 80071fa:	edd7 7a01 	vldr	s15, [r7, #4]
 80071fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007202:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007206:	d501      	bpl.n	800720c <sign_dbl+0x30>
		return -1.0;
 8007208:	4b06      	ldr	r3, [pc, #24]	; (8007224 <sign_dbl+0x48>)
 800720a:	e001      	b.n	8007210 <sign_dbl+0x34>
	else
		return 0.0;
 800720c:	f04f 0300 	mov.w	r3, #0

}
 8007210:	ee07 3a90 	vmov	s15, r3
 8007214:	eeb0 0a67 	vmov.f32	s0, s15
 8007218:	370c      	adds	r7, #12
 800721a:	46bd      	mov	sp, r7
 800721c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007220:	4770      	bx	lr
 8007222:	bf00      	nop
 8007224:	bf800000 	.word	0xbf800000

08007228 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800722c:	f001 f8e4 	bl	80083f8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007230:	f7f9 fae2 	bl	80007f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007234:	f000 f918 	bl	8007468 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007238:	f000 fc1c 	bl	8007a74 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 800723c:	f000 f9c2 	bl	80075c4 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8007240:	f000 fa24 	bl	800768c <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8007244:	f000 fa88 	bl	8007758 <MX_SPI1_Init>
  MX_TIM2_Init();
 8007248:	f000 fade 	bl	8007808 <MX_TIM2_Init>
  MX_TIM4_Init();
 800724c:	f000 fb2a 	bl	80078a4 <MX_TIM4_Init>
  MX_TIM5_Init();
 8007250:	f000 fb76 	bl	8007940 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8007254:	f000 fbc2 	bl	80079dc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	
	//1. init tx msg
	joint_1.Identifier = 0x1;
 8007258:	4b71      	ldr	r3, [pc, #452]	; (8007420 <main+0x1f8>)
 800725a:	2201      	movs	r2, #1
 800725c:	601a      	str	r2, [r3, #0]
	joint_1.IdType = FDCAN_STANDARD_ID;
 800725e:	4b70      	ldr	r3, [pc, #448]	; (8007420 <main+0x1f8>)
 8007260:	2200      	movs	r2, #0
 8007262:	605a      	str	r2, [r3, #4]
	joint_1.TxFrameType = FDCAN_DATA_FRAME;
 8007264:	4b6e      	ldr	r3, [pc, #440]	; (8007420 <main+0x1f8>)
 8007266:	2200      	movs	r2, #0
 8007268:	609a      	str	r2, [r3, #8]
	joint_1.DataLength = FDCAN_DLC_BYTES_8;
 800726a:	4b6d      	ldr	r3, [pc, #436]	; (8007420 <main+0x1f8>)
 800726c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007270:	60da      	str	r2, [r3, #12]
	joint_1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007272:	4b6b      	ldr	r3, [pc, #428]	; (8007420 <main+0x1f8>)
 8007274:	2200      	movs	r2, #0
 8007276:	611a      	str	r2, [r3, #16]
	joint_1.BitRateSwitch = FDCAN_BRS_OFF;
 8007278:	4b69      	ldr	r3, [pc, #420]	; (8007420 <main+0x1f8>)
 800727a:	2200      	movs	r2, #0
 800727c:	615a      	str	r2, [r3, #20]
	joint_1.FDFormat = FDCAN_CLASSIC_CAN;
 800727e:	4b68      	ldr	r3, [pc, #416]	; (8007420 <main+0x1f8>)
 8007280:	2200      	movs	r2, #0
 8007282:	619a      	str	r2, [r3, #24]
	joint_1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007284:	4b66      	ldr	r3, [pc, #408]	; (8007420 <main+0x1f8>)
 8007286:	2200      	movs	r2, #0
 8007288:	61da      	str	r2, [r3, #28]
	joint_1.MessageMarker = 0;
 800728a:	4b65      	ldr	r3, [pc, #404]	; (8007420 <main+0x1f8>)
 800728c:	2200      	movs	r2, #0
 800728e:	621a      	str	r2, [r3, #32]
	
	joint_2.Identifier = 0x2;
 8007290:	4b64      	ldr	r3, [pc, #400]	; (8007424 <main+0x1fc>)
 8007292:	2202      	movs	r2, #2
 8007294:	601a      	str	r2, [r3, #0]
	joint_2.IdType = FDCAN_STANDARD_ID;
 8007296:	4b63      	ldr	r3, [pc, #396]	; (8007424 <main+0x1fc>)
 8007298:	2200      	movs	r2, #0
 800729a:	605a      	str	r2, [r3, #4]
	joint_2.TxFrameType = FDCAN_DATA_FRAME;
 800729c:	4b61      	ldr	r3, [pc, #388]	; (8007424 <main+0x1fc>)
 800729e:	2200      	movs	r2, #0
 80072a0:	609a      	str	r2, [r3, #8]
	joint_2.DataLength = FDCAN_DLC_BYTES_8;
 80072a2:	4b60      	ldr	r3, [pc, #384]	; (8007424 <main+0x1fc>)
 80072a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80072a8:	60da      	str	r2, [r3, #12]
	joint_2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80072aa:	4b5e      	ldr	r3, [pc, #376]	; (8007424 <main+0x1fc>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	611a      	str	r2, [r3, #16]
	joint_2.BitRateSwitch = FDCAN_BRS_OFF;
 80072b0:	4b5c      	ldr	r3, [pc, #368]	; (8007424 <main+0x1fc>)
 80072b2:	2200      	movs	r2, #0
 80072b4:	615a      	str	r2, [r3, #20]
	joint_2.FDFormat = FDCAN_CLASSIC_CAN;
 80072b6:	4b5b      	ldr	r3, [pc, #364]	; (8007424 <main+0x1fc>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	619a      	str	r2, [r3, #24]
	joint_2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80072bc:	4b59      	ldr	r3, [pc, #356]	; (8007424 <main+0x1fc>)
 80072be:	2200      	movs	r2, #0
 80072c0:	61da      	str	r2, [r3, #28]
	joint_2.MessageMarker = 0;
 80072c2:	4b58      	ldr	r3, [pc, #352]	; (8007424 <main+0x1fc>)
 80072c4:	2200      	movs	r2, #0
 80072c6:	621a      	str	r2, [r3, #32]
	
	joint_3.Identifier = 0x3;
 80072c8:	4b57      	ldr	r3, [pc, #348]	; (8007428 <main+0x200>)
 80072ca:	2203      	movs	r2, #3
 80072cc:	601a      	str	r2, [r3, #0]
	joint_3.IdType = FDCAN_STANDARD_ID;
 80072ce:	4b56      	ldr	r3, [pc, #344]	; (8007428 <main+0x200>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	605a      	str	r2, [r3, #4]
	joint_3.TxFrameType = FDCAN_DATA_FRAME;
 80072d4:	4b54      	ldr	r3, [pc, #336]	; (8007428 <main+0x200>)
 80072d6:	2200      	movs	r2, #0
 80072d8:	609a      	str	r2, [r3, #8]
	joint_3.DataLength = FDCAN_DLC_BYTES_8;
 80072da:	4b53      	ldr	r3, [pc, #332]	; (8007428 <main+0x200>)
 80072dc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80072e0:	60da      	str	r2, [r3, #12]
	joint_3.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80072e2:	4b51      	ldr	r3, [pc, #324]	; (8007428 <main+0x200>)
 80072e4:	2200      	movs	r2, #0
 80072e6:	611a      	str	r2, [r3, #16]
	joint_3.BitRateSwitch = FDCAN_BRS_OFF;
 80072e8:	4b4f      	ldr	r3, [pc, #316]	; (8007428 <main+0x200>)
 80072ea:	2200      	movs	r2, #0
 80072ec:	615a      	str	r2, [r3, #20]
	joint_3.FDFormat = FDCAN_CLASSIC_CAN;
 80072ee:	4b4e      	ldr	r3, [pc, #312]	; (8007428 <main+0x200>)
 80072f0:	2200      	movs	r2, #0
 80072f2:	619a      	str	r2, [r3, #24]
	joint_3.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80072f4:	4b4c      	ldr	r3, [pc, #304]	; (8007428 <main+0x200>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	61da      	str	r2, [r3, #28]
	joint_3.MessageMarker = 0;
 80072fa:	4b4b      	ldr	r3, [pc, #300]	; (8007428 <main+0x200>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	621a      	str	r2, [r3, #32]
	
	joint_4.Identifier = 0x4;
 8007300:	4b4a      	ldr	r3, [pc, #296]	; (800742c <main+0x204>)
 8007302:	2204      	movs	r2, #4
 8007304:	601a      	str	r2, [r3, #0]
	joint_4.IdType = FDCAN_STANDARD_ID;
 8007306:	4b49      	ldr	r3, [pc, #292]	; (800742c <main+0x204>)
 8007308:	2200      	movs	r2, #0
 800730a:	605a      	str	r2, [r3, #4]
	joint_4.TxFrameType = FDCAN_DATA_FRAME;
 800730c:	4b47      	ldr	r3, [pc, #284]	; (800742c <main+0x204>)
 800730e:	2200      	movs	r2, #0
 8007310:	609a      	str	r2, [r3, #8]
	joint_4.DataLength = FDCAN_DLC_BYTES_8;
 8007312:	4b46      	ldr	r3, [pc, #280]	; (800742c <main+0x204>)
 8007314:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007318:	60da      	str	r2, [r3, #12]
	joint_4.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800731a:	4b44      	ldr	r3, [pc, #272]	; (800742c <main+0x204>)
 800731c:	2200      	movs	r2, #0
 800731e:	611a      	str	r2, [r3, #16]
	joint_4.BitRateSwitch = FDCAN_BRS_OFF;
 8007320:	4b42      	ldr	r3, [pc, #264]	; (800742c <main+0x204>)
 8007322:	2200      	movs	r2, #0
 8007324:	615a      	str	r2, [r3, #20]
	joint_4.FDFormat = FDCAN_CLASSIC_CAN;
 8007326:	4b41      	ldr	r3, [pc, #260]	; (800742c <main+0x204>)
 8007328:	2200      	movs	r2, #0
 800732a:	619a      	str	r2, [r3, #24]
	joint_4.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800732c:	4b3f      	ldr	r3, [pc, #252]	; (800742c <main+0x204>)
 800732e:	2200      	movs	r2, #0
 8007330:	61da      	str	r2, [r3, #28]
	joint_4.MessageMarker = 0;
 8007332:	4b3e      	ldr	r3, [pc, #248]	; (800742c <main+0x204>)
 8007334:	2200      	movs	r2, #0
 8007336:	621a      	str	r2, [r3, #32]
	
	joint_5.Identifier = 0x5;
 8007338:	4b3d      	ldr	r3, [pc, #244]	; (8007430 <main+0x208>)
 800733a:	2205      	movs	r2, #5
 800733c:	601a      	str	r2, [r3, #0]
	joint_5.IdType = FDCAN_STANDARD_ID;
 800733e:	4b3c      	ldr	r3, [pc, #240]	; (8007430 <main+0x208>)
 8007340:	2200      	movs	r2, #0
 8007342:	605a      	str	r2, [r3, #4]
	joint_5.TxFrameType = FDCAN_DATA_FRAME;
 8007344:	4b3a      	ldr	r3, [pc, #232]	; (8007430 <main+0x208>)
 8007346:	2200      	movs	r2, #0
 8007348:	609a      	str	r2, [r3, #8]
	joint_5.DataLength = FDCAN_DLC_BYTES_8;
 800734a:	4b39      	ldr	r3, [pc, #228]	; (8007430 <main+0x208>)
 800734c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007350:	60da      	str	r2, [r3, #12]
	joint_5.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007352:	4b37      	ldr	r3, [pc, #220]	; (8007430 <main+0x208>)
 8007354:	2200      	movs	r2, #0
 8007356:	611a      	str	r2, [r3, #16]
	joint_5.BitRateSwitch = FDCAN_BRS_OFF;
 8007358:	4b35      	ldr	r3, [pc, #212]	; (8007430 <main+0x208>)
 800735a:	2200      	movs	r2, #0
 800735c:	615a      	str	r2, [r3, #20]
	joint_5.FDFormat = FDCAN_CLASSIC_CAN;
 800735e:	4b34      	ldr	r3, [pc, #208]	; (8007430 <main+0x208>)
 8007360:	2200      	movs	r2, #0
 8007362:	619a      	str	r2, [r3, #24]
	joint_5.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007364:	4b32      	ldr	r3, [pc, #200]	; (8007430 <main+0x208>)
 8007366:	2200      	movs	r2, #0
 8007368:	61da      	str	r2, [r3, #28]
	joint_5.MessageMarker = 0;
 800736a:	4b31      	ldr	r3, [pc, #196]	; (8007430 <main+0x208>)
 800736c:	2200      	movs	r2, #0
 800736e:	621a      	str	r2, [r3, #32]

	joint_6.Identifier = 0x6;
 8007370:	4b30      	ldr	r3, [pc, #192]	; (8007434 <main+0x20c>)
 8007372:	2206      	movs	r2, #6
 8007374:	601a      	str	r2, [r3, #0]
	joint_6.IdType = FDCAN_STANDARD_ID;
 8007376:	4b2f      	ldr	r3, [pc, #188]	; (8007434 <main+0x20c>)
 8007378:	2200      	movs	r2, #0
 800737a:	605a      	str	r2, [r3, #4]
	joint_6.TxFrameType = FDCAN_DATA_FRAME;
 800737c:	4b2d      	ldr	r3, [pc, #180]	; (8007434 <main+0x20c>)
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
	joint_6.DataLength = FDCAN_DLC_BYTES_8;
 8007382:	4b2c      	ldr	r3, [pc, #176]	; (8007434 <main+0x20c>)
 8007384:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007388:	60da      	str	r2, [r3, #12]
	joint_6.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 800738a:	4b2a      	ldr	r3, [pc, #168]	; (8007434 <main+0x20c>)
 800738c:	2200      	movs	r2, #0
 800738e:	611a      	str	r2, [r3, #16]
	joint_6.BitRateSwitch = FDCAN_BRS_OFF;
 8007390:	4b28      	ldr	r3, [pc, #160]	; (8007434 <main+0x20c>)
 8007392:	2200      	movs	r2, #0
 8007394:	615a      	str	r2, [r3, #20]
	joint_6.FDFormat = FDCAN_CLASSIC_CAN;
 8007396:	4b27      	ldr	r3, [pc, #156]	; (8007434 <main+0x20c>)
 8007398:	2200      	movs	r2, #0
 800739a:	619a      	str	r2, [r3, #24]
	joint_6.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800739c:	4b25      	ldr	r3, [pc, #148]	; (8007434 <main+0x20c>)
 800739e:	2200      	movs	r2, #0
 80073a0:	61da      	str	r2, [r3, #28]
	joint_6.MessageMarker = 0;	
 80073a2:	4b24      	ldr	r3, [pc, #144]	; (8007434 <main+0x20c>)
 80073a4:	2200      	movs	r2, #0
 80073a6:	621a      	str	r2, [r3, #32]
	
	
	HAL_FDCAN_Start(&hfdcan1);
 80073a8:	4823      	ldr	r0, [pc, #140]	; (8007438 <main+0x210>)
 80073aa:	f7f9 fe51 	bl	8001050 <HAL_FDCAN_Start>
	HAL_FDCAN_Start(&hfdcan2);
 80073ae:	4823      	ldr	r0, [pc, #140]	; (800743c <main+0x214>)
 80073b0:	f7f9 fe4e 	bl	8001050 <HAL_FDCAN_Start>
	
	HAL_Delay(10);
 80073b4:	200a      	movs	r0, #10
 80073b6:	f7f9 fab1 	bl	800091c <HAL_Delay>
	HAL_TIM_Base_Start(&htim2);
 80073ba:	4821      	ldr	r0, [pc, #132]	; (8007440 <main+0x218>)
 80073bc:	f7fd fc2c 	bl	8004c18 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 80073c0:	4820      	ldr	r0, [pc, #128]	; (8007444 <main+0x21c>)
 80073c2:	f7fd fc29 	bl	8004c18 <HAL_TIM_Base_Start>
	
	HAL_Delay(10);
 80073c6:	200a      	movs	r0, #10
 80073c8:	f7f9 faa8 	bl	800091c <HAL_Delay>

	// 1. init lan9252
	ethercat_slave.spi = &hspi1;
 80073cc:	4b1e      	ldr	r3, [pc, #120]	; (8007448 <main+0x220>)
 80073ce:	4a1f      	ldr	r2, [pc, #124]	; (800744c <main+0x224>)
 80073d0:	605a      	str	r2, [r3, #4]
	ethercat_slave.uart = &huart2;
 80073d2:	4b1d      	ldr	r3, [pc, #116]	; (8007448 <main+0x220>)
 80073d4:	4a1e      	ldr	r2, [pc, #120]	; (8007450 <main+0x228>)
 80073d6:	601a      	str	r2, [r3, #0]
	ethercat_slave.bIn = &BufferIn;
 80073d8:	4b1b      	ldr	r3, [pc, #108]	; (8007448 <main+0x220>)
 80073da:	4a1e      	ldr	r2, [pc, #120]	; (8007454 <main+0x22c>)
 80073dc:	609a      	str	r2, [r3, #8]
	ethercat_slave.bOut = &BufferOut;
 80073de:	4b1a      	ldr	r3, [pc, #104]	; (8007448 <main+0x220>)
 80073e0:	4a1d      	ldr	r2, [pc, #116]	; (8007458 <main+0x230>)
 80073e2:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 80073e4:	200a      	movs	r0, #10
 80073e6:	f7f9 fa99 	bl	800091c <HAL_Delay>
	
	//init9252(&ethercat_slave); // change this !!!!!!!!!!!!!!
	
	HAL_Delay(100);
 80073ea:	2064      	movs	r0, #100	; 0x64
 80073ec:	f7f9 fa96 	bl	800091c <HAL_Delay>
	
	HAL_TIM_Base_Start_IT(&htim5);
 80073f0:	481a      	ldr	r0, [pc, #104]	; (800745c <main+0x234>)
 80073f2:	f7fd fc81 	bl	8004cf8 <HAL_TIM_Base_Start_IT>
	
	HAL_Delay(100);
 80073f6:	2064      	movs	r0, #100	; 0x64
 80073f8:	f7f9 fa90 	bl	800091c <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //while (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0)	
	  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 80073fc:	4b18      	ldr	r3, [pc, #96]	; (8007460 <main+0x238>)
 80073fe:	4a19      	ldr	r2, [pc, #100]	; (8007464 <main+0x23c>)
 8007400:	2140      	movs	r1, #64	; 0x40
 8007402:	480d      	ldr	r0, [pc, #52]	; (8007438 <main+0x210>)
 8007404:	f7f9 feaa 	bl	800115c <HAL_FDCAN_GetRxMessage>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d103      	bne.n	8007416 <main+0x1ee>
	  {
		  unpack_reply(&rx_header, rx_data);
 800740e:	4914      	ldr	r1, [pc, #80]	; (8007460 <main+0x238>)
 8007410:	4814      	ldr	r0, [pc, #80]	; (8007464 <main+0x23c>)
 8007412:	f7ff f9fd 	bl	8006810 <unpack_reply>
	  /*
	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
	  {
		  unpack_reply(&rx_header, rx_data);
	  }*/
	  delay_us(10);
 8007416:	200a      	movs	r0, #10
 8007418:	f7ff f9e0 	bl	80067dc <delay_us>
	  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 800741c:	e7ee      	b.n	80073fc <main+0x1d4>
 800741e:	bf00      	nop
 8007420:	24000490 	.word	0x24000490
 8007424:	240004b4 	.word	0x240004b4
 8007428:	240004d8 	.word	0x240004d8
 800742c:	240004fc 	.word	0x240004fc
 8007430:	24000520 	.word	0x24000520
 8007434:	24000544 	.word	0x24000544
 8007438:	24000150 	.word	0x24000150
 800743c:	240001f0 	.word	0x240001f0
 8007440:	24000318 	.word	0x24000318
 8007444:	24000364 	.word	0x24000364
 8007448:	24000138 	.word	0x24000138
 800744c:	24000290 	.word	0x24000290
 8007450:	240003fc 	.word	0x240003fc
 8007454:	240000e0 	.word	0x240000e0
 8007458:	24000070 	.word	0x24000070
 800745c:	240003b0 	.word	0x240003b0
 8007460:	240005f0 	.word	0x240005f0
 8007464:	240005c8 	.word	0x240005c8

08007468 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b09e      	sub	sp, #120	; 0x78
 800746c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800746e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007472:	224c      	movs	r2, #76	; 0x4c
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f001 fb16 	bl	8008aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800747c:	f107 030c 	add.w	r3, r7, #12
 8007480:	2220      	movs	r2, #32
 8007482:	2100      	movs	r1, #0
 8007484:	4618      	mov	r0, r3
 8007486:	f001 fb0f 	bl	8008aa8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800748a:	2002      	movs	r0, #2
 800748c:	f7fa fbe2 	bl	8001c54 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007490:	2300      	movs	r3, #0
 8007492:	60bb      	str	r3, [r7, #8]
 8007494:	4b48      	ldr	r3, [pc, #288]	; (80075b8 <SystemClock_Config+0x150>)
 8007496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007498:	4a47      	ldr	r2, [pc, #284]	; (80075b8 <SystemClock_Config+0x150>)
 800749a:	f023 0301 	bic.w	r3, r3, #1
 800749e:	62d3      	str	r3, [r2, #44]	; 0x2c
 80074a0:	4b45      	ldr	r3, [pc, #276]	; (80075b8 <SystemClock_Config+0x150>)
 80074a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	60bb      	str	r3, [r7, #8]
 80074aa:	4b44      	ldr	r3, [pc, #272]	; (80075bc <SystemClock_Config+0x154>)
 80074ac:	699b      	ldr	r3, [r3, #24]
 80074ae:	4a43      	ldr	r2, [pc, #268]	; (80075bc <SystemClock_Config+0x154>)
 80074b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074b4:	6193      	str	r3, [r2, #24]
 80074b6:	4b41      	ldr	r3, [pc, #260]	; (80075bc <SystemClock_Config+0x154>)
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80074be:	60bb      	str	r3, [r7, #8]
 80074c0:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80074c2:	bf00      	nop
 80074c4:	4b3d      	ldr	r3, [pc, #244]	; (80075bc <SystemClock_Config+0x154>)
 80074c6:	699b      	ldr	r3, [r3, #24]
 80074c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80074cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074d0:	d1f8      	bne.n	80074c4 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074d2:	4b3b      	ldr	r3, [pc, #236]	; (80075c0 <SystemClock_Config+0x158>)
 80074d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074d8:	4a39      	ldr	r2, [pc, #228]	; (80075c0 <SystemClock_Config+0x158>)
 80074da:	f043 0302 	orr.w	r3, r3, #2
 80074de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80074e2:	4b37      	ldr	r3, [pc, #220]	; (80075c0 <SystemClock_Config+0x158>)
 80074e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80074e8:	f003 0302 	and.w	r3, r3, #2
 80074ec:	607b      	str	r3, [r7, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80074f0:	2300      	movs	r3, #0
 80074f2:	603b      	str	r3, [r7, #0]
 80074f4:	4b31      	ldr	r3, [pc, #196]	; (80075bc <SystemClock_Config+0x154>)
 80074f6:	699b      	ldr	r3, [r3, #24]
 80074f8:	4a30      	ldr	r2, [pc, #192]	; (80075bc <SystemClock_Config+0x154>)
 80074fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80074fe:	6193      	str	r3, [r2, #24]
 8007500:	4b2e      	ldr	r3, [pc, #184]	; (80075bc <SystemClock_Config+0x154>)
 8007502:	699b      	ldr	r3, [r3, #24]
 8007504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007508:	603b      	str	r3, [r7, #0]
 800750a:	4b2b      	ldr	r3, [pc, #172]	; (80075b8 <SystemClock_Config+0x150>)
 800750c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750e:	4a2a      	ldr	r2, [pc, #168]	; (80075b8 <SystemClock_Config+0x150>)
 8007510:	f043 0301 	orr.w	r3, r3, #1
 8007514:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007516:	4b28      	ldr	r3, [pc, #160]	; (80075b8 <SystemClock_Config+0x150>)
 8007518:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800751a:	f003 0301 	and.w	r3, r3, #1
 800751e:	603b      	str	r3, [r7, #0]
 8007520:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007522:	bf00      	nop
 8007524:	4b25      	ldr	r3, [pc, #148]	; (80075bc <SystemClock_Config+0x154>)
 8007526:	699b      	ldr	r3, [r3, #24]
 8007528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800752c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007530:	d1f8      	bne.n	8007524 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007532:	2301      	movs	r3, #1
 8007534:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007536:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800753a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800753c:	2302      	movs	r3, #2
 800753e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007540:	2302      	movs	r3, #2
 8007542:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 3;
 8007544:	2303      	movs	r3, #3
 8007546:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8007548:	23f0      	movs	r3, #240	; 0xf0
 800754a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 800754c:	2302      	movs	r3, #2
 800754e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8007550:	2308      	movs	r3, #8
 8007552:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007554:	2302      	movs	r3, #2
 8007556:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007558:	2308      	movs	r3, #8
 800755a:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800755c:	2300      	movs	r3, #0
 800755e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007560:	2300      	movs	r3, #0
 8007562:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007564:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007568:	4618      	mov	r0, r3
 800756a:	f7fa fbad 	bl	8001cc8 <HAL_RCC_OscConfig>
 800756e:	4603      	mov	r3, r0
 8007570:	2b00      	cmp	r3, #0
 8007572:	d001      	beq.n	8007578 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8007574:	f000 ff6c 	bl	8008450 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007578:	233f      	movs	r3, #63	; 0x3f
 800757a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800757c:	2303      	movs	r3, #3
 800757e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007580:	2300      	movs	r3, #0
 8007582:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007584:	2308      	movs	r3, #8
 8007586:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007588:	2340      	movs	r3, #64	; 0x40
 800758a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800758c:	2340      	movs	r3, #64	; 0x40
 800758e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007590:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007596:	2340      	movs	r3, #64	; 0x40
 8007598:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	2104      	movs	r1, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fa ffeb 	bl	800257c <HAL_RCC_ClockConfig>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d001      	beq.n	80075b0 <SystemClock_Config+0x148>
  {
    Error_Handler();
 80075ac:	f000 ff50 	bl	8008450 <Error_Handler>
  }
}
 80075b0:	bf00      	nop
 80075b2:	3778      	adds	r7, #120	; 0x78
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	58000400 	.word	0x58000400
 80075bc:	58024800 	.word	0x58024800
 80075c0:	58024400 	.word	0x58024400

080075c4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80075c8:	4b2e      	ldr	r3, [pc, #184]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 80075ca:	4a2f      	ldr	r2, [pc, #188]	; (8007688 <MX_FDCAN1_Init+0xc4>)
 80075cc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80075ce:	4b2d      	ldr	r3, [pc, #180]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80075d4:	4b2b      	ldr	r3, [pc, #172]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 80075da:	4b2a      	ldr	r3, [pc, #168]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 80075dc:	2201      	movs	r2, #1
 80075de:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80075e0:	4b28      	ldr	r3, [pc, #160]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80075e6:	4b27      	ldr	r3, [pc, #156]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 80075ec:	4b25      	ldr	r3, [pc, #148]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 80075ee:	2208      	movs	r2, #8
 80075f0:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80075f2:	4b24      	ldr	r3, [pc, #144]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 80075f4:	2201      	movs	r2, #1
 80075f6:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 80075f8:	4b22      	ldr	r3, [pc, #136]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 80075fa:	220a      	movs	r2, #10
 80075fc:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 80075fe:	4b21      	ldr	r3, [pc, #132]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007600:	2204      	movs	r2, #4
 8007602:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 8007604:	4b1f      	ldr	r3, [pc, #124]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007606:	2208      	movs	r2, #8
 8007608:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800760a:	4b1e      	ldr	r3, [pc, #120]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 800760c:	2201      	movs	r2, #1
 800760e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8007610:	4b1c      	ldr	r3, [pc, #112]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007612:	220a      	movs	r2, #10
 8007614:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8007616:	4b1b      	ldr	r3, [pc, #108]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007618:	2204      	movs	r2, #4
 800761a:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 800761c:	4b19      	ldr	r3, [pc, #100]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 800761e:	2200      	movs	r2, #0
 8007620:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8007622:	4b18      	ldr	r3, [pc, #96]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007624:	2200      	movs	r2, #0
 8007626:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8007628:	4b16      	ldr	r3, [pc, #88]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 800762a:	2200      	movs	r2, #0
 800762c:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 6;
 800762e:	4b15      	ldr	r3, [pc, #84]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007630:	2206      	movs	r2, #6
 8007632:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8007634:	4b13      	ldr	r3, [pc, #76]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007636:	2204      	movs	r2, #4
 8007638:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800763a:	4b12      	ldr	r3, [pc, #72]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 800763c:	2200      	movs	r2, #0
 800763e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8007640:	4b10      	ldr	r3, [pc, #64]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007642:	2204      	movs	r2, #4
 8007644:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8007646:	4b0f      	ldr	r3, [pc, #60]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007648:	2200      	movs	r2, #0
 800764a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800764c:	4b0d      	ldr	r3, [pc, #52]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 800764e:	2204      	movs	r2, #4
 8007650:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8007652:	4b0c      	ldr	r3, [pc, #48]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007654:	2200      	movs	r2, #0
 8007656:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 800765a:	2200      	movs	r2, #0
 800765c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 6;
 800765e:	4b09      	ldr	r3, [pc, #36]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007660:	2206      	movs	r2, #6
 8007662:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8007664:	4b07      	ldr	r3, [pc, #28]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007666:	2200      	movs	r2, #0
 8007668:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800766a:	4b06      	ldr	r3, [pc, #24]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 800766c:	2204      	movs	r2, #4
 800766e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8007670:	4804      	ldr	r0, [pc, #16]	; (8007684 <MX_FDCAN1_Init+0xc0>)
 8007672:	f7f9 fb0f 	bl	8000c94 <HAL_FDCAN_Init>
 8007676:	4603      	mov	r3, r0
 8007678:	2b00      	cmp	r3, #0
 800767a:	d001      	beq.n	8007680 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 800767c:	f000 fee8 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8007680:	bf00      	nop
 8007682:	bd80      	pop	{r7, pc}
 8007684:	24000150 	.word	0x24000150
 8007688:	4000a000 	.word	0x4000a000

0800768c <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 800768c:	b580      	push	{r7, lr}
 800768e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8007690:	4b2f      	ldr	r3, [pc, #188]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 8007692:	4a30      	ldr	r2, [pc, #192]	; (8007754 <MX_FDCAN2_Init+0xc8>)
 8007694:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8007696:	4b2e      	ldr	r3, [pc, #184]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 8007698:	2200      	movs	r2, #0
 800769a:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 800769c:	4b2c      	ldr	r3, [pc, #176]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 800769e:	2200      	movs	r2, #0
 80076a0:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 80076a2:	4b2b      	ldr	r3, [pc, #172]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80076a8:	4b29      	ldr	r3, [pc, #164]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076aa:	2200      	movs	r2, #0
 80076ac:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80076ae:	4b28      	ldr	r3, [pc, #160]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076b0:	2200      	movs	r2, #0
 80076b2:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 8;
 80076b4:	4b26      	ldr	r3, [pc, #152]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076b6:	2208      	movs	r2, #8
 80076b8:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80076ba:	4b25      	ldr	r3, [pc, #148]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076bc:	2201      	movs	r2, #1
 80076be:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 80076c0:	4b23      	ldr	r3, [pc, #140]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076c2:	220a      	movs	r2, #10
 80076c4:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 4;
 80076c6:	4b22      	ldr	r3, [pc, #136]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076c8:	2204      	movs	r2, #4
 80076ca:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 8;
 80076cc:	4b20      	ldr	r3, [pc, #128]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076ce:	2208      	movs	r2, #8
 80076d0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80076d2:	4b1f      	ldr	r3, [pc, #124]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 10;
 80076d8:	4b1d      	ldr	r3, [pc, #116]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076da:	220a      	movs	r2, #10
 80076dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 80076de:	4b1c      	ldr	r3, [pc, #112]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076e0:	2204      	movs	r2, #4
 80076e2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 1024;
 80076e4:	4b1a      	ldr	r3, [pc, #104]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80076ea:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80076ec:	4b18      	ldr	r3, [pc, #96]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076ee:	2200      	movs	r2, #0
 80076f0:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80076f2:	4b17      	ldr	r3, [pc, #92]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076f4:	2200      	movs	r2, #0
 80076f6:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 6;
 80076f8:	4b15      	ldr	r3, [pc, #84]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 80076fa:	2206      	movs	r2, #6
 80076fc:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80076fe:	4b14      	ldr	r3, [pc, #80]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 8007700:	2204      	movs	r2, #4
 8007702:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8007704:	4b12      	ldr	r3, [pc, #72]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 8007706:	2200      	movs	r2, #0
 8007708:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 800770a:	4b11      	ldr	r3, [pc, #68]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 800770c:	2204      	movs	r2, #4
 800770e:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8007710:	4b0f      	ldr	r3, [pc, #60]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 8007712:	2200      	movs	r2, #0
 8007714:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8007716:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 8007718:	2204      	movs	r2, #4
 800771a:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 800771c:	4b0c      	ldr	r3, [pc, #48]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 800771e:	2200      	movs	r2, #0
 8007720:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8007722:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 8007724:	2200      	movs	r2, #0
 8007726:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 6;
 8007728:	4b09      	ldr	r3, [pc, #36]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 800772a:	2206      	movs	r2, #6
 800772c:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800772e:	4b08      	ldr	r3, [pc, #32]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 8007730:	2200      	movs	r2, #0
 8007732:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8007734:	4b06      	ldr	r3, [pc, #24]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 8007736:	2204      	movs	r2, #4
 8007738:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 800773a:	4805      	ldr	r0, [pc, #20]	; (8007750 <MX_FDCAN2_Init+0xc4>)
 800773c:	f7f9 faaa 	bl	8000c94 <HAL_FDCAN_Init>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8007746:	f000 fe83 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 800774a:	bf00      	nop
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	240001f0 	.word	0x240001f0
 8007754:	4000a400 	.word	0x4000a400

08007758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800775c:	4b28      	ldr	r3, [pc, #160]	; (8007800 <MX_SPI1_Init+0xa8>)
 800775e:	4a29      	ldr	r2, [pc, #164]	; (8007804 <MX_SPI1_Init+0xac>)
 8007760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007762:	4b27      	ldr	r3, [pc, #156]	; (8007800 <MX_SPI1_Init+0xa8>)
 8007764:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800776a:	4b25      	ldr	r3, [pc, #148]	; (8007800 <MX_SPI1_Init+0xa8>)
 800776c:	2200      	movs	r2, #0
 800776e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007770:	4b23      	ldr	r3, [pc, #140]	; (8007800 <MX_SPI1_Init+0xa8>)
 8007772:	2207      	movs	r2, #7
 8007774:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007776:	4b22      	ldr	r3, [pc, #136]	; (8007800 <MX_SPI1_Init+0xa8>)
 8007778:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800777c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800777e:	4b20      	ldr	r3, [pc, #128]	; (8007800 <MX_SPI1_Init+0xa8>)
 8007780:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007786:	4b1e      	ldr	r3, [pc, #120]	; (8007800 <MX_SPI1_Init+0xa8>)
 8007788:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800778c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800778e:	4b1c      	ldr	r3, [pc, #112]	; (8007800 <MX_SPI1_Init+0xa8>)
 8007790:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007794:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007796:	4b1a      	ldr	r3, [pc, #104]	; (8007800 <MX_SPI1_Init+0xa8>)
 8007798:	2200      	movs	r2, #0
 800779a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800779c:	4b18      	ldr	r3, [pc, #96]	; (8007800 <MX_SPI1_Init+0xa8>)
 800779e:	2200      	movs	r2, #0
 80077a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077a2:	4b17      	ldr	r3, [pc, #92]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80077a8:	4b15      	ldr	r3, [pc, #84]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077aa:	2200      	movs	r2, #0
 80077ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80077ae:	4b14      	ldr	r3, [pc, #80]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80077b4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80077b6:	4b12      	ldr	r3, [pc, #72]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077b8:	2200      	movs	r2, #0
 80077ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80077bc:	4b10      	ldr	r3, [pc, #64]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077be:	2200      	movs	r2, #0
 80077c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80077c2:	4b0f      	ldr	r3, [pc, #60]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077c4:	2200      	movs	r2, #0
 80077c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80077c8:	4b0d      	ldr	r3, [pc, #52]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077ca:	2200      	movs	r2, #0
 80077cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80077ce:	4b0c      	ldr	r3, [pc, #48]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077d0:	2200      	movs	r2, #0
 80077d2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80077d4:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077d6:	2200      	movs	r2, #0
 80077d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80077da:	4b09      	ldr	r3, [pc, #36]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077dc:	2200      	movs	r2, #0
 80077de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077e2:	2200      	movs	r2, #0
 80077e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80077e6:	4b06      	ldr	r3, [pc, #24]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077e8:	2200      	movs	r2, #0
 80077ea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80077ec:	4804      	ldr	r0, [pc, #16]	; (8007800 <MX_SPI1_Init+0xa8>)
 80077ee:	f7fd f87d 	bl	80048ec <HAL_SPI_Init>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 80077f8:	f000 fe2a 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80077fc:	bf00      	nop
 80077fe:	bd80      	pop	{r7, pc}
 8007800:	24000290 	.word	0x24000290
 8007804:	40013000 	.word	0x40013000

08007808 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b088      	sub	sp, #32
 800780c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800780e:	f107 0310 	add.w	r3, r7, #16
 8007812:	2200      	movs	r2, #0
 8007814:	601a      	str	r2, [r3, #0]
 8007816:	605a      	str	r2, [r3, #4]
 8007818:	609a      	str	r2, [r3, #8]
 800781a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800781c:	1d3b      	adds	r3, r7, #4
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]
 8007822:	605a      	str	r2, [r3, #4]
 8007824:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007826:	4b1e      	ldr	r3, [pc, #120]	; (80078a0 <MX_TIM2_Init+0x98>)
 8007828:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800782c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 800782e:	4b1c      	ldr	r3, [pc, #112]	; (80078a0 <MX_TIM2_Init+0x98>)
 8007830:	22ef      	movs	r2, #239	; 0xef
 8007832:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007834:	4b1a      	ldr	r3, [pc, #104]	; (80078a0 <MX_TIM2_Init+0x98>)
 8007836:	2200      	movs	r2, #0
 8007838:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800783a:	4b19      	ldr	r3, [pc, #100]	; (80078a0 <MX_TIM2_Init+0x98>)
 800783c:	f04f 32ff 	mov.w	r2, #4294967295
 8007840:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007842:	4b17      	ldr	r3, [pc, #92]	; (80078a0 <MX_TIM2_Init+0x98>)
 8007844:	2200      	movs	r2, #0
 8007846:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007848:	4b15      	ldr	r3, [pc, #84]	; (80078a0 <MX_TIM2_Init+0x98>)
 800784a:	2200      	movs	r2, #0
 800784c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800784e:	4814      	ldr	r0, [pc, #80]	; (80078a0 <MX_TIM2_Init+0x98>)
 8007850:	f7fd f98b 	bl	8004b6a <HAL_TIM_Base_Init>
 8007854:	4603      	mov	r3, r0
 8007856:	2b00      	cmp	r3, #0
 8007858:	d001      	beq.n	800785e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800785a:	f000 fdf9 	bl	8008450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800785e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007862:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007864:	f107 0310 	add.w	r3, r7, #16
 8007868:	4619      	mov	r1, r3
 800786a:	480d      	ldr	r0, [pc, #52]	; (80078a0 <MX_TIM2_Init+0x98>)
 800786c:	f7fd fbdc 	bl	8005028 <HAL_TIM_ConfigClockSource>
 8007870:	4603      	mov	r3, r0
 8007872:	2b00      	cmp	r3, #0
 8007874:	d001      	beq.n	800787a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007876:	f000 fdeb 	bl	8008450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800787a:	2300      	movs	r3, #0
 800787c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800787e:	2300      	movs	r3, #0
 8007880:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007882:	1d3b      	adds	r3, r7, #4
 8007884:	4619      	mov	r1, r3
 8007886:	4806      	ldr	r0, [pc, #24]	; (80078a0 <MX_TIM2_Init+0x98>)
 8007888:	f7fd fe26 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007892:	f000 fddd 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007896:	bf00      	nop
 8007898:	3720      	adds	r7, #32
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	24000318 	.word	0x24000318

080078a4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b088      	sub	sp, #32
 80078a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80078aa:	f107 0310 	add.w	r3, r7, #16
 80078ae:	2200      	movs	r2, #0
 80078b0:	601a      	str	r2, [r3, #0]
 80078b2:	605a      	str	r2, [r3, #4]
 80078b4:	609a      	str	r2, [r3, #8]
 80078b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80078b8:	1d3b      	adds	r3, r7, #4
 80078ba:	2200      	movs	r2, #0
 80078bc:	601a      	str	r2, [r3, #0]
 80078be:	605a      	str	r2, [r3, #4]
 80078c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80078c2:	4b1d      	ldr	r3, [pc, #116]	; (8007938 <MX_TIM4_Init+0x94>)
 80078c4:	4a1d      	ldr	r2, [pc, #116]	; (800793c <MX_TIM4_Init+0x98>)
 80078c6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 239;
 80078c8:	4b1b      	ldr	r3, [pc, #108]	; (8007938 <MX_TIM4_Init+0x94>)
 80078ca:	22ef      	movs	r2, #239	; 0xef
 80078cc:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80078ce:	4b1a      	ldr	r3, [pc, #104]	; (8007938 <MX_TIM4_Init+0x94>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80078d4:	4b18      	ldr	r3, [pc, #96]	; (8007938 <MX_TIM4_Init+0x94>)
 80078d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80078da:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80078dc:	4b16      	ldr	r3, [pc, #88]	; (8007938 <MX_TIM4_Init+0x94>)
 80078de:	2200      	movs	r2, #0
 80078e0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80078e2:	4b15      	ldr	r3, [pc, #84]	; (8007938 <MX_TIM4_Init+0x94>)
 80078e4:	2200      	movs	r2, #0
 80078e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80078e8:	4813      	ldr	r0, [pc, #76]	; (8007938 <MX_TIM4_Init+0x94>)
 80078ea:	f7fd f93e 	bl	8004b6a <HAL_TIM_Base_Init>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80078f4:	f000 fdac 	bl	8008450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80078f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80078fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80078fe:	f107 0310 	add.w	r3, r7, #16
 8007902:	4619      	mov	r1, r3
 8007904:	480c      	ldr	r0, [pc, #48]	; (8007938 <MX_TIM4_Init+0x94>)
 8007906:	f7fd fb8f 	bl	8005028 <HAL_TIM_ConfigClockSource>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d001      	beq.n	8007914 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8007910:	f000 fd9e 	bl	8008450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007914:	2300      	movs	r3, #0
 8007916:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007918:	2300      	movs	r3, #0
 800791a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800791c:	1d3b      	adds	r3, r7, #4
 800791e:	4619      	mov	r1, r3
 8007920:	4805      	ldr	r0, [pc, #20]	; (8007938 <MX_TIM4_Init+0x94>)
 8007922:	f7fd fdd9 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 8007926:	4603      	mov	r3, r0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d001      	beq.n	8007930 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800792c:	f000 fd90 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8007930:	bf00      	nop
 8007932:	3720      	adds	r7, #32
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	24000364 	.word	0x24000364
 800793c:	40000800 	.word	0x40000800

08007940 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b088      	sub	sp, #32
 8007944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007946:	f107 0310 	add.w	r3, r7, #16
 800794a:	2200      	movs	r2, #0
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	605a      	str	r2, [r3, #4]
 8007950:	609a      	str	r2, [r3, #8]
 8007952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007954:	1d3b      	adds	r3, r7, #4
 8007956:	2200      	movs	r2, #0
 8007958:	601a      	str	r2, [r3, #0]
 800795a:	605a      	str	r2, [r3, #4]
 800795c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800795e:	4b1d      	ldr	r3, [pc, #116]	; (80079d4 <MX_TIM5_Init+0x94>)
 8007960:	4a1d      	ldr	r2, [pc, #116]	; (80079d8 <MX_TIM5_Init+0x98>)
 8007962:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 239;
 8007964:	4b1b      	ldr	r3, [pc, #108]	; (80079d4 <MX_TIM5_Init+0x94>)
 8007966:	22ef      	movs	r2, #239	; 0xef
 8007968:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800796a:	4b1a      	ldr	r3, [pc, #104]	; (80079d4 <MX_TIM5_Init+0x94>)
 800796c:	2200      	movs	r2, #0
 800796e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8007970:	4b18      	ldr	r3, [pc, #96]	; (80079d4 <MX_TIM5_Init+0x94>)
 8007972:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007976:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007978:	4b16      	ldr	r3, [pc, #88]	; (80079d4 <MX_TIM5_Init+0x94>)
 800797a:	2200      	movs	r2, #0
 800797c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800797e:	4b15      	ldr	r3, [pc, #84]	; (80079d4 <MX_TIM5_Init+0x94>)
 8007980:	2200      	movs	r2, #0
 8007982:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007984:	4813      	ldr	r0, [pc, #76]	; (80079d4 <MX_TIM5_Init+0x94>)
 8007986:	f7fd f8f0 	bl	8004b6a <HAL_TIM_Base_Init>
 800798a:	4603      	mov	r3, r0
 800798c:	2b00      	cmp	r3, #0
 800798e:	d001      	beq.n	8007994 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007990:	f000 fd5e 	bl	8008450 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007994:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007998:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800799a:	f107 0310 	add.w	r3, r7, #16
 800799e:	4619      	mov	r1, r3
 80079a0:	480c      	ldr	r0, [pc, #48]	; (80079d4 <MX_TIM5_Init+0x94>)
 80079a2:	f7fd fb41 	bl	8005028 <HAL_TIM_ConfigClockSource>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80079ac:	f000 fd50 	bl	8008450 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80079b0:	2300      	movs	r3, #0
 80079b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079b4:	2300      	movs	r3, #0
 80079b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80079b8:	1d3b      	adds	r3, r7, #4
 80079ba:	4619      	mov	r1, r3
 80079bc:	4805      	ldr	r0, [pc, #20]	; (80079d4 <MX_TIM5_Init+0x94>)
 80079be:	f7fd fd8b 	bl	80054d8 <HAL_TIMEx_MasterConfigSynchronization>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d001      	beq.n	80079cc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80079c8:	f000 fd42 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80079cc:	bf00      	nop
 80079ce:	3720      	adds	r7, #32
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	240003b0 	.word	0x240003b0
 80079d8:	40000c00 	.word	0x40000c00

080079dc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80079e0:	4b22      	ldr	r3, [pc, #136]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 80079e2:	4a23      	ldr	r2, [pc, #140]	; (8007a70 <MX_USART2_UART_Init+0x94>)
 80079e4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80079e6:	4b21      	ldr	r3, [pc, #132]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 80079e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80079ec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80079ee:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 80079f0:	2200      	movs	r2, #0
 80079f2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80079f4:	4b1d      	ldr	r3, [pc, #116]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80079fa:	4b1c      	ldr	r3, [pc, #112]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8007a00:	4b1a      	ldr	r3, [pc, #104]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 8007a02:	220c      	movs	r2, #12
 8007a04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a06:	4b19      	ldr	r3, [pc, #100]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a0c:	4b17      	ldr	r3, [pc, #92]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007a12:	4b16      	ldr	r3, [pc, #88]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007a18:	4b14      	ldr	r3, [pc, #80]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007a1e:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 8007a20:	2200      	movs	r2, #0
 8007a22:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8007a24:	4811      	ldr	r0, [pc, #68]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 8007a26:	f7fd fe03 	bl	8005630 <HAL_UART_Init>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d001      	beq.n	8007a34 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8007a30:	f000 fd0e 	bl	8008450 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007a34:	2100      	movs	r1, #0
 8007a36:	480d      	ldr	r0, [pc, #52]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 8007a38:	f7fe fe05 	bl	8006646 <HAL_UARTEx_SetTxFifoThreshold>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8007a42:	f000 fd05 	bl	8008450 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007a46:	2100      	movs	r1, #0
 8007a48:	4808      	ldr	r0, [pc, #32]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 8007a4a:	f7fe fe3a 	bl	80066c2 <HAL_UARTEx_SetRxFifoThreshold>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8007a54:	f000 fcfc 	bl	8008450 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8007a58:	4804      	ldr	r0, [pc, #16]	; (8007a6c <MX_USART2_UART_Init+0x90>)
 8007a5a:	f7fe fdbb 	bl	80065d4 <HAL_UARTEx_DisableFifoMode>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8007a64:	f000 fcf4 	bl	8008450 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8007a68:	bf00      	nop
 8007a6a:	bd80      	pop	{r7, pc}
 8007a6c:	240003fc 	.word	0x240003fc
 8007a70:	40004400 	.word	0x40004400

08007a74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08a      	sub	sp, #40	; 0x28
 8007a78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a7a:	f107 0314 	add.w	r3, r7, #20
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	605a      	str	r2, [r3, #4]
 8007a84:	609a      	str	r2, [r3, #8]
 8007a86:	60da      	str	r2, [r3, #12]
 8007a88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a8a:	4b2a      	ldr	r3, [pc, #168]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007a90:	4a28      	ldr	r2, [pc, #160]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007a92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007a9a:	4b26      	ldr	r3, [pc, #152]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007a9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007aa4:	613b      	str	r3, [r7, #16]
 8007aa6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aa8:	4b22      	ldr	r3, [pc, #136]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aae:	4a21      	ldr	r2, [pc, #132]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007ab0:	f043 0301 	orr.w	r3, r3, #1
 8007ab4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ab8:	4b1e      	ldr	r3, [pc, #120]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007aba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007abe:	f003 0301 	and.w	r3, r3, #1
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007ac6:	4b1b      	ldr	r3, [pc, #108]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007acc:	4a19      	ldr	r2, [pc, #100]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007ace:	f043 0302 	orr.w	r3, r3, #2
 8007ad2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007ad6:	4b17      	ldr	r3, [pc, #92]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007ad8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007adc:	f003 0302 	and.w	r3, r3, #2
 8007ae0:	60bb      	str	r3, [r7, #8]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007ae4:	4b13      	ldr	r3, [pc, #76]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007ae6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007aea:	4a12      	ldr	r2, [pc, #72]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007aec:	f043 0308 	orr.w	r3, r3, #8
 8007af0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007af4:	4b0f      	ldr	r3, [pc, #60]	; (8007b34 <MX_GPIO_Init+0xc0>)
 8007af6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007afa:	f003 0308 	and.w	r3, r3, #8
 8007afe:	607b      	str	r3, [r7, #4]
 8007b00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSS_Pin|ES_Pin, GPIO_PIN_RESET);
 8007b02:	2200      	movs	r2, #0
 8007b04:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8007b08:	480b      	ldr	r0, [pc, #44]	; (8007b38 <MX_GPIO_Init+0xc4>)
 8007b0a:	f7fa f86f 	bl	8001bec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSS_Pin ES_Pin */
  GPIO_InitStruct.Pin = CSS_Pin|ES_Pin;
 8007b0e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8007b12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b14:	2301      	movs	r3, #1
 8007b16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b20:	f107 0314 	add.w	r3, r7, #20
 8007b24:	4619      	mov	r1, r3
 8007b26:	4804      	ldr	r0, [pc, #16]	; (8007b38 <MX_GPIO_Init+0xc4>)
 8007b28:	f7f9 feb0 	bl	800188c <HAL_GPIO_Init>

}
 8007b2c:	bf00      	nop
 8007b2e:	3728      	adds	r7, #40	; 0x28
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	58024400 	.word	0x58024400
 8007b38:	58020000 	.word	0x58020000

08007b3c <send_to_all_slave>:

//int is_enable = 0;
//int motor_init_state = 0;

void send_to_all_slave()
{	
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	af00      	add	r7, sp, #0
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
		{
			unpack_reply(&rx_header, rx_data);
			  
		}*/
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &joint_1, joint_1_data) != HAL_OK)
 8007b40:	4a21      	ldr	r2, [pc, #132]	; (8007bc8 <send_to_all_slave+0x8c>)
 8007b42:	4922      	ldr	r1, [pc, #136]	; (8007bcc <send_to_all_slave+0x90>)
 8007b44:	4822      	ldr	r0, [pc, #136]	; (8007bd0 <send_to_all_slave+0x94>)
 8007b46:	f7f9 faae 	bl	80010a6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d004      	beq.n	8007b5a <send_to_all_slave+0x1e>
	{
		can1_error_counter += 1;
 8007b50:	4b20      	ldr	r3, [pc, #128]	; (8007bd4 <send_to_all_slave+0x98>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	3301      	adds	r3, #1
 8007b56:	4a1f      	ldr	r2, [pc, #124]	; (8007bd4 <send_to_all_slave+0x98>)
 8007b58:	6013      	str	r3, [r2, #0]
	}




	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &joint_2, joint_2_data) != HAL_OK)
 8007b5a:	4a1f      	ldr	r2, [pc, #124]	; (8007bd8 <send_to_all_slave+0x9c>)
 8007b5c:	491f      	ldr	r1, [pc, #124]	; (8007bdc <send_to_all_slave+0xa0>)
 8007b5e:	481c      	ldr	r0, [pc, #112]	; (8007bd0 <send_to_all_slave+0x94>)
 8007b60:	f7f9 faa1 	bl	80010a6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d004      	beq.n	8007b74 <send_to_all_slave+0x38>
	{
		can1_error_counter += 1;
 8007b6a:	4b1a      	ldr	r3, [pc, #104]	; (8007bd4 <send_to_all_slave+0x98>)
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3301      	adds	r3, #1
 8007b70:	4a18      	ldr	r2, [pc, #96]	; (8007bd4 <send_to_all_slave+0x98>)
 8007b72:	6013      	str	r3, [r2, #0]
	}
	

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &joint_3, joint_3_data) != HAL_OK)
 8007b74:	4a1a      	ldr	r2, [pc, #104]	; (8007be0 <send_to_all_slave+0xa4>)
 8007b76:	491b      	ldr	r1, [pc, #108]	; (8007be4 <send_to_all_slave+0xa8>)
 8007b78:	4815      	ldr	r0, [pc, #84]	; (8007bd0 <send_to_all_slave+0x94>)
 8007b7a:	f7f9 fa94 	bl	80010a6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d004      	beq.n	8007b8e <send_to_all_slave+0x52>
	{
		can1_error_counter += 1;
 8007b84:	4b13      	ldr	r3, [pc, #76]	; (8007bd4 <send_to_all_slave+0x98>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3301      	adds	r3, #1
 8007b8a:	4a12      	ldr	r2, [pc, #72]	; (8007bd4 <send_to_all_slave+0x98>)
 8007b8c:	6013      	str	r3, [r2, #0]
	}
	//uint32_t tmp = 0;
	//while (tmp<3) tmp=HAL_FDCAN_GetTxFifoFreeLevel(&hfdcan1);

	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &joint_5, joint_5_data) != HAL_OK)
 8007b8e:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <send_to_all_slave+0xac>)
 8007b90:	4916      	ldr	r1, [pc, #88]	; (8007bec <send_to_all_slave+0xb0>)
 8007b92:	4817      	ldr	r0, [pc, #92]	; (8007bf0 <send_to_all_slave+0xb4>)
 8007b94:	f7f9 fa87 	bl	80010a6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8007b98:	4603      	mov	r3, r0
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d004      	beq.n	8007ba8 <send_to_all_slave+0x6c>
	{
		can2_error_counter += 1;
 8007b9e:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <send_to_all_slave+0xb8>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	4a13      	ldr	r2, [pc, #76]	; (8007bf4 <send_to_all_slave+0xb8>)
 8007ba6:	6013      	str	r3, [r2, #0]
//	{
//		unpack_reply(&rx_header, rx_data);
//			  
//	}		
	
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &joint_4, joint_4_data) != HAL_OK)
 8007ba8:	4a13      	ldr	r2, [pc, #76]	; (8007bf8 <send_to_all_slave+0xbc>)
 8007baa:	4914      	ldr	r1, [pc, #80]	; (8007bfc <send_to_all_slave+0xc0>)
 8007bac:	4810      	ldr	r0, [pc, #64]	; (8007bf0 <send_to_all_slave+0xb4>)
 8007bae:	f7f9 fa7a 	bl	80010a6 <HAL_FDCAN_AddMessageToTxFifoQ>
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d004      	beq.n	8007bc2 <send_to_all_slave+0x86>
	{
		can2_error_counter += 1;
 8007bb8:	4b0e      	ldr	r3, [pc, #56]	; (8007bf4 <send_to_all_slave+0xb8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	4a0d      	ldr	r2, [pc, #52]	; (8007bf4 <send_to_all_slave+0xb8>)
 8007bc0:	6013      	str	r3, [r2, #0]
//	{
//		can2_error_counter += 1;
//	}


}
 8007bc2:	bf00      	nop
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	24000568 	.word	0x24000568
 8007bcc:	24000490 	.word	0x24000490
 8007bd0:	24000150 	.word	0x24000150
 8007bd4:	24000778 	.word	0x24000778
 8007bd8:	24000570 	.word	0x24000570
 8007bdc:	240004b4 	.word	0x240004b4
 8007be0:	24000578 	.word	0x24000578
 8007be4:	240004d8 	.word	0x240004d8
 8007be8:	24000588 	.word	0x24000588
 8007bec:	24000520 	.word	0x24000520
 8007bf0:	240001f0 	.word	0x240001f0
 8007bf4:	2400077c 	.word	0x2400077c
 8007bf8:	24000580 	.word	0x24000580
 8007bfc:	240004fc 	.word	0x240004fc

08007c00 <control>:
		joint_6_data[i] = byte_8.buffer[i];
	}
}

void control()
{	
 8007c00:	b5b0      	push	{r4, r5, r7, lr}
 8007c02:	ed2d 8b02 	vpush	{d8}
 8007c06:	b086      	sub	sp, #24
 8007c08:	af02      	add	r7, sp, #8
	if (control_word==0)
 8007c0a:	4b97      	ldr	r3, [pc, #604]	; (8007e68 <control+0x268>)
 8007c0c:	881b      	ldrh	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d102      	bne.n	8007c18 <control+0x18>
			control_word=1;
 8007c12:	4b95      	ldr	r3, [pc, #596]	; (8007e68 <control+0x268>)
 8007c14:	2201      	movs	r2, #1
 8007c16:	801a      	strh	r2, [r3, #0]

	if (control_word == 1)
 8007c18:	4b93      	ldr	r3, [pc, #588]	; (8007e68 <control+0x268>)
 8007c1a:	881b      	ldrh	r3, [r3, #0]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d14f      	bne.n	8007cc0 <control+0xc0>
	{
		if (is_init == 0)   // init
 8007c20:	4b92      	ldr	r3, [pc, #584]	; (8007e6c <control+0x26c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d129      	bne.n	8007c7c <control+0x7c>
		{
			motor_pd0(&joint_1, joint_1_data, 1);
 8007c28:	2201      	movs	r2, #1
 8007c2a:	4991      	ldr	r1, [pc, #580]	; (8007e70 <control+0x270>)
 8007c2c:	4891      	ldr	r0, [pc, #580]	; (8007e74 <control+0x274>)
 8007c2e:	f7ff f98f 	bl	8006f50 <motor_pd0>
			motor_pd0(&joint_2, joint_2_data, 2);
 8007c32:	2202      	movs	r2, #2
 8007c34:	4990      	ldr	r1, [pc, #576]	; (8007e78 <control+0x278>)
 8007c36:	4891      	ldr	r0, [pc, #580]	; (8007e7c <control+0x27c>)
 8007c38:	f7ff f98a 	bl	8006f50 <motor_pd0>
			motor_pd0(&joint_3, joint_3_data, 3);
 8007c3c:	2203      	movs	r2, #3
 8007c3e:	4990      	ldr	r1, [pc, #576]	; (8007e80 <control+0x280>)
 8007c40:	4890      	ldr	r0, [pc, #576]	; (8007e84 <control+0x284>)
 8007c42:	f7ff f985 	bl	8006f50 <motor_pd0>
			motor_pd0(&joint_4, joint_4_data, 4);
 8007c46:	2204      	movs	r2, #4
 8007c48:	498f      	ldr	r1, [pc, #572]	; (8007e88 <control+0x288>)
 8007c4a:	4890      	ldr	r0, [pc, #576]	; (8007e8c <control+0x28c>)
 8007c4c:	f7ff f980 	bl	8006f50 <motor_pd0>
//			motor_null(&joint_5, joint_5_data, 5);
//			motor_steer_init(&joint_6, joint_6_data, 6);
			motor_steer_init(&joint_5, joint_5_data, 5);
 8007c50:	2205      	movs	r2, #5
 8007c52:	498f      	ldr	r1, [pc, #572]	; (8007e90 <control+0x290>)
 8007c54:	488f      	ldr	r0, [pc, #572]	; (8007e94 <control+0x294>)
 8007c56:	f7ff fa59 	bl	800710c <motor_steer_init>
			if (init_counter < 10)
 8007c5a:	4b8f      	ldr	r3, [pc, #572]	; (8007e98 <control+0x298>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2b09      	cmp	r3, #9
 8007c60:	d805      	bhi.n	8007c6e <control+0x6e>
			{
				init_counter++;
 8007c62:	4b8d      	ldr	r3, [pc, #564]	; (8007e98 <control+0x298>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	3301      	adds	r3, #1
 8007c68:	4a8b      	ldr	r2, [pc, #556]	; (8007e98 <control+0x298>)
 8007c6a:	6013      	str	r3, [r2, #0]
 8007c6c:	e01f      	b.n	8007cae <control+0xae>
			}
			else
			{
				init_counter = 0;
 8007c6e:	4b8a      	ldr	r3, [pc, #552]	; (8007e98 <control+0x298>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
				is_init = 1;
 8007c74:	4b7d      	ldr	r3, [pc, #500]	; (8007e6c <control+0x26c>)
 8007c76:	2201      	movs	r2, #1
 8007c78:	601a      	str	r2, [r3, #0]
 8007c7a:	e018      	b.n	8007cae <control+0xae>
			}
		}
		else  // get data
		{
			motor_pvt0(&joint_1, joint_1_data, 1);
 8007c7c:	2201      	movs	r2, #1
 8007c7e:	497c      	ldr	r1, [pc, #496]	; (8007e70 <control+0x270>)
 8007c80:	487c      	ldr	r0, [pc, #496]	; (8007e74 <control+0x274>)
 8007c82:	f7ff f999 	bl	8006fb8 <motor_pvt0>
			motor_pvt0(&joint_2, joint_2_data, 2);
 8007c86:	2202      	movs	r2, #2
 8007c88:	497b      	ldr	r1, [pc, #492]	; (8007e78 <control+0x278>)
 8007c8a:	487c      	ldr	r0, [pc, #496]	; (8007e7c <control+0x27c>)
 8007c8c:	f7ff f994 	bl	8006fb8 <motor_pvt0>
			motor_pvt0(&joint_3, joint_3_data, 3);
 8007c90:	2203      	movs	r2, #3
 8007c92:	497b      	ldr	r1, [pc, #492]	; (8007e80 <control+0x280>)
 8007c94:	487b      	ldr	r0, [pc, #492]	; (8007e84 <control+0x284>)
 8007c96:	f7ff f98f 	bl	8006fb8 <motor_pvt0>
			motor_pvt0(&joint_4, joint_4_data, 4);
 8007c9a:	2204      	movs	r2, #4
 8007c9c:	497a      	ldr	r1, [pc, #488]	; (8007e88 <control+0x288>)
 8007c9e:	487b      	ldr	r0, [pc, #492]	; (8007e8c <control+0x28c>)
 8007ca0:	f7ff f98a 	bl	8006fb8 <motor_pvt0>
			motor_null(&joint_5, joint_5_data, 5);
 8007ca4:	2205      	movs	r2, #5
 8007ca6:	497a      	ldr	r1, [pc, #488]	; (8007e90 <control+0x290>)
 8007ca8:	487a      	ldr	r0, [pc, #488]	; (8007e94 <control+0x294>)
 8007caa:	f7ff fa63 	bl	8007174 <motor_null>
//			motor_null(&joint_6, joint_6_data, 6);
		}
		
		is_run = 0;
 8007cae:	4b7b      	ldr	r3, [pc, #492]	; (8007e9c <control+0x29c>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
		send_to_all_slave();
 8007cb4:	f7ff ff42 	bl	8007b3c <send_to_all_slave>
		control_word=2;
 8007cb8:	4b6b      	ldr	r3, [pc, #428]	; (8007e68 <control+0x268>)
 8007cba:	2202      	movs	r2, #2
 8007cbc:	801a      	strh	r2, [r3, #0]
	}
	else  // stop
	{		
		//HAL_GPIO_WritePin(GPIOA, ES_Pin, GPIO_PIN_SET);
	}
}
 8007cbe:	e2af      	b.n	8008220 <control+0x620>
	else if (control_word == 2)  // parameter 
 8007cc0:	4b69      	ldr	r3, [pc, #420]	; (8007e68 <control+0x268>)
 8007cc2:	881b      	ldrh	r3, [r3, #0]
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	f040 8289 	bne.w	80081dc <control+0x5dc>
		if (is_run == 0)
 8007cca:	4b74      	ldr	r3, [pc, #464]	; (8007e9c <control+0x29c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	f040 80f2 	bne.w	8007eb8 <control+0x2b8>
			byte_8.udata = joint_r_data[0];
 8007cd4:	4b72      	ldr	r3, [pc, #456]	; (8007ea0 <control+0x2a0>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	4972      	ldr	r1, [pc, #456]	; (8007ea4 <control+0x2a4>)
 8007cdc:	e9c1 2300 	strd	r2, r3, [r1]
			byte_8.buffer[4] = 0x00; byte_8.buffer[5] = 0x00; byte_8.buffer[6] = 0x00; byte_8.buffer[7] = 0x00;
 8007ce0:	4b70      	ldr	r3, [pc, #448]	; (8007ea4 <control+0x2a4>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	711a      	strb	r2, [r3, #4]
 8007ce6:	4b6f      	ldr	r3, [pc, #444]	; (8007ea4 <control+0x2a4>)
 8007ce8:	2200      	movs	r2, #0
 8007cea:	715a      	strb	r2, [r3, #5]
 8007cec:	4b6d      	ldr	r3, [pc, #436]	; (8007ea4 <control+0x2a4>)
 8007cee:	2200      	movs	r2, #0
 8007cf0:	719a      	strb	r2, [r3, #6]
 8007cf2:	4b6c      	ldr	r3, [pc, #432]	; (8007ea4 <control+0x2a4>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	71da      	strb	r2, [r3, #7]
			byte_2_reply.buffer[0] = byte_8.buffer[0];
 8007cf8:	4b6a      	ldr	r3, [pc, #424]	; (8007ea4 <control+0x2a4>)
 8007cfa:	781b      	ldrb	r3, [r3, #0]
 8007cfc:	b25a      	sxtb	r2, r3
 8007cfe:	4b6a      	ldr	r3, [pc, #424]	; (8007ea8 <control+0x2a8>)
 8007d00:	701a      	strb	r2, [r3, #0]
			byte_2_reply.buffer[1] = byte_8.buffer[1];
 8007d02:	4b68      	ldr	r3, [pc, #416]	; (8007ea4 <control+0x2a4>)
 8007d04:	785b      	ldrb	r3, [r3, #1]
 8007d06:	b25a      	sxtb	r2, r3
 8007d08:	4b67      	ldr	r3, [pc, #412]	; (8007ea8 <control+0x2a8>)
 8007d0a:	705a      	strb	r2, [r3, #1]
			pos1_ref = (double_t)byte_2_reply.udata * 0.01;
 8007d0c:	4b66      	ldr	r3, [pc, #408]	; (8007ea8 <control+0x2a8>)
 8007d0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d12:	ee07 3a90 	vmov	s15, r3
 8007d16:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007d1a:	ed9f 6b4d 	vldr	d6, [pc, #308]	; 8007e50 <control+0x250>
 8007d1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007d22:	4b62      	ldr	r3, [pc, #392]	; (8007eac <control+0x2ac>)
 8007d24:	ed83 7b00 	vstr	d7, [r3]
			byte_2_reply.buffer[0] = byte_8.buffer[2];
 8007d28:	4b5e      	ldr	r3, [pc, #376]	; (8007ea4 <control+0x2a4>)
 8007d2a:	789b      	ldrb	r3, [r3, #2]
 8007d2c:	b25a      	sxtb	r2, r3
 8007d2e:	4b5e      	ldr	r3, [pc, #376]	; (8007ea8 <control+0x2a8>)
 8007d30:	701a      	strb	r2, [r3, #0]
			byte_2_reply.buffer[1] = byte_8.buffer[3];
 8007d32:	4b5c      	ldr	r3, [pc, #368]	; (8007ea4 <control+0x2a4>)
 8007d34:	78db      	ldrb	r3, [r3, #3]
 8007d36:	b25a      	sxtb	r2, r3
 8007d38:	4b5b      	ldr	r3, [pc, #364]	; (8007ea8 <control+0x2a8>)
 8007d3a:	705a      	strb	r2, [r3, #1]
			vel1_ref = (double_t)byte_2_reply.udata;
 8007d3c:	4b5a      	ldr	r3, [pc, #360]	; (8007ea8 <control+0x2a8>)
 8007d3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d42:	ee07 3a90 	vmov	s15, r3
 8007d46:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007d4a:	4b59      	ldr	r3, [pc, #356]	; (8007eb0 <control+0x2b0>)
 8007d4c:	ed83 7b00 	vstr	d7, [r3]
			byte_2_reply.buffer[0] = byte_8.buffer[4];
 8007d50:	4b54      	ldr	r3, [pc, #336]	; (8007ea4 <control+0x2a4>)
 8007d52:	791b      	ldrb	r3, [r3, #4]
 8007d54:	b25a      	sxtb	r2, r3
 8007d56:	4b54      	ldr	r3, [pc, #336]	; (8007ea8 <control+0x2a8>)
 8007d58:	701a      	strb	r2, [r3, #0]
			byte_2_reply.buffer[1] = byte_8.buffer[5];
 8007d5a:	4b52      	ldr	r3, [pc, #328]	; (8007ea4 <control+0x2a4>)
 8007d5c:	795b      	ldrb	r3, [r3, #5]
 8007d5e:	b25a      	sxtb	r2, r3
 8007d60:	4b51      	ldr	r3, [pc, #324]	; (8007ea8 <control+0x2a8>)
 8007d62:	705a      	strb	r2, [r3, #1]
			tor1_ref = (double_t)byte_2_reply.udata * 66 / 4096;
 8007d64:	4b50      	ldr	r3, [pc, #320]	; (8007ea8 <control+0x2a8>)
 8007d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007d6a:	ee07 3a90 	vmov	s15, r3
 8007d6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007d72:	ed9f 6b39 	vldr	d6, [pc, #228]	; 8007e58 <control+0x258>
 8007d76:	ee27 6b06 	vmul.f64	d6, d7, d6
 8007d7a:	ed9f 5b39 	vldr	d5, [pc, #228]	; 8007e60 <control+0x260>
 8007d7e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007d82:	4b4c      	ldr	r3, [pc, #304]	; (8007eb4 <control+0x2b4>)
 8007d84:	ed83 7b00 	vstr	d7, [r3]
			motor_pvt(&joint_1, joint_1_data, byte_8.udata, 1);
 8007d88:	4b46      	ldr	r3, [pc, #280]	; (8007ea4 <control+0x2a4>)
 8007d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d8e:	2101      	movs	r1, #1
 8007d90:	9100      	str	r1, [sp, #0]
 8007d92:	4937      	ldr	r1, [pc, #220]	; (8007e70 <control+0x270>)
 8007d94:	4837      	ldr	r0, [pc, #220]	; (8007e74 <control+0x274>)
 8007d96:	f7ff f943 	bl	8007020 <motor_pvt>
			byte_8.udata = joint_r_data[1];
 8007d9a:	4b41      	ldr	r3, [pc, #260]	; (8007ea0 <control+0x2a0>)
 8007d9c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8007da0:	4940      	ldr	r1, [pc, #256]	; (8007ea4 <control+0x2a4>)
 8007da2:	e9c1 2300 	strd	r2, r3, [r1]
			byte_8.buffer[4] = 0x00; byte_8.buffer[5] = 0x00; byte_8.buffer[6] = 0x00; byte_8.buffer[7] = 0x00;
 8007da6:	4b3f      	ldr	r3, [pc, #252]	; (8007ea4 <control+0x2a4>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	711a      	strb	r2, [r3, #4]
 8007dac:	4b3d      	ldr	r3, [pc, #244]	; (8007ea4 <control+0x2a4>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	715a      	strb	r2, [r3, #5]
 8007db2:	4b3c      	ldr	r3, [pc, #240]	; (8007ea4 <control+0x2a4>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	719a      	strb	r2, [r3, #6]
 8007db8:	4b3a      	ldr	r3, [pc, #232]	; (8007ea4 <control+0x2a4>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	71da      	strb	r2, [r3, #7]
			motor_pvt(&joint_2, joint_2_data, byte_8.udata, 2);
 8007dbe:	4b39      	ldr	r3, [pc, #228]	; (8007ea4 <control+0x2a4>)
 8007dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc4:	2102      	movs	r1, #2
 8007dc6:	9100      	str	r1, [sp, #0]
 8007dc8:	492b      	ldr	r1, [pc, #172]	; (8007e78 <control+0x278>)
 8007dca:	482c      	ldr	r0, [pc, #176]	; (8007e7c <control+0x27c>)
 8007dcc:	f7ff f928 	bl	8007020 <motor_pvt>
			byte_8.udata = joint_r_data[2];
 8007dd0:	4b33      	ldr	r3, [pc, #204]	; (8007ea0 <control+0x2a0>)
 8007dd2:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8007dd6:	4933      	ldr	r1, [pc, #204]	; (8007ea4 <control+0x2a4>)
 8007dd8:	e9c1 2300 	strd	r2, r3, [r1]
			byte_8.buffer[4] = 0x00; byte_8.buffer[5] = 0x00; byte_8.buffer[6] = 0x00; byte_8.buffer[7] = 0x00;
 8007ddc:	4b31      	ldr	r3, [pc, #196]	; (8007ea4 <control+0x2a4>)
 8007dde:	2200      	movs	r2, #0
 8007de0:	711a      	strb	r2, [r3, #4]
 8007de2:	4b30      	ldr	r3, [pc, #192]	; (8007ea4 <control+0x2a4>)
 8007de4:	2200      	movs	r2, #0
 8007de6:	715a      	strb	r2, [r3, #5]
 8007de8:	4b2e      	ldr	r3, [pc, #184]	; (8007ea4 <control+0x2a4>)
 8007dea:	2200      	movs	r2, #0
 8007dec:	719a      	strb	r2, [r3, #6]
 8007dee:	4b2d      	ldr	r3, [pc, #180]	; (8007ea4 <control+0x2a4>)
 8007df0:	2200      	movs	r2, #0
 8007df2:	71da      	strb	r2, [r3, #7]
			motor_pvt(&joint_3, joint_3_data, byte_8.udata, 3);
 8007df4:	4b2b      	ldr	r3, [pc, #172]	; (8007ea4 <control+0x2a4>)
 8007df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dfa:	2103      	movs	r1, #3
 8007dfc:	9100      	str	r1, [sp, #0]
 8007dfe:	4920      	ldr	r1, [pc, #128]	; (8007e80 <control+0x280>)
 8007e00:	4820      	ldr	r0, [pc, #128]	; (8007e84 <control+0x284>)
 8007e02:	f7ff f90d 	bl	8007020 <motor_pvt>
			byte_8.udata = joint_r_data[3];
 8007e06:	4b26      	ldr	r3, [pc, #152]	; (8007ea0 <control+0x2a0>)
 8007e08:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8007e0c:	4925      	ldr	r1, [pc, #148]	; (8007ea4 <control+0x2a4>)
 8007e0e:	e9c1 2300 	strd	r2, r3, [r1]
			byte_8.buffer[4] = 0x00; byte_8.buffer[5] = 0x00; byte_8.buffer[6] = 0x00; byte_8.buffer[7] = 0x00;
 8007e12:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <control+0x2a4>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	711a      	strb	r2, [r3, #4]
 8007e18:	4b22      	ldr	r3, [pc, #136]	; (8007ea4 <control+0x2a4>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	715a      	strb	r2, [r3, #5]
 8007e1e:	4b21      	ldr	r3, [pc, #132]	; (8007ea4 <control+0x2a4>)
 8007e20:	2200      	movs	r2, #0
 8007e22:	719a      	strb	r2, [r3, #6]
 8007e24:	4b1f      	ldr	r3, [pc, #124]	; (8007ea4 <control+0x2a4>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	71da      	strb	r2, [r3, #7]
			motor_pvt(&joint_4, joint_4_data, byte_8.udata, 4);
 8007e2a:	4b1e      	ldr	r3, [pc, #120]	; (8007ea4 <control+0x2a4>)
 8007e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e30:	2104      	movs	r1, #4
 8007e32:	9100      	str	r1, [sp, #0]
 8007e34:	4914      	ldr	r1, [pc, #80]	; (8007e88 <control+0x288>)
 8007e36:	4815      	ldr	r0, [pc, #84]	; (8007e8c <control+0x28c>)
 8007e38:	f7ff f8f2 	bl	8007020 <motor_pvt>
			motor_null(&joint_5, joint_5_data, 5);
 8007e3c:	2205      	movs	r2, #5
 8007e3e:	4914      	ldr	r1, [pc, #80]	; (8007e90 <control+0x290>)
 8007e40:	4814      	ldr	r0, [pc, #80]	; (8007e94 <control+0x294>)
 8007e42:	f7ff f997 	bl	8007174 <motor_null>
			is_run = 1;
 8007e46:	4b15      	ldr	r3, [pc, #84]	; (8007e9c <control+0x29c>)
 8007e48:	2201      	movs	r2, #1
 8007e4a:	601a      	str	r2, [r3, #0]
 8007e4c:	e179      	b.n	8008142 <control+0x542>
 8007e4e:	bf00      	nop
 8007e50:	47ae147b 	.word	0x47ae147b
 8007e54:	3f847ae1 	.word	0x3f847ae1
 8007e58:	00000000 	.word	0x00000000
 8007e5c:	40508000 	.word	0x40508000
 8007e60:	00000000 	.word	0x00000000
 8007e64:	40b00000 	.word	0x40b00000
 8007e68:	24000788 	.word	0x24000788
 8007e6c:	2400078c 	.word	0x2400078c
 8007e70:	24000568 	.word	0x24000568
 8007e74:	24000490 	.word	0x24000490
 8007e78:	24000570 	.word	0x24000570
 8007e7c:	240004b4 	.word	0x240004b4
 8007e80:	24000578 	.word	0x24000578
 8007e84:	240004d8 	.word	0x240004d8
 8007e88:	24000580 	.word	0x24000580
 8007e8c:	240004fc 	.word	0x240004fc
 8007e90:	24000588 	.word	0x24000588
 8007e94:	24000520 	.word	0x24000520
 8007e98:	24000794 	.word	0x24000794
 8007e9c:	24000790 	.word	0x24000790
 8007ea0:	24000598 	.word	0x24000598
 8007ea4:	24000670 	.word	0x24000670
 8007ea8:	24000680 	.word	0x24000680
 8007eac:	240006e8 	.word	0x240006e8
 8007eb0:	240006f0 	.word	0x240006f0
 8007eb4:	240006f8 	.word	0x240006f8
		else if (is_run == 1)
 8007eb8:	4ba9      	ldr	r3, [pc, #676]	; (8008160 <control+0x560>)
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	2b01      	cmp	r3, #1
 8007ebe:	d138      	bne.n	8007f32 <control+0x332>
			motor_pd0(&joint_1, joint_1_data, 1); // change this !!!!!!!!!!!
 8007ec0:	2201      	movs	r2, #1
 8007ec2:	49a8      	ldr	r1, [pc, #672]	; (8008164 <control+0x564>)
 8007ec4:	48a8      	ldr	r0, [pc, #672]	; (8008168 <control+0x568>)
 8007ec6:	f7ff f843 	bl	8006f50 <motor_pd0>
			motor_pd0(&joint_2, joint_2_data, 2);
 8007eca:	2202      	movs	r2, #2
 8007ecc:	49a7      	ldr	r1, [pc, #668]	; (800816c <control+0x56c>)
 8007ece:	48a8      	ldr	r0, [pc, #672]	; (8008170 <control+0x570>)
 8007ed0:	f7ff f83e 	bl	8006f50 <motor_pd0>
			motor_pd0(&joint_3, joint_3_data, 3);
 8007ed4:	2203      	movs	r2, #3
 8007ed6:	49a7      	ldr	r1, [pc, #668]	; (8008174 <control+0x574>)
 8007ed8:	48a7      	ldr	r0, [pc, #668]	; (8008178 <control+0x578>)
 8007eda:	f7ff f839 	bl	8006f50 <motor_pd0>
			motor_pd0(&joint_4, joint_4_data, 4);
 8007ede:	2204      	movs	r2, #4
 8007ee0:	49a6      	ldr	r1, [pc, #664]	; (800817c <control+0x57c>)
 8007ee2:	48a7      	ldr	r0, [pc, #668]	; (8008180 <control+0x580>)
 8007ee4:	f7ff f834 	bl	8006f50 <motor_pd0>
			pos0[0] = pos1;
 8007ee8:	4ba6      	ldr	r3, [pc, #664]	; (8008184 <control+0x584>)
 8007eea:	edd3 7a00 	vldr	s15, [r3]
 8007eee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007ef2:	4ba5      	ldr	r3, [pc, #660]	; (8008188 <control+0x588>)
 8007ef4:	ed83 7b00 	vstr	d7, [r3]
			pos0[1] = pos2;
 8007ef8:	4ba4      	ldr	r3, [pc, #656]	; (800818c <control+0x58c>)
 8007efa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007efe:	49a2      	ldr	r1, [pc, #648]	; (8008188 <control+0x588>)
 8007f00:	e9c1 2302 	strd	r2, r3, [r1, #8]
			pos0[2] = pos3;
 8007f04:	4ba2      	ldr	r3, [pc, #648]	; (8008190 <control+0x590>)
 8007f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f0a:	499f      	ldr	r1, [pc, #636]	; (8008188 <control+0x588>)
 8007f0c:	e9c1 2304 	strd	r2, r3, [r1, #16]
			pos0[3] = pos4;
 8007f10:	4ba0      	ldr	r3, [pc, #640]	; (8008194 <control+0x594>)
 8007f12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f16:	499c      	ldr	r1, [pc, #624]	; (8008188 <control+0x588>)
 8007f18:	e9c1 2306 	strd	r2, r3, [r1, #24]
			pos_cnt[5] = 0;
 8007f1c:	499e      	ldr	r1, [pc, #632]	; (8008198 <control+0x598>)
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
			is_run = 2;
 8007f2a:	4b8d      	ldr	r3, [pc, #564]	; (8008160 <control+0x560>)
 8007f2c:	2202      	movs	r2, #2
 8007f2e:	601a      	str	r2, [r3, #0]
 8007f30:	e107      	b.n	8008142 <control+0x542>
			float_t pos1_dst=0;
 8007f32:	f04f 0300 	mov.w	r3, #0
 8007f36:	60fb      	str	r3, [r7, #12]
			if (fabs(pos1_dst-pos1)>0.1 && startFlag==0 ) // 60 deg/s -> 0.06 deg/ms
 8007f38:	4b92      	ldr	r3, [pc, #584]	; (8008184 <control+0x584>)
 8007f3a:	edd3 7a00 	vldr	s15, [r3]
 8007f3e:	ed97 7a03 	vldr	s14, [r7, #12]
 8007f42:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f46:	eef0 7ae7 	vabs.f32	s15, s15
 8007f4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007f4e:	ed9f 6b80 	vldr	d6, [pc, #512]	; 8008150 <control+0x550>
 8007f52:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007f5a:	dd23      	ble.n	8007fa4 <control+0x3a4>
 8007f5c:	4b8f      	ldr	r3, [pc, #572]	; (800819c <control+0x59c>)
 8007f5e:	781b      	ldrb	r3, [r3, #0]
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d11f      	bne.n	8007fa4 <control+0x3a4>
				pos1_pid=pos1+sign_dbl(pos1_dst-pos1)*0.09;
 8007f64:	4b87      	ldr	r3, [pc, #540]	; (8008184 <control+0x584>)
 8007f66:	edd3 7a00 	vldr	s15, [r3]
 8007f6a:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 8007f6e:	4b85      	ldr	r3, [pc, #532]	; (8008184 <control+0x584>)
 8007f70:	edd3 7a00 	vldr	s15, [r3]
 8007f74:	ed97 7a03 	vldr	s14, [r7, #12]
 8007f78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007f7c:	eeb0 0a67 	vmov.f32	s0, s15
 8007f80:	f7ff f92c 	bl	80071dc <sign_dbl>
 8007f84:	eef0 7a40 	vmov.f32	s15, s0
 8007f88:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007f8c:	ed9f 6b72 	vldr	d6, [pc, #456]	; 8008158 <control+0x558>
 8007f90:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007f94:	ee38 7b07 	vadd.f64	d7, d8, d7
 8007f98:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007f9c:	4b80      	ldr	r3, [pc, #512]	; (80081a0 <control+0x5a0>)
 8007f9e:	edc3 7a00 	vstr	s15, [r3]
 8007fa2:	e019      	b.n	8007fd8 <control+0x3d8>
			else if (startFlag==0 && pos1!=0)
 8007fa4:	4b7d      	ldr	r3, [pc, #500]	; (800819c <control+0x59c>)
 8007fa6:	781b      	ldrb	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d115      	bne.n	8007fd8 <control+0x3d8>
 8007fac:	4b75      	ldr	r3, [pc, #468]	; (8008184 <control+0x584>)
 8007fae:	edd3 7a00 	vldr	s15, [r3]
 8007fb2:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fba:	d00d      	beq.n	8007fd8 <control+0x3d8>
				{pos1_pid=pos1; startFlag=1;pos_cnt[0]=0;}
 8007fbc:	4b71      	ldr	r3, [pc, #452]	; (8008184 <control+0x584>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	4a77      	ldr	r2, [pc, #476]	; (80081a0 <control+0x5a0>)
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	4b75      	ldr	r3, [pc, #468]	; (800819c <control+0x59c>)
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	701a      	strb	r2, [r3, #0]
 8007fca:	4973      	ldr	r1, [pc, #460]	; (8008198 <control+0x598>)
 8007fcc:	f04f 0200 	mov.w	r2, #0
 8007fd0:	f04f 0300 	mov.w	r3, #0
 8007fd4:	e9c1 2300 	strd	r2, r3, [r1]
			if (startFlag==1)
 8007fd8:	4b70      	ldr	r3, [pc, #448]	; (800819c <control+0x59c>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d12b      	bne.n	8008038 <control+0x438>
				{pos1_pid=20.0*sin(2.0f * 3.14159265359f*pos_cnt[0] / we[0]);
 8007fe0:	4b6d      	ldr	r3, [pc, #436]	; (8008198 <control+0x598>)
 8007fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fe6:	4610      	mov	r0, r2
 8007fe8:	4619      	mov	r1, r3
 8007fea:	f7f8 fa3d 	bl	8000468 <__aeabi_ul2f>
 8007fee:	ee07 0a10 	vmov	s14, r0
 8007ff2:	eddf 7a6c 	vldr	s15, [pc, #432]	; 80081a4 <control+0x5a4>
 8007ff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ffa:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8007ffe:	4b6a      	ldr	r3, [pc, #424]	; (80081a8 <control+0x5a8>)
 8008000:	ed93 7b00 	vldr	d7, [r3]
 8008004:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8008008:	eeb0 0b45 	vmov.f64	d0, d5
 800800c:	f000 fd54 	bl	8008ab8 <sin>
 8008010:	eeb0 7b40 	vmov.f64	d7, d0
 8008014:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8008018:	ee27 7b06 	vmul.f64	d7, d7, d6
 800801c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8008020:	4b5f      	ldr	r3, [pc, #380]	; (80081a0 <control+0x5a0>)
 8008022:	edc3 7a00 	vstr	s15, [r3]
				pos_cnt[0]++;
 8008026:	4b5c      	ldr	r3, [pc, #368]	; (8008198 <control+0x598>)
 8008028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800802c:	1c54      	adds	r4, r2, #1
 800802e:	f143 0500 	adc.w	r5, r3, #0
 8008032:	4b59      	ldr	r3, [pc, #356]	; (8008198 <control+0x598>)
 8008034:	e9c3 4500 	strd	r4, r5, [r3]
			float_t p1=700;
 8008038:	4b5c      	ldr	r3, [pc, #368]	; (80081ac <control+0x5ac>)
 800803a:	60bb      	str	r3, [r7, #8]
			float_t d1=8;
 800803c:	f04f 4382 	mov.w	r3, #1090519040	; 0x41000000
 8008040:	607b      	str	r3, [r7, #4]
			I1=p1*(pos1_pid-pos1)+d1*(0-vel1);
 8008042:	4b57      	ldr	r3, [pc, #348]	; (80081a0 <control+0x5a0>)
 8008044:	ed93 7a00 	vldr	s14, [r3]
 8008048:	4b4e      	ldr	r3, [pc, #312]	; (8008184 <control+0x584>)
 800804a:	edd3 7a00 	vldr	s15, [r3]
 800804e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8008052:	edd7 7a02 	vldr	s15, [r7, #8]
 8008056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800805a:	4b55      	ldr	r3, [pc, #340]	; (80081b0 <control+0x5b0>)
 800805c:	edd3 7a00 	vldr	s15, [r3]
 8008060:	eddf 6a54 	vldr	s13, [pc, #336]	; 80081b4 <control+0x5b4>
 8008064:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8008068:	edd7 7a01 	vldr	s15, [r7, #4]
 800806c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008070:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008074:	4b50      	ldr	r3, [pc, #320]	; (80081b8 <control+0x5b8>)
 8008076:	edc3 7a00 	vstr	s15, [r3]
			if (I1>1000)
 800807a:	4b4f      	ldr	r3, [pc, #316]	; (80081b8 <control+0x5b8>)
 800807c:	edd3 7a00 	vldr	s15, [r3]
 8008080:	ed9f 7a4e 	vldr	s14, [pc, #312]	; 80081bc <control+0x5bc>
 8008084:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800808c:	dd02      	ble.n	8008094 <control+0x494>
				I1=1000;
 800808e:	4b4a      	ldr	r3, [pc, #296]	; (80081b8 <control+0x5b8>)
 8008090:	4a4b      	ldr	r2, [pc, #300]	; (80081c0 <control+0x5c0>)
 8008092:	601a      	str	r2, [r3, #0]
			if (I1<-1000)
 8008094:	4b48      	ldr	r3, [pc, #288]	; (80081b8 <control+0x5b8>)
 8008096:	edd3 7a00 	vldr	s15, [r3]
 800809a:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80081c4 <control+0x5c4>
 800809e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080a6:	d502      	bpl.n	80080ae <control+0x4ae>
				I1=-1000;
 80080a8:	4b43      	ldr	r3, [pc, #268]	; (80081b8 <control+0x5b8>)
 80080aa:	4a47      	ldr	r2, [pc, #284]	; (80081c8 <control+0x5c8>)
 80080ac:	601a      	str	r2, [r3, #0]
			byte_2_reply.udata=(int16_t)(I1+sign_dbl(I1)*0.5);
 80080ae:	4b42      	ldr	r3, [pc, #264]	; (80081b8 <control+0x5b8>)
 80080b0:	edd3 7a00 	vldr	s15, [r3]
 80080b4:	eeb7 8ae7 	vcvt.f64.f32	d8, s15
 80080b8:	4b3f      	ldr	r3, [pc, #252]	; (80081b8 <control+0x5b8>)
 80080ba:	edd3 7a00 	vldr	s15, [r3]
 80080be:	eeb0 0a67 	vmov.f32	s0, s15
 80080c2:	f7ff f88b 	bl	80071dc <sign_dbl>
 80080c6:	eef0 7a40 	vmov.f32	s15, s0
 80080ca:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80080ce:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80080d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80080d6:	ee38 7b07 	vadd.f64	d7, d8, d7
 80080da:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80080de:	ee17 3a90 	vmov	r3, s15
 80080e2:	b21a      	sxth	r2, r3
 80080e4:	4b39      	ldr	r3, [pc, #228]	; (80081cc <control+0x5cc>)
 80080e6:	801a      	strh	r2, [r3, #0]
			byte_8.buffer[0] = 0x00; byte_8.buffer[1] = 0x00; // pos
 80080e8:	4b39      	ldr	r3, [pc, #228]	; (80081d0 <control+0x5d0>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	701a      	strb	r2, [r3, #0]
 80080ee:	4b38      	ldr	r3, [pc, #224]	; (80081d0 <control+0x5d0>)
 80080f0:	2200      	movs	r2, #0
 80080f2:	705a      	strb	r2, [r3, #1]
			byte_8.buffer[2] = 0x00; byte_8.buffer[3] = 0x00; // speed
 80080f4:	4b36      	ldr	r3, [pc, #216]	; (80081d0 <control+0x5d0>)
 80080f6:	2200      	movs	r2, #0
 80080f8:	709a      	strb	r2, [r3, #2]
 80080fa:	4b35      	ldr	r3, [pc, #212]	; (80081d0 <control+0x5d0>)
 80080fc:	2200      	movs	r2, #0
 80080fe:	70da      	strb	r2, [r3, #3]
			byte_8.buffer[4] = byte_2_reply.buffer[0]; byte_8.buffer[5] = byte_2_reply.buffer[1]; // torque
 8008100:	4b32      	ldr	r3, [pc, #200]	; (80081cc <control+0x5cc>)
 8008102:	f993 3000 	ldrsb.w	r3, [r3]
 8008106:	b2da      	uxtb	r2, r3
 8008108:	4b31      	ldr	r3, [pc, #196]	; (80081d0 <control+0x5d0>)
 800810a:	711a      	strb	r2, [r3, #4]
 800810c:	4b2f      	ldr	r3, [pc, #188]	; (80081cc <control+0x5cc>)
 800810e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8008112:	b2da      	uxtb	r2, r3
 8008114:	4b2e      	ldr	r3, [pc, #184]	; (80081d0 <control+0x5d0>)
 8008116:	715a      	strb	r2, [r3, #5]
			byte_8.buffer[6] = 0x00; byte_8.buffer[7] = 0x00; // unused
 8008118:	4b2d      	ldr	r3, [pc, #180]	; (80081d0 <control+0x5d0>)
 800811a:	2200      	movs	r2, #0
 800811c:	719a      	strb	r2, [r3, #6]
 800811e:	4b2c      	ldr	r3, [pc, #176]	; (80081d0 <control+0x5d0>)
 8008120:	2200      	movs	r2, #0
 8008122:	71da      	strb	r2, [r3, #7]
			pos_1_ref64 = byte_8.udata;
 8008124:	4b2a      	ldr	r3, [pc, #168]	; (80081d0 <control+0x5d0>)
 8008126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800812a:	492a      	ldr	r1, [pc, #168]	; (80081d4 <control+0x5d4>)
 800812c:	e9c1 2300 	strd	r2, r3, [r1]
			motor_pvt(&joint_1, joint_1_data, pos_1_ref64, 1);
 8008130:	4b28      	ldr	r3, [pc, #160]	; (80081d4 <control+0x5d4>)
 8008132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008136:	2101      	movs	r1, #1
 8008138:	9100      	str	r1, [sp, #0]
 800813a:	490a      	ldr	r1, [pc, #40]	; (8008164 <control+0x564>)
 800813c:	480a      	ldr	r0, [pc, #40]	; (8008168 <control+0x568>)
 800813e:	f7fe ff6f 	bl	8007020 <motor_pvt>
		is_init = 0;
 8008142:	4b25      	ldr	r3, [pc, #148]	; (80081d8 <control+0x5d8>)
 8008144:	2200      	movs	r2, #0
 8008146:	601a      	str	r2, [r3, #0]
		send_to_all_slave();
 8008148:	f7ff fcf8 	bl	8007b3c <send_to_all_slave>
}
 800814c:	e068      	b.n	8008220 <control+0x620>
 800814e:	bf00      	nop
 8008150:	9999999a 	.word	0x9999999a
 8008154:	3fb99999 	.word	0x3fb99999
 8008158:	70a3d70a 	.word	0x70a3d70a
 800815c:	3fb70a3d 	.word	0x3fb70a3d
 8008160:	24000790 	.word	0x24000790
 8008164:	24000568 	.word	0x24000568
 8008168:	24000490 	.word	0x24000490
 800816c:	24000570 	.word	0x24000570
 8008170:	240004b4 	.word	0x240004b4
 8008174:	24000578 	.word	0x24000578
 8008178:	240004d8 	.word	0x240004d8
 800817c:	24000580 	.word	0x24000580
 8008180:	240004fc 	.word	0x240004fc
 8008184:	2400068c 	.word	0x2400068c
 8008188:	24000640 	.word	0x24000640
 800818c:	240006a0 	.word	0x240006a0
 8008190:	240006b8 	.word	0x240006b8
 8008194:	240006d0 	.word	0x240006d0
 8008198:	24000608 	.word	0x24000608
 800819c:	24000638 	.word	0x24000638
 80081a0:	24000724 	.word	0x24000724
 80081a4:	40c90fdb 	.word	0x40c90fdb
 80081a8:	24000008 	.word	0x24000008
 80081ac:	442f0000 	.word	0x442f0000
 80081b0:	24000690 	.word	0x24000690
 80081b4:	00000000 	.word	0x00000000
 80081b8:	24000720 	.word	0x24000720
 80081bc:	447a0000 	.word	0x447a0000
 80081c0:	447a0000 	.word	0x447a0000
 80081c4:	c47a0000 	.word	0xc47a0000
 80081c8:	c47a0000 	.word	0xc47a0000
 80081cc:	24000680 	.word	0x24000680
 80081d0:	24000670 	.word	0x24000670
 80081d4:	24000718 	.word	0x24000718
 80081d8:	2400078c 	.word	0x2400078c
	else if(control_word == 3)  // stop
 80081dc:	4b13      	ldr	r3, [pc, #76]	; (800822c <control+0x62c>)
 80081de:	881b      	ldrh	r3, [r3, #0]
 80081e0:	2b03      	cmp	r3, #3
 80081e2:	d11d      	bne.n	8008220 <control+0x620>
		motor_es(&joint_1, joint_1_data, 1);
 80081e4:	2201      	movs	r2, #1
 80081e6:	4912      	ldr	r1, [pc, #72]	; (8008230 <control+0x630>)
 80081e8:	4812      	ldr	r0, [pc, #72]	; (8008234 <control+0x634>)
 80081ea:	f7fe ff5b 	bl	80070a4 <motor_es>
		motor_es(&joint_2, joint_2_data, 2);
 80081ee:	2202      	movs	r2, #2
 80081f0:	4911      	ldr	r1, [pc, #68]	; (8008238 <control+0x638>)
 80081f2:	4812      	ldr	r0, [pc, #72]	; (800823c <control+0x63c>)
 80081f4:	f7fe ff56 	bl	80070a4 <motor_es>
		motor_es(&joint_3, joint_3_data, 3);
 80081f8:	2203      	movs	r2, #3
 80081fa:	4911      	ldr	r1, [pc, #68]	; (8008240 <control+0x640>)
 80081fc:	4811      	ldr	r0, [pc, #68]	; (8008244 <control+0x644>)
 80081fe:	f7fe ff51 	bl	80070a4 <motor_es>
		motor_es(&joint_4, joint_4_data, 4);
 8008202:	2204      	movs	r2, #4
 8008204:	4910      	ldr	r1, [pc, #64]	; (8008248 <control+0x648>)
 8008206:	4811      	ldr	r0, [pc, #68]	; (800824c <control+0x64c>)
 8008208:	f7fe ff4c 	bl	80070a4 <motor_es>
		motor_null(&joint_5, joint_5_data, 5);
 800820c:	2205      	movs	r2, #5
 800820e:	4910      	ldr	r1, [pc, #64]	; (8008250 <control+0x650>)
 8008210:	4810      	ldr	r0, [pc, #64]	; (8008254 <control+0x654>)
 8008212:	f7fe ffaf 	bl	8007174 <motor_null>
		is_run = 0;
 8008216:	4b10      	ldr	r3, [pc, #64]	; (8008258 <control+0x658>)
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
		send_to_all_slave();
 800821c:	f7ff fc8e 	bl	8007b3c <send_to_all_slave>
}
 8008220:	bf00      	nop
 8008222:	3710      	adds	r7, #16
 8008224:	46bd      	mov	sp, r7
 8008226:	ecbd 8b02 	vpop	{d8}
 800822a:	bdb0      	pop	{r4, r5, r7, pc}
 800822c:	24000788 	.word	0x24000788
 8008230:	24000568 	.word	0x24000568
 8008234:	24000490 	.word	0x24000490
 8008238:	24000570 	.word	0x24000570
 800823c:	240004b4 	.word	0x240004b4
 8008240:	24000578 	.word	0x24000578
 8008244:	240004d8 	.word	0x240004d8
 8008248:	24000580 	.word	0x24000580
 800824c:	240004fc 	.word	0x240004fc
 8008250:	24000588 	.word	0x24000588
 8008254:	24000520 	.word	0x24000520
 8008258:	24000790 	.word	0x24000790

0800825c <HAL_TIM_PeriodElapsedCallback>:
	BufferIn.Cust.motor_status = motor_status_can;

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b08a      	sub	sp, #40	; 0x28
 8008260:	af00      	add	r7, sp, #0
 8008262:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a4c      	ldr	r2, [pc, #304]	; (800839c <HAL_TIM_PeriodElapsedCallback+0x140>)
 800826a:	4293      	cmp	r3, r2
 800826c:	f040 8091 	bne.w	8008392 <HAL_TIM_PeriodElapsedCallback+0x136>
	{		
		//pack_ethercat_data();                // change this !!!!!!!!!!!
		//main_task(&ethercat_slave);          // change this !!!!!!!!!!!!
		
		uint64_t tmp_hs_ = 1;//BufferOut.Cust.hs; // change this !!!!!!!!!!!!!
 8008270:	f04f 0201 	mov.w	r2, #1
 8008274:	f04f 0300 	mov.w	r3, #0
 8008278:	e9c7 2308 	strd	r2, r3, [r7, #32]
		
		// 1. control
		if (tmp_hs_ > hs_ || tmp_hs_ == 1)
 800827c:	4b48      	ldr	r3, [pc, #288]	; (80083a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800827e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8008282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008286:	4290      	cmp	r0, r2
 8008288:	eb71 0303 	sbcs.w	r3, r1, r3
 800828c:	d304      	bcc.n	8008298 <HAL_TIM_PeriodElapsedCallback+0x3c>
 800828e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008292:	1e51      	subs	r1, r2, #1
 8008294:	430b      	orrs	r3, r1
 8008296:	d107      	bne.n	80082a8 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			//control_word = BufferOut.Cust.control_word; // and commit this !!!!!!!!!!!!
			control();			
 8008298:	f7ff fcb2 	bl	8007c00 <control>
			hs_ = tmp_hs_;			
 800829c:	4940      	ldr	r1, [pc, #256]	; (80083a0 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800829e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082a2:	e9c1 2300 	strd	r2, r3, [r1]
 80082a6:	e02d      	b.n	8008304 <HAL_TIM_PeriodElapsedCallback+0xa8>
		}
		else
		{
			error_hs_++;
 80082a8:	4b3e      	ldr	r3, [pc, #248]	; (80083a4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	3301      	adds	r3, #1
 80082ae:	b2da      	uxtb	r2, r3
 80082b0:	4b3c      	ldr	r3, [pc, #240]	; (80083a4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80082b2:	701a      	strb	r2, [r3, #0]
			if (error_hs_ == 20 || motor_status_can != 0x00)
 80082b4:	4b3b      	ldr	r3, [pc, #236]	; (80083a4 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b14      	cmp	r3, #20
 80082ba:	d003      	beq.n	80082c4 <HAL_TIM_PeriodElapsedCallback+0x68>
 80082bc:	4b3a      	ldr	r3, [pc, #232]	; (80083a8 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80082be:	881b      	ldrh	r3, [r3, #0]
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d01f      	beq.n	8008304 <HAL_TIM_PeriodElapsedCallback+0xa8>
			{
				motor_es(&joint_1, joint_1_data, 1);
 80082c4:	2201      	movs	r2, #1
 80082c6:	4939      	ldr	r1, [pc, #228]	; (80083ac <HAL_TIM_PeriodElapsedCallback+0x150>)
 80082c8:	4839      	ldr	r0, [pc, #228]	; (80083b0 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80082ca:	f7fe feeb 	bl	80070a4 <motor_es>
				motor_es(&joint_2, joint_2_data, 2);
 80082ce:	2202      	movs	r2, #2
 80082d0:	4938      	ldr	r1, [pc, #224]	; (80083b4 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80082d2:	4839      	ldr	r0, [pc, #228]	; (80083b8 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80082d4:	f7fe fee6 	bl	80070a4 <motor_es>
				motor_es(&joint_3, joint_3_data, 3);
 80082d8:	2203      	movs	r2, #3
 80082da:	4938      	ldr	r1, [pc, #224]	; (80083bc <HAL_TIM_PeriodElapsedCallback+0x160>)
 80082dc:	4838      	ldr	r0, [pc, #224]	; (80083c0 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80082de:	f7fe fee1 	bl	80070a4 <motor_es>
				motor_es(&joint_4, joint_4_data, 4);
 80082e2:	2204      	movs	r2, #4
 80082e4:	4937      	ldr	r1, [pc, #220]	; (80083c4 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80082e6:	4838      	ldr	r0, [pc, #224]	; (80083c8 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80082e8:	f7fe fedc 	bl	80070a4 <motor_es>
				motor_es(&joint_5, joint_5_data, 5);
 80082ec:	2205      	movs	r2, #5
 80082ee:	4937      	ldr	r1, [pc, #220]	; (80083cc <HAL_TIM_PeriodElapsedCallback+0x170>)
 80082f0:	4837      	ldr	r0, [pc, #220]	; (80083d0 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80082f2:	f7fe fed7 	bl	80070a4 <motor_es>
				motor_es(&joint_6, joint_6_data, 6);				
 80082f6:	2206      	movs	r2, #6
 80082f8:	4936      	ldr	r1, [pc, #216]	; (80083d4 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80082fa:	4837      	ldr	r0, [pc, #220]	; (80083d8 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80082fc:	f7fe fed2 	bl	80070a4 <motor_es>
				send_to_all_slave();
 8008300:	f7ff fc1c 	bl	8007b3c <send_to_all_slave>
			}
		}
		
		
		// error check
		can1_last_error_code = READ_REG(hfdcan1.Instance->PSR);	
 8008304:	4b35      	ldr	r3, [pc, #212]	; (80083dc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830a:	4a35      	ldr	r2, [pc, #212]	; (80083e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800830c:	6013      	str	r3, [r2, #0]
		can1_last_error_code = can1_last_error_code & 0x0007; 
 800830e:	4b34      	ldr	r3, [pc, #208]	; (80083e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f003 0307 	and.w	r3, r3, #7
 8008316:	4a32      	ldr	r2, [pc, #200]	; (80083e0 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8008318:	6013      	str	r3, [r2, #0]
		
		can2_last_error_code = READ_REG(hfdcan2.Instance->PSR);	
 800831a:	4b32      	ldr	r3, [pc, #200]	; (80083e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008320:	4a31      	ldr	r2, [pc, #196]	; (80083e8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8008322:	6013      	str	r3, [r2, #0]
		can2_last_error_code = can2_last_error_code & 0x0007;
 8008324:	4b30      	ldr	r3, [pc, #192]	; (80083e8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	f003 0307 	and.w	r3, r3, #7
 800832c:	4a2e      	ldr	r2, [pc, #184]	; (80083e8 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 800832e:	6013      	str	r3, [r2, #0]
		FDCAN_ErrorCountersTypeDef ErrorCounters;
		uint8_t error_counter1;
		uint8_t error_counter2;
		uint8_t error_counter3;
		uint8_t error_counter4;
		HAL_FDCAN_GetErrorCounters(&hfdcan1, &ErrorCounters);
 8008330:	f107 030c 	add.w	r3, r7, #12
 8008334:	4619      	mov	r1, r3
 8008336:	4829      	ldr	r0, [pc, #164]	; (80083dc <HAL_TIM_PeriodElapsedCallback+0x180>)
 8008338:	f7f9 f87e 	bl	8001438 <HAL_FDCAN_GetErrorCounters>
		error_counter1 = (uint8_t)ErrorCounters.RxErrorCnt;
 800833c:	693b      	ldr	r3, [r7, #16]
 800833e:	77fb      	strb	r3, [r7, #31]
		error_counter2 = (uint8_t)ErrorCounters.TxErrorCnt; 
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	77bb      	strb	r3, [r7, #30]
		
		can1_error_counter += error_counter1;
 8008344:	7ffa      	ldrb	r2, [r7, #31]
 8008346:	4b29      	ldr	r3, [pc, #164]	; (80083ec <HAL_TIM_PeriodElapsedCallback+0x190>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4413      	add	r3, r2
 800834c:	4a27      	ldr	r2, [pc, #156]	; (80083ec <HAL_TIM_PeriodElapsedCallback+0x190>)
 800834e:	6013      	str	r3, [r2, #0]
		can1_error_counter += error_counter2;
 8008350:	7fba      	ldrb	r2, [r7, #30]
 8008352:	4b26      	ldr	r3, [pc, #152]	; (80083ec <HAL_TIM_PeriodElapsedCallback+0x190>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	4413      	add	r3, r2
 8008358:	4a24      	ldr	r2, [pc, #144]	; (80083ec <HAL_TIM_PeriodElapsedCallback+0x190>)
 800835a:	6013      	str	r3, [r2, #0]
		
		HAL_FDCAN_GetErrorCounters(&hfdcan2, &ErrorCounters);
 800835c:	f107 030c 	add.w	r3, r7, #12
 8008360:	4619      	mov	r1, r3
 8008362:	4820      	ldr	r0, [pc, #128]	; (80083e4 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8008364:	f7f9 f868 	bl	8001438 <HAL_FDCAN_GetErrorCounters>
		error_counter3 = (uint8_t)ErrorCounters.RxErrorCnt;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	777b      	strb	r3, [r7, #29]
		error_counter4 = (uint8_t)ErrorCounters.TxErrorCnt;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	773b      	strb	r3, [r7, #28]
		
		can2_error_counter += error_counter3;
 8008370:	7f7a      	ldrb	r2, [r7, #29]
 8008372:	4b1f      	ldr	r3, [pc, #124]	; (80083f0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4413      	add	r3, r2
 8008378:	4a1d      	ldr	r2, [pc, #116]	; (80083f0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 800837a:	6013      	str	r3, [r2, #0]
		can2_error_counter += error_counter4;
 800837c:	7f3a      	ldrb	r2, [r7, #28]
 800837e:	4b1c      	ldr	r3, [pc, #112]	; (80083f0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4413      	add	r3, r2
 8008384:	4a1a      	ldr	r2, [pc, #104]	; (80083f0 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8008386:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOA, ES_Pin);
 8008388:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800838c:	4819      	ldr	r0, [pc, #100]	; (80083f4 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800838e:	f7f9 fc46 	bl	8001c1e <HAL_GPIO_TogglePin>
	}
}
 8008392:	bf00      	nop
 8008394:	3728      	adds	r7, #40	; 0x28
 8008396:	46bd      	mov	sp, r7
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	40000c00 	.word	0x40000c00
 80083a0:	240005f8 	.word	0x240005f8
 80083a4:	24000600 	.word	0x24000600
 80083a8:	24000602 	.word	0x24000602
 80083ac:	24000568 	.word	0x24000568
 80083b0:	24000490 	.word	0x24000490
 80083b4:	24000570 	.word	0x24000570
 80083b8:	240004b4 	.word	0x240004b4
 80083bc:	24000578 	.word	0x24000578
 80083c0:	240004d8 	.word	0x240004d8
 80083c4:	24000580 	.word	0x24000580
 80083c8:	240004fc 	.word	0x240004fc
 80083cc:	24000588 	.word	0x24000588
 80083d0:	24000520 	.word	0x24000520
 80083d4:	24000590 	.word	0x24000590
 80083d8:	24000544 	.word	0x24000544
 80083dc:	24000150 	.word	0x24000150
 80083e0:	24000780 	.word	0x24000780
 80083e4:	240001f0 	.word	0x240001f0
 80083e8:	24000784 	.word	0x24000784
 80083ec:	24000778 	.word	0x24000778
 80083f0:	2400077c 	.word	0x2400077c
 80083f4:	58020000 	.word	0x58020000

080083f8 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80083fe:	463b      	mov	r3, r7
 8008400:	2200      	movs	r2, #0
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	605a      	str	r2, [r3, #4]
 8008406:	609a      	str	r2, [r3, #8]
 8008408:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800840a:	f7f8 fbc7 	bl	8000b9c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800840e:	2301      	movs	r3, #1
 8008410:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8008412:	2300      	movs	r3, #0
 8008414:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8008416:	2300      	movs	r3, #0
 8008418:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800841a:	231f      	movs	r3, #31
 800841c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 800841e:	2387      	movs	r3, #135	; 0x87
 8008420:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8008422:	2300      	movs	r3, #0
 8008424:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8008426:	2300      	movs	r3, #0
 8008428:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800842a:	2301      	movs	r3, #1
 800842c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800842e:	2301      	movs	r3, #1
 8008430:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008432:	2300      	movs	r3, #0
 8008434:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800843a:	463b      	mov	r3, r7
 800843c:	4618      	mov	r0, r3
 800843e:	f7f8 fbe5 	bl	8000c0c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008442:	2004      	movs	r0, #4
 8008444:	f7f8 fbc2 	bl	8000bcc <HAL_MPU_Enable>

}
 8008448:	bf00      	nop
 800844a:	3710      	adds	r7, #16
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008450:	b480      	push	{r7}
 8008452:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008454:	b672      	cpsid	i
}
 8008456:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008458:	e7fe      	b.n	8008458 <Error_Handler+0x8>
	...

0800845c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008462:	4b0a      	ldr	r3, [pc, #40]	; (800848c <HAL_MspInit+0x30>)
 8008464:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008468:	4a08      	ldr	r2, [pc, #32]	; (800848c <HAL_MspInit+0x30>)
 800846a:	f043 0302 	orr.w	r3, r3, #2
 800846e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008472:	4b06      	ldr	r3, [pc, #24]	; (800848c <HAL_MspInit+0x30>)
 8008474:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008478:	f003 0302 	and.w	r3, r3, #2
 800847c:	607b      	str	r3, [r7, #4]
 800847e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008480:	bf00      	nop
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	58024400 	.word	0x58024400

08008490 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b0bc      	sub	sp, #240	; 0xf0
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008498:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800849c:	2200      	movs	r2, #0
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	605a      	str	r2, [r3, #4]
 80084a2:	609a      	str	r2, [r3, #8]
 80084a4:	60da      	str	r2, [r3, #12]
 80084a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80084a8:	f107 0318 	add.w	r3, r7, #24
 80084ac:	22c0      	movs	r2, #192	; 0xc0
 80084ae:	2100      	movs	r1, #0
 80084b0:	4618      	mov	r0, r3
 80084b2:	f000 faf9 	bl	8008aa8 <memset>
  if(hfdcan->Instance==FDCAN1)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a57      	ldr	r2, [pc, #348]	; (8008618 <HAL_FDCAN_MspInit+0x188>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d150      	bne.n	8008562 <HAL_FDCAN_MspInit+0xd2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80084c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80084c4:	f04f 0300 	mov.w	r3, #0
 80084c8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80084cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80084d4:	f107 0318 	add.w	r3, r7, #24
 80084d8:	4618      	mov	r0, r3
 80084da:	f7fa fbdb 	bl	8002c94 <HAL_RCCEx_PeriphCLKConfig>
 80084de:	4603      	mov	r3, r0
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d001      	beq.n	80084e8 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80084e4:	f7ff ffb4 	bl	8008450 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80084e8:	4b4c      	ldr	r3, [pc, #304]	; (800861c <HAL_FDCAN_MspInit+0x18c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3301      	adds	r3, #1
 80084ee:	4a4b      	ldr	r2, [pc, #300]	; (800861c <HAL_FDCAN_MspInit+0x18c>)
 80084f0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80084f2:	4b4a      	ldr	r3, [pc, #296]	; (800861c <HAL_FDCAN_MspInit+0x18c>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d10e      	bne.n	8008518 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80084fa:	4b49      	ldr	r3, [pc, #292]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 80084fc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008500:	4a47      	ldr	r2, [pc, #284]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 8008502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008506:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800850a:	4b45      	ldr	r3, [pc, #276]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 800850c:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008514:	617b      	str	r3, [r7, #20]
 8008516:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008518:	4b41      	ldr	r3, [pc, #260]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 800851a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800851e:	4a40      	ldr	r2, [pc, #256]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 8008520:	f043 0308 	orr.w	r3, r3, #8
 8008524:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008528:	4b3d      	ldr	r3, [pc, #244]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 800852a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800852e:	f003 0308 	and.w	r3, r3, #8
 8008532:	613b      	str	r3, [r7, #16]
 8008534:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008536:	2303      	movs	r3, #3
 8008538:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800853c:	2302      	movs	r3, #2
 800853e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008542:	2300      	movs	r3, #0
 8008544:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008548:	2300      	movs	r3, #0
 800854a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800854e:	2309      	movs	r3, #9
 8008550:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008554:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008558:	4619      	mov	r1, r3
 800855a:	4832      	ldr	r0, [pc, #200]	; (8008624 <HAL_FDCAN_MspInit+0x194>)
 800855c:	f7f9 f996 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8008560:	e055      	b.n	800860e <HAL_FDCAN_MspInit+0x17e>
  else if(hfdcan->Instance==FDCAN2)
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4a30      	ldr	r2, [pc, #192]	; (8008628 <HAL_FDCAN_MspInit+0x198>)
 8008568:	4293      	cmp	r3, r2
 800856a:	d150      	bne.n	800860e <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800856c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008570:	f04f 0300 	mov.w	r3, #0
 8008574:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8008578:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800857c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008580:	f107 0318 	add.w	r3, r7, #24
 8008584:	4618      	mov	r0, r3
 8008586:	f7fa fb85 	bl	8002c94 <HAL_RCCEx_PeriphCLKConfig>
 800858a:	4603      	mov	r3, r0
 800858c:	2b00      	cmp	r3, #0
 800858e:	d001      	beq.n	8008594 <HAL_FDCAN_MspInit+0x104>
      Error_Handler();
 8008590:	f7ff ff5e 	bl	8008450 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8008594:	4b21      	ldr	r3, [pc, #132]	; (800861c <HAL_FDCAN_MspInit+0x18c>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	3301      	adds	r3, #1
 800859a:	4a20      	ldr	r2, [pc, #128]	; (800861c <HAL_FDCAN_MspInit+0x18c>)
 800859c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800859e:	4b1f      	ldr	r3, [pc, #124]	; (800861c <HAL_FDCAN_MspInit+0x18c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b01      	cmp	r3, #1
 80085a4:	d10e      	bne.n	80085c4 <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80085a6:	4b1e      	ldr	r3, [pc, #120]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 80085a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80085ac:	4a1c      	ldr	r2, [pc, #112]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 80085ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085b2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80085b6:	4b1a      	ldr	r3, [pc, #104]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 80085b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80085bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c0:	60fb      	str	r3, [r7, #12]
 80085c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085c4:	4b16      	ldr	r3, [pc, #88]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 80085c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085ca:	4a15      	ldr	r2, [pc, #84]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 80085cc:	f043 0302 	orr.w	r3, r3, #2
 80085d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085d4:	4b12      	ldr	r3, [pc, #72]	; (8008620 <HAL_FDCAN_MspInit+0x190>)
 80085d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085da:	f003 0302 	and.w	r3, r3, #2
 80085de:	60bb      	str	r3, [r7, #8]
 80085e0:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80085e2:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80085e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ea:	2302      	movs	r3, #2
 80085ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085f6:	2300      	movs	r3, #0
 80085f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80085fc:	2309      	movs	r3, #9
 80085fe:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008602:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008606:	4619      	mov	r1, r3
 8008608:	4808      	ldr	r0, [pc, #32]	; (800862c <HAL_FDCAN_MspInit+0x19c>)
 800860a:	f7f9 f93f 	bl	800188c <HAL_GPIO_Init>
}
 800860e:	bf00      	nop
 8008610:	37f0      	adds	r7, #240	; 0xf0
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	4000a000 	.word	0x4000a000
 800861c:	24000798 	.word	0x24000798
 8008620:	58024400 	.word	0x58024400
 8008624:	58020c00 	.word	0x58020c00
 8008628:	4000a400 	.word	0x4000a400
 800862c:	58020400 	.word	0x58020400

08008630 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b0ba      	sub	sp, #232	; 0xe8
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008638:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800863c:	2200      	movs	r2, #0
 800863e:	601a      	str	r2, [r3, #0]
 8008640:	605a      	str	r2, [r3, #4]
 8008642:	609a      	str	r2, [r3, #8]
 8008644:	60da      	str	r2, [r3, #12]
 8008646:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008648:	f107 0310 	add.w	r3, r7, #16
 800864c:	22c0      	movs	r2, #192	; 0xc0
 800864e:	2100      	movs	r1, #0
 8008650:	4618      	mov	r0, r3
 8008652:	f000 fa29 	bl	8008aa8 <memset>
  if(hspi->Instance==SPI1)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a26      	ldr	r2, [pc, #152]	; (80086f4 <HAL_SPI_MspInit+0xc4>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d144      	bne.n	80086ea <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8008660:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008664:	f04f 0300 	mov.w	r3, #0
 8008668:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800866c:	2300      	movs	r3, #0
 800866e:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008670:	f107 0310 	add.w	r3, r7, #16
 8008674:	4618      	mov	r0, r3
 8008676:	f7fa fb0d 	bl	8002c94 <HAL_RCCEx_PeriphCLKConfig>
 800867a:	4603      	mov	r3, r0
 800867c:	2b00      	cmp	r3, #0
 800867e:	d001      	beq.n	8008684 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8008680:	f7ff fee6 	bl	8008450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008684:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <HAL_SPI_MspInit+0xc8>)
 8008686:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800868a:	4a1b      	ldr	r2, [pc, #108]	; (80086f8 <HAL_SPI_MspInit+0xc8>)
 800868c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008690:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008694:	4b18      	ldr	r3, [pc, #96]	; (80086f8 <HAL_SPI_MspInit+0xc8>)
 8008696:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800869a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800869e:	60fb      	str	r3, [r7, #12]
 80086a0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086a2:	4b15      	ldr	r3, [pc, #84]	; (80086f8 <HAL_SPI_MspInit+0xc8>)
 80086a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086a8:	4a13      	ldr	r2, [pc, #76]	; (80086f8 <HAL_SPI_MspInit+0xc8>)
 80086aa:	f043 0301 	orr.w	r3, r3, #1
 80086ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086b2:	4b11      	ldr	r3, [pc, #68]	; (80086f8 <HAL_SPI_MspInit+0xc8>)
 80086b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086b8:	f003 0301 	and.w	r3, r3, #1
 80086bc:	60bb      	str	r3, [r7, #8]
 80086be:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80086c0:	23e0      	movs	r3, #224	; 0xe0
 80086c2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086c6:	2302      	movs	r3, #2
 80086c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086cc:	2300      	movs	r3, #0
 80086ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086d2:	2300      	movs	r3, #0
 80086d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80086d8:	2305      	movs	r3, #5
 80086da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086de:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80086e2:	4619      	mov	r1, r3
 80086e4:	4805      	ldr	r0, [pc, #20]	; (80086fc <HAL_SPI_MspInit+0xcc>)
 80086e6:	f7f9 f8d1 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80086ea:	bf00      	nop
 80086ec:	37e8      	adds	r7, #232	; 0xe8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	40013000 	.word	0x40013000
 80086f8:	58024400 	.word	0x58024400
 80086fc:	58020000 	.word	0x58020000

08008700 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008710:	d10f      	bne.n	8008732 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008712:	4b22      	ldr	r3, [pc, #136]	; (800879c <HAL_TIM_Base_MspInit+0x9c>)
 8008714:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008718:	4a20      	ldr	r2, [pc, #128]	; (800879c <HAL_TIM_Base_MspInit+0x9c>)
 800871a:	f043 0301 	orr.w	r3, r3, #1
 800871e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008722:	4b1e      	ldr	r3, [pc, #120]	; (800879c <HAL_TIM_Base_MspInit+0x9c>)
 8008724:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008728:	f003 0301 	and.w	r3, r3, #1
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8008730:	e030      	b.n	8008794 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM4)
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	4a1a      	ldr	r2, [pc, #104]	; (80087a0 <HAL_TIM_Base_MspInit+0xa0>)
 8008738:	4293      	cmp	r3, r2
 800873a:	d10f      	bne.n	800875c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800873c:	4b17      	ldr	r3, [pc, #92]	; (800879c <HAL_TIM_Base_MspInit+0x9c>)
 800873e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008742:	4a16      	ldr	r2, [pc, #88]	; (800879c <HAL_TIM_Base_MspInit+0x9c>)
 8008744:	f043 0304 	orr.w	r3, r3, #4
 8008748:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800874c:	4b13      	ldr	r3, [pc, #76]	; (800879c <HAL_TIM_Base_MspInit+0x9c>)
 800874e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008752:	f003 0304 	and.w	r3, r3, #4
 8008756:	613b      	str	r3, [r7, #16]
 8008758:	693b      	ldr	r3, [r7, #16]
}
 800875a:	e01b      	b.n	8008794 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM5)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a10      	ldr	r2, [pc, #64]	; (80087a4 <HAL_TIM_Base_MspInit+0xa4>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d116      	bne.n	8008794 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008766:	4b0d      	ldr	r3, [pc, #52]	; (800879c <HAL_TIM_Base_MspInit+0x9c>)
 8008768:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800876c:	4a0b      	ldr	r2, [pc, #44]	; (800879c <HAL_TIM_Base_MspInit+0x9c>)
 800876e:	f043 0308 	orr.w	r3, r3, #8
 8008772:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008776:	4b09      	ldr	r3, [pc, #36]	; (800879c <HAL_TIM_Base_MspInit+0x9c>)
 8008778:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800877c:	f003 0308 	and.w	r3, r3, #8
 8008780:	60fb      	str	r3, [r7, #12]
 8008782:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8008784:	2200      	movs	r2, #0
 8008786:	2100      	movs	r1, #0
 8008788:	2032      	movs	r0, #50	; 0x32
 800878a:	f7f8 f9d2 	bl	8000b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800878e:	2032      	movs	r0, #50	; 0x32
 8008790:	f7f8 f9e9 	bl	8000b66 <HAL_NVIC_EnableIRQ>
}
 8008794:	bf00      	nop
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	58024400 	.word	0x58024400
 80087a0:	40000800 	.word	0x40000800
 80087a4:	40000c00 	.word	0x40000c00

080087a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087a8:	b580      	push	{r7, lr}
 80087aa:	b0ba      	sub	sp, #232	; 0xe8
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80087b4:	2200      	movs	r2, #0
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	605a      	str	r2, [r3, #4]
 80087ba:	609a      	str	r2, [r3, #8]
 80087bc:	60da      	str	r2, [r3, #12]
 80087be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80087c0:	f107 0310 	add.w	r3, r7, #16
 80087c4:	22c0      	movs	r2, #192	; 0xc0
 80087c6:	2100      	movs	r1, #0
 80087c8:	4618      	mov	r0, r3
 80087ca:	f000 f96d 	bl	8008aa8 <memset>
  if(huart->Instance==USART2)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	4a26      	ldr	r2, [pc, #152]	; (800886c <HAL_UART_MspInit+0xc4>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d145      	bne.n	8008864 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80087d8:	f04f 0202 	mov.w	r2, #2
 80087dc:	f04f 0300 	mov.w	r3, #0
 80087e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80087e4:	2300      	movs	r3, #0
 80087e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80087ea:	f107 0310 	add.w	r3, r7, #16
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7fa fa50 	bl	8002c94 <HAL_RCCEx_PeriphCLKConfig>
 80087f4:	4603      	mov	r3, r0
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d001      	beq.n	80087fe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80087fa:	f7ff fe29 	bl	8008450 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80087fe:	4b1c      	ldr	r3, [pc, #112]	; (8008870 <HAL_UART_MspInit+0xc8>)
 8008800:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008804:	4a1a      	ldr	r2, [pc, #104]	; (8008870 <HAL_UART_MspInit+0xc8>)
 8008806:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800880a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800880e:	4b18      	ldr	r3, [pc, #96]	; (8008870 <HAL_UART_MspInit+0xc8>)
 8008810:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008818:	60fb      	str	r3, [r7, #12]
 800881a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800881c:	4b14      	ldr	r3, [pc, #80]	; (8008870 <HAL_UART_MspInit+0xc8>)
 800881e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008822:	4a13      	ldr	r2, [pc, #76]	; (8008870 <HAL_UART_MspInit+0xc8>)
 8008824:	f043 0301 	orr.w	r3, r3, #1
 8008828:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800882c:	4b10      	ldr	r3, [pc, #64]	; (8008870 <HAL_UART_MspInit+0xc8>)
 800882e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	60bb      	str	r3, [r7, #8]
 8008838:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800883a:	230c      	movs	r3, #12
 800883c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008840:	2302      	movs	r3, #2
 8008842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008846:	2300      	movs	r3, #0
 8008848:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800884c:	2300      	movs	r3, #0
 800884e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008852:	2307      	movs	r3, #7
 8008854:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008858:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800885c:	4619      	mov	r1, r3
 800885e:	4805      	ldr	r0, [pc, #20]	; (8008874 <HAL_UART_MspInit+0xcc>)
 8008860:	f7f9 f814 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008864:	bf00      	nop
 8008866:	37e8      	adds	r7, #232	; 0xe8
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	40004400 	.word	0x40004400
 8008870:	58024400 	.word	0x58024400
 8008874:	58020000 	.word	0x58020000

08008878 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008878:	b480      	push	{r7}
 800887a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800887c:	e7fe      	b.n	800887c <NMI_Handler+0x4>

0800887e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800887e:	b480      	push	{r7}
 8008880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008882:	e7fe      	b.n	8008882 <HardFault_Handler+0x4>

08008884 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008884:	b480      	push	{r7}
 8008886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008888:	e7fe      	b.n	8008888 <MemManage_Handler+0x4>

0800888a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800888a:	b480      	push	{r7}
 800888c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800888e:	e7fe      	b.n	800888e <BusFault_Handler+0x4>

08008890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008890:	b480      	push	{r7}
 8008892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008894:	e7fe      	b.n	8008894 <UsageFault_Handler+0x4>

08008896 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008896:	b480      	push	{r7}
 8008898:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800889a:	bf00      	nop
 800889c:	46bd      	mov	sp, r7
 800889e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a2:	4770      	bx	lr

080088a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088a8:	bf00      	nop
 80088aa:	46bd      	mov	sp, r7
 80088ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b0:	4770      	bx	lr

080088b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088b2:	b480      	push	{r7}
 80088b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088b6:	bf00      	nop
 80088b8:	46bd      	mov	sp, r7
 80088ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088be:	4770      	bx	lr

080088c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088c4:	f7f8 f80a 	bl	80008dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088c8:	bf00      	nop
 80088ca:	bd80      	pop	{r7, pc}

080088cc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80088d0:	4802      	ldr	r0, [pc, #8]	; (80088dc <TIM5_IRQHandler+0x10>)
 80088d2:	f7fc fa89 	bl	8004de8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80088d6:	bf00      	nop
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	240003b0 	.word	0x240003b0

080088e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80088e0:	b480      	push	{r7}
 80088e2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80088e4:	4b37      	ldr	r3, [pc, #220]	; (80089c4 <SystemInit+0xe4>)
 80088e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088ea:	4a36      	ldr	r2, [pc, #216]	; (80089c4 <SystemInit+0xe4>)
 80088ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80088f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80088f4:	4b34      	ldr	r3, [pc, #208]	; (80089c8 <SystemInit+0xe8>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f003 030f 	and.w	r3, r3, #15
 80088fc:	2b06      	cmp	r3, #6
 80088fe:	d807      	bhi.n	8008910 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008900:	4b31      	ldr	r3, [pc, #196]	; (80089c8 <SystemInit+0xe8>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f023 030f 	bic.w	r3, r3, #15
 8008908:	4a2f      	ldr	r2, [pc, #188]	; (80089c8 <SystemInit+0xe8>)
 800890a:	f043 0307 	orr.w	r3, r3, #7
 800890e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008910:	4b2e      	ldr	r3, [pc, #184]	; (80089cc <SystemInit+0xec>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a2d      	ldr	r2, [pc, #180]	; (80089cc <SystemInit+0xec>)
 8008916:	f043 0301 	orr.w	r3, r3, #1
 800891a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800891c:	4b2b      	ldr	r3, [pc, #172]	; (80089cc <SystemInit+0xec>)
 800891e:	2200      	movs	r2, #0
 8008920:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008922:	4b2a      	ldr	r3, [pc, #168]	; (80089cc <SystemInit+0xec>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	4929      	ldr	r1, [pc, #164]	; (80089cc <SystemInit+0xec>)
 8008928:	4b29      	ldr	r3, [pc, #164]	; (80089d0 <SystemInit+0xf0>)
 800892a:	4013      	ands	r3, r2
 800892c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800892e:	4b26      	ldr	r3, [pc, #152]	; (80089c8 <SystemInit+0xe8>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f003 0308 	and.w	r3, r3, #8
 8008936:	2b00      	cmp	r3, #0
 8008938:	d007      	beq.n	800894a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800893a:	4b23      	ldr	r3, [pc, #140]	; (80089c8 <SystemInit+0xe8>)
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f023 030f 	bic.w	r3, r3, #15
 8008942:	4a21      	ldr	r2, [pc, #132]	; (80089c8 <SystemInit+0xe8>)
 8008944:	f043 0307 	orr.w	r3, r3, #7
 8008948:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800894a:	4b20      	ldr	r3, [pc, #128]	; (80089cc <SystemInit+0xec>)
 800894c:	2200      	movs	r2, #0
 800894e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008950:	4b1e      	ldr	r3, [pc, #120]	; (80089cc <SystemInit+0xec>)
 8008952:	2200      	movs	r2, #0
 8008954:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008956:	4b1d      	ldr	r3, [pc, #116]	; (80089cc <SystemInit+0xec>)
 8008958:	2200      	movs	r2, #0
 800895a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800895c:	4b1b      	ldr	r3, [pc, #108]	; (80089cc <SystemInit+0xec>)
 800895e:	4a1d      	ldr	r2, [pc, #116]	; (80089d4 <SystemInit+0xf4>)
 8008960:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008962:	4b1a      	ldr	r3, [pc, #104]	; (80089cc <SystemInit+0xec>)
 8008964:	4a1c      	ldr	r2, [pc, #112]	; (80089d8 <SystemInit+0xf8>)
 8008966:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008968:	4b18      	ldr	r3, [pc, #96]	; (80089cc <SystemInit+0xec>)
 800896a:	4a1c      	ldr	r2, [pc, #112]	; (80089dc <SystemInit+0xfc>)
 800896c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800896e:	4b17      	ldr	r3, [pc, #92]	; (80089cc <SystemInit+0xec>)
 8008970:	2200      	movs	r2, #0
 8008972:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008974:	4b15      	ldr	r3, [pc, #84]	; (80089cc <SystemInit+0xec>)
 8008976:	4a19      	ldr	r2, [pc, #100]	; (80089dc <SystemInit+0xfc>)
 8008978:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800897a:	4b14      	ldr	r3, [pc, #80]	; (80089cc <SystemInit+0xec>)
 800897c:	2200      	movs	r2, #0
 800897e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008980:	4b12      	ldr	r3, [pc, #72]	; (80089cc <SystemInit+0xec>)
 8008982:	4a16      	ldr	r2, [pc, #88]	; (80089dc <SystemInit+0xfc>)
 8008984:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008986:	4b11      	ldr	r3, [pc, #68]	; (80089cc <SystemInit+0xec>)
 8008988:	2200      	movs	r2, #0
 800898a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800898c:	4b0f      	ldr	r3, [pc, #60]	; (80089cc <SystemInit+0xec>)
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	4a0e      	ldr	r2, [pc, #56]	; (80089cc <SystemInit+0xec>)
 8008992:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008996:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008998:	4b0c      	ldr	r3, [pc, #48]	; (80089cc <SystemInit+0xec>)
 800899a:	2200      	movs	r2, #0
 800899c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800899e:	4b10      	ldr	r3, [pc, #64]	; (80089e0 <SystemInit+0x100>)
 80089a0:	681a      	ldr	r2, [r3, #0]
 80089a2:	4b10      	ldr	r3, [pc, #64]	; (80089e4 <SystemInit+0x104>)
 80089a4:	4013      	ands	r3, r2
 80089a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089aa:	d202      	bcs.n	80089b2 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80089ac:	4b0e      	ldr	r3, [pc, #56]	; (80089e8 <SystemInit+0x108>)
 80089ae:	2201      	movs	r2, #1
 80089b0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80089b2:	4b0e      	ldr	r3, [pc, #56]	; (80089ec <SystemInit+0x10c>)
 80089b4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80089b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80089ba:	bf00      	nop
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr
 80089c4:	e000ed00 	.word	0xe000ed00
 80089c8:	52002000 	.word	0x52002000
 80089cc:	58024400 	.word	0x58024400
 80089d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80089d4:	02020200 	.word	0x02020200
 80089d8:	01ff0000 	.word	0x01ff0000
 80089dc:	01010280 	.word	0x01010280
 80089e0:	5c001000 	.word	0x5c001000
 80089e4:	ffff0000 	.word	0xffff0000
 80089e8:	51008108 	.word	0x51008108
 80089ec:	52004000 	.word	0x52004000

080089f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80089f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a28 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80089f4:	f7ff ff74 	bl	80088e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80089f8:	480c      	ldr	r0, [pc, #48]	; (8008a2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80089fa:	490d      	ldr	r1, [pc, #52]	; (8008a30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80089fc:	4a0d      	ldr	r2, [pc, #52]	; (8008a34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80089fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a00:	e002      	b.n	8008a08 <LoopCopyDataInit>

08008a02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a06:	3304      	adds	r3, #4

08008a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a0c:	d3f9      	bcc.n	8008a02 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a0e:	4a0a      	ldr	r2, [pc, #40]	; (8008a38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008a10:	4c0a      	ldr	r4, [pc, #40]	; (8008a3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8008a12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a14:	e001      	b.n	8008a1a <LoopFillZerobss>

08008a16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a18:	3204      	adds	r2, #4

08008a1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a1c:	d3fb      	bcc.n	8008a16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008a1e:	f000 f811 	bl	8008a44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a22:	f7fe fc01 	bl	8007228 <main>
  bx  lr
 8008a26:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008a28:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8008a2c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008a30:	24000050 	.word	0x24000050
  ldr r2, =_sidata
 8008a34:	08009940 	.word	0x08009940
  ldr r2, =_sbss
 8008a38:	24000050 	.word	0x24000050
  ldr r4, =_ebss
 8008a3c:	2400079c 	.word	0x2400079c

08008a40 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a40:	e7fe      	b.n	8008a40 <ADC3_IRQHandler>
	...

08008a44 <__libc_init_array>:
 8008a44:	b570      	push	{r4, r5, r6, lr}
 8008a46:	4d0d      	ldr	r5, [pc, #52]	; (8008a7c <__libc_init_array+0x38>)
 8008a48:	4c0d      	ldr	r4, [pc, #52]	; (8008a80 <__libc_init_array+0x3c>)
 8008a4a:	1b64      	subs	r4, r4, r5
 8008a4c:	10a4      	asrs	r4, r4, #2
 8008a4e:	2600      	movs	r6, #0
 8008a50:	42a6      	cmp	r6, r4
 8008a52:	d109      	bne.n	8008a68 <__libc_init_array+0x24>
 8008a54:	4d0b      	ldr	r5, [pc, #44]	; (8008a84 <__libc_init_array+0x40>)
 8008a56:	4c0c      	ldr	r4, [pc, #48]	; (8008a88 <__libc_init_array+0x44>)
 8008a58:	f000 fe24 	bl	80096a4 <_init>
 8008a5c:	1b64      	subs	r4, r4, r5
 8008a5e:	10a4      	asrs	r4, r4, #2
 8008a60:	2600      	movs	r6, #0
 8008a62:	42a6      	cmp	r6, r4
 8008a64:	d105      	bne.n	8008a72 <__libc_init_array+0x2e>
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
 8008a68:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a6c:	4798      	blx	r3
 8008a6e:	3601      	adds	r6, #1
 8008a70:	e7ee      	b.n	8008a50 <__libc_init_array+0xc>
 8008a72:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a76:	4798      	blx	r3
 8008a78:	3601      	adds	r6, #1
 8008a7a:	e7f2      	b.n	8008a62 <__libc_init_array+0x1e>
 8008a7c:	08009938 	.word	0x08009938
 8008a80:	08009938 	.word	0x08009938
 8008a84:	08009938 	.word	0x08009938
 8008a88:	0800993c 	.word	0x0800993c

08008a8c <memcpy>:
 8008a8c:	440a      	add	r2, r1
 8008a8e:	4291      	cmp	r1, r2
 8008a90:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a94:	d100      	bne.n	8008a98 <memcpy+0xc>
 8008a96:	4770      	bx	lr
 8008a98:	b510      	push	{r4, lr}
 8008a9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a9e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aa2:	4291      	cmp	r1, r2
 8008aa4:	d1f9      	bne.n	8008a9a <memcpy+0xe>
 8008aa6:	bd10      	pop	{r4, pc}

08008aa8 <memset>:
 8008aa8:	4402      	add	r2, r0
 8008aaa:	4603      	mov	r3, r0
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d100      	bne.n	8008ab2 <memset+0xa>
 8008ab0:	4770      	bx	lr
 8008ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8008ab6:	e7f9      	b.n	8008aac <memset+0x4>

08008ab8 <sin>:
 8008ab8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008aba:	eeb0 7b40 	vmov.f64	d7, d0
 8008abe:	ee17 3a90 	vmov	r3, s15
 8008ac2:	4a21      	ldr	r2, [pc, #132]	; (8008b48 <sin+0x90>)
 8008ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	dc07      	bgt.n	8008adc <sin+0x24>
 8008acc:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8008b40 <sin+0x88>
 8008ad0:	2000      	movs	r0, #0
 8008ad2:	b005      	add	sp, #20
 8008ad4:	f85d eb04 	ldr.w	lr, [sp], #4
 8008ad8:	f000 bc82 	b.w	80093e0 <__kernel_sin>
 8008adc:	4a1b      	ldr	r2, [pc, #108]	; (8008b4c <sin+0x94>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	dd04      	ble.n	8008aec <sin+0x34>
 8008ae2:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008ae6:	b005      	add	sp, #20
 8008ae8:	f85d fb04 	ldr.w	pc, [sp], #4
 8008aec:	4668      	mov	r0, sp
 8008aee:	f000 f82f 	bl	8008b50 <__ieee754_rem_pio2>
 8008af2:	f000 0003 	and.w	r0, r0, #3
 8008af6:	2801      	cmp	r0, #1
 8008af8:	d00a      	beq.n	8008b10 <sin+0x58>
 8008afa:	2802      	cmp	r0, #2
 8008afc:	d00f      	beq.n	8008b1e <sin+0x66>
 8008afe:	b9c0      	cbnz	r0, 8008b32 <sin+0x7a>
 8008b00:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b04:	ed9d 0b00 	vldr	d0, [sp]
 8008b08:	2001      	movs	r0, #1
 8008b0a:	f000 fc69 	bl	80093e0 <__kernel_sin>
 8008b0e:	e7ea      	b.n	8008ae6 <sin+0x2e>
 8008b10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b14:	ed9d 0b00 	vldr	d0, [sp]
 8008b18:	f000 f95e 	bl	8008dd8 <__kernel_cos>
 8008b1c:	e7e3      	b.n	8008ae6 <sin+0x2e>
 8008b1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b22:	ed9d 0b00 	vldr	d0, [sp]
 8008b26:	2001      	movs	r0, #1
 8008b28:	f000 fc5a 	bl	80093e0 <__kernel_sin>
 8008b2c:	eeb1 0b40 	vneg.f64	d0, d0
 8008b30:	e7d9      	b.n	8008ae6 <sin+0x2e>
 8008b32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b36:	ed9d 0b00 	vldr	d0, [sp]
 8008b3a:	f000 f94d 	bl	8008dd8 <__kernel_cos>
 8008b3e:	e7f5      	b.n	8008b2c <sin+0x74>
	...
 8008b48:	3fe921fb 	.word	0x3fe921fb
 8008b4c:	7fefffff 	.word	0x7fefffff

08008b50 <__ieee754_rem_pio2>:
 8008b50:	b570      	push	{r4, r5, r6, lr}
 8008b52:	eeb0 7b40 	vmov.f64	d7, d0
 8008b56:	ee17 5a90 	vmov	r5, s15
 8008b5a:	4b99      	ldr	r3, [pc, #612]	; (8008dc0 <__ieee754_rem_pio2+0x270>)
 8008b5c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008b60:	429e      	cmp	r6, r3
 8008b62:	b088      	sub	sp, #32
 8008b64:	4604      	mov	r4, r0
 8008b66:	dc07      	bgt.n	8008b78 <__ieee754_rem_pio2+0x28>
 8008b68:	2200      	movs	r2, #0
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	ed84 0b00 	vstr	d0, [r4]
 8008b70:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008b74:	2000      	movs	r0, #0
 8008b76:	e01b      	b.n	8008bb0 <__ieee754_rem_pio2+0x60>
 8008b78:	4b92      	ldr	r3, [pc, #584]	; (8008dc4 <__ieee754_rem_pio2+0x274>)
 8008b7a:	429e      	cmp	r6, r3
 8008b7c:	dc3b      	bgt.n	8008bf6 <__ieee754_rem_pio2+0xa6>
 8008b7e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8008b82:	2d00      	cmp	r5, #0
 8008b84:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8008d80 <__ieee754_rem_pio2+0x230>
 8008b88:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008b8c:	dd19      	ble.n	8008bc2 <__ieee754_rem_pio2+0x72>
 8008b8e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008b92:	429e      	cmp	r6, r3
 8008b94:	d00e      	beq.n	8008bb4 <__ieee754_rem_pio2+0x64>
 8008b96:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008d88 <__ieee754_rem_pio2+0x238>
 8008b9a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008b9e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008ba2:	ed84 5b00 	vstr	d5, [r4]
 8008ba6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008baa:	ed84 7b02 	vstr	d7, [r4, #8]
 8008bae:	2001      	movs	r0, #1
 8008bb0:	b008      	add	sp, #32
 8008bb2:	bd70      	pop	{r4, r5, r6, pc}
 8008bb4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008d90 <__ieee754_rem_pio2+0x240>
 8008bb8:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008bbc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008d98 <__ieee754_rem_pio2+0x248>
 8008bc0:	e7eb      	b.n	8008b9a <__ieee754_rem_pio2+0x4a>
 8008bc2:	429e      	cmp	r6, r3
 8008bc4:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008bc8:	d00e      	beq.n	8008be8 <__ieee754_rem_pio2+0x98>
 8008bca:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8008d88 <__ieee754_rem_pio2+0x238>
 8008bce:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008bd2:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008bd6:	ed84 5b00 	vstr	d5, [r4]
 8008bda:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008bde:	f04f 30ff 	mov.w	r0, #4294967295
 8008be2:	ed84 7b02 	vstr	d7, [r4, #8]
 8008be6:	e7e3      	b.n	8008bb0 <__ieee754_rem_pio2+0x60>
 8008be8:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008d90 <__ieee754_rem_pio2+0x240>
 8008bec:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008bf0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008d98 <__ieee754_rem_pio2+0x248>
 8008bf4:	e7eb      	b.n	8008bce <__ieee754_rem_pio2+0x7e>
 8008bf6:	4b74      	ldr	r3, [pc, #464]	; (8008dc8 <__ieee754_rem_pio2+0x278>)
 8008bf8:	429e      	cmp	r6, r3
 8008bfa:	dc70      	bgt.n	8008cde <__ieee754_rem_pio2+0x18e>
 8008bfc:	f000 fc48 	bl	8009490 <fabs>
 8008c00:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008c04:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008da0 <__ieee754_rem_pio2+0x250>
 8008c08:	eea0 7b06 	vfma.f64	d7, d0, d6
 8008c0c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008c10:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008c14:	ee17 0a90 	vmov	r0, s15
 8008c18:	eeb1 4b45 	vneg.f64	d4, d5
 8008c1c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008d80 <__ieee754_rem_pio2+0x230>
 8008c20:	eea5 0b47 	vfms.f64	d0, d5, d7
 8008c24:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008d88 <__ieee754_rem_pio2+0x238>
 8008c28:	281f      	cmp	r0, #31
 8008c2a:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008c2e:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008c32:	dc08      	bgt.n	8008c46 <__ieee754_rem_pio2+0xf6>
 8008c34:	4b65      	ldr	r3, [pc, #404]	; (8008dcc <__ieee754_rem_pio2+0x27c>)
 8008c36:	1e42      	subs	r2, r0, #1
 8008c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c3c:	42b3      	cmp	r3, r6
 8008c3e:	d002      	beq.n	8008c46 <__ieee754_rem_pio2+0xf6>
 8008c40:	ed84 6b00 	vstr	d6, [r4]
 8008c44:	e026      	b.n	8008c94 <__ieee754_rem_pio2+0x144>
 8008c46:	ee16 3a90 	vmov	r3, s13
 8008c4a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008c4e:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8008c52:	2b10      	cmp	r3, #16
 8008c54:	ea4f 5226 	mov.w	r2, r6, asr #20
 8008c58:	ddf2      	ble.n	8008c40 <__ieee754_rem_pio2+0xf0>
 8008c5a:	eeb0 6b40 	vmov.f64	d6, d0
 8008c5e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8008d90 <__ieee754_rem_pio2+0x240>
 8008c62:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8008d98 <__ieee754_rem_pio2+0x248>
 8008c66:	eea4 6b07 	vfma.f64	d6, d4, d7
 8008c6a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008c6e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8008c72:	eeb0 7b40 	vmov.f64	d7, d0
 8008c76:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8008c7a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008c7e:	ee13 3a90 	vmov	r3, s7
 8008c82:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008c86:	1ad3      	subs	r3, r2, r3
 8008c88:	2b31      	cmp	r3, #49	; 0x31
 8008c8a:	dc17      	bgt.n	8008cbc <__ieee754_rem_pio2+0x16c>
 8008c8c:	eeb0 0b46 	vmov.f64	d0, d6
 8008c90:	ed84 3b00 	vstr	d3, [r4]
 8008c94:	ed94 6b00 	vldr	d6, [r4]
 8008c98:	2d00      	cmp	r5, #0
 8008c9a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008c9e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008ca2:	ed84 0b02 	vstr	d0, [r4, #8]
 8008ca6:	da83      	bge.n	8008bb0 <__ieee754_rem_pio2+0x60>
 8008ca8:	eeb1 6b46 	vneg.f64	d6, d6
 8008cac:	eeb1 0b40 	vneg.f64	d0, d0
 8008cb0:	ed84 6b00 	vstr	d6, [r4]
 8008cb4:	ed84 0b02 	vstr	d0, [r4, #8]
 8008cb8:	4240      	negs	r0, r0
 8008cba:	e779      	b.n	8008bb0 <__ieee754_rem_pio2+0x60>
 8008cbc:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8008da8 <__ieee754_rem_pio2+0x258>
 8008cc0:	eeb0 0b46 	vmov.f64	d0, d6
 8008cc4:	eea4 0b03 	vfma.f64	d0, d4, d3
 8008cc8:	ee36 7b40 	vsub.f64	d7, d6, d0
 8008ccc:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8008db0 <__ieee754_rem_pio2+0x260>
 8008cd0:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008cd4:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8008cd8:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008cdc:	e7b0      	b.n	8008c40 <__ieee754_rem_pio2+0xf0>
 8008cde:	4b3c      	ldr	r3, [pc, #240]	; (8008dd0 <__ieee754_rem_pio2+0x280>)
 8008ce0:	429e      	cmp	r6, r3
 8008ce2:	dd06      	ble.n	8008cf2 <__ieee754_rem_pio2+0x1a2>
 8008ce4:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008ce8:	ed80 7b02 	vstr	d7, [r0, #8]
 8008cec:	ed80 7b00 	vstr	d7, [r0]
 8008cf0:	e740      	b.n	8008b74 <__ieee754_rem_pio2+0x24>
 8008cf2:	1532      	asrs	r2, r6, #20
 8008cf4:	ee10 0a10 	vmov	r0, s0
 8008cf8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8008cfc:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008d00:	ec41 0b17 	vmov	d7, r0, r1
 8008d04:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008d08:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8008db8 <__ieee754_rem_pio2+0x268>
 8008d0c:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008d10:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d14:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008d18:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008d1c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008d20:	a902      	add	r1, sp, #8
 8008d22:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008d26:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d2a:	ed8d 6b04 	vstr	d6, [sp, #16]
 8008d2e:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008d32:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d36:	2603      	movs	r6, #3
 8008d38:	4608      	mov	r0, r1
 8008d3a:	ed91 7b04 	vldr	d7, [r1, #16]
 8008d3e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d46:	4633      	mov	r3, r6
 8008d48:	f1a1 0108 	sub.w	r1, r1, #8
 8008d4c:	f106 36ff 	add.w	r6, r6, #4294967295
 8008d50:	d0f3      	beq.n	8008d3a <__ieee754_rem_pio2+0x1ea>
 8008d52:	4920      	ldr	r1, [pc, #128]	; (8008dd4 <__ieee754_rem_pio2+0x284>)
 8008d54:	9101      	str	r1, [sp, #4]
 8008d56:	2102      	movs	r1, #2
 8008d58:	9100      	str	r1, [sp, #0]
 8008d5a:	4621      	mov	r1, r4
 8008d5c:	f000 f8a8 	bl	8008eb0 <__kernel_rem_pio2>
 8008d60:	2d00      	cmp	r5, #0
 8008d62:	f6bf af25 	bge.w	8008bb0 <__ieee754_rem_pio2+0x60>
 8008d66:	ed94 7b00 	vldr	d7, [r4]
 8008d6a:	eeb1 7b47 	vneg.f64	d7, d7
 8008d6e:	ed84 7b00 	vstr	d7, [r4]
 8008d72:	ed94 7b02 	vldr	d7, [r4, #8]
 8008d76:	eeb1 7b47 	vneg.f64	d7, d7
 8008d7a:	ed84 7b02 	vstr	d7, [r4, #8]
 8008d7e:	e79b      	b.n	8008cb8 <__ieee754_rem_pio2+0x168>
 8008d80:	54400000 	.word	0x54400000
 8008d84:	3ff921fb 	.word	0x3ff921fb
 8008d88:	1a626331 	.word	0x1a626331
 8008d8c:	3dd0b461 	.word	0x3dd0b461
 8008d90:	1a600000 	.word	0x1a600000
 8008d94:	3dd0b461 	.word	0x3dd0b461
 8008d98:	2e037073 	.word	0x2e037073
 8008d9c:	3ba3198a 	.word	0x3ba3198a
 8008da0:	6dc9c883 	.word	0x6dc9c883
 8008da4:	3fe45f30 	.word	0x3fe45f30
 8008da8:	2e000000 	.word	0x2e000000
 8008dac:	3ba3198a 	.word	0x3ba3198a
 8008db0:	252049c1 	.word	0x252049c1
 8008db4:	397b839a 	.word	0x397b839a
 8008db8:	00000000 	.word	0x00000000
 8008dbc:	41700000 	.word	0x41700000
 8008dc0:	3fe921fb 	.word	0x3fe921fb
 8008dc4:	4002d97b 	.word	0x4002d97b
 8008dc8:	413921fb 	.word	0x413921fb
 8008dcc:	08009754 	.word	0x08009754
 8008dd0:	7fefffff 	.word	0x7fefffff
 8008dd4:	080097d4 	.word	0x080097d4

08008dd8 <__kernel_cos>:
 8008dd8:	ee10 1a90 	vmov	r1, s1
 8008ddc:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008de0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008de4:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008de8:	da05      	bge.n	8008df6 <__kernel_cos+0x1e>
 8008dea:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008dee:	ee17 3a90 	vmov	r3, s15
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d03d      	beq.n	8008e72 <__kernel_cos+0x9a>
 8008df6:	ee20 3b00 	vmul.f64	d3, d0, d0
 8008dfa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008e78 <__kernel_cos+0xa0>
 8008dfe:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008e80 <__kernel_cos+0xa8>
 8008e02:	eea3 6b07 	vfma.f64	d6, d3, d7
 8008e06:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008e88 <__kernel_cos+0xb0>
 8008e0a:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008e0e:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008e90 <__kernel_cos+0xb8>
 8008e12:	eea7 6b03 	vfma.f64	d6, d7, d3
 8008e16:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008e98 <__kernel_cos+0xc0>
 8008e1a:	4b23      	ldr	r3, [pc, #140]	; (8008ea8 <__kernel_cos+0xd0>)
 8008e1c:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008e20:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008ea0 <__kernel_cos+0xc8>
 8008e24:	4299      	cmp	r1, r3
 8008e26:	eea7 6b03 	vfma.f64	d6, d7, d3
 8008e2a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008e2e:	ee26 5b03 	vmul.f64	d5, d6, d3
 8008e32:	ee23 7b07 	vmul.f64	d7, d3, d7
 8008e36:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8008e3a:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008e3e:	dc04      	bgt.n	8008e4a <__kernel_cos+0x72>
 8008e40:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008e44:	ee34 0b46 	vsub.f64	d0, d4, d6
 8008e48:	4770      	bx	lr
 8008e4a:	4b18      	ldr	r3, [pc, #96]	; (8008eac <__kernel_cos+0xd4>)
 8008e4c:	4299      	cmp	r1, r3
 8008e4e:	dc0d      	bgt.n	8008e6c <__kernel_cos+0x94>
 8008e50:	2200      	movs	r2, #0
 8008e52:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8008e56:	ec43 2b15 	vmov	d5, r2, r3
 8008e5a:	ee34 0b45 	vsub.f64	d0, d4, d5
 8008e5e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008e62:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008e66:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008e6a:	4770      	bx	lr
 8008e6c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008e70:	e7f3      	b.n	8008e5a <__kernel_cos+0x82>
 8008e72:	eeb0 0b44 	vmov.f64	d0, d4
 8008e76:	4770      	bx	lr
 8008e78:	be8838d4 	.word	0xbe8838d4
 8008e7c:	bda8fae9 	.word	0xbda8fae9
 8008e80:	bdb4b1c4 	.word	0xbdb4b1c4
 8008e84:	3e21ee9e 	.word	0x3e21ee9e
 8008e88:	809c52ad 	.word	0x809c52ad
 8008e8c:	be927e4f 	.word	0xbe927e4f
 8008e90:	19cb1590 	.word	0x19cb1590
 8008e94:	3efa01a0 	.word	0x3efa01a0
 8008e98:	16c15177 	.word	0x16c15177
 8008e9c:	bf56c16c 	.word	0xbf56c16c
 8008ea0:	5555554c 	.word	0x5555554c
 8008ea4:	3fa55555 	.word	0x3fa55555
 8008ea8:	3fd33332 	.word	0x3fd33332
 8008eac:	3fe90000 	.word	0x3fe90000

08008eb0 <__kernel_rem_pio2>:
 8008eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb4:	ed2d 8b06 	vpush	{d8-d10}
 8008eb8:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8008ebc:	460f      	mov	r7, r1
 8008ebe:	9002      	str	r0, [sp, #8]
 8008ec0:	49c5      	ldr	r1, [pc, #788]	; (80091d8 <__kernel_rem_pio2+0x328>)
 8008ec2:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8008ec4:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8008ec8:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8008ecc:	9301      	str	r3, [sp, #4]
 8008ece:	f112 0f14 	cmn.w	r2, #20
 8008ed2:	bfa8      	it	ge
 8008ed4:	2018      	movge	r0, #24
 8008ed6:	f103 31ff 	add.w	r1, r3, #4294967295
 8008eda:	bfb8      	it	lt
 8008edc:	2000      	movlt	r0, #0
 8008ede:	f06f 0417 	mvn.w	r4, #23
 8008ee2:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80091c0 <__kernel_rem_pio2+0x310>
 8008ee6:	bfa4      	itt	ge
 8008ee8:	f1a2 0a03 	subge.w	sl, r2, #3
 8008eec:	fb9a f0f0 	sdivge	r0, sl, r0
 8008ef0:	fb00 4404 	mla	r4, r0, r4, r4
 8008ef4:	1a46      	subs	r6, r0, r1
 8008ef6:	4414      	add	r4, r2
 8008ef8:	eb09 0c01 	add.w	ip, r9, r1
 8008efc:	ad1a      	add	r5, sp, #104	; 0x68
 8008efe:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8008f02:	2200      	movs	r2, #0
 8008f04:	4562      	cmp	r2, ip
 8008f06:	dd10      	ble.n	8008f2a <__kernel_rem_pio2+0x7a>
 8008f08:	9a01      	ldr	r2, [sp, #4]
 8008f0a:	ab1a      	add	r3, sp, #104	; 0x68
 8008f0c:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008f10:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8008f14:	f04f 0c00 	mov.w	ip, #0
 8008f18:	45cc      	cmp	ip, r9
 8008f1a:	dc26      	bgt.n	8008f6a <__kernel_rem_pio2+0xba>
 8008f1c:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80091c0 <__kernel_rem_pio2+0x310>
 8008f20:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008f24:	4616      	mov	r6, r2
 8008f26:	2500      	movs	r5, #0
 8008f28:	e015      	b.n	8008f56 <__kernel_rem_pio2+0xa6>
 8008f2a:	42d6      	cmn	r6, r2
 8008f2c:	d409      	bmi.n	8008f42 <__kernel_rem_pio2+0x92>
 8008f2e:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8008f32:	ee07 3a90 	vmov	s15, r3
 8008f36:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008f3a:	eca5 7b02 	vstmia	r5!, {d7}
 8008f3e:	3201      	adds	r2, #1
 8008f40:	e7e0      	b.n	8008f04 <__kernel_rem_pio2+0x54>
 8008f42:	eeb0 7b46 	vmov.f64	d7, d6
 8008f46:	e7f8      	b.n	8008f3a <__kernel_rem_pio2+0x8a>
 8008f48:	ecb8 5b02 	vldmia	r8!, {d5}
 8008f4c:	ed96 6b00 	vldr	d6, [r6]
 8008f50:	3501      	adds	r5, #1
 8008f52:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008f56:	428d      	cmp	r5, r1
 8008f58:	f1a6 0608 	sub.w	r6, r6, #8
 8008f5c:	ddf4      	ble.n	8008f48 <__kernel_rem_pio2+0x98>
 8008f5e:	ecaa 7b02 	vstmia	sl!, {d7}
 8008f62:	f10c 0c01 	add.w	ip, ip, #1
 8008f66:	3208      	adds	r2, #8
 8008f68:	e7d6      	b.n	8008f18 <__kernel_rem_pio2+0x68>
 8008f6a:	ab06      	add	r3, sp, #24
 8008f6c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80091c8 <__kernel_rem_pio2+0x318>
 8008f70:	ed9f ab97 	vldr	d10, [pc, #604]	; 80091d0 <__kernel_rem_pio2+0x320>
 8008f74:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008f78:	9303      	str	r3, [sp, #12]
 8008f7a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8008f7e:	464d      	mov	r5, r9
 8008f80:	00eb      	lsls	r3, r5, #3
 8008f82:	9304      	str	r3, [sp, #16]
 8008f84:	ab92      	add	r3, sp, #584	; 0x248
 8008f86:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008f8a:	f10d 0b18 	add.w	fp, sp, #24
 8008f8e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8008f90:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8008f94:	465e      	mov	r6, fp
 8008f96:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	2800      	cmp	r0, #0
 8008f9e:	f1a2 0208 	sub.w	r2, r2, #8
 8008fa2:	dc4c      	bgt.n	800903e <__kernel_rem_pio2+0x18e>
 8008fa4:	4620      	mov	r0, r4
 8008fa6:	9105      	str	r1, [sp, #20]
 8008fa8:	f000 faf2 	bl	8009590 <scalbn>
 8008fac:	eeb0 8b40 	vmov.f64	d8, d0
 8008fb0:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8008fb4:	ee28 0b00 	vmul.f64	d0, d8, d0
 8008fb8:	f000 fa76 	bl	80094a8 <floor>
 8008fbc:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008fc0:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008fc4:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8008fc8:	2c00      	cmp	r4, #0
 8008fca:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8008fce:	ee17 8a90 	vmov	r8, s15
 8008fd2:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008fd6:	9905      	ldr	r1, [sp, #20]
 8008fd8:	dd43      	ble.n	8009062 <__kernel_rem_pio2+0x1b2>
 8008fda:	1e68      	subs	r0, r5, #1
 8008fdc:	ab06      	add	r3, sp, #24
 8008fde:	f1c4 0c18 	rsb	ip, r4, #24
 8008fe2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8008fe6:	fa46 f20c 	asr.w	r2, r6, ip
 8008fea:	4490      	add	r8, r2
 8008fec:	fa02 f20c 	lsl.w	r2, r2, ip
 8008ff0:	1ab6      	subs	r6, r6, r2
 8008ff2:	f1c4 0217 	rsb	r2, r4, #23
 8008ff6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8008ffa:	4116      	asrs	r6, r2
 8008ffc:	2e00      	cmp	r6, #0
 8008ffe:	dd3f      	ble.n	8009080 <__kernel_rem_pio2+0x1d0>
 8009000:	f04f 0c00 	mov.w	ip, #0
 8009004:	f108 0801 	add.w	r8, r8, #1
 8009008:	4660      	mov	r0, ip
 800900a:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 800900e:	4565      	cmp	r5, ip
 8009010:	dc6e      	bgt.n	80090f0 <__kernel_rem_pio2+0x240>
 8009012:	2c00      	cmp	r4, #0
 8009014:	dd04      	ble.n	8009020 <__kernel_rem_pio2+0x170>
 8009016:	2c01      	cmp	r4, #1
 8009018:	d07f      	beq.n	800911a <__kernel_rem_pio2+0x26a>
 800901a:	2c02      	cmp	r4, #2
 800901c:	f000 8087 	beq.w	800912e <__kernel_rem_pio2+0x27e>
 8009020:	2e02      	cmp	r6, #2
 8009022:	d12d      	bne.n	8009080 <__kernel_rem_pio2+0x1d0>
 8009024:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009028:	ee30 8b48 	vsub.f64	d8, d0, d8
 800902c:	b340      	cbz	r0, 8009080 <__kernel_rem_pio2+0x1d0>
 800902e:	4620      	mov	r0, r4
 8009030:	9105      	str	r1, [sp, #20]
 8009032:	f000 faad 	bl	8009590 <scalbn>
 8009036:	9905      	ldr	r1, [sp, #20]
 8009038:	ee38 8b40 	vsub.f64	d8, d8, d0
 800903c:	e020      	b.n	8009080 <__kernel_rem_pio2+0x1d0>
 800903e:	ee20 7b09 	vmul.f64	d7, d0, d9
 8009042:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009046:	3801      	subs	r0, #1
 8009048:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800904c:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009050:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009054:	eca6 0a01 	vstmia	r6!, {s0}
 8009058:	ed92 0b00 	vldr	d0, [r2]
 800905c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009060:	e79c      	b.n	8008f9c <__kernel_rem_pio2+0xec>
 8009062:	d105      	bne.n	8009070 <__kernel_rem_pio2+0x1c0>
 8009064:	1e6a      	subs	r2, r5, #1
 8009066:	ab06      	add	r3, sp, #24
 8009068:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800906c:	15f6      	asrs	r6, r6, #23
 800906e:	e7c5      	b.n	8008ffc <__kernel_rem_pio2+0x14c>
 8009070:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009074:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800907c:	da36      	bge.n	80090ec <__kernel_rem_pio2+0x23c>
 800907e:	2600      	movs	r6, #0
 8009080:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009084:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009088:	f040 80aa 	bne.w	80091e0 <__kernel_rem_pio2+0x330>
 800908c:	f105 3bff 	add.w	fp, r5, #4294967295
 8009090:	4658      	mov	r0, fp
 8009092:	2200      	movs	r2, #0
 8009094:	4548      	cmp	r0, r9
 8009096:	da52      	bge.n	800913e <__kernel_rem_pio2+0x28e>
 8009098:	2a00      	cmp	r2, #0
 800909a:	f000 8081 	beq.w	80091a0 <__kernel_rem_pio2+0x2f0>
 800909e:	ab06      	add	r3, sp, #24
 80090a0:	3c18      	subs	r4, #24
 80090a2:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	f000 8087 	beq.w	80091ba <__kernel_rem_pio2+0x30a>
 80090ac:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 fa6d 	bl	8009590 <scalbn>
 80090b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090ba:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80091c8 <__kernel_rem_pio2+0x318>
 80090be:	a96a      	add	r1, sp, #424	; 0x1a8
 80090c0:	f103 0208 	add.w	r2, r3, #8
 80090c4:	1888      	adds	r0, r1, r2
 80090c6:	4659      	mov	r1, fp
 80090c8:	2900      	cmp	r1, #0
 80090ca:	f280 80b7 	bge.w	800923c <__kernel_rem_pio2+0x38c>
 80090ce:	4659      	mov	r1, fp
 80090d0:	2900      	cmp	r1, #0
 80090d2:	f2c0 80d5 	blt.w	8009280 <__kernel_rem_pio2+0x3d0>
 80090d6:	a86a      	add	r0, sp, #424	; 0x1a8
 80090d8:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80090dc:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80091c0 <__kernel_rem_pio2+0x310>
 80090e0:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80091dc <__kernel_rem_pio2+0x32c>
 80090e4:	2400      	movs	r4, #0
 80090e6:	ebab 0001 	sub.w	r0, fp, r1
 80090ea:	e0be      	b.n	800926a <__kernel_rem_pio2+0x3ba>
 80090ec:	2602      	movs	r6, #2
 80090ee:	e787      	b.n	8009000 <__kernel_rem_pio2+0x150>
 80090f0:	f8db 2000 	ldr.w	r2, [fp]
 80090f4:	b958      	cbnz	r0, 800910e <__kernel_rem_pio2+0x25e>
 80090f6:	b122      	cbz	r2, 8009102 <__kernel_rem_pio2+0x252>
 80090f8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80090fc:	f8cb 2000 	str.w	r2, [fp]
 8009100:	2201      	movs	r2, #1
 8009102:	f10c 0c01 	add.w	ip, ip, #1
 8009106:	f10b 0b04 	add.w	fp, fp, #4
 800910a:	4610      	mov	r0, r2
 800910c:	e77f      	b.n	800900e <__kernel_rem_pio2+0x15e>
 800910e:	ebae 0202 	sub.w	r2, lr, r2
 8009112:	f8cb 2000 	str.w	r2, [fp]
 8009116:	4602      	mov	r2, r0
 8009118:	e7f3      	b.n	8009102 <__kernel_rem_pio2+0x252>
 800911a:	f105 3cff 	add.w	ip, r5, #4294967295
 800911e:	ab06      	add	r3, sp, #24
 8009120:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8009124:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009128:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 800912c:	e778      	b.n	8009020 <__kernel_rem_pio2+0x170>
 800912e:	f105 3cff 	add.w	ip, r5, #4294967295
 8009132:	ab06      	add	r3, sp, #24
 8009134:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8009138:	f3c2 0215 	ubfx	r2, r2, #0, #22
 800913c:	e7f4      	b.n	8009128 <__kernel_rem_pio2+0x278>
 800913e:	ab06      	add	r3, sp, #24
 8009140:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8009144:	3801      	subs	r0, #1
 8009146:	431a      	orrs	r2, r3
 8009148:	e7a4      	b.n	8009094 <__kernel_rem_pio2+0x1e4>
 800914a:	f10c 0c01 	add.w	ip, ip, #1
 800914e:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8009152:	2800      	cmp	r0, #0
 8009154:	d0f9      	beq.n	800914a <__kernel_rem_pio2+0x29a>
 8009156:	9b04      	ldr	r3, [sp, #16]
 8009158:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800915c:	eb0d 0203 	add.w	r2, sp, r3
 8009160:	9b01      	ldr	r3, [sp, #4]
 8009162:	18e8      	adds	r0, r5, r3
 8009164:	ab1a      	add	r3, sp, #104	; 0x68
 8009166:	1c6e      	adds	r6, r5, #1
 8009168:	3a98      	subs	r2, #152	; 0x98
 800916a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800916e:	4465      	add	r5, ip
 8009170:	42b5      	cmp	r5, r6
 8009172:	f6ff af05 	blt.w	8008f80 <__kernel_rem_pio2+0xd0>
 8009176:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800917a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800917e:	ee07 3a90 	vmov	s15, r3
 8009182:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009186:	f04f 0c00 	mov.w	ip, #0
 800918a:	eca0 7b02 	vstmia	r0!, {d7}
 800918e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80091c0 <__kernel_rem_pio2+0x310>
 8009192:	4680      	mov	r8, r0
 8009194:	458c      	cmp	ip, r1
 8009196:	dd07      	ble.n	80091a8 <__kernel_rem_pio2+0x2f8>
 8009198:	eca2 7b02 	vstmia	r2!, {d7}
 800919c:	3601      	adds	r6, #1
 800919e:	e7e7      	b.n	8009170 <__kernel_rem_pio2+0x2c0>
 80091a0:	9a03      	ldr	r2, [sp, #12]
 80091a2:	f04f 0c01 	mov.w	ip, #1
 80091a6:	e7d2      	b.n	800914e <__kernel_rem_pio2+0x29e>
 80091a8:	ecbe 5b02 	vldmia	lr!, {d5}
 80091ac:	ed38 6b02 	vldmdb	r8!, {d6}
 80091b0:	f10c 0c01 	add.w	ip, ip, #1
 80091b4:	eea5 7b06 	vfma.f64	d7, d5, d6
 80091b8:	e7ec      	b.n	8009194 <__kernel_rem_pio2+0x2e4>
 80091ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091be:	e76e      	b.n	800909e <__kernel_rem_pio2+0x1ee>
	...
 80091cc:	3e700000 	.word	0x3e700000
 80091d0:	00000000 	.word	0x00000000
 80091d4:	41700000 	.word	0x41700000
 80091d8:	08009920 	.word	0x08009920
 80091dc:	080098e0 	.word	0x080098e0
 80091e0:	4260      	negs	r0, r4
 80091e2:	eeb0 0b48 	vmov.f64	d0, d8
 80091e6:	f000 f9d3 	bl	8009590 <scalbn>
 80091ea:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80093c8 <__kernel_rem_pio2+0x518>
 80091ee:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80091f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80091f6:	db18      	blt.n	800922a <__kernel_rem_pio2+0x37a>
 80091f8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80093d0 <__kernel_rem_pio2+0x520>
 80091fc:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009200:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 8009204:	aa06      	add	r2, sp, #24
 8009206:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800920a:	eea5 0b46 	vfms.f64	d0, d5, d6
 800920e:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009212:	f105 0b01 	add.w	fp, r5, #1
 8009216:	ee10 3a10 	vmov	r3, s0
 800921a:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800921e:	ee17 3a10 	vmov	r3, s14
 8009222:	3418      	adds	r4, #24
 8009224:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8009228:	e740      	b.n	80090ac <__kernel_rem_pio2+0x1fc>
 800922a:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800922e:	aa06      	add	r2, sp, #24
 8009230:	ee10 3a10 	vmov	r3, s0
 8009234:	46ab      	mov	fp, r5
 8009236:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800923a:	e737      	b.n	80090ac <__kernel_rem_pio2+0x1fc>
 800923c:	ac06      	add	r4, sp, #24
 800923e:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 8009242:	9401      	str	r4, [sp, #4]
 8009244:	ee07 4a90 	vmov	s15, r4
 8009248:	3901      	subs	r1, #1
 800924a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800924e:	ee27 7b00 	vmul.f64	d7, d7, d0
 8009252:	ee20 0b06 	vmul.f64	d0, d0, d6
 8009256:	ed20 7b02 	vstmdb	r0!, {d7}
 800925a:	e735      	b.n	80090c8 <__kernel_rem_pio2+0x218>
 800925c:	ecbc 5b02 	vldmia	ip!, {d5}
 8009260:	ecb5 6b02 	vldmia	r5!, {d6}
 8009264:	3401      	adds	r4, #1
 8009266:	eea5 7b06 	vfma.f64	d7, d5, d6
 800926a:	454c      	cmp	r4, r9
 800926c:	dc01      	bgt.n	8009272 <__kernel_rem_pio2+0x3c2>
 800926e:	4284      	cmp	r4, r0
 8009270:	ddf4      	ble.n	800925c <__kernel_rem_pio2+0x3ac>
 8009272:	ac42      	add	r4, sp, #264	; 0x108
 8009274:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8009278:	ed80 7b00 	vstr	d7, [r0]
 800927c:	3901      	subs	r1, #1
 800927e:	e727      	b.n	80090d0 <__kernel_rem_pio2+0x220>
 8009280:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009282:	2902      	cmp	r1, #2
 8009284:	dc0a      	bgt.n	800929c <__kernel_rem_pio2+0x3ec>
 8009286:	2900      	cmp	r1, #0
 8009288:	dc2c      	bgt.n	80092e4 <__kernel_rem_pio2+0x434>
 800928a:	d045      	beq.n	8009318 <__kernel_rem_pio2+0x468>
 800928c:	f008 0007 	and.w	r0, r8, #7
 8009290:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8009294:	ecbd 8b06 	vpop	{d8-d10}
 8009298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800929c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800929e:	2a03      	cmp	r2, #3
 80092a0:	d1f4      	bne.n	800928c <__kernel_rem_pio2+0x3dc>
 80092a2:	aa42      	add	r2, sp, #264	; 0x108
 80092a4:	4413      	add	r3, r2
 80092a6:	461a      	mov	r2, r3
 80092a8:	4619      	mov	r1, r3
 80092aa:	4658      	mov	r0, fp
 80092ac:	2800      	cmp	r0, #0
 80092ae:	f1a1 0108 	sub.w	r1, r1, #8
 80092b2:	dc54      	bgt.n	800935e <__kernel_rem_pio2+0x4ae>
 80092b4:	4659      	mov	r1, fp
 80092b6:	2901      	cmp	r1, #1
 80092b8:	f1a2 0208 	sub.w	r2, r2, #8
 80092bc:	dc5f      	bgt.n	800937e <__kernel_rem_pio2+0x4ce>
 80092be:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80093d8 <__kernel_rem_pio2+0x528>
 80092c2:	3308      	adds	r3, #8
 80092c4:	f1bb 0f01 	cmp.w	fp, #1
 80092c8:	dc69      	bgt.n	800939e <__kernel_rem_pio2+0x4ee>
 80092ca:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80092ce:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80092d2:	2e00      	cmp	r6, #0
 80092d4:	d16a      	bne.n	80093ac <__kernel_rem_pio2+0x4fc>
 80092d6:	ed87 5b00 	vstr	d5, [r7]
 80092da:	ed87 6b02 	vstr	d6, [r7, #8]
 80092de:	ed87 7b04 	vstr	d7, [r7, #16]
 80092e2:	e7d3      	b.n	800928c <__kernel_rem_pio2+0x3dc>
 80092e4:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80093d8 <__kernel_rem_pio2+0x528>
 80092e8:	ab42      	add	r3, sp, #264	; 0x108
 80092ea:	441a      	add	r2, r3
 80092ec:	465b      	mov	r3, fp
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	da26      	bge.n	8009340 <__kernel_rem_pio2+0x490>
 80092f2:	b35e      	cbz	r6, 800934c <__kernel_rem_pio2+0x49c>
 80092f4:	eeb1 7b46 	vneg.f64	d7, d6
 80092f8:	ed87 7b00 	vstr	d7, [r7]
 80092fc:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8009300:	aa44      	add	r2, sp, #272	; 0x110
 8009302:	2301      	movs	r3, #1
 8009304:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009308:	459b      	cmp	fp, r3
 800930a:	da22      	bge.n	8009352 <__kernel_rem_pio2+0x4a2>
 800930c:	b10e      	cbz	r6, 8009312 <__kernel_rem_pio2+0x462>
 800930e:	eeb1 7b47 	vneg.f64	d7, d7
 8009312:	ed87 7b02 	vstr	d7, [r7, #8]
 8009316:	e7b9      	b.n	800928c <__kernel_rem_pio2+0x3dc>
 8009318:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80093d8 <__kernel_rem_pio2+0x528>
 800931c:	ab42      	add	r3, sp, #264	; 0x108
 800931e:	441a      	add	r2, r3
 8009320:	f1bb 0f00 	cmp.w	fp, #0
 8009324:	da05      	bge.n	8009332 <__kernel_rem_pio2+0x482>
 8009326:	b10e      	cbz	r6, 800932c <__kernel_rem_pio2+0x47c>
 8009328:	eeb1 7b47 	vneg.f64	d7, d7
 800932c:	ed87 7b00 	vstr	d7, [r7]
 8009330:	e7ac      	b.n	800928c <__kernel_rem_pio2+0x3dc>
 8009332:	ed32 6b02 	vldmdb	r2!, {d6}
 8009336:	f10b 3bff 	add.w	fp, fp, #4294967295
 800933a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800933e:	e7ef      	b.n	8009320 <__kernel_rem_pio2+0x470>
 8009340:	ed32 7b02 	vldmdb	r2!, {d7}
 8009344:	3b01      	subs	r3, #1
 8009346:	ee36 6b07 	vadd.f64	d6, d6, d7
 800934a:	e7d0      	b.n	80092ee <__kernel_rem_pio2+0x43e>
 800934c:	eeb0 7b46 	vmov.f64	d7, d6
 8009350:	e7d2      	b.n	80092f8 <__kernel_rem_pio2+0x448>
 8009352:	ecb2 6b02 	vldmia	r2!, {d6}
 8009356:	3301      	adds	r3, #1
 8009358:	ee37 7b06 	vadd.f64	d7, d7, d6
 800935c:	e7d4      	b.n	8009308 <__kernel_rem_pio2+0x458>
 800935e:	ed91 7b00 	vldr	d7, [r1]
 8009362:	ed91 5b02 	vldr	d5, [r1, #8]
 8009366:	3801      	subs	r0, #1
 8009368:	ee37 6b05 	vadd.f64	d6, d7, d5
 800936c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009370:	ed81 6b00 	vstr	d6, [r1]
 8009374:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009378:	ed81 7b02 	vstr	d7, [r1, #8]
 800937c:	e796      	b.n	80092ac <__kernel_rem_pio2+0x3fc>
 800937e:	ed92 7b00 	vldr	d7, [r2]
 8009382:	ed92 5b02 	vldr	d5, [r2, #8]
 8009386:	3901      	subs	r1, #1
 8009388:	ee37 6b05 	vadd.f64	d6, d7, d5
 800938c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009390:	ed82 6b00 	vstr	d6, [r2]
 8009394:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009398:	ed82 7b02 	vstr	d7, [r2, #8]
 800939c:	e78b      	b.n	80092b6 <__kernel_rem_pio2+0x406>
 800939e:	ed33 6b02 	vldmdb	r3!, {d6}
 80093a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093a6:	ee37 7b06 	vadd.f64	d7, d7, d6
 80093aa:	e78b      	b.n	80092c4 <__kernel_rem_pio2+0x414>
 80093ac:	eeb1 5b45 	vneg.f64	d5, d5
 80093b0:	eeb1 6b46 	vneg.f64	d6, d6
 80093b4:	ed87 5b00 	vstr	d5, [r7]
 80093b8:	eeb1 7b47 	vneg.f64	d7, d7
 80093bc:	ed87 6b02 	vstr	d6, [r7, #8]
 80093c0:	e78d      	b.n	80092de <__kernel_rem_pio2+0x42e>
 80093c2:	bf00      	nop
 80093c4:	f3af 8000 	nop.w
 80093c8:	00000000 	.word	0x00000000
 80093cc:	41700000 	.word	0x41700000
 80093d0:	00000000 	.word	0x00000000
 80093d4:	3e700000 	.word	0x3e700000
	...

080093e0 <__kernel_sin>:
 80093e0:	ee10 3a90 	vmov	r3, s1
 80093e4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093e8:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80093ec:	da04      	bge.n	80093f8 <__kernel_sin+0x18>
 80093ee:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80093f2:	ee17 3a90 	vmov	r3, s15
 80093f6:	b35b      	cbz	r3, 8009450 <__kernel_sin+0x70>
 80093f8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80093fc:	ee20 5b06 	vmul.f64	d5, d0, d6
 8009400:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009458 <__kernel_sin+0x78>
 8009404:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009460 <__kernel_sin+0x80>
 8009408:	eea6 4b07 	vfma.f64	d4, d6, d7
 800940c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009468 <__kernel_sin+0x88>
 8009410:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009414:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009470 <__kernel_sin+0x90>
 8009418:	eea7 4b06 	vfma.f64	d4, d7, d6
 800941c:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009478 <__kernel_sin+0x98>
 8009420:	eea4 7b06 	vfma.f64	d7, d4, d6
 8009424:	b930      	cbnz	r0, 8009434 <__kernel_sin+0x54>
 8009426:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009480 <__kernel_sin+0xa0>
 800942a:	eea6 4b07 	vfma.f64	d4, d6, d7
 800942e:	eea4 0b05 	vfma.f64	d0, d4, d5
 8009432:	4770      	bx	lr
 8009434:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8009438:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 800943c:	eea1 7b04 	vfma.f64	d7, d1, d4
 8009440:	ee97 1b06 	vfnms.f64	d1, d7, d6
 8009444:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009488 <__kernel_sin+0xa8>
 8009448:	eea5 1b07 	vfma.f64	d1, d5, d7
 800944c:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	f3af 8000 	nop.w
 8009458:	5acfd57c 	.word	0x5acfd57c
 800945c:	3de5d93a 	.word	0x3de5d93a
 8009460:	8a2b9ceb 	.word	0x8a2b9ceb
 8009464:	be5ae5e6 	.word	0xbe5ae5e6
 8009468:	57b1fe7d 	.word	0x57b1fe7d
 800946c:	3ec71de3 	.word	0x3ec71de3
 8009470:	19c161d5 	.word	0x19c161d5
 8009474:	bf2a01a0 	.word	0xbf2a01a0
 8009478:	1110f8a6 	.word	0x1110f8a6
 800947c:	3f811111 	.word	0x3f811111
 8009480:	55555549 	.word	0x55555549
 8009484:	bfc55555 	.word	0xbfc55555
 8009488:	55555549 	.word	0x55555549
 800948c:	3fc55555 	.word	0x3fc55555

08009490 <fabs>:
 8009490:	ec51 0b10 	vmov	r0, r1, d0
 8009494:	ee10 2a10 	vmov	r2, s0
 8009498:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800949c:	ec43 2b10 	vmov	d0, r2, r3
 80094a0:	4770      	bx	lr
 80094a2:	0000      	movs	r0, r0
 80094a4:	0000      	movs	r0, r0
	...

080094a8 <floor>:
 80094a8:	ee10 1a90 	vmov	r1, s1
 80094ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80094b0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80094b4:	2b13      	cmp	r3, #19
 80094b6:	b530      	push	{r4, r5, lr}
 80094b8:	ee10 0a10 	vmov	r0, s0
 80094bc:	ee10 5a10 	vmov	r5, s0
 80094c0:	dc31      	bgt.n	8009526 <floor+0x7e>
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	da15      	bge.n	80094f2 <floor+0x4a>
 80094c6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009580 <floor+0xd8>
 80094ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80094ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80094d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094d6:	dd07      	ble.n	80094e8 <floor+0x40>
 80094d8:	2900      	cmp	r1, #0
 80094da:	da4e      	bge.n	800957a <floor+0xd2>
 80094dc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094e0:	4318      	orrs	r0, r3
 80094e2:	d001      	beq.n	80094e8 <floor+0x40>
 80094e4:	4928      	ldr	r1, [pc, #160]	; (8009588 <floor+0xe0>)
 80094e6:	2000      	movs	r0, #0
 80094e8:	460b      	mov	r3, r1
 80094ea:	4602      	mov	r2, r0
 80094ec:	ec43 2b10 	vmov	d0, r2, r3
 80094f0:	e020      	b.n	8009534 <floor+0x8c>
 80094f2:	4a26      	ldr	r2, [pc, #152]	; (800958c <floor+0xe4>)
 80094f4:	411a      	asrs	r2, r3
 80094f6:	ea01 0402 	and.w	r4, r1, r2
 80094fa:	4304      	orrs	r4, r0
 80094fc:	d01a      	beq.n	8009534 <floor+0x8c>
 80094fe:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009580 <floor+0xd8>
 8009502:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009506:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800950a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800950e:	ddeb      	ble.n	80094e8 <floor+0x40>
 8009510:	2900      	cmp	r1, #0
 8009512:	bfbe      	ittt	lt
 8009514:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8009518:	fa40 f303 	asrlt.w	r3, r0, r3
 800951c:	18c9      	addlt	r1, r1, r3
 800951e:	ea21 0102 	bic.w	r1, r1, r2
 8009522:	2000      	movs	r0, #0
 8009524:	e7e0      	b.n	80094e8 <floor+0x40>
 8009526:	2b33      	cmp	r3, #51	; 0x33
 8009528:	dd05      	ble.n	8009536 <floor+0x8e>
 800952a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800952e:	d101      	bne.n	8009534 <floor+0x8c>
 8009530:	ee30 0b00 	vadd.f64	d0, d0, d0
 8009534:	bd30      	pop	{r4, r5, pc}
 8009536:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 800953a:	f04f 32ff 	mov.w	r2, #4294967295
 800953e:	40e2      	lsrs	r2, r4
 8009540:	4202      	tst	r2, r0
 8009542:	d0f7      	beq.n	8009534 <floor+0x8c>
 8009544:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8009580 <floor+0xd8>
 8009548:	ee30 0b07 	vadd.f64	d0, d0, d7
 800954c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009554:	ddc8      	ble.n	80094e8 <floor+0x40>
 8009556:	2900      	cmp	r1, #0
 8009558:	da02      	bge.n	8009560 <floor+0xb8>
 800955a:	2b14      	cmp	r3, #20
 800955c:	d103      	bne.n	8009566 <floor+0xbe>
 800955e:	3101      	adds	r1, #1
 8009560:	ea20 0002 	bic.w	r0, r0, r2
 8009564:	e7c0      	b.n	80094e8 <floor+0x40>
 8009566:	2401      	movs	r4, #1
 8009568:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800956c:	fa04 f303 	lsl.w	r3, r4, r3
 8009570:	4418      	add	r0, r3
 8009572:	42a8      	cmp	r0, r5
 8009574:	bf38      	it	cc
 8009576:	1909      	addcc	r1, r1, r4
 8009578:	e7f2      	b.n	8009560 <floor+0xb8>
 800957a:	2000      	movs	r0, #0
 800957c:	4601      	mov	r1, r0
 800957e:	e7b3      	b.n	80094e8 <floor+0x40>
 8009580:	8800759c 	.word	0x8800759c
 8009584:	7e37e43c 	.word	0x7e37e43c
 8009588:	bff00000 	.word	0xbff00000
 800958c:	000fffff 	.word	0x000fffff

08009590 <scalbn>:
 8009590:	ee10 1a90 	vmov	r1, s1
 8009594:	b510      	push	{r4, lr}
 8009596:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800959a:	b98c      	cbnz	r4, 80095c0 <scalbn+0x30>
 800959c:	ee10 3a10 	vmov	r3, s0
 80095a0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80095a4:	430b      	orrs	r3, r1
 80095a6:	d011      	beq.n	80095cc <scalbn+0x3c>
 80095a8:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8009670 <scalbn+0xe0>
 80095ac:	4b3c      	ldr	r3, [pc, #240]	; (80096a0 <scalbn+0x110>)
 80095ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 80095b2:	4298      	cmp	r0, r3
 80095b4:	da0b      	bge.n	80095ce <scalbn+0x3e>
 80095b6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009678 <scalbn+0xe8>
 80095ba:	ee20 0b07 	vmul.f64	d0, d0, d7
 80095be:	e005      	b.n	80095cc <scalbn+0x3c>
 80095c0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80095c4:	429c      	cmp	r4, r3
 80095c6:	d107      	bne.n	80095d8 <scalbn+0x48>
 80095c8:	ee30 0b00 	vadd.f64	d0, d0, d0
 80095cc:	bd10      	pop	{r4, pc}
 80095ce:	ee10 1a90 	vmov	r1, s1
 80095d2:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80095d6:	3c36      	subs	r4, #54	; 0x36
 80095d8:	4404      	add	r4, r0
 80095da:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80095de:	429c      	cmp	r4, r3
 80095e0:	dd0d      	ble.n	80095fe <scalbn+0x6e>
 80095e2:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8009680 <scalbn+0xf0>
 80095e6:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8009688 <scalbn+0xf8>
 80095ea:	eeb0 6b47 	vmov.f64	d6, d7
 80095ee:	ee10 3a90 	vmov	r3, s1
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	fe27 7b05 	vselge.f64	d7, d7, d5
 80095f8:	ee27 0b06 	vmul.f64	d0, d7, d6
 80095fc:	e7e6      	b.n	80095cc <scalbn+0x3c>
 80095fe:	2c00      	cmp	r4, #0
 8009600:	dd0a      	ble.n	8009618 <scalbn+0x88>
 8009602:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8009606:	ec53 2b10 	vmov	r2, r3, d0
 800960a:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 800960e:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8009612:	ec43 2b10 	vmov	d0, r2, r3
 8009616:	e7d9      	b.n	80095cc <scalbn+0x3c>
 8009618:	f114 0f35 	cmn.w	r4, #53	; 0x35
 800961c:	da19      	bge.n	8009652 <scalbn+0xc2>
 800961e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8009622:	4298      	cmp	r0, r3
 8009624:	ee10 3a90 	vmov	r3, s1
 8009628:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800962c:	dd09      	ble.n	8009642 <scalbn+0xb2>
 800962e:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8009680 <scalbn+0xf0>
 8009632:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8009688 <scalbn+0xf8>
 8009636:	eeb0 7b40 	vmov.f64	d7, d0
 800963a:	2b00      	cmp	r3, #0
 800963c:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8009640:	e7bb      	b.n	80095ba <scalbn+0x2a>
 8009642:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8009678 <scalbn+0xe8>
 8009646:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8009690 <scalbn+0x100>
 800964a:	eeb0 7b40 	vmov.f64	d7, d0
 800964e:	2b00      	cmp	r3, #0
 8009650:	e7f4      	b.n	800963c <scalbn+0xac>
 8009652:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8009656:	ec53 2b10 	vmov	r2, r3, d0
 800965a:	3436      	adds	r4, #54	; 0x36
 800965c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8009660:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8009664:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009698 <scalbn+0x108>
 8009668:	ec43 2b10 	vmov	d0, r2, r3
 800966c:	e7a5      	b.n	80095ba <scalbn+0x2a>
 800966e:	bf00      	nop
 8009670:	00000000 	.word	0x00000000
 8009674:	43500000 	.word	0x43500000
 8009678:	c2f8f359 	.word	0xc2f8f359
 800967c:	01a56e1f 	.word	0x01a56e1f
 8009680:	8800759c 	.word	0x8800759c
 8009684:	7e37e43c 	.word	0x7e37e43c
 8009688:	8800759c 	.word	0x8800759c
 800968c:	fe37e43c 	.word	0xfe37e43c
 8009690:	c2f8f359 	.word	0xc2f8f359
 8009694:	81a56e1f 	.word	0x81a56e1f
 8009698:	00000000 	.word	0x00000000
 800969c:	3c900000 	.word	0x3c900000
 80096a0:	ffff3cb0 	.word	0xffff3cb0

080096a4 <_init>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	bf00      	nop
 80096a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	469e      	mov	lr, r3
 80096ae:	4770      	bx	lr

080096b0 <_fini>:
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	bf00      	nop
 80096b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b6:	bc08      	pop	{r3}
 80096b8:	469e      	mov	lr, r3
 80096ba:	4770      	bx	lr
