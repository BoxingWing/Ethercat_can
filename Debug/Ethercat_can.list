
Ethercat_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096d4  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  08009970  08009970  00019970  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009be0  08009be0  00019be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009be8  08009be8  00019be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009bec  08009bec  00019bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000080  24000000  08009bf0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006ec  24000080  08009c70  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  2400076c  08009c70  0002076c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001cfd2  00000000  00000000  000200ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a9a  00000000  00000000  0003d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015d8  00000000  00000000  0003fb20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014d8  00000000  00000000  000410f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039049  00000000  00000000  000425d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a659  00000000  00000000  0007b619  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171323  00000000  00000000  00095c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  00206f95  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000621c  00000000  00000000  00206fe8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000080 	.word	0x24000080
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009954 	.word	0x08009954

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000084 	.word	0x24000084
 80002d4:	08009954 	.word	0x08009954

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_frsub>:
 8000650:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000654:	e002      	b.n	800065c <__addsf3>
 8000656:	bf00      	nop

08000658 <__aeabi_fsub>:
 8000658:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800065c <__addsf3>:
 800065c:	0042      	lsls	r2, r0, #1
 800065e:	bf1f      	itttt	ne
 8000660:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000664:	ea92 0f03 	teqne	r2, r3
 8000668:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800066c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000670:	d06a      	beq.n	8000748 <__addsf3+0xec>
 8000672:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000676:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800067a:	bfc1      	itttt	gt
 800067c:	18d2      	addgt	r2, r2, r3
 800067e:	4041      	eorgt	r1, r0
 8000680:	4048      	eorgt	r0, r1
 8000682:	4041      	eorgt	r1, r0
 8000684:	bfb8      	it	lt
 8000686:	425b      	neglt	r3, r3
 8000688:	2b19      	cmp	r3, #25
 800068a:	bf88      	it	hi
 800068c:	4770      	bxhi	lr
 800068e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000692:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000696:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800069a:	bf18      	it	ne
 800069c:	4240      	negne	r0, r0
 800069e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4249      	negne	r1, r1
 80006ae:	ea92 0f03 	teq	r2, r3
 80006b2:	d03f      	beq.n	8000734 <__addsf3+0xd8>
 80006b4:	f1a2 0201 	sub.w	r2, r2, #1
 80006b8:	fa41 fc03 	asr.w	ip, r1, r3
 80006bc:	eb10 000c 	adds.w	r0, r0, ip
 80006c0:	f1c3 0320 	rsb	r3, r3, #32
 80006c4:	fa01 f103 	lsl.w	r1, r1, r3
 80006c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	d502      	bpl.n	80006d4 <__addsf3+0x78>
 80006ce:	4249      	negs	r1, r1
 80006d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006d8:	d313      	bcc.n	8000702 <__addsf3+0xa6>
 80006da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006de:	d306      	bcc.n	80006ee <__addsf3+0x92>
 80006e0:	0840      	lsrs	r0, r0, #1
 80006e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006e6:	f102 0201 	add.w	r2, r2, #1
 80006ea:	2afe      	cmp	r2, #254	; 0xfe
 80006ec:	d251      	bcs.n	8000792 <__addsf3+0x136>
 80006ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006f6:	bf08      	it	eq
 80006f8:	f020 0001 	biceq.w	r0, r0, #1
 80006fc:	ea40 0003 	orr.w	r0, r0, r3
 8000700:	4770      	bx	lr
 8000702:	0049      	lsls	r1, r1, #1
 8000704:	eb40 0000 	adc.w	r0, r0, r0
 8000708:	3a01      	subs	r2, #1
 800070a:	bf28      	it	cs
 800070c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000710:	d2ed      	bcs.n	80006ee <__addsf3+0x92>
 8000712:	fab0 fc80 	clz	ip, r0
 8000716:	f1ac 0c08 	sub.w	ip, ip, #8
 800071a:	ebb2 020c 	subs.w	r2, r2, ip
 800071e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000722:	bfaa      	itet	ge
 8000724:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000728:	4252      	neglt	r2, r2
 800072a:	4318      	orrge	r0, r3
 800072c:	bfbc      	itt	lt
 800072e:	40d0      	lsrlt	r0, r2
 8000730:	4318      	orrlt	r0, r3
 8000732:	4770      	bx	lr
 8000734:	f092 0f00 	teq	r2, #0
 8000738:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800073c:	bf06      	itte	eq
 800073e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000742:	3201      	addeq	r2, #1
 8000744:	3b01      	subne	r3, #1
 8000746:	e7b5      	b.n	80006b4 <__addsf3+0x58>
 8000748:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800074c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000750:	bf18      	it	ne
 8000752:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000756:	d021      	beq.n	800079c <__addsf3+0x140>
 8000758:	ea92 0f03 	teq	r2, r3
 800075c:	d004      	beq.n	8000768 <__addsf3+0x10c>
 800075e:	f092 0f00 	teq	r2, #0
 8000762:	bf08      	it	eq
 8000764:	4608      	moveq	r0, r1
 8000766:	4770      	bx	lr
 8000768:	ea90 0f01 	teq	r0, r1
 800076c:	bf1c      	itt	ne
 800076e:	2000      	movne	r0, #0
 8000770:	4770      	bxne	lr
 8000772:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000776:	d104      	bne.n	8000782 <__addsf3+0x126>
 8000778:	0040      	lsls	r0, r0, #1
 800077a:	bf28      	it	cs
 800077c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000780:	4770      	bx	lr
 8000782:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000786:	bf3c      	itt	cc
 8000788:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800078c:	4770      	bxcc	lr
 800078e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000792:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000796:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800079a:	4770      	bx	lr
 800079c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007a0:	bf16      	itet	ne
 80007a2:	4608      	movne	r0, r1
 80007a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007a8:	4601      	movne	r1, r0
 80007aa:	0242      	lsls	r2, r0, #9
 80007ac:	bf06      	itte	eq
 80007ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007b2:	ea90 0f01 	teqeq	r0, r1
 80007b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ba:	4770      	bx	lr

080007bc <__aeabi_ui2f>:
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	e004      	b.n	80007cc <__aeabi_i2f+0x8>
 80007c2:	bf00      	nop

080007c4 <__aeabi_i2f>:
 80007c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	ea5f 0c00 	movs.w	ip, r0
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007d8:	4601      	mov	r1, r0
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	e01c      	b.n	800081a <__aeabi_l2f+0x2a>

080007e0 <__aeabi_ul2f>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	e00a      	b.n	8000804 <__aeabi_l2f+0x14>
 80007ee:	bf00      	nop

080007f0 <__aeabi_l2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007fc:	d502      	bpl.n	8000804 <__aeabi_l2f+0x14>
 80007fe:	4240      	negs	r0, r0
 8000800:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000804:	ea5f 0c01 	movs.w	ip, r1
 8000808:	bf02      	ittt	eq
 800080a:	4684      	moveq	ip, r0
 800080c:	4601      	moveq	r1, r0
 800080e:	2000      	moveq	r0, #0
 8000810:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000814:	bf08      	it	eq
 8000816:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800081a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800081e:	fabc f28c 	clz	r2, ip
 8000822:	3a08      	subs	r2, #8
 8000824:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000828:	db10      	blt.n	800084c <__aeabi_l2f+0x5c>
 800082a:	fa01 fc02 	lsl.w	ip, r1, r2
 800082e:	4463      	add	r3, ip
 8000830:	fa00 fc02 	lsl.w	ip, r0, r2
 8000834:	f1c2 0220 	rsb	r2, r2, #32
 8000838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800083c:	fa20 f202 	lsr.w	r2, r0, r2
 8000840:	eb43 0002 	adc.w	r0, r3, r2
 8000844:	bf08      	it	eq
 8000846:	f020 0001 	biceq.w	r0, r0, #1
 800084a:	4770      	bx	lr
 800084c:	f102 0220 	add.w	r2, r2, #32
 8000850:	fa01 fc02 	lsl.w	ip, r1, r2
 8000854:	f1c2 0220 	rsb	r2, r2, #32
 8000858:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800085c:	fa21 f202 	lsr.w	r2, r1, r2
 8000860:	eb43 0002 	adc.w	r0, r3, r2
 8000864:	bf08      	it	eq
 8000866:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800086a:	4770      	bx	lr

0800086c <__aeabi_uldivmod>:
 800086c:	b953      	cbnz	r3, 8000884 <__aeabi_uldivmod+0x18>
 800086e:	b94a      	cbnz	r2, 8000884 <__aeabi_uldivmod+0x18>
 8000870:	2900      	cmp	r1, #0
 8000872:	bf08      	it	eq
 8000874:	2800      	cmpeq	r0, #0
 8000876:	bf1c      	itt	ne
 8000878:	f04f 31ff 	movne.w	r1, #4294967295
 800087c:	f04f 30ff 	movne.w	r0, #4294967295
 8000880:	f000 b974 	b.w	8000b6c <__aeabi_idiv0>
 8000884:	f1ad 0c08 	sub.w	ip, sp, #8
 8000888:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800088c:	f000 f806 	bl	800089c <__udivmoddi4>
 8000890:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <__udivmoddi4>:
 800089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a0:	9d08      	ldr	r5, [sp, #32]
 80008a2:	4604      	mov	r4, r0
 80008a4:	468e      	mov	lr, r1
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d14d      	bne.n	8000946 <__udivmoddi4+0xaa>
 80008aa:	428a      	cmp	r2, r1
 80008ac:	4694      	mov	ip, r2
 80008ae:	d969      	bls.n	8000984 <__udivmoddi4+0xe8>
 80008b0:	fab2 f282 	clz	r2, r2
 80008b4:	b152      	cbz	r2, 80008cc <__udivmoddi4+0x30>
 80008b6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ba:	f1c2 0120 	rsb	r1, r2, #32
 80008be:	fa20 f101 	lsr.w	r1, r0, r1
 80008c2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ca:	4094      	lsls	r4, r2
 80008cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d0:	0c21      	lsrs	r1, r4, #16
 80008d2:	fbbe f6f8 	udiv	r6, lr, r8
 80008d6:	fa1f f78c 	uxth.w	r7, ip
 80008da:	fb08 e316 	mls	r3, r8, r6, lr
 80008de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008e2:	fb06 f107 	mul.w	r1, r6, r7
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d90a      	bls.n	8000900 <__udivmoddi4+0x64>
 80008ea:	eb1c 0303 	adds.w	r3, ip, r3
 80008ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80008f2:	f080 811f 	bcs.w	8000b34 <__udivmoddi4+0x298>
 80008f6:	4299      	cmp	r1, r3
 80008f8:	f240 811c 	bls.w	8000b34 <__udivmoddi4+0x298>
 80008fc:	3e02      	subs	r6, #2
 80008fe:	4463      	add	r3, ip
 8000900:	1a5b      	subs	r3, r3, r1
 8000902:	b2a4      	uxth	r4, r4
 8000904:	fbb3 f0f8 	udiv	r0, r3, r8
 8000908:	fb08 3310 	mls	r3, r8, r0, r3
 800090c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000910:	fb00 f707 	mul.w	r7, r0, r7
 8000914:	42a7      	cmp	r7, r4
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x92>
 8000918:	eb1c 0404 	adds.w	r4, ip, r4
 800091c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000920:	f080 810a 	bcs.w	8000b38 <__udivmoddi4+0x29c>
 8000924:	42a7      	cmp	r7, r4
 8000926:	f240 8107 	bls.w	8000b38 <__udivmoddi4+0x29c>
 800092a:	4464      	add	r4, ip
 800092c:	3802      	subs	r0, #2
 800092e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000932:	1be4      	subs	r4, r4, r7
 8000934:	2600      	movs	r6, #0
 8000936:	b11d      	cbz	r5, 8000940 <__udivmoddi4+0xa4>
 8000938:	40d4      	lsrs	r4, r2
 800093a:	2300      	movs	r3, #0
 800093c:	e9c5 4300 	strd	r4, r3, [r5]
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	428b      	cmp	r3, r1
 8000948:	d909      	bls.n	800095e <__udivmoddi4+0xc2>
 800094a:	2d00      	cmp	r5, #0
 800094c:	f000 80ef 	beq.w	8000b2e <__udivmoddi4+0x292>
 8000950:	2600      	movs	r6, #0
 8000952:	e9c5 0100 	strd	r0, r1, [r5]
 8000956:	4630      	mov	r0, r6
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	fab3 f683 	clz	r6, r3
 8000962:	2e00      	cmp	r6, #0
 8000964:	d14a      	bne.n	80009fc <__udivmoddi4+0x160>
 8000966:	428b      	cmp	r3, r1
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xd4>
 800096a:	4282      	cmp	r2, r0
 800096c:	f200 80f9 	bhi.w	8000b62 <__udivmoddi4+0x2c6>
 8000970:	1a84      	subs	r4, r0, r2
 8000972:	eb61 0303 	sbc.w	r3, r1, r3
 8000976:	2001      	movs	r0, #1
 8000978:	469e      	mov	lr, r3
 800097a:	2d00      	cmp	r5, #0
 800097c:	d0e0      	beq.n	8000940 <__udivmoddi4+0xa4>
 800097e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000982:	e7dd      	b.n	8000940 <__udivmoddi4+0xa4>
 8000984:	b902      	cbnz	r2, 8000988 <__udivmoddi4+0xec>
 8000986:	deff      	udf	#255	; 0xff
 8000988:	fab2 f282 	clz	r2, r2
 800098c:	2a00      	cmp	r2, #0
 800098e:	f040 8092 	bne.w	8000ab6 <__udivmoddi4+0x21a>
 8000992:	eba1 010c 	sub.w	r1, r1, ip
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2601      	movs	r6, #1
 80009a0:	0c20      	lsrs	r0, r4, #16
 80009a2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009a6:	fb07 1113 	mls	r1, r7, r3, r1
 80009aa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ae:	fb0e f003 	mul.w	r0, lr, r3
 80009b2:	4288      	cmp	r0, r1
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x12c>
 80009b6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ba:	f103 38ff 	add.w	r8, r3, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x12a>
 80009c0:	4288      	cmp	r0, r1
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2c0>
 80009c6:	4643      	mov	r3, r8
 80009c8:	1a09      	subs	r1, r1, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d0:	fb07 1110 	mls	r1, r7, r0, r1
 80009d4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x156>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x154>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2ca>
 80009f0:	4608      	mov	r0, r1
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009fa:	e79c      	b.n	8000936 <__udivmoddi4+0x9a>
 80009fc:	f1c6 0720 	rsb	r7, r6, #32
 8000a00:	40b3      	lsls	r3, r6
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a12:	431c      	orrs	r4, r3
 8000a14:	40f9      	lsrs	r1, r7
 8000a16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a22:	0c20      	lsrs	r0, r4, #16
 8000a24:	fa1f fe8c 	uxth.w	lr, ip
 8000a28:	fb09 1118 	mls	r1, r9, r8, r1
 8000a2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a30:	fb08 f00e 	mul.w	r0, r8, lr
 8000a34:	4288      	cmp	r0, r1
 8000a36:	fa02 f206 	lsl.w	r2, r2, r6
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b8>
 8000a3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2bc>
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2bc>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4461      	add	r1, ip
 8000a54:	1a09      	subs	r1, r1, r0
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	458e      	cmp	lr, r1
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1e2>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2b4>
 8000a76:	458e      	cmp	lr, r1
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2b4>
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	4461      	add	r1, ip
 8000a7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a82:	fba0 9402 	umull	r9, r4, r0, r2
 8000a86:	eba1 010e 	sub.w	r1, r1, lr
 8000a8a:	42a1      	cmp	r1, r4
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46a6      	mov	lr, r4
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x2a4>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x2a0>
 8000a94:	b15d      	cbz	r5, 8000aae <__udivmoddi4+0x212>
 8000a96:	ebb3 0208 	subs.w	r2, r3, r8
 8000a9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000aa2:	fa22 f306 	lsr.w	r3, r2, r6
 8000aa6:	40f1      	lsrs	r1, r6
 8000aa8:	431f      	orrs	r7, r3
 8000aaa:	e9c5 7100 	strd	r7, r1, [r5]
 8000aae:	2600      	movs	r6, #0
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	40d8      	lsrs	r0, r3
 8000abc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	4301      	orrs	r1, r0
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ad4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ad8:	0c0b      	lsrs	r3, r1, #16
 8000ada:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ade:	fb00 f60e 	mul.w	r6, r0, lr
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x260>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b8>
 8000af4:	429e      	cmp	r6, r3
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b8>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	1b9b      	subs	r3, r3, r6
 8000afe:	b289      	uxth	r1, r1
 8000b00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b04:	fb07 3316 	mls	r3, r7, r6, r3
 8000b08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x28a>
 8000b14:	eb1c 0101 	adds.w	r1, ip, r1
 8000b18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2b0>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2b0>
 8000b22:	3e02      	subs	r6, #2
 8000b24:	4461      	add	r1, ip
 8000b26:	1ac9      	subs	r1, r1, r3
 8000b28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0x104>
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e705      	b.n	8000940 <__udivmoddi4+0xa4>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e3      	b.n	8000900 <__udivmoddi4+0x64>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6f8      	b.n	800092e <__udivmoddi4+0x92>
 8000b3c:	454b      	cmp	r3, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f8>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f8>
 8000b4c:	4646      	mov	r6, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x28a>
 8000b50:	4620      	mov	r0, r4
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1e2>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x260>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b8>
 8000b5c:	3b02      	subs	r3, #2
 8000b5e:	4461      	add	r1, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x12c>
 8000b62:	4630      	mov	r0, r6
 8000b64:	e709      	b.n	800097a <__udivmoddi4+0xde>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x156>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f000 f98c 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b7c:	f002 f870 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8000b80:	4602      	mov	r2, r0
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_Init+0x68>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	f003 030f 	and.w	r3, r3, #15
 8000b8c:	4913      	ldr	r1, [pc, #76]	; (8000bdc <HAL_Init+0x6c>)
 8000b8e:	5ccb      	ldrb	r3, [r1, r3]
 8000b90:	f003 031f 	and.w	r3, r3, #31
 8000b94:	fa22 f303 	lsr.w	r3, r2, r3
 8000b98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_Init+0x68>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_Init+0x6c>)
 8000ba4:	5cd3      	ldrb	r3, [r2, r3]
 8000ba6:	f003 031f 	and.w	r3, r3, #31
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_Init+0x70>)
 8000bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <HAL_Init+0x74>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f000 f814 	bl	8000be8 <HAL_InitTick>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e002      	b.n	8000bd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bca:	f007 fd9d 	bl	8008708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	080099f4 	.word	0x080099f4
 8000be0:	2400007c 	.word	0x2400007c
 8000be4:	24000078 	.word	0x24000078

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_InitTick+0x60>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e021      	b.n	8000c40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_InitTick+0x64>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_InitTick+0x60>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f971 	bl	8000efa <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00e      	b.n	8000c40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d80a      	bhi.n	8000c3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f93b 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_InitTick+0x68>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24000004 	.word	0x24000004
 8000c4c:	24000078 	.word	0x24000078
 8000c50:	24000000 	.word	0x24000000

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	24000004 	.word	0x24000004
 8000c78:	2400009c 	.word	0x2400009c

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	2400009c 	.word	0x2400009c

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffde 	bl	8000c7c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000004 	.word	0x24000004

08000cdc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetREVID+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	0c1b      	lsrs	r3, r3, #16
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	5c001000 	.word	0x5c001000

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <__NVIC_SetPriorityGrouping+0x40>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x40>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00
 8000d38:	05fa0000 	.word	0x05fa0000

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	; (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff8e 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff29 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff40 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff90 	bl	8000de8 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5f 	bl	8000d94 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff33 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffa4 	bl	8000e50 <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f18:	f3bf 8f5f 	dmb	sy
}
 8000f1c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <HAL_MPU_Disable+0x28>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_MPU_Disable+0x28>)
 8000f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f28:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_MPU_Disable+0x2c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	e000ed90 	.word	0xe000ed90

08000f44 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_MPU_Enable+0x38>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_MPU_Enable+0x3c>)
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_MPU_Enable+0x3c>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f62:	f3bf 8f4f 	dsb	sy
}
 8000f66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f68:	f3bf 8f6f 	isb	sy
}
 8000f6c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed90 	.word	0xe000ed90
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	785a      	ldrb	r2, [r3, #1]
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <HAL_MPU_ConfigRegion+0x84>)
 8000f92:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d029      	beq.n	8000ff0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <HAL_MPU_ConfigRegion+0x84>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7b1b      	ldrb	r3, [r3, #12]
 8000fa8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7adb      	ldrb	r3, [r3, #11]
 8000fae:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7a9b      	ldrb	r3, [r3, #10]
 8000fb6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7b5b      	ldrb	r3, [r3, #13]
 8000fbe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fc0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7b9b      	ldrb	r3, [r3, #14]
 8000fc6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7bdb      	ldrb	r3, [r3, #15]
 8000fce:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7a5b      	ldrb	r3, [r3, #9]
 8000fd6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7a1b      	ldrb	r3, [r3, #8]
 8000fde:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fe0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fea:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fec:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000fee:	e005      	b.n	8000ffc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_MPU_ConfigRegion+0x84>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <HAL_MPU_ConfigRegion+0x84>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed90 	.word	0xe000ed90

0800100c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b098      	sub	sp, #96	; 0x60
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001014:	4a84      	ldr	r2, [pc, #528]	; (8001228 <HAL_FDCAN_Init+0x21c>)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	4611      	mov	r1, r2
 800101c:	224c      	movs	r2, #76	; 0x4c
 800101e:	4618      	mov	r0, r3
 8001020:	f007 fe8a 	bl	8008d38 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e1c6      	b.n	80013bc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a7e      	ldr	r2, [pc, #504]	; (800122c <HAL_FDCAN_Init+0x220>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d106      	bne.n	8001046 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f007 fb6e 	bl	800873c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0210 	bic.w	r2, r2, #16
 800106e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001070:	f7ff fe04 	bl	8000c7c <HAL_GetTick>
 8001074:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001076:	e014      	b.n	80010a2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001078:	f7ff fe00 	bl	8000c7c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b0a      	cmp	r3, #10
 8001084:	d90d      	bls.n	80010a2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800108c:	f043 0201 	orr.w	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e18c      	b.n	80013bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d0e3      	beq.n	8001078 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c0:	f7ff fddc 	bl	8000c7c <HAL_GetTick>
 80010c4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010c6:	e014      	b.n	80010f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010c8:	f7ff fdd8 	bl	8000c7c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	d90d      	bls.n	80010f2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010dc:	f043 0201 	orr.w	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e164      	b.n	80013bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0e3      	beq.n	80010c8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	699a      	ldr	r2, [r3, #24]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0202 	orr.w	r2, r2, #2
 800110e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7c1b      	ldrb	r3, [r3, #16]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d108      	bne.n	800112a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001126:	619a      	str	r2, [r3, #24]
 8001128:	e007      	b.n	800113a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	699a      	ldr	r2, [r3, #24]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001138:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7c5b      	ldrb	r3, [r3, #17]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d108      	bne.n	8001154 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699a      	ldr	r2, [r3, #24]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001150:	619a      	str	r2, [r3, #24]
 8001152:	e007      	b.n	8001164 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	699a      	ldr	r2, [r3, #24]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001162:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7c9b      	ldrb	r3, [r3, #18]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d108      	bne.n	800117e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800117a:	619a      	str	r2, [r3, #24]
 800117c:	e007      	b.n	800118e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800118c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80011b2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0210 	bic.w	r2, r2, #16
 80011c2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d108      	bne.n	80011de <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0204 	orr.w	r2, r2, #4
 80011da:	619a      	str	r2, [r3, #24]
 80011dc:	e030      	b.n	8001240 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d02c      	beq.n	8001240 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d020      	beq.n	8001230 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011fc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0210 	orr.w	r2, r2, #16
 800120c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d114      	bne.n	8001240 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0220 	orr.w	r2, r2, #32
 8001224:	619a      	str	r2, [r3, #24]
 8001226:	e00b      	b.n	8001240 <HAL_FDCAN_Init+0x234>
 8001228:	08009970 	.word	0x08009970
 800122c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0220 	orr.w	r2, r2, #32
 800123e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	3b01      	subs	r3, #1
 8001246:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	3b01      	subs	r3, #1
 800124e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001250:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001258:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	3b01      	subs	r3, #1
 8001262:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001268:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800126a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001274:	d115      	bne.n	80012a2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	3b01      	subs	r3, #1
 8001282:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001284:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	3b01      	subs	r3, #1
 800128c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800128e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	3b01      	subs	r3, #1
 8001298:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800129e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80012a0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00a      	beq.n	80012c0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c8:	4413      	add	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d011      	beq.n	80012f2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80012d6:	f023 0107 	bic.w	r1, r3, #7
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	3360      	adds	r3, #96	; 0x60
 80012e2:	443b      	add	r3, r7
 80012e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d011      	beq.n	800131e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001302:	f023 0107 	bic.w	r1, r3, #7
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	3360      	adds	r3, #96	; 0x60
 800130e:	443b      	add	r3, r7
 8001310:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001322:	2b00      	cmp	r3, #0
 8001324:	d012      	beq.n	800134c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800132e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	3360      	adds	r3, #96	; 0x60
 800133a:	443b      	add	r3, r7
 800133c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001340:	011a      	lsls	r2, r3, #4
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001350:	2b00      	cmp	r3, #0
 8001352:	d012      	beq.n	800137a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800135c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	3360      	adds	r3, #96	; 0x60
 8001368:	443b      	add	r3, r7
 800136a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800136e:	021a      	lsls	r2, r3, #8
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_FDCAN_Init+0x3b8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d107      	bne.n	8001394 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f022 0203 	bic.w	r2, r2, #3
 8001392:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa25 	bl	80017fc <FDCAN_CalcultateRamBlockAddresses>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80013b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3760      	adds	r7, #96	; 0x60
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	4000a000 	.word	0x4000a000

080013c8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d111      	bne.n	8001400 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2202      	movs	r2, #2
 80013e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699a      	ldr	r2, [r3, #24]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e008      	b.n	8001412 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001406:	f043 0204 	orr.w	r2, r3, #4
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
  }
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d141      	bne.n	80014ba <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800143e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800144c:	f043 0220 	orr.w	r2, r3, #32
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e038      	b.n	80014cc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d009      	beq.n	800147e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001470:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e026      	b.n	80014cc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001486:	0c1b      	lsrs	r3, r3, #16
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 fb37 	bl	8001b08 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	fa01 f202 	lsl.w	r2, r1, r2
 80014a6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80014aa:	2201      	movs	r2, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e008      	b.n	80014cc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014c0:	f043 0208 	orr.w	r2, r3, #8
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
  }
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014ec:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80014ee:	7efb      	ldrb	r3, [r7, #27]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	f040 814b 	bne.w	800178c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b40      	cmp	r3, #64	; 0x40
 80014fa:	d14d      	bne.n	8001598 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001504:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001512:	f043 0220 	orr.w	r2, r3, #32
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e13e      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800152c:	2b00      	cmp	r3, #0
 800152e:	d109      	bne.n	8001544 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001536:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e12c      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800154c:	0e1b      	lsrs	r3, r3, #24
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b01      	cmp	r3, #1
 8001554:	d10b      	bne.n	800156e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800155e:	0fdb      	lsrs	r3, r3, #31
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001568:	d101      	bne.n	800156e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	4413      	add	r3, r2
 8001580:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	69f9      	ldr	r1, [r7, #28]
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
 8001596:	e069      	b.n	800166c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b41      	cmp	r3, #65	; 0x41
 800159c:	d14d      	bne.n	800163a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015b4:	f043 0220 	orr.w	r2, r3, #32
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0ed      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0db      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015ee:	0e1b      	lsrs	r3, r3, #24
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10b      	bne.n	8001610 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001600:	0fdb      	lsrs	r3, r3, #31
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800160a:	d101      	bne.n	8001610 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800160c:	2301      	movs	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	69f9      	ldr	r1, [r7, #28]
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	e018      	b.n	800166c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	429a      	cmp	r2, r3
 8001642:	d309      	bcc.n	8001658 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800164a:	f043 0220 	orr.w	r2, r3, #32
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0a2      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	0c9b      	lsrs	r3, r3, #18
 8001686:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e005      	b.n	800169c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	3304      	adds	r3, #4
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0e1b      	lsrs	r3, r3, #24
 80016ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	0fda      	lsrs	r2, r3, #31
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	3304      	adds	r3, #4
 8001704:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
 800170e:	e00a      	b.n	8001726 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	441a      	add	r2, r3
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	440b      	add	r3, r1
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	3301      	adds	r3, #1
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	0c1b      	lsrs	r3, r3, #16
 800172c:	4a1f      	ldr	r2, [pc, #124]	; (80017ac <HAL_FDCAN_GetRxMessage+0x2d8>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	461a      	mov	r2, r3
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	4293      	cmp	r3, r2
 8001736:	d3eb      	bcc.n	8001710 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b40      	cmp	r3, #64	; 0x40
 800173c:	d105      	bne.n	800174a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001748:	e01e      	b.n	8001788 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b41      	cmp	r3, #65	; 0x41
 800174e:	d105      	bne.n	800175c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800175a:	e015      	b.n	8001788 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b1f      	cmp	r3, #31
 8001760:	d808      	bhi.n	8001774 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2101      	movs	r1, #1
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001772:	e009      	b.n	8001788 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f003 021f 	and.w	r2, r3, #31
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f202 	lsl.w	r2, r1, r2
 8001784:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	e008      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001792:	f043 0208 	orr.w	r2, r3, #8
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
  }
}
 800179e:	4618      	mov	r0, r3
 80017a0:	372c      	adds	r7, #44	; 0x2c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	080099bc 	.word	0x080099bc

080017b0 <HAL_FDCAN_GetErrorCounters>:
  *         the configuration information for the specified FDCAN.
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(FDCAN_HandleTypeDef *hfdcan, FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	0bdb      	lsrs	r3, r3, #15
 80017da:	f003 0201 	and.w	r2, r3, #1
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001808:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001812:	4ba7      	ldr	r3, [pc, #668]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001814:	4013      	ands	r3, r2
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	0091      	lsls	r1, r2, #2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	430b      	orrs	r3, r1
 8001820:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800182c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4413      	add	r3, r2
 8001848:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001852:	4b97      	ldr	r3, [pc, #604]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001854:	4013      	ands	r3, r2
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	0091      	lsls	r1, r2, #2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	430b      	orrs	r3, r1
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	4413      	add	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001894:	4b86      	ldr	r3, [pc, #536]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001896:	4013      	ands	r3, r2
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	0091      	lsls	r1, r2, #2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80018ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	041a      	lsls	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	4413      	add	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018dc:	4b74      	ldr	r3, [pc, #464]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80018de:	4013      	ands	r3, r2
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	0091      	lsls	r1, r2, #2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80018f6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fe:	041a      	lsls	r2, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	4413      	add	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001924:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001926:	4013      	ands	r3, r2
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	0091      	lsls	r1, r2, #2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	430b      	orrs	r3, r1
 8001932:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4413      	add	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001950:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001952:	4013      	ands	r3, r2
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	0091      	lsls	r1, r2, #2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	430b      	orrs	r3, r1
 800195e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800196a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	041a      	lsls	r2, r3, #16
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	4413      	add	r3, r2
 8001988:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001994:	4013      	ands	r3, r2
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	0091      	lsls	r1, r2, #2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	430b      	orrs	r3, r1
 80019a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019ac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b4:	041a      	lsls	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019c8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d0:	061a      	lsls	r2, r3, #24
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80019e2:	4413      	add	r3, r2
 80019e4:	009a      	lsls	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	441a      	add	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	441a      	add	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	441a      	add	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	441a      	add	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	441a      	add	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	441a      	add	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	441a      	add	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d915      	bls.n	8001ad8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001aac:	e006      	b.n	8001abc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001aae:	bf00      	nop
 8001ab0:	ffff0003 	.word	0xffff0003
 8001ab4:	10002b00 	.word	0x10002b00
 8001ab8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ac2:	f043 0220 	orr.w	r2, r3, #32
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e010      	b.n	8001afa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e005      	b.n	8001aec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3f3      	bcc.n	8001ae0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001b26:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e00a      	b.n	8001b4a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001b3c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001b42:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b48:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001b54:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001b5a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001b60:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b74:	6839      	ldr	r1, [r7, #0]
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	3304      	adds	r3, #4
 8001b96:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e020      	b.n	8001be0 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3302      	adds	r3, #2
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	440b      	add	r3, r1
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001bb6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	440b      	add	r3, r1
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001bc4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	440a      	add	r2, r1
 8001bcc:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001bce:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <FDCAN_CopyMessageToRAM+0xf8>)
 8001be8:	5cd3      	ldrb	r3, [r2, r3]
 8001bea:	461a      	mov	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d3d5      	bcc.n	8001b9e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	bf00      	nop
 8001bf6:	3724      	adds	r7, #36	; 0x24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	080099bc 	.word	0x080099bc

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_GPIO_Init+0x234>)
 8001c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c16:	e194      	b.n	8001f42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8186 	beq.w	8001f3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d005      	beq.n	8001c48 <HAL_GPIO_Init+0x44>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d130      	bne.n	8001caa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0201 	and.w	r2, r3, #1
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d017      	beq.n	8001ce6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d123      	bne.n	8001d3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	69b9      	ldr	r1, [r7, #24]
 8001d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0203 	and.w	r2, r3, #3
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80e0 	beq.w	8001f3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_GPIO_Init+0x238>)
 8001d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d82:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_GPIO_Init+0x238>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_GPIO_Init+0x238>)
 8001d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9a:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <HAL_GPIO_Init+0x23c>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_GPIO_Init+0x240>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d052      	beq.n	8001e6c <HAL_GPIO_Init+0x268>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_GPIO_Init+0x244>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d031      	beq.n	8001e32 <HAL_GPIO_Init+0x22e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_GPIO_Init+0x248>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d02b      	beq.n	8001e2e <HAL_GPIO_Init+0x22a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_GPIO_Init+0x24c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d025      	beq.n	8001e2a <HAL_GPIO_Init+0x226>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_GPIO_Init+0x250>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01f      	beq.n	8001e26 <HAL_GPIO_Init+0x222>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_GPIO_Init+0x254>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_Init+0x21e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <HAL_GPIO_Init+0x258>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_GPIO_Init+0x25c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_Init+0x216>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_GPIO_Init+0x260>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_Init+0x212>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_GPIO_Init+0x264>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_Init+0x20e>
 8001e0e:	2309      	movs	r3, #9
 8001e10:	e02d      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e12:	230a      	movs	r3, #10
 8001e14:	e02b      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e029      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	e027      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e025      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e023      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e021      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e01f      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e01d      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e01b      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e36:	bf00      	nop
 8001e38:	58000080 	.word	0x58000080
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	58000400 	.word	0x58000400
 8001e44:	58020000 	.word	0x58020000
 8001e48:	58020400 	.word	0x58020400
 8001e4c:	58020800 	.word	0x58020800
 8001e50:	58020c00 	.word	0x58020c00
 8001e54:	58021000 	.word	0x58021000
 8001e58:	58021400 	.word	0x58021400
 8001e5c:	58021800 	.word	0x58021800
 8001e60:	58021c00 	.word	0x58021c00
 8001e64:	58022000 	.word	0x58022000
 8001e68:	58022400 	.word	0x58022400
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	f002 0203 	and.w	r2, r2, #3
 8001e74:	0092      	lsls	r2, r2, #2
 8001e76:	4093      	lsls	r3, r2
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e7e:	4938      	ldr	r1, [pc, #224]	; (8001f60 <HAL_GPIO_Init+0x35c>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f ae63 	bne.w	8001c18 <HAL_GPIO_Init+0x14>
  }
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	3724      	adds	r7, #36	; 0x24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	58000400 	.word	0x58000400

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f80:	e003      	b.n	8001f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001f96:	b480      	push	{r7}
 8001f98:	b085      	sub	sp, #20
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001fa8:	887a      	ldrh	r2, [r7, #2]
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	041a      	lsls	r2, r3, #16
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	43d9      	mvns	r1, r3
 8001fb4:	887b      	ldrh	r3, [r7, #2]
 8001fb6:	400b      	ands	r3, r1
 8001fb8:	431a      	orrs	r2, r3
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	619a      	str	r2, [r3, #24]
}
 8001fbe:	bf00      	nop
 8001fc0:	3714      	adds	r7, #20
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc8:	4770      	bx	lr
	...

08001fcc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_PWREx_ConfigSupply+0x70>)
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b04      	cmp	r3, #4
 8001fde:	d00a      	beq.n	8001ff6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001fe0:	4b16      	ldr	r3, [pc, #88]	; (800203c <HAL_PWREx_ConfigSupply+0x70>)
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	f003 0307 	and.w	r3, r3, #7
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e01f      	b.n	8002032 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	e01d      	b.n	8002032 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001ff6:	4b11      	ldr	r3, [pc, #68]	; (800203c <HAL_PWREx_ConfigSupply+0x70>)
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	f023 0207 	bic.w	r2, r3, #7
 8001ffe:	490f      	ldr	r1, [pc, #60]	; (800203c <HAL_PWREx_ConfigSupply+0x70>)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	4313      	orrs	r3, r2
 8002004:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002006:	f7fe fe39 	bl	8000c7c <HAL_GetTick>
 800200a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800200c:	e009      	b.n	8002022 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800200e:	f7fe fe35 	bl	8000c7c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800201c:	d901      	bls.n	8002022 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	e007      	b.n	8002032 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_PWREx_ConfigSupply+0x70>)
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800202a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800202e:	d1ee      	bne.n	800200e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002030:	2300      	movs	r3, #0
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	58024800 	.word	0x58024800

08002040 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	; 0x30
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d102      	bne.n	8002054 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	f000 bc48 	b.w	80028e4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	f000 8088 	beq.w	8002172 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002062:	4b99      	ldr	r3, [pc, #612]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800206a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800206c:	4b96      	ldr	r3, [pc, #600]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 800206e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002070:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002074:	2b10      	cmp	r3, #16
 8002076:	d007      	beq.n	8002088 <HAL_RCC_OscConfig+0x48>
 8002078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800207a:	2b18      	cmp	r3, #24
 800207c:	d111      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62>
 800207e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002080:	f003 0303 	and.w	r3, r3, #3
 8002084:	2b02      	cmp	r3, #2
 8002086:	d10c      	bne.n	80020a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002088:	4b8f      	ldr	r3, [pc, #572]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d06d      	beq.n	8002170 <HAL_RCC_OscConfig+0x130>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d169      	bne.n	8002170 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	f000 bc21 	b.w	80028e4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x7a>
 80020ac:	4b86      	ldr	r3, [pc, #536]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a85      	ldr	r2, [pc, #532]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80020b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b6:	6013      	str	r3, [r2, #0]
 80020b8:	e02e      	b.n	8002118 <HAL_RCC_OscConfig+0xd8>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x9c>
 80020c2:	4b81      	ldr	r3, [pc, #516]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a80      	ldr	r2, [pc, #512]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80020c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020cc:	6013      	str	r3, [r2, #0]
 80020ce:	4b7e      	ldr	r3, [pc, #504]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a7d      	ldr	r2, [pc, #500]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80020d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020d8:	6013      	str	r3, [r2, #0]
 80020da:	e01d      	b.n	8002118 <HAL_RCC_OscConfig+0xd8>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020e4:	d10c      	bne.n	8002100 <HAL_RCC_OscConfig+0xc0>
 80020e6:	4b78      	ldr	r3, [pc, #480]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a77      	ldr	r2, [pc, #476]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80020ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	4b75      	ldr	r3, [pc, #468]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a74      	ldr	r2, [pc, #464]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80020f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	e00b      	b.n	8002118 <HAL_RCC_OscConfig+0xd8>
 8002100:	4b71      	ldr	r3, [pc, #452]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a70      	ldr	r2, [pc, #448]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002106:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	4b6e      	ldr	r3, [pc, #440]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a6d      	ldr	r2, [pc, #436]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002112:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002116:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d013      	beq.n	8002148 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002120:	f7fe fdac 	bl	8000c7c <HAL_GetTick>
 8002124:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002128:	f7fe fda8 	bl	8000c7c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e3d4      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800213a:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d0f0      	beq.n	8002128 <HAL_RCC_OscConfig+0xe8>
 8002146:	e014      	b.n	8002172 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002148:	f7fe fd98 	bl	8000c7c <HAL_GetTick>
 800214c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002150:	f7fe fd94 	bl	8000c7c <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b64      	cmp	r3, #100	; 0x64
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e3c0      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002162:	4b59      	ldr	r3, [pc, #356]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800216a:	2b00      	cmp	r3, #0
 800216c:	d1f0      	bne.n	8002150 <HAL_RCC_OscConfig+0x110>
 800216e:	e000      	b.n	8002172 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002170:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0302 	and.w	r3, r3, #2
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80ca 	beq.w	8002314 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002180:	4b51      	ldr	r3, [pc, #324]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002182:	691b      	ldr	r3, [r3, #16]
 8002184:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002188:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800218a:	4b4f      	ldr	r3, [pc, #316]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 800218c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800218e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002190:	6a3b      	ldr	r3, [r7, #32]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d007      	beq.n	80021a6 <HAL_RCC_OscConfig+0x166>
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	2b18      	cmp	r3, #24
 800219a:	d156      	bne.n	800224a <HAL_RCC_OscConfig+0x20a>
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0303 	and.w	r3, r3, #3
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d151      	bne.n	800224a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021a6:	4b48      	ldr	r3, [pc, #288]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0304 	and.w	r3, r3, #4
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d005      	beq.n	80021be <HAL_RCC_OscConfig+0x17e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	68db      	ldr	r3, [r3, #12]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e392      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80021be:	4b42      	ldr	r3, [pc, #264]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 0219 	bic.w	r2, r3, #25
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	493f      	ldr	r1, [pc, #252]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7fe fd54 	bl	8000c7c <HAL_GetTick>
 80021d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021d8:	f7fe fd50 	bl	8000c7c <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e37c      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021ea:	4b37      	ldr	r3, [pc, #220]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d0f0      	beq.n	80021d8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f6:	f7fe fd71 	bl	8000cdc <HAL_GetREVID>
 80021fa:	4603      	mov	r3, r0
 80021fc:	f241 0203 	movw	r2, #4099	; 0x1003
 8002200:	4293      	cmp	r3, r2
 8002202:	d817      	bhi.n	8002234 <HAL_RCC_OscConfig+0x1f4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	2b40      	cmp	r3, #64	; 0x40
 800220a:	d108      	bne.n	800221e <HAL_RCC_OscConfig+0x1de>
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002214:	4a2c      	ldr	r2, [pc, #176]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002216:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800221a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800221c:	e07a      	b.n	8002314 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	031b      	lsls	r3, r3, #12
 800222c:	4926      	ldr	r1, [pc, #152]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 800222e:	4313      	orrs	r3, r2
 8002230:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002232:	e06f      	b.n	8002314 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002234:	4b24      	ldr	r3, [pc, #144]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	061b      	lsls	r3, r3, #24
 8002242:	4921      	ldr	r1, [pc, #132]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002248:	e064      	b.n	8002314 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d047      	beq.n	80022e2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002252:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0219 	bic.w	r2, r3, #25
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	491a      	ldr	r1, [pc, #104]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002260:	4313      	orrs	r3, r2
 8002262:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fd0a 	bl	8000c7c <HAL_GetTick>
 8002268:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226c:	f7fe fd06 	bl	8000c7c <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e332      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800227e:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0304 	and.w	r3, r3, #4
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	f7fe fd27 	bl	8000cdc <HAL_GetREVID>
 800228e:	4603      	mov	r3, r0
 8002290:	f241 0203 	movw	r2, #4099	; 0x1003
 8002294:	4293      	cmp	r3, r2
 8002296:	d819      	bhi.n	80022cc <HAL_RCC_OscConfig+0x28c>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	2b40      	cmp	r3, #64	; 0x40
 800229e:	d108      	bne.n	80022b2 <HAL_RCC_OscConfig+0x272>
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80022aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022ae:	6053      	str	r3, [r2, #4]
 80022b0:	e030      	b.n	8002314 <HAL_RCC_OscConfig+0x2d4>
 80022b2:	4b05      	ldr	r3, [pc, #20]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	691b      	ldr	r3, [r3, #16]
 80022be:	031b      	lsls	r3, r3, #12
 80022c0:	4901      	ldr	r1, [pc, #4]	; (80022c8 <HAL_RCC_OscConfig+0x288>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	604b      	str	r3, [r1, #4]
 80022c6:	e025      	b.n	8002314 <HAL_RCC_OscConfig+0x2d4>
 80022c8:	58024400 	.word	0x58024400
 80022cc:	4b9a      	ldr	r3, [pc, #616]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	691b      	ldr	r3, [r3, #16]
 80022d8:	061b      	lsls	r3, r3, #24
 80022da:	4997      	ldr	r1, [pc, #604]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	604b      	str	r3, [r1, #4]
 80022e0:	e018      	b.n	8002314 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022e2:	4b95      	ldr	r3, [pc, #596]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a94      	ldr	r2, [pc, #592]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80022e8:	f023 0301 	bic.w	r3, r3, #1
 80022ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ee:	f7fe fcc5 	bl	8000c7c <HAL_GetTick>
 80022f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022f6:	f7fe fcc1 	bl	8000c7c <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e2ed      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002308:	4b8b      	ldr	r3, [pc, #556]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1f0      	bne.n	80022f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80a9 	beq.w	8002474 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002322:	4b85      	ldr	r3, [pc, #532]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800232a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800232c:	4b82      	ldr	r3, [pc, #520]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800232e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002330:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002332:	69bb      	ldr	r3, [r7, #24]
 8002334:	2b08      	cmp	r3, #8
 8002336:	d007      	beq.n	8002348 <HAL_RCC_OscConfig+0x308>
 8002338:	69bb      	ldr	r3, [r7, #24]
 800233a:	2b18      	cmp	r3, #24
 800233c:	d13a      	bne.n	80023b4 <HAL_RCC_OscConfig+0x374>
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b01      	cmp	r3, #1
 8002346:	d135      	bne.n	80023b4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002348:	4b7b      	ldr	r3, [pc, #492]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002350:	2b00      	cmp	r3, #0
 8002352:	d005      	beq.n	8002360 <HAL_RCC_OscConfig+0x320>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	2b80      	cmp	r3, #128	; 0x80
 800235a:	d001      	beq.n	8002360 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800235c:	2301      	movs	r3, #1
 800235e:	e2c1      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002360:	f7fe fcbc 	bl	8000cdc <HAL_GetREVID>
 8002364:	4603      	mov	r3, r0
 8002366:	f241 0203 	movw	r2, #4099	; 0x1003
 800236a:	4293      	cmp	r3, r2
 800236c:	d817      	bhi.n	800239e <HAL_RCC_OscConfig+0x35e>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	2b20      	cmp	r3, #32
 8002374:	d108      	bne.n	8002388 <HAL_RCC_OscConfig+0x348>
 8002376:	4b70      	ldr	r3, [pc, #448]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800237e:	4a6e      	ldr	r2, [pc, #440]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002384:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002386:	e075      	b.n	8002474 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002388:	4b6b      	ldr	r3, [pc, #428]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6a1b      	ldr	r3, [r3, #32]
 8002394:	069b      	lsls	r3, r3, #26
 8002396:	4968      	ldr	r1, [pc, #416]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002398:	4313      	orrs	r3, r2
 800239a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800239c:	e06a      	b.n	8002474 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800239e:	4b66      	ldr	r3, [pc, #408]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	061b      	lsls	r3, r3, #24
 80023ac:	4962      	ldr	r1, [pc, #392]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80023b2:	e05f      	b.n	8002474 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69db      	ldr	r3, [r3, #28]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d042      	beq.n	8002442 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80023bc:	4b5e      	ldr	r3, [pc, #376]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a5d      	ldr	r2, [pc, #372]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80023c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c8:	f7fe fc58 	bl	8000c7c <HAL_GetTick>
 80023cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80023d0:	f7fe fc54 	bl	8000c7c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e280      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023e2:	4b55      	ldr	r3, [pc, #340]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d0f0      	beq.n	80023d0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023ee:	f7fe fc75 	bl	8000cdc <HAL_GetREVID>
 80023f2:	4603      	mov	r3, r0
 80023f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d817      	bhi.n	800242c <HAL_RCC_OscConfig+0x3ec>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	2b20      	cmp	r3, #32
 8002402:	d108      	bne.n	8002416 <HAL_RCC_OscConfig+0x3d6>
 8002404:	4b4c      	ldr	r3, [pc, #304]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800240c:	4a4a      	ldr	r2, [pc, #296]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800240e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002412:	6053      	str	r3, [r2, #4]
 8002414:	e02e      	b.n	8002474 <HAL_RCC_OscConfig+0x434>
 8002416:	4b48      	ldr	r3, [pc, #288]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6a1b      	ldr	r3, [r3, #32]
 8002422:	069b      	lsls	r3, r3, #26
 8002424:	4944      	ldr	r1, [pc, #272]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002426:	4313      	orrs	r3, r2
 8002428:	604b      	str	r3, [r1, #4]
 800242a:	e023      	b.n	8002474 <HAL_RCC_OscConfig+0x434>
 800242c:	4b42      	ldr	r3, [pc, #264]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	061b      	lsls	r3, r3, #24
 800243a:	493f      	ldr	r1, [pc, #252]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800243c:	4313      	orrs	r3, r2
 800243e:	60cb      	str	r3, [r1, #12]
 8002440:	e018      	b.n	8002474 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002442:	4b3d      	ldr	r3, [pc, #244]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a3c      	ldr	r2, [pc, #240]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002448:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800244c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800244e:	f7fe fc15 	bl	8000c7c <HAL_GetTick>
 8002452:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002456:	f7fe fc11 	bl	8000c7c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b02      	cmp	r3, #2
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e23d      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002468:	4b33      	ldr	r3, [pc, #204]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d1f0      	bne.n	8002456 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d036      	beq.n	80024ee <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	695b      	ldr	r3, [r3, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d019      	beq.n	80024bc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002488:	4b2b      	ldr	r3, [pc, #172]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800248a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248c:	4a2a      	ldr	r2, [pc, #168]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800248e:	f043 0301 	orr.w	r3, r3, #1
 8002492:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7fe fbf2 	bl	8000c7c <HAL_GetTick>
 8002498:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe fbee 	bl	8000c7c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e21a      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80024ae:	4b22      	ldr	r3, [pc, #136]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80024b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x45c>
 80024ba:	e018      	b.n	80024ee <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024bc:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80024be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c0:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe fbd8 	bl	8000c7c <HAL_GetTick>
 80024cc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d0:	f7fe fbd4 	bl	8000c7c <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e200      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024e2:	4b15      	ldr	r3, [pc, #84]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 80024e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1f0      	bne.n	80024d0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0320 	and.w	r3, r3, #32
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d039      	beq.n	800256e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d01c      	beq.n	800253c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002502:	4b0d      	ldr	r3, [pc, #52]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a0c      	ldr	r2, [pc, #48]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 8002508:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800250c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800250e:	f7fe fbb5 	bl	8000c7c <HAL_GetTick>
 8002512:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002516:	f7fe fbb1 	bl	8000c7c <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e1dd      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002528:	4b03      	ldr	r3, [pc, #12]	; (8002538 <HAL_RCC_OscConfig+0x4f8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d0f0      	beq.n	8002516 <HAL_RCC_OscConfig+0x4d6>
 8002534:	e01b      	b.n	800256e <HAL_RCC_OscConfig+0x52e>
 8002536:	bf00      	nop
 8002538:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800253c:	4b9b      	ldr	r3, [pc, #620]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a9a      	ldr	r2, [pc, #616]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002542:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002546:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002548:	f7fe fb98 	bl	8000c7c <HAL_GetTick>
 800254c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800254e:	e008      	b.n	8002562 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002550:	f7fe fb94 	bl	8000c7c <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d901      	bls.n	8002562 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	e1c0      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002562:	4b92      	ldr	r3, [pc, #584]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800256a:	2b00      	cmp	r3, #0
 800256c:	d1f0      	bne.n	8002550 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	f000 8081 	beq.w	800267e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800257c:	4b8c      	ldr	r3, [pc, #560]	; (80027b0 <HAL_RCC_OscConfig+0x770>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a8b      	ldr	r2, [pc, #556]	; (80027b0 <HAL_RCC_OscConfig+0x770>)
 8002582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002586:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002588:	f7fe fb78 	bl	8000c7c <HAL_GetTick>
 800258c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800258e:	e008      	b.n	80025a2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002590:	f7fe fb74 	bl	8000c7c <HAL_GetTick>
 8002594:	4602      	mov	r2, r0
 8002596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002598:	1ad3      	subs	r3, r2, r3
 800259a:	2b64      	cmp	r3, #100	; 0x64
 800259c:	d901      	bls.n	80025a2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800259e:	2303      	movs	r3, #3
 80025a0:	e1a0      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80025a2:	4b83      	ldr	r3, [pc, #524]	; (80027b0 <HAL_RCC_OscConfig+0x770>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d0f0      	beq.n	8002590 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d106      	bne.n	80025c4 <HAL_RCC_OscConfig+0x584>
 80025b6:	4b7d      	ldr	r3, [pc, #500]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	4a7c      	ldr	r2, [pc, #496]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70
 80025c2:	e02d      	b.n	8002620 <HAL_RCC_OscConfig+0x5e0>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d10c      	bne.n	80025e6 <HAL_RCC_OscConfig+0x5a6>
 80025cc:	4b77      	ldr	r3, [pc, #476]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80025ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d0:	4a76      	ldr	r2, [pc, #472]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80025d2:	f023 0301 	bic.w	r3, r3, #1
 80025d6:	6713      	str	r3, [r2, #112]	; 0x70
 80025d8:	4b74      	ldr	r3, [pc, #464]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80025da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025dc:	4a73      	ldr	r2, [pc, #460]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80025de:	f023 0304 	bic.w	r3, r3, #4
 80025e2:	6713      	str	r3, [r2, #112]	; 0x70
 80025e4:	e01c      	b.n	8002620 <HAL_RCC_OscConfig+0x5e0>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2b05      	cmp	r3, #5
 80025ec:	d10c      	bne.n	8002608 <HAL_RCC_OscConfig+0x5c8>
 80025ee:	4b6f      	ldr	r3, [pc, #444]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80025f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025f2:	4a6e      	ldr	r2, [pc, #440]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80025f4:	f043 0304 	orr.w	r3, r3, #4
 80025f8:	6713      	str	r3, [r2, #112]	; 0x70
 80025fa:	4b6c      	ldr	r3, [pc, #432]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80025fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fe:	4a6b      	ldr	r2, [pc, #428]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002600:	f043 0301 	orr.w	r3, r3, #1
 8002604:	6713      	str	r3, [r2, #112]	; 0x70
 8002606:	e00b      	b.n	8002620 <HAL_RCC_OscConfig+0x5e0>
 8002608:	4b68      	ldr	r3, [pc, #416]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 800260a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800260c:	4a67      	ldr	r2, [pc, #412]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 800260e:	f023 0301 	bic.w	r3, r3, #1
 8002612:	6713      	str	r3, [r2, #112]	; 0x70
 8002614:	4b65      	ldr	r3, [pc, #404]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	4a64      	ldr	r2, [pc, #400]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 800261a:	f023 0304 	bic.w	r3, r3, #4
 800261e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d015      	beq.n	8002654 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002628:	f7fe fb28 	bl	8000c7c <HAL_GetTick>
 800262c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800262e:	e00a      	b.n	8002646 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002630:	f7fe fb24 	bl	8000c7c <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	f241 3288 	movw	r2, #5000	; 0x1388
 800263e:	4293      	cmp	r3, r2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e14e      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002646:	4b59      	ldr	r3, [pc, #356]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0ee      	beq.n	8002630 <HAL_RCC_OscConfig+0x5f0>
 8002652:	e014      	b.n	800267e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7fe fb12 	bl	8000c7c <HAL_GetTick>
 8002658:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800265a:	e00a      	b.n	8002672 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800265c:	f7fe fb0e 	bl	8000c7c <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	f241 3288 	movw	r2, #5000	; 0x1388
 800266a:	4293      	cmp	r3, r2
 800266c:	d901      	bls.n	8002672 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e138      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002672:	4b4e      	ldr	r3, [pc, #312]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d1ee      	bne.n	800265c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 812d 	beq.w	80028e2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002688:	4b48      	ldr	r3, [pc, #288]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002690:	2b18      	cmp	r3, #24
 8002692:	f000 80bd 	beq.w	8002810 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269a:	2b02      	cmp	r3, #2
 800269c:	f040 809e 	bne.w	80027dc <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026a0:	4b42      	ldr	r3, [pc, #264]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a41      	ldr	r2, [pc, #260]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80026a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fae6 	bl	8000c7c <HAL_GetTick>
 80026b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7fe fae2 	bl	8000c7c <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e10e      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80026c6:	4b39      	ldr	r3, [pc, #228]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026d2:	4b36      	ldr	r3, [pc, #216]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80026d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026d6:	4b37      	ldr	r3, [pc, #220]	; (80027b4 <HAL_RCC_OscConfig+0x774>)
 80026d8:	4013      	ands	r3, r2
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026e2:	0112      	lsls	r2, r2, #4
 80026e4:	430a      	orrs	r2, r1
 80026e6:	4931      	ldr	r1, [pc, #196]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 80026e8:	4313      	orrs	r3, r2
 80026ea:	628b      	str	r3, [r1, #40]	; 0x28
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	3b01      	subs	r3, #1
 80026f2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026fa:	3b01      	subs	r3, #1
 80026fc:	025b      	lsls	r3, r3, #9
 80026fe:	b29b      	uxth	r3, r3
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002706:	3b01      	subs	r3, #1
 8002708:	041b      	lsls	r3, r3, #16
 800270a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002714:	3b01      	subs	r3, #1
 8002716:	061b      	lsls	r3, r3, #24
 8002718:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800271c:	4923      	ldr	r1, [pc, #140]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 800271e:	4313      	orrs	r3, r2
 8002720:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002722:	4b22      	ldr	r3, [pc, #136]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	4a21      	ldr	r2, [pc, #132]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002728:	f023 0301 	bic.w	r3, r3, #1
 800272c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800272e:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002730:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002732:	4b21      	ldr	r3, [pc, #132]	; (80027b8 <HAL_RCC_OscConfig+0x778>)
 8002734:	4013      	ands	r3, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800273a:	00d2      	lsls	r2, r2, #3
 800273c:	491b      	ldr	r1, [pc, #108]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 800273e:	4313      	orrs	r3, r2
 8002740:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	f023 020c 	bic.w	r2, r3, #12
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274e:	4917      	ldr	r1, [pc, #92]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002750:	4313      	orrs	r3, r2
 8002752:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002758:	f023 0202 	bic.w	r2, r3, #2
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	4912      	ldr	r1, [pc, #72]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002762:	4313      	orrs	r3, r2
 8002764:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002766:	4b11      	ldr	r3, [pc, #68]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276a:	4a10      	ldr	r2, [pc, #64]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 800276c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002770:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002772:	4b0e      	ldr	r3, [pc, #56]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002776:	4a0d      	ldr	r2, [pc, #52]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800277c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800277e:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002782:	4a0a      	ldr	r2, [pc, #40]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002788:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800278a:	4b08      	ldr	r3, [pc, #32]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 800278c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800278e:	4a07      	ldr	r2, [pc, #28]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002790:	f043 0301 	orr.w	r3, r3, #1
 8002794:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002796:	4b05      	ldr	r3, [pc, #20]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	4a04      	ldr	r2, [pc, #16]	; (80027ac <HAL_RCC_OscConfig+0x76c>)
 800279c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a2:	f7fe fa6b 	bl	8000c7c <HAL_GetTick>
 80027a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027a8:	e011      	b.n	80027ce <HAL_RCC_OscConfig+0x78e>
 80027aa:	bf00      	nop
 80027ac:	58024400 	.word	0x58024400
 80027b0:	58024800 	.word	0x58024800
 80027b4:	fffffc0c 	.word	0xfffffc0c
 80027b8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fa5e 	bl	8000c7c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e08a      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80027ce:	4b47      	ldr	r3, [pc, #284]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d0f0      	beq.n	80027bc <HAL_RCC_OscConfig+0x77c>
 80027da:	e082      	b.n	80028e2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027dc:	4b43      	ldr	r3, [pc, #268]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a42      	ldr	r2, [pc, #264]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 80027e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e8:	f7fe fa48 	bl	8000c7c <HAL_GetTick>
 80027ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe fa44 	bl	8000c7c <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e070      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002802:	4b3a      	ldr	r3, [pc, #232]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f0      	bne.n	80027f0 <HAL_RCC_OscConfig+0x7b0>
 800280e:	e068      	b.n	80028e2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002810:	4b36      	ldr	r3, [pc, #216]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 8002812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002814:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002816:	4b35      	ldr	r3, [pc, #212]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	2b01      	cmp	r3, #1
 8002822:	d031      	beq.n	8002888 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f003 0203 	and.w	r2, r3, #3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800282e:	429a      	cmp	r2, r3
 8002830:	d12a      	bne.n	8002888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d122      	bne.n	8002888 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800284e:	429a      	cmp	r2, r3
 8002850:	d11a      	bne.n	8002888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	0a5b      	lsrs	r3, r3, #9
 8002856:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002860:	429a      	cmp	r2, r3
 8002862:	d111      	bne.n	8002888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	0c1b      	lsrs	r3, r3, #16
 8002868:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002870:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002872:	429a      	cmp	r2, r3
 8002874:	d108      	bne.n	8002888 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	0e1b      	lsrs	r3, r3, #24
 800287a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002884:	429a      	cmp	r2, r3
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e02b      	b.n	80028e4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800288c:	4b17      	ldr	r3, [pc, #92]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 800288e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002890:	08db      	lsrs	r3, r3, #3
 8002892:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002896:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289c:	693a      	ldr	r2, [r7, #16]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d01f      	beq.n	80028e2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80028a2:	4b12      	ldr	r3, [pc, #72]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	4a11      	ldr	r2, [pc, #68]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 80028a8:	f023 0301 	bic.w	r3, r3, #1
 80028ac:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80028ae:	f7fe f9e5 	bl	8000c7c <HAL_GetTick>
 80028b2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80028b4:	bf00      	nop
 80028b6:	f7fe f9e1 	bl	8000c7c <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028be:	4293      	cmp	r3, r2
 80028c0:	d0f9      	beq.n	80028b6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80028c2:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 80028c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028c6:	4b0a      	ldr	r3, [pc, #40]	; (80028f0 <HAL_RCC_OscConfig+0x8b0>)
 80028c8:	4013      	ands	r3, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80028ce:	00d2      	lsls	r2, r2, #3
 80028d0:	4906      	ldr	r1, [pc, #24]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 80028d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028da:	4a04      	ldr	r2, [pc, #16]	; (80028ec <HAL_RCC_OscConfig+0x8ac>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80028e2:	2300      	movs	r3, #0
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3730      	adds	r7, #48	; 0x30
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	58024400 	.word	0x58024400
 80028f0:	ffff0007 	.word	0xffff0007

080028f4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d101      	bne.n	8002908 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e19c      	b.n	8002c42 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002908:	4b8a      	ldr	r3, [pc, #552]	; (8002b34 <HAL_RCC_ClockConfig+0x240>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 030f 	and.w	r3, r3, #15
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	429a      	cmp	r2, r3
 8002914:	d910      	bls.n	8002938 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002916:	4b87      	ldr	r3, [pc, #540]	; (8002b34 <HAL_RCC_ClockConfig+0x240>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f023 020f 	bic.w	r2, r3, #15
 800291e:	4985      	ldr	r1, [pc, #532]	; (8002b34 <HAL_RCC_ClockConfig+0x240>)
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4313      	orrs	r3, r2
 8002924:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002926:	4b83      	ldr	r3, [pc, #524]	; (8002b34 <HAL_RCC_ClockConfig+0x240>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 030f 	and.w	r3, r3, #15
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	429a      	cmp	r2, r3
 8002932:	d001      	beq.n	8002938 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e184      	b.n	8002c42 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0304 	and.w	r3, r3, #4
 8002940:	2b00      	cmp	r3, #0
 8002942:	d010      	beq.n	8002966 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691a      	ldr	r2, [r3, #16]
 8002948:	4b7b      	ldr	r3, [pc, #492]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 800294a:	699b      	ldr	r3, [r3, #24]
 800294c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002950:	429a      	cmp	r2, r3
 8002952:	d908      	bls.n	8002966 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002954:	4b78      	ldr	r3, [pc, #480]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002956:	699b      	ldr	r3, [r3, #24]
 8002958:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	4975      	ldr	r1, [pc, #468]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002962:	4313      	orrs	r3, r2
 8002964:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d010      	beq.n	8002994 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695a      	ldr	r2, [r3, #20]
 8002976:	4b70      	ldr	r3, [pc, #448]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800297e:	429a      	cmp	r2, r3
 8002980:	d908      	bls.n	8002994 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002982:	4b6d      	ldr	r3, [pc, #436]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	496a      	ldr	r1, [pc, #424]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002990:	4313      	orrs	r3, r2
 8002992:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0310 	and.w	r3, r3, #16
 800299c:	2b00      	cmp	r3, #0
 800299e:	d010      	beq.n	80029c2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	699a      	ldr	r2, [r3, #24]
 80029a4:	4b64      	ldr	r3, [pc, #400]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 80029a6:	69db      	ldr	r3, [r3, #28]
 80029a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d908      	bls.n	80029c2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80029b0:	4b61      	ldr	r3, [pc, #388]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	699b      	ldr	r3, [r3, #24]
 80029bc:	495e      	ldr	r1, [pc, #376]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0320 	and.w	r3, r3, #32
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d010      	beq.n	80029f0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	69da      	ldr	r2, [r3, #28]
 80029d2:	4b59      	ldr	r3, [pc, #356]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029da:	429a      	cmp	r2, r3
 80029dc:	d908      	bls.n	80029f0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029de:	4b56      	ldr	r3, [pc, #344]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 80029e0:	6a1b      	ldr	r3, [r3, #32]
 80029e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	4953      	ldr	r1, [pc, #332]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 80029ec:	4313      	orrs	r3, r2
 80029ee:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d010      	beq.n	8002a1e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	4b4d      	ldr	r3, [pc, #308]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002a02:	699b      	ldr	r3, [r3, #24]
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d908      	bls.n	8002a1e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a0c:	4b4a      	ldr	r3, [pc, #296]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002a0e:	699b      	ldr	r3, [r3, #24]
 8002a10:	f023 020f 	bic.w	r2, r3, #15
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	4947      	ldr	r1, [pc, #284]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 0301 	and.w	r3, r3, #1
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d055      	beq.n	8002ad6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002a2a:	4b43      	ldr	r3, [pc, #268]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002a2c:	699b      	ldr	r3, [r3, #24]
 8002a2e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	4940      	ldr	r1, [pc, #256]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	d107      	bne.n	8002a54 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a44:	4b3c      	ldr	r3, [pc, #240]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d121      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a50:	2301      	movs	r3, #1
 8002a52:	e0f6      	b.n	8002c42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d107      	bne.n	8002a6c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a5c:	4b36      	ldr	r3, [pc, #216]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d115      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e0ea      	b.n	8002c42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	2b01      	cmp	r3, #1
 8002a72:	d107      	bne.n	8002a84 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a74:	4b30      	ldr	r3, [pc, #192]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d109      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a80:	2301      	movs	r3, #1
 8002a82:	e0de      	b.n	8002c42 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a84:	4b2c      	ldr	r3, [pc, #176]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0304 	and.w	r3, r3, #4
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e0d6      	b.n	8002c42 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a94:	4b28      	ldr	r3, [pc, #160]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	f023 0207 	bic.w	r2, r3, #7
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	4925      	ldr	r1, [pc, #148]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002aa6:	f7fe f8e9 	bl	8000c7c <HAL_GetTick>
 8002aaa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aac:	e00a      	b.n	8002ac4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aae:	f7fe f8e5 	bl	8000c7c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e0be      	b.n	8002c42 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac4:	4b1c      	ldr	r3, [pc, #112]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002ac6:	691b      	ldr	r3, [r3, #16]
 8002ac8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	00db      	lsls	r3, r3, #3
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d1eb      	bne.n	8002aae <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d010      	beq.n	8002b04 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	4b14      	ldr	r3, [pc, #80]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f003 030f 	and.w	r3, r3, #15
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d208      	bcs.n	8002b04 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f023 020f 	bic.w	r2, r3, #15
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	490e      	ldr	r1, [pc, #56]	; (8002b38 <HAL_RCC_ClockConfig+0x244>)
 8002b00:	4313      	orrs	r3, r2
 8002b02:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <HAL_RCC_ClockConfig+0x240>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f003 030f 	and.w	r3, r3, #15
 8002b0c:	683a      	ldr	r2, [r7, #0]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d214      	bcs.n	8002b3c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b12:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_RCC_ClockConfig+0x240>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f023 020f 	bic.w	r2, r3, #15
 8002b1a:	4906      	ldr	r1, [pc, #24]	; (8002b34 <HAL_RCC_ClockConfig+0x240>)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	4313      	orrs	r3, r2
 8002b20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b22:	4b04      	ldr	r3, [pc, #16]	; (8002b34 <HAL_RCC_ClockConfig+0x240>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 030f 	and.w	r3, r3, #15
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d005      	beq.n	8002b3c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002b30:	2301      	movs	r3, #1
 8002b32:	e086      	b.n	8002c42 <HAL_RCC_ClockConfig+0x34e>
 8002b34:	52002000 	.word	0x52002000
 8002b38:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d010      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	691a      	ldr	r2, [r3, #16]
 8002b4c:	4b3f      	ldr	r3, [pc, #252]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d208      	bcs.n	8002b6a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b58:	4b3c      	ldr	r3, [pc, #240]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002b5a:	699b      	ldr	r3, [r3, #24]
 8002b5c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	4939      	ldr	r1, [pc, #228]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0308 	and.w	r3, r3, #8
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d010      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695a      	ldr	r2, [r3, #20]
 8002b7a:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b82:	429a      	cmp	r2, r3
 8002b84:	d208      	bcs.n	8002b98 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002b88:	69db      	ldr	r3, [r3, #28]
 8002b8a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	492e      	ldr	r1, [pc, #184]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d010      	beq.n	8002bc6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	699a      	ldr	r2, [r3, #24]
 8002ba8:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d208      	bcs.n	8002bc6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002bb4:	4b25      	ldr	r3, [pc, #148]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002bb6:	69db      	ldr	r3, [r3, #28]
 8002bb8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	4922      	ldr	r1, [pc, #136]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0320 	and.w	r3, r3, #32
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d010      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	69da      	ldr	r2, [r3, #28]
 8002bd6:	4b1d      	ldr	r3, [pc, #116]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002bd8:	6a1b      	ldr	r3, [r3, #32]
 8002bda:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d208      	bcs.n	8002bf4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002be2:	4b1a      	ldr	r3, [pc, #104]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002be4:	6a1b      	ldr	r3, [r3, #32]
 8002be6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	69db      	ldr	r3, [r3, #28]
 8002bee:	4917      	ldr	r1, [pc, #92]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bf4:	f000 f834 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b14      	ldr	r3, [pc, #80]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	0a1b      	lsrs	r3, r3, #8
 8002c00:	f003 030f 	and.w	r3, r3, #15
 8002c04:	4912      	ldr	r1, [pc, #72]	; (8002c50 <HAL_RCC_ClockConfig+0x35c>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	f003 031f 	and.w	r3, r3, #31
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c10:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c12:	4b0e      	ldr	r3, [pc, #56]	; (8002c4c <HAL_RCC_ClockConfig+0x358>)
 8002c14:	699b      	ldr	r3, [r3, #24]
 8002c16:	f003 030f 	and.w	r3, r3, #15
 8002c1a:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <HAL_RCC_ClockConfig+0x35c>)
 8002c1c:	5cd3      	ldrb	r3, [r2, r3]
 8002c1e:	f003 031f 	and.w	r3, r3, #31
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	fa22 f303 	lsr.w	r3, r2, r3
 8002c28:	4a0a      	ldr	r2, [pc, #40]	; (8002c54 <HAL_RCC_ClockConfig+0x360>)
 8002c2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c2c:	4a0a      	ldr	r2, [pc, #40]	; (8002c58 <HAL_RCC_ClockConfig+0x364>)
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002c32:	4b0a      	ldr	r3, [pc, #40]	; (8002c5c <HAL_RCC_ClockConfig+0x368>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd ffd6 	bl	8000be8 <HAL_InitTick>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	080099f4 	.word	0x080099f4
 8002c54:	2400007c 	.word	0x2400007c
 8002c58:	24000078 	.word	0x24000078
 8002c5c:	24000000 	.word	0x24000000

08002c60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b089      	sub	sp, #36	; 0x24
 8002c64:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c66:	4bb3      	ldr	r3, [pc, #716]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c6e:	2b18      	cmp	r3, #24
 8002c70:	f200 8155 	bhi.w	8002f1e <HAL_RCC_GetSysClockFreq+0x2be>
 8002c74:	a201      	add	r2, pc, #4	; (adr r2, 8002c7c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c7a:	bf00      	nop
 8002c7c:	08002ce1 	.word	0x08002ce1
 8002c80:	08002f1f 	.word	0x08002f1f
 8002c84:	08002f1f 	.word	0x08002f1f
 8002c88:	08002f1f 	.word	0x08002f1f
 8002c8c:	08002f1f 	.word	0x08002f1f
 8002c90:	08002f1f 	.word	0x08002f1f
 8002c94:	08002f1f 	.word	0x08002f1f
 8002c98:	08002f1f 	.word	0x08002f1f
 8002c9c:	08002d07 	.word	0x08002d07
 8002ca0:	08002f1f 	.word	0x08002f1f
 8002ca4:	08002f1f 	.word	0x08002f1f
 8002ca8:	08002f1f 	.word	0x08002f1f
 8002cac:	08002f1f 	.word	0x08002f1f
 8002cb0:	08002f1f 	.word	0x08002f1f
 8002cb4:	08002f1f 	.word	0x08002f1f
 8002cb8:	08002f1f 	.word	0x08002f1f
 8002cbc:	08002d0d 	.word	0x08002d0d
 8002cc0:	08002f1f 	.word	0x08002f1f
 8002cc4:	08002f1f 	.word	0x08002f1f
 8002cc8:	08002f1f 	.word	0x08002f1f
 8002ccc:	08002f1f 	.word	0x08002f1f
 8002cd0:	08002f1f 	.word	0x08002f1f
 8002cd4:	08002f1f 	.word	0x08002f1f
 8002cd8:	08002f1f 	.word	0x08002f1f
 8002cdc:	08002d13 	.word	0x08002d13
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ce0:	4b94      	ldr	r3, [pc, #592]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 0320 	and.w	r3, r3, #32
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d009      	beq.n	8002d00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cec:	4b91      	ldr	r3, [pc, #580]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	08db      	lsrs	r3, r3, #3
 8002cf2:	f003 0303 	and.w	r3, r3, #3
 8002cf6:	4a90      	ldr	r2, [pc, #576]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cf8:	fa22 f303 	lsr.w	r3, r2, r3
 8002cfc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002cfe:	e111      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002d00:	4b8d      	ldr	r3, [pc, #564]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d02:	61bb      	str	r3, [r7, #24]
      break;
 8002d04:	e10e      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002d06:	4b8d      	ldr	r3, [pc, #564]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002d08:	61bb      	str	r3, [r7, #24]
      break;
 8002d0a:	e10b      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002d0c:	4b8c      	ldr	r3, [pc, #560]	; (8002f40 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002d0e:	61bb      	str	r3, [r7, #24]
      break;
 8002d10:	e108      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002d12:	4b88      	ldr	r3, [pc, #544]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d16:	f003 0303 	and.w	r3, r3, #3
 8002d1a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002d1c:	4b85      	ldr	r3, [pc, #532]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d20:	091b      	lsrs	r3, r3, #4
 8002d22:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d26:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002d28:	4b82      	ldr	r3, [pc, #520]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d2c:	f003 0301 	and.w	r3, r3, #1
 8002d30:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002d32:	4b80      	ldr	r3, [pc, #512]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d36:	08db      	lsrs	r3, r3, #3
 8002d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	fb02 f303 	mul.w	r3, r2, r3
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f000 80e1 	beq.w	8002f18 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	f000 8083 	beq.w	8002e64 <HAL_RCC_GetSysClockFreq+0x204>
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	f200 80a1 	bhi.w	8002ea8 <HAL_RCC_GetSysClockFreq+0x248>
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d003      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x114>
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	d056      	beq.n	8002e20 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d72:	e099      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d74:	4b6f      	ldr	r3, [pc, #444]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02d      	beq.n	8002ddc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d80:	4b6c      	ldr	r3, [pc, #432]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	08db      	lsrs	r3, r3, #3
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	4a6b      	ldr	r2, [pc, #428]	; (8002f38 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002d90:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	ee07 3a90 	vmov	s15, r3
 8002d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	ee07 3a90 	vmov	s15, r3
 8002da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002daa:	4b62      	ldr	r3, [pc, #392]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dbe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002dda:	e087      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ddc:	693b      	ldr	r3, [r7, #16]
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002de6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f48 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dee:	4b51      	ldr	r3, [pc, #324]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002df6:	ee07 3a90 	vmov	s15, r3
 8002dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e02:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e1e:	e065      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e2a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e32:	4b40      	ldr	r3, [pc, #256]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e3a:	ee07 3a90 	vmov	s15, r3
 8002e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e46:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e62:	e043      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e6e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f50 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e76:	4b2f      	ldr	r3, [pc, #188]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7e:	ee07 3a90 	vmov	s15, r3
 8002e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e8a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ea2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ea6:	e021      	b.n	8002eec <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	ee07 3a90 	vmov	s15, r3
 8002eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f4c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eba:	4b1e      	ldr	r3, [pc, #120]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ece:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f44 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eea:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002eec:	4b11      	ldr	r3, [pc, #68]	; (8002f34 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	0a5b      	lsrs	r3, r3, #9
 8002ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	ee07 3a90 	vmov	s15, r3
 8002f00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f04:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f10:	ee17 3a90 	vmov	r3, s15
 8002f14:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002f16:	e005      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	61bb      	str	r3, [r7, #24]
      break;
 8002f1c:	e002      	b.n	8002f24 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002f1e:	4b07      	ldr	r3, [pc, #28]	; (8002f3c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002f20:	61bb      	str	r3, [r7, #24]
      break;
 8002f22:	bf00      	nop
  }

  return sysclockfreq;
 8002f24:	69bb      	ldr	r3, [r7, #24]
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3724      	adds	r7, #36	; 0x24
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	58024400 	.word	0x58024400
 8002f38:	03d09000 	.word	0x03d09000
 8002f3c:	003d0900 	.word	0x003d0900
 8002f40:	00b71b00 	.word	0x00b71b00
 8002f44:	46000000 	.word	0x46000000
 8002f48:	4c742400 	.word	0x4c742400
 8002f4c:	4a742400 	.word	0x4a742400
 8002f50:	4b371b00 	.word	0x4b371b00

08002f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b082      	sub	sp, #8
 8002f58:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f5a:	f7ff fe81 	bl	8002c60 <HAL_RCC_GetSysClockFreq>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f62:	699b      	ldr	r3, [r3, #24]
 8002f64:	0a1b      	lsrs	r3, r3, #8
 8002f66:	f003 030f 	and.w	r3, r3, #15
 8002f6a:	490f      	ldr	r1, [pc, #60]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f6c:	5ccb      	ldrb	r3, [r1, r3]
 8002f6e:	f003 031f 	and.w	r3, r3, #31
 8002f72:	fa22 f303 	lsr.w	r3, r2, r3
 8002f76:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f78:	4b0a      	ldr	r3, [pc, #40]	; (8002fa4 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	f003 030f 	and.w	r3, r3, #15
 8002f80:	4a09      	ldr	r2, [pc, #36]	; (8002fa8 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	f003 031f 	and.w	r3, r3, #31
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8e:	4a07      	ldr	r2, [pc, #28]	; (8002fac <HAL_RCC_GetHCLKFreq+0x58>)
 8002f90:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f92:	4a07      	ldr	r2, [pc, #28]	; (8002fb0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_RCC_GetHCLKFreq+0x58>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3708      	adds	r7, #8
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	58024400 	.word	0x58024400
 8002fa8:	080099f4 	.word	0x080099f4
 8002fac:	2400007c 	.word	0x2400007c
 8002fb0:	24000078 	.word	0x24000078

08002fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002fb8:	f7ff ffcc 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	4b06      	ldr	r3, [pc, #24]	; (8002fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	091b      	lsrs	r3, r3, #4
 8002fc4:	f003 0307 	and.w	r3, r3, #7
 8002fc8:	4904      	ldr	r1, [pc, #16]	; (8002fdc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fca:	5ccb      	ldrb	r3, [r1, r3]
 8002fcc:	f003 031f 	and.w	r3, r3, #31
 8002fd0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	58024400 	.word	0x58024400
 8002fdc:	080099f4 	.word	0x080099f4

08002fe0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002fe4:	f7ff ffb6 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	4b06      	ldr	r3, [pc, #24]	; (8003004 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fec:	69db      	ldr	r3, [r3, #28]
 8002fee:	0a1b      	lsrs	r3, r3, #8
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	4904      	ldr	r1, [pc, #16]	; (8003008 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ff6:	5ccb      	ldrb	r3, [r1, r3]
 8002ff8:	f003 031f 	and.w	r3, r3, #31
 8002ffc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	58024400 	.word	0x58024400
 8003008:	080099f4 	.word	0x080099f4

0800300c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800300c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003010:	b0ca      	sub	sp, #296	; 0x128
 8003012:	af00      	add	r7, sp, #0
 8003014:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003018:	2300      	movs	r3, #0
 800301a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800301e:	2300      	movs	r3, #0
 8003020:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003024:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800302c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003030:	2500      	movs	r5, #0
 8003032:	ea54 0305 	orrs.w	r3, r4, r5
 8003036:	d049      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003038:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800303c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800303e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003042:	d02f      	beq.n	80030a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003044:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003048:	d828      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800304a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800304e:	d01a      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003050:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003054:	d822      	bhi.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003056:	2b00      	cmp	r3, #0
 8003058:	d003      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800305a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800305e:	d007      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003060:	e01c      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003062:	4bb8      	ldr	r3, [pc, #736]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003066:	4ab7      	ldr	r2, [pc, #732]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003068:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800306e:	e01a      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003070:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003074:	3308      	adds	r3, #8
 8003076:	2102      	movs	r1, #2
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fc8f 	bl	800499c <RCCEx_PLL2_Config>
 800307e:	4603      	mov	r3, r0
 8003080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003084:	e00f      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003086:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800308a:	3328      	adds	r3, #40	; 0x28
 800308c:	2102      	movs	r1, #2
 800308e:	4618      	mov	r0, r3
 8003090:	f001 fd36 	bl	8004b00 <RCCEx_PLL3_Config>
 8003094:	4603      	mov	r3, r0
 8003096:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800309a:	e004      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80030a2:	e000      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80030a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80030a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10a      	bne.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80030ae:	4ba5      	ldr	r3, [pc, #660]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80030b2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80030b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030bc:	4aa1      	ldr	r2, [pc, #644]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030be:	430b      	orrs	r3, r1
 80030c0:	6513      	str	r3, [r2, #80]	; 0x50
 80030c2:	e003      	b.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80030c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80030cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030d4:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80030d8:	f04f 0900 	mov.w	r9, #0
 80030dc:	ea58 0309 	orrs.w	r3, r8, r9
 80030e0:	d047      	beq.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80030e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d82a      	bhi.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80030ec:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	08003109 	.word	0x08003109
 80030f8:	08003117 	.word	0x08003117
 80030fc:	0800312d 	.word	0x0800312d
 8003100:	0800314b 	.word	0x0800314b
 8003104:	0800314b 	.word	0x0800314b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003108:	4b8e      	ldr	r3, [pc, #568]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800310a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310c:	4a8d      	ldr	r2, [pc, #564]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800310e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003112:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003114:	e01a      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800311a:	3308      	adds	r3, #8
 800311c:	2100      	movs	r1, #0
 800311e:	4618      	mov	r0, r3
 8003120:	f001 fc3c 	bl	800499c <RCCEx_PLL2_Config>
 8003124:	4603      	mov	r3, r0
 8003126:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800312a:	e00f      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800312c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003130:	3328      	adds	r3, #40	; 0x28
 8003132:	2100      	movs	r1, #0
 8003134:	4618      	mov	r0, r3
 8003136:	f001 fce3 	bl	8004b00 <RCCEx_PLL3_Config>
 800313a:	4603      	mov	r3, r0
 800313c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003140:	e004      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003148:	e000      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800314a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800314c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003150:	2b00      	cmp	r3, #0
 8003152:	d10a      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003154:	4b7b      	ldr	r3, [pc, #492]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003158:	f023 0107 	bic.w	r1, r3, #7
 800315c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003162:	4a78      	ldr	r2, [pc, #480]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003164:	430b      	orrs	r3, r1
 8003166:	6513      	str	r3, [r2, #80]	; 0x50
 8003168:	e003      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800316a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800316e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003172:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003176:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800317e:	f04f 0b00 	mov.w	fp, #0
 8003182:	ea5a 030b 	orrs.w	r3, sl, fp
 8003186:	d04c      	beq.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003188:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003192:	d030      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003194:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003198:	d829      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800319a:	2bc0      	cmp	r3, #192	; 0xc0
 800319c:	d02d      	beq.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800319e:	2bc0      	cmp	r3, #192	; 0xc0
 80031a0:	d825      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031a2:	2b80      	cmp	r3, #128	; 0x80
 80031a4:	d018      	beq.n	80031d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80031a6:	2b80      	cmp	r3, #128	; 0x80
 80031a8:	d821      	bhi.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80031ae:	2b40      	cmp	r3, #64	; 0x40
 80031b0:	d007      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80031b2:	e01c      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80031b4:	4b63      	ldr	r3, [pc, #396]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	4a62      	ldr	r2, [pc, #392]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031c0:	e01c      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c6:	3308      	adds	r3, #8
 80031c8:	2100      	movs	r1, #0
 80031ca:	4618      	mov	r0, r3
 80031cc:	f001 fbe6 	bl	800499c <RCCEx_PLL2_Config>
 80031d0:	4603      	mov	r3, r0
 80031d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031d6:	e011      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031dc:	3328      	adds	r3, #40	; 0x28
 80031de:	2100      	movs	r1, #0
 80031e0:	4618      	mov	r0, r3
 80031e2:	f001 fc8d 	bl	8004b00 <RCCEx_PLL3_Config>
 80031e6:	4603      	mov	r3, r0
 80031e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031ec:	e006      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031f4:	e002      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003200:	2b00      	cmp	r3, #0
 8003202:	d10a      	bne.n	800321a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003204:	4b4f      	ldr	r3, [pc, #316]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003208:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800320c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003212:	4a4c      	ldr	r2, [pc, #304]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003214:	430b      	orrs	r3, r1
 8003216:	6513      	str	r3, [r2, #80]	; 0x50
 8003218:	e003      	b.n	8003222 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800321a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800321e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800322a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800322e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003232:	2300      	movs	r3, #0
 8003234:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003238:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800323c:	460b      	mov	r3, r1
 800323e:	4313      	orrs	r3, r2
 8003240:	d053      	beq.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003242:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003246:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800324a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800324e:	d035      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003250:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003254:	d82e      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003256:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800325a:	d031      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800325c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003260:	d828      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003262:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003266:	d01a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800326c:	d822      	bhi.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d003      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003272:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003276:	d007      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003278:	e01c      	b.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800327a:	4b32      	ldr	r3, [pc, #200]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800327c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800327e:	4a31      	ldr	r2, [pc, #196]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003284:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003286:	e01c      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800328c:	3308      	adds	r3, #8
 800328e:	2100      	movs	r1, #0
 8003290:	4618      	mov	r0, r3
 8003292:	f001 fb83 	bl	800499c <RCCEx_PLL2_Config>
 8003296:	4603      	mov	r3, r0
 8003298:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800329c:	e011      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a2:	3328      	adds	r3, #40	; 0x28
 80032a4:	2100      	movs	r1, #0
 80032a6:	4618      	mov	r0, r3
 80032a8:	f001 fc2a 	bl	8004b00 <RCCEx_PLL3_Config>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032b2:	e006      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80032ba:	e002      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032bc:	bf00      	nop
 80032be:	e000      	b.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80032c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d10b      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80032ca:	4b1e      	ldr	r3, [pc, #120]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ce:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80032d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032d6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032da:	4a1a      	ldr	r2, [pc, #104]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032dc:	430b      	orrs	r3, r1
 80032de:	6593      	str	r3, [r2, #88]	; 0x58
 80032e0:	e003      	b.n	80032ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032e6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80032f6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80032fa:	2300      	movs	r3, #0
 80032fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003300:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8003304:	460b      	mov	r3, r1
 8003306:	4313      	orrs	r3, r2
 8003308:	d056      	beq.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800330a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003312:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003316:	d038      	beq.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003318:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800331c:	d831      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800331e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003322:	d034      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003324:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003328:	d82b      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800332a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800332e:	d01d      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003330:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003334:	d825      	bhi.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003336:	2b00      	cmp	r3, #0
 8003338:	d006      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800333a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800333e:	d00a      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003340:	e01f      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003342:	bf00      	nop
 8003344:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003348:	4ba2      	ldr	r3, [pc, #648]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	4aa1      	ldr	r2, [pc, #644]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800334e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003352:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003354:	e01c      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003356:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800335a:	3308      	adds	r3, #8
 800335c:	2100      	movs	r1, #0
 800335e:	4618      	mov	r0, r3
 8003360:	f001 fb1c 	bl	800499c <RCCEx_PLL2_Config>
 8003364:	4603      	mov	r3, r0
 8003366:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800336a:	e011      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003370:	3328      	adds	r3, #40	; 0x28
 8003372:	2100      	movs	r1, #0
 8003374:	4618      	mov	r0, r3
 8003376:	f001 fbc3 	bl	8004b00 <RCCEx_PLL3_Config>
 800337a:	4603      	mov	r3, r0
 800337c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003380:	e006      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003388:	e002      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800338a:	bf00      	nop
 800338c:	e000      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800338e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003390:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003394:	2b00      	cmp	r3, #0
 8003396:	d10b      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003398:	4b8e      	ldr	r3, [pc, #568]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800339a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800339c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80033a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80033a8:	4a8a      	ldr	r2, [pc, #552]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033aa:	430b      	orrs	r3, r1
 80033ac:	6593      	str	r3, [r2, #88]	; 0x58
 80033ae:	e003      	b.n	80033b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80033b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c0:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80033c4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80033c8:	2300      	movs	r3, #0
 80033ca:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80033ce:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80033d2:	460b      	mov	r3, r1
 80033d4:	4313      	orrs	r3, r2
 80033d6:	d03a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80033d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033de:	2b30      	cmp	r3, #48	; 0x30
 80033e0:	d01f      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80033e2:	2b30      	cmp	r3, #48	; 0x30
 80033e4:	d819      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033e6:	2b20      	cmp	r3, #32
 80033e8:	d00c      	beq.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80033ea:	2b20      	cmp	r3, #32
 80033ec:	d815      	bhi.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d019      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80033f2:	2b10      	cmp	r3, #16
 80033f4:	d111      	bne.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033f6:	4b77      	ldr	r3, [pc, #476]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	4a76      	ldr	r2, [pc, #472]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003400:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003402:	e011      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003408:	3308      	adds	r3, #8
 800340a:	2102      	movs	r1, #2
 800340c:	4618      	mov	r0, r3
 800340e:	f001 fac5 	bl	800499c <RCCEx_PLL2_Config>
 8003412:	4603      	mov	r3, r0
 8003414:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003418:	e006      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800341a:	2301      	movs	r3, #1
 800341c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003420:	e002      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003422:	bf00      	nop
 8003424:	e000      	b.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003426:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003428:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003430:	4b68      	ldr	r3, [pc, #416]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003432:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003434:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800343c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800343e:	4a65      	ldr	r2, [pc, #404]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003440:	430b      	orrs	r3, r1
 8003442:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003444:	e003      	b.n	800344e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003446:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800344a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800344e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003456:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800345a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800345e:	2300      	movs	r3, #0
 8003460:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003464:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003468:	460b      	mov	r3, r1
 800346a:	4313      	orrs	r3, r2
 800346c:	d051      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800346e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003478:	d035      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800347a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800347e:	d82e      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003480:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003484:	d031      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003486:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800348a:	d828      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800348c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003490:	d01a      	beq.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003496:	d822      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003498:	2b00      	cmp	r3, #0
 800349a:	d003      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800349c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034a0:	d007      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80034a2:	e01c      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a4:	4b4b      	ldr	r3, [pc, #300]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a8:	4a4a      	ldr	r2, [pc, #296]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034b0:	e01c      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b6:	3308      	adds	r3, #8
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fa6e 	bl	800499c <RCCEx_PLL2_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034c6:	e011      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034cc:	3328      	adds	r3, #40	; 0x28
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f001 fb15 	bl	8004b00 <RCCEx_PLL3_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034dc:	e006      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034e4:	e002      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034e6:	bf00      	nop
 80034e8:	e000      	b.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d10a      	bne.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034f4:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80034fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003500:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003502:	4a34      	ldr	r2, [pc, #208]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003504:	430b      	orrs	r3, r1
 8003506:	6513      	str	r3, [r2, #80]	; 0x50
 8003508:	e003      	b.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800350a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800350e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003512:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800351e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003522:	2300      	movs	r3, #0
 8003524:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003528:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800352c:	460b      	mov	r3, r1
 800352e:	4313      	orrs	r3, r2
 8003530:	d056      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003536:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800353c:	d033      	beq.n	80035a6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800353e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003542:	d82c      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003544:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003548:	d02f      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800354a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800354e:	d826      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003550:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003554:	d02b      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003556:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800355a:	d820      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800355c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003560:	d012      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003562:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003566:	d81a      	bhi.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003568:	2b00      	cmp	r3, #0
 800356a:	d022      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800356c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003570:	d115      	bne.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003576:	3308      	adds	r3, #8
 8003578:	2101      	movs	r1, #1
 800357a:	4618      	mov	r0, r3
 800357c:	f001 fa0e 	bl	800499c <RCCEx_PLL2_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003586:	e015      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800358c:	3328      	adds	r3, #40	; 0x28
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f001 fab5 	bl	8004b00 <RCCEx_PLL3_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800359c:	e00a      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035a4:	e006      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035a6:	bf00      	nop
 80035a8:	e004      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035aa:	bf00      	nop
 80035ac:	e002      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80035b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10d      	bne.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80035bc:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c0:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80035c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80035ca:	4a02      	ldr	r2, [pc, #8]	; (80035d4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6513      	str	r3, [r2, #80]	; 0x50
 80035d0:	e006      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80035d2:	bf00      	nop
 80035d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035dc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80035ec:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035f0:	2300      	movs	r3, #0
 80035f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035f6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80035fa:	460b      	mov	r3, r1
 80035fc:	4313      	orrs	r3, r2
 80035fe:	d055      	beq.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003600:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003604:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003608:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800360c:	d033      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800360e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003612:	d82c      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003614:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003618:	d02f      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800361a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361e:	d826      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003620:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003624:	d02b      	beq.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003626:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800362a:	d820      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800362c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003630:	d012      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003636:	d81a      	bhi.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d022      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800363c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003640:	d115      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003642:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003646:	3308      	adds	r3, #8
 8003648:	2101      	movs	r1, #1
 800364a:	4618      	mov	r0, r3
 800364c:	f001 f9a6 	bl	800499c <RCCEx_PLL2_Config>
 8003650:	4603      	mov	r3, r0
 8003652:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003656:	e015      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003658:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800365c:	3328      	adds	r3, #40	; 0x28
 800365e:	2101      	movs	r1, #1
 8003660:	4618      	mov	r0, r3
 8003662:	f001 fa4d 	bl	8004b00 <RCCEx_PLL3_Config>
 8003666:	4603      	mov	r3, r0
 8003668:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800366c:	e00a      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003674:	e006      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003676:	bf00      	nop
 8003678:	e004      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800367a:	bf00      	nop
 800367c:	e002      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800367e:	bf00      	nop
 8003680:	e000      	b.n	8003684 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003682:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003684:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800368c:	4ba3      	ldr	r3, [pc, #652]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800368e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003690:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800369c:	4a9f      	ldr	r2, [pc, #636]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800369e:	430b      	orrs	r3, r1
 80036a0:	6593      	str	r3, [r2, #88]	; 0x58
 80036a2:	e003      	b.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80036ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036b4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 80036b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80036bc:	2300      	movs	r3, #0
 80036be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80036c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80036c6:	460b      	mov	r3, r1
 80036c8:	4313      	orrs	r3, r2
 80036ca:	d037      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80036cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036d6:	d00e      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80036d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036dc:	d816      	bhi.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x700>
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d018      	beq.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80036e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036e6:	d111      	bne.n	800370c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e8:	4b8c      	ldr	r3, [pc, #560]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	4a8b      	ldr	r2, [pc, #556]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036f4:	e00f      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036fa:	3308      	adds	r3, #8
 80036fc:	2101      	movs	r1, #1
 80036fe:	4618      	mov	r0, r3
 8003700:	f001 f94c 	bl	800499c <RCCEx_PLL2_Config>
 8003704:	4603      	mov	r3, r0
 8003706:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800370a:	e004      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800370c:	2301      	movs	r3, #1
 800370e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003712:	e000      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003714:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003716:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10a      	bne.n	8003734 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800371e:	4b7f      	ldr	r3, [pc, #508]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003726:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372c:	4a7b      	ldr	r2, [pc, #492]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800372e:	430b      	orrs	r3, r1
 8003730:	6513      	str	r3, [r2, #80]	; 0x50
 8003732:	e003      	b.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003734:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003738:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800373c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003744:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800374c:	2300      	movs	r3, #0
 800374e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003752:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003756:	460b      	mov	r3, r1
 8003758:	4313      	orrs	r3, r2
 800375a:	d039      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800375c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003760:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003762:	2b03      	cmp	r3, #3
 8003764:	d81c      	bhi.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003766:	a201      	add	r2, pc, #4	; (adr r2, 800376c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800376c:	080037a9 	.word	0x080037a9
 8003770:	0800377d 	.word	0x0800377d
 8003774:	0800378b 	.word	0x0800378b
 8003778:	080037a9 	.word	0x080037a9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800377c:	4b67      	ldr	r3, [pc, #412]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800377e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003780:	4a66      	ldr	r2, [pc, #408]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003782:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003786:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003788:	e00f      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800378a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378e:	3308      	adds	r3, #8
 8003790:	2102      	movs	r1, #2
 8003792:	4618      	mov	r0, r3
 8003794:	f001 f902 	bl	800499c <RCCEx_PLL2_Config>
 8003798:	4603      	mov	r3, r0
 800379a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800379e:	e004      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037a6:	e000      	b.n	80037aa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 80037a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037aa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10a      	bne.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80037b2:	4b5a      	ldr	r3, [pc, #360]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037b6:	f023 0103 	bic.w	r1, r3, #3
 80037ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037c0:	4a56      	ldr	r2, [pc, #344]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80037c2:	430b      	orrs	r3, r1
 80037c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037c6:	e003      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80037d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80037dc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037e0:	2300      	movs	r3, #0
 80037e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037e6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80037ea:	460b      	mov	r3, r1
 80037ec:	4313      	orrs	r3, r2
 80037ee:	f000 809f 	beq.w	8003930 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037f2:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a4a      	ldr	r2, [pc, #296]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037fe:	f7fd fa3d 	bl	8000c7c <HAL_GetTick>
 8003802:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003806:	e00b      	b.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003808:	f7fd fa38 	bl	8000c7c <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	2b64      	cmp	r3, #100	; 0x64
 8003816:	d903      	bls.n	8003820 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003818:	2303      	movs	r3, #3
 800381a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800381e:	e005      	b.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003820:	4b3f      	ldr	r3, [pc, #252]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0ed      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800382c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003830:	2b00      	cmp	r3, #0
 8003832:	d179      	bne.n	8003928 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003834:	4b39      	ldr	r3, [pc, #228]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003836:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800383c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003840:	4053      	eors	r3, r2
 8003842:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003846:	2b00      	cmp	r3, #0
 8003848:	d015      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384a:	4b34      	ldr	r3, [pc, #208]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003852:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003856:	4b31      	ldr	r3, [pc, #196]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800385a:	4a30      	ldr	r2, [pc, #192]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800385c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003860:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003862:	4b2e      	ldr	r3, [pc, #184]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003866:	4a2d      	ldr	r2, [pc, #180]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800386c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800386e:	4a2b      	ldr	r2, [pc, #172]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003870:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003874:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003876:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800387a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800387e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003882:	d118      	bne.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003884:	f7fd f9fa 	bl	8000c7c <HAL_GetTick>
 8003888:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800388c:	e00d      	b.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388e:	f7fd f9f5 	bl	8000c7c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003898:	1ad2      	subs	r2, r2, r3
 800389a:	f241 3388 	movw	r3, #5000	; 0x1388
 800389e:	429a      	cmp	r2, r3
 80038a0:	d903      	bls.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 80038a8:	e005      	b.n	80038b6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80038aa:	4b1c      	ldr	r3, [pc, #112]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	f003 0302 	and.w	r3, r3, #2
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d0eb      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80038b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d129      	bne.n	8003912 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038ce:	d10e      	bne.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80038d0:	4b12      	ldr	r3, [pc, #72]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d2:	691b      	ldr	r3, [r3, #16]
 80038d4:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80038d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038e0:	091a      	lsrs	r2, r3, #4
 80038e2:	4b10      	ldr	r3, [pc, #64]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	4a0d      	ldr	r2, [pc, #52]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038e8:	430b      	orrs	r3, r1
 80038ea:	6113      	str	r3, [r2, #16]
 80038ec:	e005      	b.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80038ee:	4b0b      	ldr	r3, [pc, #44]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	4a0a      	ldr	r2, [pc, #40]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038f4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038f8:	6113      	str	r3, [r2, #16]
 80038fa:	4b08      	ldr	r3, [pc, #32]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038fc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003902:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003906:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390a:	4a04      	ldr	r2, [pc, #16]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800390c:	430b      	orrs	r3, r1
 800390e:	6713      	str	r3, [r2, #112]	; 0x70
 8003910:	e00e      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003912:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003916:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800391a:	e009      	b.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800391c:	58024400 	.word	0x58024400
 8003920:	58024800 	.word	0x58024800
 8003924:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003928:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800392c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	f002 0301 	and.w	r3, r2, #1
 800393c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003946:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800394a:	460b      	mov	r3, r1
 800394c:	4313      	orrs	r3, r2
 800394e:	f000 8089 	beq.w	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003952:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003956:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003958:	2b28      	cmp	r3, #40	; 0x28
 800395a:	d86b      	bhi.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800395c:	a201      	add	r2, pc, #4	; (adr r2, 8003964 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800395e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003962:	bf00      	nop
 8003964:	08003a3d 	.word	0x08003a3d
 8003968:	08003a35 	.word	0x08003a35
 800396c:	08003a35 	.word	0x08003a35
 8003970:	08003a35 	.word	0x08003a35
 8003974:	08003a35 	.word	0x08003a35
 8003978:	08003a35 	.word	0x08003a35
 800397c:	08003a35 	.word	0x08003a35
 8003980:	08003a35 	.word	0x08003a35
 8003984:	08003a09 	.word	0x08003a09
 8003988:	08003a35 	.word	0x08003a35
 800398c:	08003a35 	.word	0x08003a35
 8003990:	08003a35 	.word	0x08003a35
 8003994:	08003a35 	.word	0x08003a35
 8003998:	08003a35 	.word	0x08003a35
 800399c:	08003a35 	.word	0x08003a35
 80039a0:	08003a35 	.word	0x08003a35
 80039a4:	08003a1f 	.word	0x08003a1f
 80039a8:	08003a35 	.word	0x08003a35
 80039ac:	08003a35 	.word	0x08003a35
 80039b0:	08003a35 	.word	0x08003a35
 80039b4:	08003a35 	.word	0x08003a35
 80039b8:	08003a35 	.word	0x08003a35
 80039bc:	08003a35 	.word	0x08003a35
 80039c0:	08003a35 	.word	0x08003a35
 80039c4:	08003a3d 	.word	0x08003a3d
 80039c8:	08003a35 	.word	0x08003a35
 80039cc:	08003a35 	.word	0x08003a35
 80039d0:	08003a35 	.word	0x08003a35
 80039d4:	08003a35 	.word	0x08003a35
 80039d8:	08003a35 	.word	0x08003a35
 80039dc:	08003a35 	.word	0x08003a35
 80039e0:	08003a35 	.word	0x08003a35
 80039e4:	08003a3d 	.word	0x08003a3d
 80039e8:	08003a35 	.word	0x08003a35
 80039ec:	08003a35 	.word	0x08003a35
 80039f0:	08003a35 	.word	0x08003a35
 80039f4:	08003a35 	.word	0x08003a35
 80039f8:	08003a35 	.word	0x08003a35
 80039fc:	08003a35 	.word	0x08003a35
 8003a00:	08003a35 	.word	0x08003a35
 8003a04:	08003a3d 	.word	0x08003a3d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a0c:	3308      	adds	r3, #8
 8003a0e:	2101      	movs	r1, #1
 8003a10:	4618      	mov	r0, r3
 8003a12:	f000 ffc3 	bl	800499c <RCCEx_PLL2_Config>
 8003a16:	4603      	mov	r3, r0
 8003a18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a1c:	e00f      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a22:	3328      	adds	r3, #40	; 0x28
 8003a24:	2101      	movs	r1, #1
 8003a26:	4618      	mov	r0, r3
 8003a28:	f001 f86a 	bl	8004b00 <RCCEx_PLL3_Config>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003a32:	e004      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a3a:	e000      	b.n	8003a3e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003a3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a3e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a46:	4bbf      	ldr	r3, [pc, #764]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a4a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003a4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a54:	4abb      	ldr	r2, [pc, #748]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6553      	str	r3, [r2, #84]	; 0x54
 8003a5a:	e003      	b.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6c:	f002 0302 	and.w	r3, r2, #2
 8003a70:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a74:	2300      	movs	r3, #0
 8003a76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a7a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003a7e:	460b      	mov	r3, r1
 8003a80:	4313      	orrs	r3, r2
 8003a82:	d041      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a88:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a8a:	2b05      	cmp	r3, #5
 8003a8c:	d824      	bhi.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003a8e:	a201      	add	r2, pc, #4	; (adr r2, 8003a94 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a94:	08003ae1 	.word	0x08003ae1
 8003a98:	08003aad 	.word	0x08003aad
 8003a9c:	08003ac3 	.word	0x08003ac3
 8003aa0:	08003ae1 	.word	0x08003ae1
 8003aa4:	08003ae1 	.word	0x08003ae1
 8003aa8:	08003ae1 	.word	0x08003ae1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab0:	3308      	adds	r3, #8
 8003ab2:	2101      	movs	r1, #1
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 ff71 	bl	800499c <RCCEx_PLL2_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e00f      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ac2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac6:	3328      	adds	r3, #40	; 0x28
 8003ac8:	2101      	movs	r1, #1
 8003aca:	4618      	mov	r0, r3
 8003acc:	f001 f818 	bl	8004b00 <RCCEx_PLL3_Config>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003ad6:	e004      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003ade:	e000      	b.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003ae0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ae2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d10a      	bne.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003aea:	4b96      	ldr	r3, [pc, #600]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aee:	f023 0107 	bic.w	r1, r3, #7
 8003af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003af8:	4a92      	ldr	r2, [pc, #584]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003afa:	430b      	orrs	r3, r1
 8003afc:	6553      	str	r3, [r2, #84]	; 0x54
 8003afe:	e003      	b.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b00:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b04:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b10:	f002 0304 	and.w	r3, r2, #4
 8003b14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003b18:	2300      	movs	r3, #0
 8003b1a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b1e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003b22:	460b      	mov	r3, r1
 8003b24:	4313      	orrs	r3, r2
 8003b26:	d044      	beq.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d825      	bhi.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003b89 	.word	0x08003b89
 8003b40:	08003b55 	.word	0x08003b55
 8003b44:	08003b6b 	.word	0x08003b6b
 8003b48:	08003b89 	.word	0x08003b89
 8003b4c:	08003b89 	.word	0x08003b89
 8003b50:	08003b89 	.word	0x08003b89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b58:	3308      	adds	r3, #8
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	f000 ff1d 	bl	800499c <RCCEx_PLL2_Config>
 8003b62:	4603      	mov	r3, r0
 8003b64:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b68:	e00f      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6e:	3328      	adds	r3, #40	; 0x28
 8003b70:	2101      	movs	r1, #1
 8003b72:	4618      	mov	r0, r3
 8003b74:	f000 ffc4 	bl	8004b00 <RCCEx_PLL3_Config>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b7e:	e004      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b86:	e000      	b.n	8003b8a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003b88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10b      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b92:	4b6c      	ldr	r3, [pc, #432]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b96:	f023 0107 	bic.w	r1, r3, #7
 8003b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba2:	4a68      	ldr	r2, [pc, #416]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ba4:	430b      	orrs	r3, r1
 8003ba6:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba8:	e003      	b.n	8003bb2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003baa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003bae:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003bb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bba:	f002 0320 	and.w	r3, r2, #32
 8003bbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003bc8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003bcc:	460b      	mov	r3, r1
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	d055      	beq.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bde:	d033      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003be0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003be4:	d82c      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003be6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bea:	d02f      	beq.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf0:	d826      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bf2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bf6:	d02b      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003bf8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bfc:	d820      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c02:	d012      	beq.n	8003c2a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003c04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c08:	d81a      	bhi.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d022      	beq.n	8003c54 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003c0e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c12:	d115      	bne.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c18:	3308      	adds	r3, #8
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f000 febd 	bl	800499c <RCCEx_PLL2_Config>
 8003c22:	4603      	mov	r3, r0
 8003c24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c28:	e015      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2e:	3328      	adds	r3, #40	; 0x28
 8003c30:	2102      	movs	r1, #2
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 ff64 	bl	8004b00 <RCCEx_PLL3_Config>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c3e:	e00a      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c40:	2301      	movs	r3, #1
 8003c42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c46:	e006      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c48:	bf00      	nop
 8003c4a:	e004      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c4c:	bf00      	nop
 8003c4e:	e002      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c50:	bf00      	nop
 8003c52:	e000      	b.n	8003c56 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d10b      	bne.n	8003c76 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c5e:	4b39      	ldr	r3, [pc, #228]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c62:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6e:	4a35      	ldr	r2, [pc, #212]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c70:	430b      	orrs	r3, r1
 8003c72:	6553      	str	r3, [r2, #84]	; 0x54
 8003c74:	e003      	b.n	8003c7e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c86:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c8e:	2300      	movs	r3, #0
 8003c90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003c94:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003c98:	460b      	mov	r3, r1
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	d058      	beq.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ca6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003caa:	d033      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003cac:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003cb0:	d82c      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb6:	d02f      	beq.n	8003d18 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cbc:	d826      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cbe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc2:	d02b      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003cc8:	d820      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cce:	d012      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003cd4:	d81a      	bhi.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d022      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003cda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cde:	d115      	bne.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce4:	3308      	adds	r3, #8
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fe57 	bl	800499c <RCCEx_PLL2_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cf4:	e015      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cfa:	3328      	adds	r3, #40	; 0x28
 8003cfc:	2102      	movs	r1, #2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f000 fefe 	bl	8004b00 <RCCEx_PLL3_Config>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003d0a:	e00a      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d12:	e006      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d14:	bf00      	nop
 8003d16:	e004      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d18:	bf00      	nop
 8003d1a:	e002      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d1c:	bf00      	nop
 8003d1e:	e000      	b.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003d20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10e      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d2a:	4b06      	ldr	r3, [pc, #24]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d2e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d3a:	4a02      	ldr	r2, [pc, #8]	; (8003d44 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d3c:	430b      	orrs	r3, r1
 8003d3e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d40:	e006      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003d42:	bf00      	nop
 8003d44:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d66:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	d055      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d74:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d78:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d7c:	d033      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003d7e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d82:	d82c      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d88:	d02f      	beq.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003d8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d8e:	d826      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d90:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d94:	d02b      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003d96:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d9a:	d820      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d9c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da0:	d012      	beq.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003da2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003da6:	d81a      	bhi.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d022      	beq.n	8003df2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003dac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003db0:	d115      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003db2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db6:	3308      	adds	r3, #8
 8003db8:	2100      	movs	r1, #0
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f000 fdee 	bl	800499c <RCCEx_PLL2_Config>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003dc6:	e015      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003dc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dcc:	3328      	adds	r3, #40	; 0x28
 8003dce:	2102      	movs	r1, #2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f000 fe95 	bl	8004b00 <RCCEx_PLL3_Config>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ddc:	e00a      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003de4:	e006      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003de6:	bf00      	nop
 8003de8:	e004      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dea:	bf00      	nop
 8003dec:	e002      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dee:	bf00      	nop
 8003df0:	e000      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003df2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003df4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10b      	bne.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003dfc:	4ba1      	ldr	r3, [pc, #644]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e00:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003e04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e08:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003e0c:	4a9d      	ldr	r2, [pc, #628]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e0e:	430b      	orrs	r3, r1
 8003e10:	6593      	str	r3, [r2, #88]	; 0x58
 8003e12:	e003      	b.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003e1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e24:	f002 0308 	and.w	r3, r2, #8
 8003e28:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e32:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e36:	460b      	mov	r3, r1
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	d01e      	beq.n	8003e7a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e48:	d10c      	bne.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4e:	3328      	adds	r3, #40	; 0x28
 8003e50:	2102      	movs	r1, #2
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fe54 	bl	8004b00 <RCCEx_PLL3_Config>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d002      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003e5e:	2301      	movs	r3, #1
 8003e60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e64:	4b87      	ldr	r3, [pc, #540]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e68:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e74:	4a83      	ldr	r2, [pc, #524]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e76:	430b      	orrs	r3, r1
 8003e78:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e82:	f002 0310 	and.w	r3, r2, #16
 8003e86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e90:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003e94:	460b      	mov	r3, r1
 8003e96:	4313      	orrs	r3, r2
 8003e98:	d01e      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ea6:	d10c      	bne.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eac:	3328      	adds	r3, #40	; 0x28
 8003eae:	2102      	movs	r1, #2
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f000 fe25 	bl	8004b00 <RCCEx_PLL3_Config>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d002      	beq.n	8003ec2 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ec2:	4b70      	ldr	r3, [pc, #448]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ece:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ed2:	4a6c      	ldr	r2, [pc, #432]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ed4:	430b      	orrs	r3, r1
 8003ed6:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003ee4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003ee8:	2300      	movs	r3, #0
 8003eea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003eee:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003ef2:	460b      	mov	r3, r1
 8003ef4:	4313      	orrs	r3, r2
 8003ef6:	d03e      	beq.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f04:	d022      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003f0a:	d81b      	bhi.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f14:	d00b      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003f16:	e015      	b.n	8003f44 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	2100      	movs	r1, #0
 8003f20:	4618      	mov	r0, r3
 8003f22:	f000 fd3b 	bl	800499c <RCCEx_PLL2_Config>
 8003f26:	4603      	mov	r3, r0
 8003f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f2c:	e00f      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f32:	3328      	adds	r3, #40	; 0x28
 8003f34:	2102      	movs	r1, #2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f000 fde2 	bl	8004b00 <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f42:	e004      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f4a:	e000      	b.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003f4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f4e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10b      	bne.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f56:	4b4b      	ldr	r3, [pc, #300]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f5a:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f62:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f66:	4a47      	ldr	r2, [pc, #284]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f68:	430b      	orrs	r3, r1
 8003f6a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f6c:	e003      	b.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f6e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f72:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f7e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003f82:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f84:	2300      	movs	r3, #0
 8003f86:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f88:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	d03b      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f9e:	d01f      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003fa0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003fa4:	d818      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003fa6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003faa:	d003      	beq.n	8003fb4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003fac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003fb0:	d007      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003fb2:	e011      	b.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003fb4:	4b33      	ldr	r3, [pc, #204]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fb8:	4a32      	ldr	r2, [pc, #200]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fbe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fc0:	e00f      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc6:	3328      	adds	r3, #40	; 0x28
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fd98 	bl	8004b00 <RCCEx_PLL3_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fd6:	e004      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fde:	e000      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fea:	4b26      	ldr	r3, [pc, #152]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	4a22      	ldr	r2, [pc, #136]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6553      	str	r3, [r2, #84]	; 0x54
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004006:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800400a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004016:	673b      	str	r3, [r7, #112]	; 0x70
 8004018:	2300      	movs	r3, #0
 800401a:	677b      	str	r3, [r7, #116]	; 0x74
 800401c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004020:	460b      	mov	r3, r1
 8004022:	4313      	orrs	r3, r2
 8004024:	d034      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004034:	d007      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004036:	e011      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004038:	4b12      	ldr	r3, [pc, #72]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	4a11      	ldr	r2, [pc, #68]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800403e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004042:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004044:	e00e      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004046:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404a:	3308      	adds	r3, #8
 800404c:	2102      	movs	r1, #2
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fca4 	bl	800499c <RCCEx_PLL2_Config>
 8004054:	4603      	mov	r3, r0
 8004056:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800405a:	e003      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004062:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004064:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004068:	2b00      	cmp	r3, #0
 800406a:	d10d      	bne.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800406c:	4b05      	ldr	r3, [pc, #20]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800406e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004070:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004074:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800407a:	4a02      	ldr	r2, [pc, #8]	; (8004084 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800407c:	430b      	orrs	r3, r1
 800407e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004080:	e006      	b.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004082:	bf00      	nop
 8004084:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004088:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800408c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004090:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004098:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800409c:	66bb      	str	r3, [r7, #104]	; 0x68
 800409e:	2300      	movs	r3, #0
 80040a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040a2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80040a6:	460b      	mov	r3, r1
 80040a8:	4313      	orrs	r3, r2
 80040aa:	d00c      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80040ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b0:	3328      	adds	r3, #40	; 0x28
 80040b2:	2102      	movs	r1, #2
 80040b4:	4618      	mov	r0, r3
 80040b6:	f000 fd23 	bl	8004b00 <RCCEx_PLL3_Config>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80040d2:	663b      	str	r3, [r7, #96]	; 0x60
 80040d4:	2300      	movs	r3, #0
 80040d6:	667b      	str	r3, [r7, #100]	; 0x64
 80040d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80040dc:	460b      	mov	r3, r1
 80040de:	4313      	orrs	r3, r2
 80040e0:	d038      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80040e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ee:	d018      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80040f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040f4:	d811      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040fa:	d014      	beq.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80040fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004100:	d80b      	bhi.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004102:	2b00      	cmp	r3, #0
 8004104:	d011      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004106:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800410a:	d106      	bne.n	800411a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800410c:	4bc3      	ldr	r3, [pc, #780]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800410e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004110:	4ac2      	ldr	r2, [pc, #776]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004112:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004116:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004118:	e008      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800411a:	2301      	movs	r3, #1
 800411c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004120:	e004      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004122:	bf00      	nop
 8004124:	e002      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004126:	bf00      	nop
 8004128:	e000      	b.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800412a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10b      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004134:	4bb9      	ldr	r3, [pc, #740]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004138:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800413c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004140:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004144:	4ab5      	ldr	r2, [pc, #724]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004146:	430b      	orrs	r3, r1
 8004148:	6553      	str	r3, [r2, #84]	; 0x54
 800414a:	e003      	b.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004150:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415c:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004160:	65bb      	str	r3, [r7, #88]	; 0x58
 8004162:	2300      	movs	r3, #0
 8004164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004166:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800416a:	460b      	mov	r3, r1
 800416c:	4313      	orrs	r3, r2
 800416e:	d009      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004170:	4baa      	ldr	r3, [pc, #680]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004174:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004178:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800417c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800417e:	4aa7      	ldr	r2, [pc, #668]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004180:	430b      	orrs	r3, r1
 8004182:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004184:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004190:	653b      	str	r3, [r7, #80]	; 0x50
 8004192:	2300      	movs	r3, #0
 8004194:	657b      	str	r3, [r7, #84]	; 0x54
 8004196:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800419a:	460b      	mov	r3, r1
 800419c:	4313      	orrs	r3, r2
 800419e:	d00a      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80041a0:	4b9e      	ldr	r3, [pc, #632]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80041a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ac:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80041b0:	4a9a      	ldr	r2, [pc, #616]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041b2:	430b      	orrs	r3, r1
 80041b4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041be:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80041c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80041c4:	2300      	movs	r3, #0
 80041c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c8:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80041cc:	460b      	mov	r3, r1
 80041ce:	4313      	orrs	r3, r2
 80041d0:	d009      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041d2:	4b92      	ldr	r3, [pc, #584]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d6:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80041da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e0:	4a8e      	ldr	r2, [pc, #568]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041e2:	430b      	orrs	r3, r1
 80041e4:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80041f2:	643b      	str	r3, [r7, #64]	; 0x40
 80041f4:	2300      	movs	r3, #0
 80041f6:	647b      	str	r3, [r7, #68]	; 0x44
 80041f8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80041fc:	460b      	mov	r3, r1
 80041fe:	4313      	orrs	r3, r2
 8004200:	d00e      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004202:	4b86      	ldr	r3, [pc, #536]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	4a85      	ldr	r2, [pc, #532]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004208:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800420c:	6113      	str	r3, [r2, #16]
 800420e:	4b83      	ldr	r3, [pc, #524]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004210:	6919      	ldr	r1, [r3, #16]
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004216:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800421a:	4a80      	ldr	r2, [pc, #512]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800421c:	430b      	orrs	r3, r1
 800421e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800422c:	63bb      	str	r3, [r7, #56]	; 0x38
 800422e:	2300      	movs	r3, #0
 8004230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004232:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004236:	460b      	mov	r3, r1
 8004238:	4313      	orrs	r3, r2
 800423a:	d009      	beq.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800423c:	4b77      	ldr	r3, [pc, #476]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800423e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004240:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004244:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424a:	4a74      	ldr	r2, [pc, #464]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800424c:	430b      	orrs	r3, r1
 800424e:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004254:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004258:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800425c:	633b      	str	r3, [r7, #48]	; 0x30
 800425e:	2300      	movs	r3, #0
 8004260:	637b      	str	r3, [r7, #52]	; 0x34
 8004262:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004266:	460b      	mov	r3, r1
 8004268:	4313      	orrs	r3, r2
 800426a:	d00a      	beq.n	8004282 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800426c:	4b6b      	ldr	r3, [pc, #428]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800426e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004270:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004278:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800427c:	4a67      	ldr	r2, [pc, #412]	; (800441c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800427e:	430b      	orrs	r3, r1
 8004280:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428a:	2100      	movs	r1, #0
 800428c:	62b9      	str	r1, [r7, #40]	; 0x28
 800428e:	f003 0301 	and.w	r3, r3, #1
 8004292:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004294:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004298:	460b      	mov	r3, r1
 800429a:	4313      	orrs	r3, r2
 800429c:	d011      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800429e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a2:	3308      	adds	r3, #8
 80042a4:	2100      	movs	r1, #0
 80042a6:	4618      	mov	r0, r3
 80042a8:	f000 fb78 	bl	800499c <RCCEx_PLL2_Config>
 80042ac:	4603      	mov	r3, r0
 80042ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80042b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d003      	beq.n	80042c2 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80042c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ca:	2100      	movs	r1, #0
 80042cc:	6239      	str	r1, [r7, #32]
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	627b      	str	r3, [r7, #36]	; 0x24
 80042d4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042d8:	460b      	mov	r3, r1
 80042da:	4313      	orrs	r3, r2
 80042dc:	d011      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042e2:	3308      	adds	r3, #8
 80042e4:	2101      	movs	r1, #1
 80042e6:	4618      	mov	r0, r3
 80042e8:	f000 fb58 	bl	800499c <RCCEx_PLL2_Config>
 80042ec:	4603      	mov	r3, r0
 80042ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80042f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430a:	2100      	movs	r1, #0
 800430c:	61b9      	str	r1, [r7, #24]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	61fb      	str	r3, [r7, #28]
 8004314:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004318:	460b      	mov	r3, r1
 800431a:	4313      	orrs	r3, r2
 800431c:	d011      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800431e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004322:	3308      	adds	r3, #8
 8004324:	2102      	movs	r1, #2
 8004326:	4618      	mov	r0, r3
 8004328:	f000 fb38 	bl	800499c <RCCEx_PLL2_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8004332:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004336:	2b00      	cmp	r3, #0
 8004338:	d003      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800433a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800433e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004346:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434a:	2100      	movs	r1, #0
 800434c:	6139      	str	r1, [r7, #16]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004358:	460b      	mov	r3, r1
 800435a:	4313      	orrs	r3, r2
 800435c:	d011      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800435e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004362:	3328      	adds	r3, #40	; 0x28
 8004364:	2100      	movs	r1, #0
 8004366:	4618      	mov	r0, r3
 8004368:	f000 fbca 	bl	8004b00 <RCCEx_PLL3_Config>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8004372:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800437a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800437e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800438a:	2100      	movs	r1, #0
 800438c:	60b9      	str	r1, [r7, #8]
 800438e:	f003 0310 	and.w	r3, r3, #16
 8004392:	60fb      	str	r3, [r7, #12]
 8004394:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004398:	460b      	mov	r3, r1
 800439a:	4313      	orrs	r3, r2
 800439c:	d011      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800439e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a2:	3328      	adds	r3, #40	; 0x28
 80043a4:	2101      	movs	r1, #1
 80043a6:	4618      	mov	r0, r3
 80043a8:	f000 fbaa 	bl	8004b00 <RCCEx_PLL3_Config>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d003      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043be:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	2100      	movs	r1, #0
 80043cc:	6039      	str	r1, [r7, #0]
 80043ce:	f003 0320 	and.w	r3, r3, #32
 80043d2:	607b      	str	r3, [r7, #4]
 80043d4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043d8:	460b      	mov	r3, r1
 80043da:	4313      	orrs	r3, r2
 80043dc:	d011      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043e2:	3328      	adds	r3, #40	; 0x28
 80043e4:	2102      	movs	r1, #2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 fb8a 	bl	8004b00 <RCCEx_PLL3_Config>
 80043ec:	4603      	mov	r3, r0
 80043ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d003      	beq.n	8004402 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8004402:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8004406:	2b00      	cmp	r3, #0
 8004408:	d101      	bne.n	800440e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e000      	b.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800440e:	2301      	movs	r3, #1
}
 8004410:	4618      	mov	r0, r3
 8004412:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8004416:	46bd      	mov	sp, r7
 8004418:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800441c:	58024400 	.word	0x58024400

08004420 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004424:	f7fe fd96 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8004428:	4602      	mov	r2, r0
 800442a:	4b06      	ldr	r3, [pc, #24]	; (8004444 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800442c:	6a1b      	ldr	r3, [r3, #32]
 800442e:	091b      	lsrs	r3, r3, #4
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	4904      	ldr	r1, [pc, #16]	; (8004448 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004436:	5ccb      	ldrb	r3, [r1, r3]
 8004438:	f003 031f 	and.w	r3, r3, #31
 800443c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004440:	4618      	mov	r0, r3
 8004442:	bd80      	pop	{r7, pc}
 8004444:	58024400 	.word	0x58024400
 8004448:	080099f4 	.word	0x080099f4

0800444c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800444c:	b480      	push	{r7}
 800444e:	b089      	sub	sp, #36	; 0x24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004454:	4ba1      	ldr	r3, [pc, #644]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	f003 0303 	and.w	r3, r3, #3
 800445c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800445e:	4b9f      	ldr	r3, [pc, #636]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004460:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004462:	0b1b      	lsrs	r3, r3, #12
 8004464:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004468:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800446a:	4b9c      	ldr	r3, [pc, #624]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800446c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446e:	091b      	lsrs	r3, r3, #4
 8004470:	f003 0301 	and.w	r3, r3, #1
 8004474:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004476:	4b99      	ldr	r3, [pc, #612]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800447a:	08db      	lsrs	r3, r3, #3
 800447c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	fb02 f303 	mul.w	r3, r2, r3
 8004486:	ee07 3a90 	vmov	s15, r3
 800448a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800448e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2b00      	cmp	r3, #0
 8004496:	f000 8111 	beq.w	80046bc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	2b02      	cmp	r3, #2
 800449e:	f000 8083 	beq.w	80045a8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	2b02      	cmp	r3, #2
 80044a6:	f200 80a1 	bhi.w	80045ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80044aa:	69bb      	ldr	r3, [r7, #24]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80044b0:	69bb      	ldr	r3, [r7, #24]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d056      	beq.n	8004564 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80044b6:	e099      	b.n	80045ec <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80044b8:	4b88      	ldr	r3, [pc, #544]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0320 	and.w	r3, r3, #32
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d02d      	beq.n	8004520 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80044c4:	4b85      	ldr	r3, [pc, #532]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	08db      	lsrs	r3, r3, #3
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	4a84      	ldr	r2, [pc, #528]	; (80046e0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80044d0:	fa22 f303 	lsr.w	r3, r2, r3
 80044d4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	ee07 3a90 	vmov	s15, r3
 80044dc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	ee07 3a90 	vmov	s15, r3
 80044e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ee:	4b7b      	ldr	r3, [pc, #492]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044f6:	ee07 3a90 	vmov	s15, r3
 80044fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8004502:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004506:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800450a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800450e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004516:	ee67 7a27 	vmul.f32	s15, s14, s15
 800451a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800451e:	e087      	b.n	8004630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	ee07 3a90 	vmov	s15, r3
 8004526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800452a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80046e8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800452e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004532:	4b6a      	ldr	r3, [pc, #424]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004536:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800453a:	ee07 3a90 	vmov	s15, r3
 800453e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004542:	ed97 6a03 	vldr	s12, [r7, #12]
 8004546:	eddf 5a67 	vldr	s11, [pc, #412]	; 80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800454a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800454e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004552:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004556:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800455a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800455e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004562:	e065      	b.n	8004630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004564:	697b      	ldr	r3, [r7, #20]
 8004566:	ee07 3a90 	vmov	s15, r3
 800456a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800456e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004572:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004576:	4b59      	ldr	r3, [pc, #356]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800457e:	ee07 3a90 	vmov	s15, r3
 8004582:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004586:	ed97 6a03 	vldr	s12, [r7, #12]
 800458a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800458e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004592:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004596:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800459a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800459e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045a2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045a6:	e043      	b.n	8004630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	ee07 3a90 	vmov	s15, r3
 80045ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045b2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80046f0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80045b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ba:	4b48      	ldr	r3, [pc, #288]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045c2:	ee07 3a90 	vmov	s15, r3
 80045c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80045ce:	eddf 5a45 	vldr	s11, [pc, #276]	; 80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ea:	e021      	b.n	8004630 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	ee07 3a90 	vmov	s15, r3
 80045f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045f6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80046ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045fe:	4b37      	ldr	r3, [pc, #220]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004602:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800460e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004612:	eddf 5a34 	vldr	s11, [pc, #208]	; 80046e4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004616:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800461a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800461e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004622:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004626:	ee67 7a27 	vmul.f32	s15, s14, s15
 800462a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800462e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004630:	4b2a      	ldr	r3, [pc, #168]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	0a5b      	lsrs	r3, r3, #9
 8004636:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004642:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004646:	ee37 7a87 	vadd.f32	s14, s15, s14
 800464a:	edd7 6a07 	vldr	s13, [r7, #28]
 800464e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004656:	ee17 2a90 	vmov	r2, s15
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800465e:	4b1f      	ldr	r3, [pc, #124]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	0c1b      	lsrs	r3, r3, #16
 8004664:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004668:	ee07 3a90 	vmov	s15, r3
 800466c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004670:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004674:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004678:	edd7 6a07 	vldr	s13, [r7, #28]
 800467c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004684:	ee17 2a90 	vmov	r2, s15
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800468c:	4b13      	ldr	r3, [pc, #76]	; (80046dc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800468e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004690:	0e1b      	lsrs	r3, r3, #24
 8004692:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004696:	ee07 3a90 	vmov	s15, r3
 800469a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800469e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80046a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80046aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80046ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046b2:	ee17 2a90 	vmov	r2, s15
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80046ba:	e008      	b.n	80046ce <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2200      	movs	r2, #0
 80046c6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2200      	movs	r2, #0
 80046cc:	609a      	str	r2, [r3, #8]
}
 80046ce:	bf00      	nop
 80046d0:	3724      	adds	r7, #36	; 0x24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop
 80046dc:	58024400 	.word	0x58024400
 80046e0:	03d09000 	.word	0x03d09000
 80046e4:	46000000 	.word	0x46000000
 80046e8:	4c742400 	.word	0x4c742400
 80046ec:	4a742400 	.word	0x4a742400
 80046f0:	4b371b00 	.word	0x4b371b00

080046f4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	; 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046fc:	4ba1      	ldr	r3, [pc, #644]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004700:	f003 0303 	and.w	r3, r3, #3
 8004704:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004706:	4b9f      	ldr	r3, [pc, #636]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004708:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800470a:	0d1b      	lsrs	r3, r3, #20
 800470c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004710:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004712:	4b9c      	ldr	r3, [pc, #624]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	0a1b      	lsrs	r3, r3, #8
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800471e:	4b99      	ldr	r3, [pc, #612]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004722:	08db      	lsrs	r3, r3, #3
 8004724:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	fb02 f303 	mul.w	r3, r2, r3
 800472e:	ee07 3a90 	vmov	s15, r3
 8004732:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004736:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	2b00      	cmp	r3, #0
 800473e:	f000 8111 	beq.w	8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	2b02      	cmp	r3, #2
 8004746:	f000 8083 	beq.w	8004850 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	2b02      	cmp	r3, #2
 800474e:	f200 80a1 	bhi.w	8004894 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d003      	beq.n	8004760 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d056      	beq.n	800480c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800475e:	e099      	b.n	8004894 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004760:	4b88      	ldr	r3, [pc, #544]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0320 	and.w	r3, r3, #32
 8004768:	2b00      	cmp	r3, #0
 800476a:	d02d      	beq.n	80047c8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800476c:	4b85      	ldr	r3, [pc, #532]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	08db      	lsrs	r3, r3, #3
 8004772:	f003 0303 	and.w	r3, r3, #3
 8004776:	4a84      	ldr	r2, [pc, #528]	; (8004988 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
 800477c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	ee07 3a90 	vmov	s15, r3
 8004784:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	ee07 3a90 	vmov	s15, r3
 800478e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	4b7b      	ldr	r3, [pc, #492]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047aa:	eddf 5a78 	vldr	s11, [pc, #480]	; 800498c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047c6:	e087      	b.n	80048d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004990 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b6a      	ldr	r3, [pc, #424]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ee:	eddf 5a67 	vldr	s11, [pc, #412]	; 800498c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800480a:	e065      	b.n	80048d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	ee07 3a90 	vmov	s15, r3
 8004812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004816:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800481a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800481e:	4b59      	ldr	r3, [pc, #356]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004822:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004826:	ee07 3a90 	vmov	s15, r3
 800482a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800482e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004832:	eddf 5a56 	vldr	s11, [pc, #344]	; 800498c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800483a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800483e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004842:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004846:	ee67 7a27 	vmul.f32	s15, s14, s15
 800484a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800484e:	e043      	b.n	80048d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	ee07 3a90 	vmov	s15, r3
 8004856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800485a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004998 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800485e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004862:	4b48      	ldr	r3, [pc, #288]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800486a:	ee07 3a90 	vmov	s15, r3
 800486e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004872:	ed97 6a03 	vldr	s12, [r7, #12]
 8004876:	eddf 5a45 	vldr	s11, [pc, #276]	; 800498c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800487a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800487e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004882:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004886:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800488a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800488e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004892:	e021      	b.n	80048d8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	ee07 3a90 	vmov	s15, r3
 800489a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800489e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004994 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80048a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048ba:	eddf 5a34 	vldr	s11, [pc, #208]	; 800498c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80048be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80048ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048d6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80048d8:	4b2a      	ldr	r3, [pc, #168]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	0a5b      	lsrs	r3, r3, #9
 80048de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048e2:	ee07 3a90 	vmov	s15, r3
 80048e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ee:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048f2:	edd7 6a07 	vldr	s13, [r7, #28]
 80048f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048fe:	ee17 2a90 	vmov	r2, s15
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004906:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	0c1b      	lsrs	r3, r3, #16
 800490c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004910:	ee07 3a90 	vmov	s15, r3
 8004914:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004918:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800491c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004920:	edd7 6a07 	vldr	s13, [r7, #28]
 8004924:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004928:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800492c:	ee17 2a90 	vmov	r2, s15
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004934:	4b13      	ldr	r3, [pc, #76]	; (8004984 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004938:	0e1b      	lsrs	r3, r3, #24
 800493a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800493e:	ee07 3a90 	vmov	s15, r3
 8004942:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800494a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800494e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004952:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004956:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800495a:	ee17 2a90 	vmov	r2, s15
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004962:	e008      	b.n	8004976 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	609a      	str	r2, [r3, #8]
}
 8004976:	bf00      	nop
 8004978:	3724      	adds	r7, #36	; 0x24
 800497a:	46bd      	mov	sp, r7
 800497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004980:	4770      	bx	lr
 8004982:	bf00      	nop
 8004984:	58024400 	.word	0x58024400
 8004988:	03d09000 	.word	0x03d09000
 800498c:	46000000 	.word	0x46000000
 8004990:	4c742400 	.word	0x4c742400
 8004994:	4a742400 	.word	0x4a742400
 8004998:	4b371b00 	.word	0x4b371b00

0800499c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80049aa:	4b53      	ldr	r3, [pc, #332]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b03      	cmp	r3, #3
 80049b4:	d101      	bne.n	80049ba <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e099      	b.n	8004aee <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049ba:	4b4f      	ldr	r3, [pc, #316]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a4e      	ldr	r2, [pc, #312]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 80049c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049c6:	f7fc f959 	bl	8000c7c <HAL_GetTick>
 80049ca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049cc:	e008      	b.n	80049e0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049ce:	f7fc f955 	bl	8000c7c <HAL_GetTick>
 80049d2:	4602      	mov	r2, r0
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	1ad3      	subs	r3, r2, r3
 80049d8:	2b02      	cmp	r3, #2
 80049da:	d901      	bls.n	80049e0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049dc:	2303      	movs	r3, #3
 80049de:	e086      	b.n	8004aee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049e0:	4b45      	ldr	r3, [pc, #276]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d1f0      	bne.n	80049ce <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049ec:	4b42      	ldr	r3, [pc, #264]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 80049ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049f0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	031b      	lsls	r3, r3, #12
 80049fa:	493f      	ldr	r1, [pc, #252]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	628b      	str	r3, [r1, #40]	; 0x28
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	685b      	ldr	r3, [r3, #4]
 8004a04:	3b01      	subs	r3, #1
 8004a06:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	3b01      	subs	r3, #1
 8004a10:	025b      	lsls	r3, r3, #9
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68db      	ldr	r3, [r3, #12]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	041b      	lsls	r3, r3, #16
 8004a1e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a22:	431a      	orrs	r2, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	3b01      	subs	r3, #1
 8004a2a:	061b      	lsls	r3, r3, #24
 8004a2c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a30:	4931      	ldr	r1, [pc, #196]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a36:	4b30      	ldr	r3, [pc, #192]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	492d      	ldr	r1, [pc, #180]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a44:	4313      	orrs	r3, r2
 8004a46:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a48:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4c:	f023 0220 	bic.w	r2, r3, #32
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	4928      	ldr	r1, [pc, #160]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a5a:	4b27      	ldr	r3, [pc, #156]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5e:	4a26      	ldr	r2, [pc, #152]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a60:	f023 0310 	bic.w	r3, r3, #16
 8004a64:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a66:	4b24      	ldr	r3, [pc, #144]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a6a:	4b24      	ldr	r3, [pc, #144]	; (8004afc <RCCEx_PLL2_Config+0x160>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	69d2      	ldr	r2, [r2, #28]
 8004a72:	00d2      	lsls	r2, r2, #3
 8004a74:	4920      	ldr	r1, [pc, #128]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a7a:	4b1f      	ldr	r3, [pc, #124]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	4a1e      	ldr	r2, [pc, #120]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a80:	f043 0310 	orr.w	r3, r3, #16
 8004a84:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d106      	bne.n	8004a9a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a8c:	4b1a      	ldr	r3, [pc, #104]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a90:	4a19      	ldr	r2, [pc, #100]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004a92:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a98:	e00f      	b.n	8004aba <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d106      	bne.n	8004aae <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004aa0:	4b15      	ldr	r3, [pc, #84]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004aa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa4:	4a14      	ldr	r2, [pc, #80]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aaa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004aac:	e005      	b.n	8004aba <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004aae:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004ab0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab2:	4a11      	ldr	r2, [pc, #68]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004ab4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ab8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004aba:	4b0f      	ldr	r3, [pc, #60]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a0e      	ldr	r2, [pc, #56]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004ac0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ac6:	f7fc f8d9 	bl	8000c7c <HAL_GetTick>
 8004aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004acc:	e008      	b.n	8004ae0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004ace:	f7fc f8d5 	bl	8000c7c <HAL_GetTick>
 8004ad2:	4602      	mov	r2, r0
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	1ad3      	subs	r3, r2, r3
 8004ad8:	2b02      	cmp	r3, #2
 8004ada:	d901      	bls.n	8004ae0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e006      	b.n	8004aee <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <RCCEx_PLL2_Config+0x15c>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d0f0      	beq.n	8004ace <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	58024400 	.word	0x58024400
 8004afc:	ffff0007 	.word	0xffff0007

08004b00 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b0e:	4b53      	ldr	r3, [pc, #332]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b03      	cmp	r3, #3
 8004b18:	d101      	bne.n	8004b1e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e099      	b.n	8004c52 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b1e:	4b4f      	ldr	r3, [pc, #316]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a4e      	ldr	r2, [pc, #312]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b2a:	f7fc f8a7 	bl	8000c7c <HAL_GetTick>
 8004b2e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b30:	e008      	b.n	8004b44 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b32:	f7fc f8a3 	bl	8000c7c <HAL_GetTick>
 8004b36:	4602      	mov	r2, r0
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	1ad3      	subs	r3, r2, r3
 8004b3c:	2b02      	cmp	r3, #2
 8004b3e:	d901      	bls.n	8004b44 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e086      	b.n	8004c52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b44:	4b45      	ldr	r3, [pc, #276]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d1f0      	bne.n	8004b32 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b50:	4b42      	ldr	r3, [pc, #264]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004b52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b54:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	051b      	lsls	r3, r3, #20
 8004b5e:	493f      	ldr	r1, [pc, #252]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004b60:	4313      	orrs	r3, r2
 8004b62:	628b      	str	r3, [r1, #40]	; 0x28
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	3b01      	subs	r3, #1
 8004b74:	025b      	lsls	r3, r3, #9
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	68db      	ldr	r3, [r3, #12]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	041b      	lsls	r3, r3, #16
 8004b82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b86:	431a      	orrs	r2, r3
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b94:	4931      	ldr	r1, [pc, #196]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004b96:	4313      	orrs	r3, r2
 8004b98:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b9a:	4b30      	ldr	r3, [pc, #192]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	492d      	ldr	r1, [pc, #180]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004bac:	4b2b      	ldr	r3, [pc, #172]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	4928      	ldr	r1, [pc, #160]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bbe:	4b27      	ldr	r3, [pc, #156]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc2:	4a26      	ldr	r2, [pc, #152]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004bc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bca:	4b24      	ldr	r3, [pc, #144]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004bcc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bce:	4b24      	ldr	r3, [pc, #144]	; (8004c60 <RCCEx_PLL3_Config+0x160>)
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	69d2      	ldr	r2, [r2, #28]
 8004bd6:	00d2      	lsls	r2, r2, #3
 8004bd8:	4920      	ldr	r1, [pc, #128]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004bda:	4313      	orrs	r3, r2
 8004bdc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bde:	4b1f      	ldr	r3, [pc, #124]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	4a1e      	ldr	r2, [pc, #120]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004be4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d106      	bne.n	8004bfe <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bf0:	4b1a      	ldr	r3, [pc, #104]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf4:	4a19      	ldr	r2, [pc, #100]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004bf6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bfa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bfc:	e00f      	b.n	8004c1e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b01      	cmp	r3, #1
 8004c02:	d106      	bne.n	8004c12 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004c04:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	4a14      	ldr	r2, [pc, #80]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004c0a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c10:	e005      	b.n	8004c1e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c12:	4b12      	ldr	r3, [pc, #72]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	4a11      	ldr	r2, [pc, #68]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004c18:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c1c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c1e:	4b0f      	ldr	r3, [pc, #60]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a0e      	ldr	r2, [pc, #56]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004c24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c2a:	f7fc f827 	bl	8000c7c <HAL_GetTick>
 8004c2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c30:	e008      	b.n	8004c44 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c32:	f7fc f823 	bl	8000c7c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d901      	bls.n	8004c44 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c40:	2303      	movs	r3, #3
 8004c42:	e006      	b.n	8004c52 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c44:	4b05      	ldr	r3, [pc, #20]	; (8004c5c <RCCEx_PLL3_Config+0x15c>)
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d0f0      	beq.n	8004c32 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3710      	adds	r7, #16
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
 8004c5a:	bf00      	nop
 8004c5c:	58024400 	.word	0x58024400
 8004c60:	ffff0007 	.word	0xffff0007

08004c64 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d101      	bne.n	8004c76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e10f      	b.n	8004e96 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a87      	ldr	r2, [pc, #540]	; (8004ea0 <HAL_SPI_Init+0x23c>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d00f      	beq.n	8004ca6 <HAL_SPI_Init+0x42>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a86      	ldr	r2, [pc, #536]	; (8004ea4 <HAL_SPI_Init+0x240>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d00a      	beq.n	8004ca6 <HAL_SPI_Init+0x42>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	4a84      	ldr	r2, [pc, #528]	; (8004ea8 <HAL_SPI_Init+0x244>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d005      	beq.n	8004ca6 <HAL_SPI_Init+0x42>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	2b0f      	cmp	r3, #15
 8004ca0:	d901      	bls.n	8004ca6 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e0f7      	b.n	8004e96 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 f900 	bl	8004eac <SPI_GetPacketSize>
 8004cac:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	4a7b      	ldr	r2, [pc, #492]	; (8004ea0 <HAL_SPI_Init+0x23c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00c      	beq.n	8004cd2 <HAL_SPI_Init+0x6e>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	4a79      	ldr	r2, [pc, #484]	; (8004ea4 <HAL_SPI_Init+0x240>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d007      	beq.n	8004cd2 <HAL_SPI_Init+0x6e>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4a78      	ldr	r2, [pc, #480]	; (8004ea8 <HAL_SPI_Init+0x244>)
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d002      	beq.n	8004cd2 <HAL_SPI_Init+0x6e>
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2b08      	cmp	r3, #8
 8004cd0:	d811      	bhi.n	8004cf6 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004cd6:	4a72      	ldr	r2, [pc, #456]	; (8004ea0 <HAL_SPI_Init+0x23c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d009      	beq.n	8004cf0 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a70      	ldr	r2, [pc, #448]	; (8004ea4 <HAL_SPI_Init+0x240>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d004      	beq.n	8004cf0 <HAL_SPI_Init+0x8c>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a6f      	ldr	r2, [pc, #444]	; (8004ea8 <HAL_SPI_Init+0x244>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d104      	bne.n	8004cfa <HAL_SPI_Init+0x96>
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	2b10      	cmp	r3, #16
 8004cf4:	d901      	bls.n	8004cfa <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e0cd      	b.n	8004e96 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d106      	bne.n	8004d14 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f003 fde4 	bl	80088dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f022 0201 	bic.w	r2, r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004d36:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d40:	d119      	bne.n	8004d76 <HAL_SPI_Init+0x112>
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d4a:	d103      	bne.n	8004d54 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d008      	beq.n	8004d66 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10c      	bne.n	8004d76 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d64:	d107      	bne.n	8004d76 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d74:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d00f      	beq.n	8004da2 <HAL_SPI_Init+0x13e>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b06      	cmp	r3, #6
 8004d88:	d90b      	bls.n	8004da2 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	601a      	str	r2, [r3, #0]
 8004da0:	e007      	b.n	8004db2 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004db0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	69da      	ldr	r2, [r3, #28]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	ea42 0103 	orr.w	r1, r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68da      	ldr	r2, [r3, #12]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	430a      	orrs	r2, r1
 8004dd2:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	431a      	orrs	r2, r3
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de2:	431a      	orrs	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	699b      	ldr	r3, [r3, #24]
 8004de8:	431a      	orrs	r2, r3
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	691b      	ldr	r3, [r3, #16]
 8004dee:	431a      	orrs	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	431a      	orrs	r2, r3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e06:	431a      	orrs	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e12:	ea42 0103 	orr.w	r1, r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	430a      	orrs	r2, r1
 8004e20:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d113      	bne.n	8004e52 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689b      	ldr	r3, [r3, #8]
 8004e30:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e3c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e50:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f022 0201 	bic.w	r2, r2, #1
 8004e60:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	685b      	ldr	r3, [r3, #4]
 8004e66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d00a      	beq.n	8004e84 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	430a      	orrs	r2, r1
 8004e82:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004e94:	2300      	movs	r3, #0
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	40013000 	.word	0x40013000
 8004ea4:	40003800 	.word	0x40003800
 8004ea8:	40003c00 	.word	0x40003c00

08004eac <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b085      	sub	sp, #20
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb8:	095b      	lsrs	r3, r3, #5
 8004eba:	3301      	adds	r3, #1
 8004ebc:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	3307      	adds	r3, #7
 8004eca:	08db      	lsrs	r3, r3, #3
 8004ecc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	fb02 f303 	mul.w	r3, r2, r3
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3714      	adds	r7, #20
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr

08004ee2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ee2:	b580      	push	{r7, lr}
 8004ee4:	b082      	sub	sp, #8
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e049      	b.n	8004f88 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d106      	bne.n	8004f0e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f003 fd4f 	bl	80089ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2202      	movs	r2, #2
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	3304      	adds	r3, #4
 8004f1e:	4619      	mov	r1, r3
 8004f20:	4610      	mov	r0, r2
 8004f22:	f000 fb5d 	bl	80055e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2201      	movs	r2, #1
 8004f2a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	2201      	movs	r2, #1
 8004f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2201      	movs	r2, #1
 8004f3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2201      	movs	r2, #1
 8004f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}

08004f90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b085      	sub	sp, #20
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f9e:	b2db      	uxtb	r3, r3
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d001      	beq.n	8004fa8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e04c      	b.n	8005042 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a26      	ldr	r2, [pc, #152]	; (8005050 <HAL_TIM_Base_Start+0xc0>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d022      	beq.n	8005000 <HAL_TIM_Base_Start+0x70>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fc2:	d01d      	beq.n	8005000 <HAL_TIM_Base_Start+0x70>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a22      	ldr	r2, [pc, #136]	; (8005054 <HAL_TIM_Base_Start+0xc4>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d018      	beq.n	8005000 <HAL_TIM_Base_Start+0x70>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a21      	ldr	r2, [pc, #132]	; (8005058 <HAL_TIM_Base_Start+0xc8>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d013      	beq.n	8005000 <HAL_TIM_Base_Start+0x70>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a1f      	ldr	r2, [pc, #124]	; (800505c <HAL_TIM_Base_Start+0xcc>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d00e      	beq.n	8005000 <HAL_TIM_Base_Start+0x70>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a1e      	ldr	r2, [pc, #120]	; (8005060 <HAL_TIM_Base_Start+0xd0>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d009      	beq.n	8005000 <HAL_TIM_Base_Start+0x70>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a1c      	ldr	r2, [pc, #112]	; (8005064 <HAL_TIM_Base_Start+0xd4>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d004      	beq.n	8005000 <HAL_TIM_Base_Start+0x70>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1b      	ldr	r2, [pc, #108]	; (8005068 <HAL_TIM_Base_Start+0xd8>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d115      	bne.n	800502c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	4b19      	ldr	r3, [pc, #100]	; (800506c <HAL_TIM_Base_Start+0xdc>)
 8005008:	4013      	ands	r3, r2
 800500a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b06      	cmp	r3, #6
 8005010:	d015      	beq.n	800503e <HAL_TIM_Base_Start+0xae>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005018:	d011      	beq.n	800503e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0201 	orr.w	r2, r2, #1
 8005028:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800502a:	e008      	b.n	800503e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0201 	orr.w	r2, r2, #1
 800503a:	601a      	str	r2, [r3, #0]
 800503c:	e000      	b.n	8005040 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	40010000 	.word	0x40010000
 8005054:	40000400 	.word	0x40000400
 8005058:	40000800 	.word	0x40000800
 800505c:	40000c00 	.word	0x40000c00
 8005060:	40010400 	.word	0x40010400
 8005064:	40001800 	.word	0x40001800
 8005068:	40014000 	.word	0x40014000
 800506c:	00010007 	.word	0x00010007

08005070 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005070:	b480      	push	{r7}
 8005072:	b085      	sub	sp, #20
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	d001      	beq.n	8005088 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	e054      	b.n	8005132 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2202      	movs	r2, #2
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68da      	ldr	r2, [r3, #12]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f042 0201 	orr.w	r2, r2, #1
 800509e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a26      	ldr	r2, [pc, #152]	; (8005140 <HAL_TIM_Base_Start_IT+0xd0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d022      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b2:	d01d      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a22      	ldr	r2, [pc, #136]	; (8005144 <HAL_TIM_Base_Start_IT+0xd4>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d018      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a21      	ldr	r2, [pc, #132]	; (8005148 <HAL_TIM_Base_Start_IT+0xd8>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d013      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a1f      	ldr	r2, [pc, #124]	; (800514c <HAL_TIM_Base_Start_IT+0xdc>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d00e      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a1e      	ldr	r2, [pc, #120]	; (8005150 <HAL_TIM_Base_Start_IT+0xe0>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d009      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a1c      	ldr	r2, [pc, #112]	; (8005154 <HAL_TIM_Base_Start_IT+0xe4>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d004      	beq.n	80050f0 <HAL_TIM_Base_Start_IT+0x80>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a1b      	ldr	r2, [pc, #108]	; (8005158 <HAL_TIM_Base_Start_IT+0xe8>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d115      	bne.n	800511c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	4b19      	ldr	r3, [pc, #100]	; (800515c <HAL_TIM_Base_Start_IT+0xec>)
 80050f8:	4013      	ands	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2b06      	cmp	r3, #6
 8005100:	d015      	beq.n	800512e <HAL_TIM_Base_Start_IT+0xbe>
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005108:	d011      	beq.n	800512e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f042 0201 	orr.w	r2, r2, #1
 8005118:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800511a:	e008      	b.n	800512e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f042 0201 	orr.w	r2, r2, #1
 800512a:	601a      	str	r2, [r3, #0]
 800512c:	e000      	b.n	8005130 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800512e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3714      	adds	r7, #20
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr
 800513e:	bf00      	nop
 8005140:	40010000 	.word	0x40010000
 8005144:	40000400 	.word	0x40000400
 8005148:	40000800 	.word	0x40000800
 800514c:	40000c00 	.word	0x40000c00
 8005150:	40010400 	.word	0x40010400
 8005154:	40001800 	.word	0x40001800
 8005158:	40014000 	.word	0x40014000
 800515c:	00010007 	.word	0x00010007

08005160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	f003 0302 	and.w	r3, r3, #2
 8005172:	2b02      	cmp	r3, #2
 8005174:	d122      	bne.n	80051bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b02      	cmp	r3, #2
 8005182:	d11b      	bne.n	80051bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f06f 0202 	mvn.w	r2, #2
 800518c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2201      	movs	r2, #1
 8005192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	699b      	ldr	r3, [r3, #24]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d003      	beq.n	80051aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80051a2:	6878      	ldr	r0, [r7, #4]
 80051a4:	f000 f9fe 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 80051a8:	e005      	b.n	80051b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f9f0 	bl	8005590 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f000 fa01 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	f003 0304 	and.w	r3, r3, #4
 80051c6:	2b04      	cmp	r3, #4
 80051c8:	d122      	bne.n	8005210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68db      	ldr	r3, [r3, #12]
 80051d0:	f003 0304 	and.w	r3, r3, #4
 80051d4:	2b04      	cmp	r3, #4
 80051d6:	d11b      	bne.n	8005210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0204 	mvn.w	r2, #4
 80051e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2202      	movs	r2, #2
 80051e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699b      	ldr	r3, [r3, #24]
 80051ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 f9d4 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 f9c6 	bl	8005590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f9d7 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b08      	cmp	r3, #8
 800521c:	d122      	bne.n	8005264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	f003 0308 	and.w	r3, r3, #8
 8005228:	2b08      	cmp	r3, #8
 800522a:	d11b      	bne.n	8005264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f06f 0208 	mvn.w	r2, #8
 8005234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2204      	movs	r2, #4
 800523a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	69db      	ldr	r3, [r3, #28]
 8005242:	f003 0303 	and.w	r3, r3, #3
 8005246:	2b00      	cmp	r3, #0
 8005248:	d003      	beq.n	8005252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9aa 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 8005250:	e005      	b.n	800525e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f99c 	bl	8005590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 f9ad 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	691b      	ldr	r3, [r3, #16]
 800526a:	f003 0310 	and.w	r3, r3, #16
 800526e:	2b10      	cmp	r3, #16
 8005270:	d122      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	f003 0310 	and.w	r3, r3, #16
 800527c:	2b10      	cmp	r3, #16
 800527e:	d11b      	bne.n	80052b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f06f 0210 	mvn.w	r2, #16
 8005288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2208      	movs	r2, #8
 800528e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	69db      	ldr	r3, [r3, #28]
 8005296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800529a:	2b00      	cmp	r3, #0
 800529c:	d003      	beq.n	80052a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f980 	bl	80055a4 <HAL_TIM_IC_CaptureCallback>
 80052a4:	e005      	b.n	80052b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f972 	bl	8005590 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 f983 	bl	80055b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	691b      	ldr	r3, [r3, #16]
 80052be:	f003 0301 	and.w	r3, r3, #1
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10e      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	f003 0301 	and.w	r3, r3, #1
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d107      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f06f 0201 	mvn.w	r2, #1
 80052dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f003 f912 	bl	8008508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ee:	2b80      	cmp	r3, #128	; 0x80
 80052f0:	d10e      	bne.n	8005310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fc:	2b80      	cmp	r3, #128	; 0x80
 80052fe:	d107      	bne.n	8005310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fb38 	bl	8005980 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	691b      	ldr	r3, [r3, #16]
 8005316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800531a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800531e:	d10e      	bne.n	800533e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800532a:	2b80      	cmp	r3, #128	; 0x80
 800532c:	d107      	bne.n	800533e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 fb2b 	bl	8005994 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	691b      	ldr	r3, [r3, #16]
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b40      	cmp	r3, #64	; 0x40
 800534a:	d10e      	bne.n	800536a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b40      	cmp	r3, #64	; 0x40
 8005358:	d107      	bne.n	800536a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f931 	bl	80055cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	f003 0320 	and.w	r3, r3, #32
 8005374:	2b20      	cmp	r3, #32
 8005376:	d10e      	bne.n	8005396 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0320 	and.w	r3, r3, #32
 8005382:	2b20      	cmp	r3, #32
 8005384:	d107      	bne.n	8005396 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f06f 0220 	mvn.w	r2, #32
 800538e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 faeb 	bl	800596c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005396:	bf00      	nop
 8005398:	3708      	adds	r7, #8
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
 80053a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053aa:	2300      	movs	r3, #0
 80053ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053b4:	2b01      	cmp	r3, #1
 80053b6:	d101      	bne.n	80053bc <HAL_TIM_ConfigClockSource+0x1c>
 80053b8:	2302      	movs	r3, #2
 80053ba:	e0dc      	b.n	8005576 <HAL_TIM_ConfigClockSource+0x1d6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2202      	movs	r2, #2
 80053c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	4b6a      	ldr	r3, [pc, #424]	; (8005580 <HAL_TIM_ConfigClockSource+0x1e0>)
 80053d8:	4013      	ands	r3, r2
 80053da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a64      	ldr	r2, [pc, #400]	; (8005584 <HAL_TIM_ConfigClockSource+0x1e4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	f000 80a9 	beq.w	800554a <HAL_TIM_ConfigClockSource+0x1aa>
 80053f8:	4a62      	ldr	r2, [pc, #392]	; (8005584 <HAL_TIM_ConfigClockSource+0x1e4>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	f200 80ae 	bhi.w	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 8005400:	4a61      	ldr	r2, [pc, #388]	; (8005588 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005402:	4293      	cmp	r3, r2
 8005404:	f000 80a1 	beq.w	800554a <HAL_TIM_ConfigClockSource+0x1aa>
 8005408:	4a5f      	ldr	r2, [pc, #380]	; (8005588 <HAL_TIM_ConfigClockSource+0x1e8>)
 800540a:	4293      	cmp	r3, r2
 800540c:	f200 80a6 	bhi.w	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 8005410:	4a5e      	ldr	r2, [pc, #376]	; (800558c <HAL_TIM_ConfigClockSource+0x1ec>)
 8005412:	4293      	cmp	r3, r2
 8005414:	f000 8099 	beq.w	800554a <HAL_TIM_ConfigClockSource+0x1aa>
 8005418:	4a5c      	ldr	r2, [pc, #368]	; (800558c <HAL_TIM_ConfigClockSource+0x1ec>)
 800541a:	4293      	cmp	r3, r2
 800541c:	f200 809e 	bhi.w	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 8005420:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005424:	f000 8091 	beq.w	800554a <HAL_TIM_ConfigClockSource+0x1aa>
 8005428:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800542c:	f200 8096 	bhi.w	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 8005430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005434:	f000 8089 	beq.w	800554a <HAL_TIM_ConfigClockSource+0x1aa>
 8005438:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800543c:	f200 808e 	bhi.w	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 8005440:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005444:	d03e      	beq.n	80054c4 <HAL_TIM_ConfigClockSource+0x124>
 8005446:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800544a:	f200 8087 	bhi.w	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 800544e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005452:	f000 8086 	beq.w	8005562 <HAL_TIM_ConfigClockSource+0x1c2>
 8005456:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800545a:	d87f      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 800545c:	2b70      	cmp	r3, #112	; 0x70
 800545e:	d01a      	beq.n	8005496 <HAL_TIM_ConfigClockSource+0xf6>
 8005460:	2b70      	cmp	r3, #112	; 0x70
 8005462:	d87b      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 8005464:	2b60      	cmp	r3, #96	; 0x60
 8005466:	d050      	beq.n	800550a <HAL_TIM_ConfigClockSource+0x16a>
 8005468:	2b60      	cmp	r3, #96	; 0x60
 800546a:	d877      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 800546c:	2b50      	cmp	r3, #80	; 0x50
 800546e:	d03c      	beq.n	80054ea <HAL_TIM_ConfigClockSource+0x14a>
 8005470:	2b50      	cmp	r3, #80	; 0x50
 8005472:	d873      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 8005474:	2b40      	cmp	r3, #64	; 0x40
 8005476:	d058      	beq.n	800552a <HAL_TIM_ConfigClockSource+0x18a>
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	d86f      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 800547c:	2b30      	cmp	r3, #48	; 0x30
 800547e:	d064      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x1aa>
 8005480:	2b30      	cmp	r3, #48	; 0x30
 8005482:	d86b      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 8005484:	2b20      	cmp	r3, #32
 8005486:	d060      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x1aa>
 8005488:	2b20      	cmp	r3, #32
 800548a:	d867      	bhi.n	800555c <HAL_TIM_ConfigClockSource+0x1bc>
 800548c:	2b00      	cmp	r3, #0
 800548e:	d05c      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x1aa>
 8005490:	2b10      	cmp	r3, #16
 8005492:	d05a      	beq.n	800554a <HAL_TIM_ConfigClockSource+0x1aa>
 8005494:	e062      	b.n	800555c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6818      	ldr	r0, [r3, #0]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	6899      	ldr	r1, [r3, #8]
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f000 f9b3 	bl	8005810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80054b8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68ba      	ldr	r2, [r7, #8]
 80054c0:	609a      	str	r2, [r3, #8]
      break;
 80054c2:	e04f      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6818      	ldr	r0, [r3, #0]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	6899      	ldr	r1, [r3, #8]
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685a      	ldr	r2, [r3, #4]
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	f000 f99c 	bl	8005810 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	689a      	ldr	r2, [r3, #8]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054e6:	609a      	str	r2, [r3, #8]
      break;
 80054e8:	e03c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	6818      	ldr	r0, [r3, #0]
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	6859      	ldr	r1, [r3, #4]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	461a      	mov	r2, r3
 80054f8:	f000 f90c 	bl	8005714 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	2150      	movs	r1, #80	; 0x50
 8005502:	4618      	mov	r0, r3
 8005504:	f000 f966 	bl	80057d4 <TIM_ITRx_SetConfig>
      break;
 8005508:	e02c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6818      	ldr	r0, [r3, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	6859      	ldr	r1, [r3, #4]
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	68db      	ldr	r3, [r3, #12]
 8005516:	461a      	mov	r2, r3
 8005518:	f000 f92b 	bl	8005772 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2160      	movs	r1, #96	; 0x60
 8005522:	4618      	mov	r0, r3
 8005524:	f000 f956 	bl	80057d4 <TIM_ITRx_SetConfig>
      break;
 8005528:	e01c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	6818      	ldr	r0, [r3, #0]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	6859      	ldr	r1, [r3, #4]
 8005532:	683b      	ldr	r3, [r7, #0]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	461a      	mov	r2, r3
 8005538:	f000 f8ec 	bl	8005714 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	2140      	movs	r1, #64	; 0x40
 8005542:	4618      	mov	r0, r3
 8005544:	f000 f946 	bl	80057d4 <TIM_ITRx_SetConfig>
      break;
 8005548:	e00c      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f000 f93d 	bl	80057d4 <TIM_ITRx_SetConfig>
      break;
 800555a:	e003      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	73fb      	strb	r3, [r7, #15]
      break;
 8005560:	e000      	b.n	8005564 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8005562:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005574:	7bfb      	ldrb	r3, [r7, #15]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3710      	adds	r7, #16
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	ffceff88 	.word	0xffceff88
 8005584:	00100040 	.word	0x00100040
 8005588:	00100030 	.word	0x00100030
 800558c:	00100020 	.word	0x00100020

08005590 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005590:	b480      	push	{r7}
 8005592:	b083      	sub	sp, #12
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005598:	bf00      	nop
 800559a:	370c      	adds	r7, #12
 800559c:	46bd      	mov	sp, r7
 800559e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a2:	4770      	bx	lr

080055a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055a4:	b480      	push	{r7}
 80055a6:	b083      	sub	sp, #12
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055ac:	bf00      	nop
 80055ae:	370c      	adds	r7, #12
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b083      	sub	sp, #12
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr

080055cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80055cc:	b480      	push	{r7}
 80055ce:	b083      	sub	sp, #12
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055d4:	bf00      	nop
 80055d6:	370c      	adds	r7, #12
 80055d8:	46bd      	mov	sp, r7
 80055da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055de:	4770      	bx	lr

080055e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055e0:	b480      	push	{r7}
 80055e2:	b085      	sub	sp, #20
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
 80055e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a40      	ldr	r2, [pc, #256]	; (80056f4 <TIM_Base_SetConfig+0x114>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d013      	beq.n	8005620 <TIM_Base_SetConfig+0x40>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055fe:	d00f      	beq.n	8005620 <TIM_Base_SetConfig+0x40>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a3d      	ldr	r2, [pc, #244]	; (80056f8 <TIM_Base_SetConfig+0x118>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d00b      	beq.n	8005620 <TIM_Base_SetConfig+0x40>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a3c      	ldr	r2, [pc, #240]	; (80056fc <TIM_Base_SetConfig+0x11c>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d007      	beq.n	8005620 <TIM_Base_SetConfig+0x40>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	4a3b      	ldr	r2, [pc, #236]	; (8005700 <TIM_Base_SetConfig+0x120>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d003      	beq.n	8005620 <TIM_Base_SetConfig+0x40>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4a3a      	ldr	r2, [pc, #232]	; (8005704 <TIM_Base_SetConfig+0x124>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d108      	bne.n	8005632 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005626:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	4313      	orrs	r3, r2
 8005630:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a2f      	ldr	r2, [pc, #188]	; (80056f4 <TIM_Base_SetConfig+0x114>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d01f      	beq.n	800567a <TIM_Base_SetConfig+0x9a>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005640:	d01b      	beq.n	800567a <TIM_Base_SetConfig+0x9a>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a2c      	ldr	r2, [pc, #176]	; (80056f8 <TIM_Base_SetConfig+0x118>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d017      	beq.n	800567a <TIM_Base_SetConfig+0x9a>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a2b      	ldr	r2, [pc, #172]	; (80056fc <TIM_Base_SetConfig+0x11c>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d013      	beq.n	800567a <TIM_Base_SetConfig+0x9a>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a2a      	ldr	r2, [pc, #168]	; (8005700 <TIM_Base_SetConfig+0x120>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d00f      	beq.n	800567a <TIM_Base_SetConfig+0x9a>
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	4a29      	ldr	r2, [pc, #164]	; (8005704 <TIM_Base_SetConfig+0x124>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d00b      	beq.n	800567a <TIM_Base_SetConfig+0x9a>
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	4a28      	ldr	r2, [pc, #160]	; (8005708 <TIM_Base_SetConfig+0x128>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d007      	beq.n	800567a <TIM_Base_SetConfig+0x9a>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	4a27      	ldr	r2, [pc, #156]	; (800570c <TIM_Base_SetConfig+0x12c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d003      	beq.n	800567a <TIM_Base_SetConfig+0x9a>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4a26      	ldr	r2, [pc, #152]	; (8005710 <TIM_Base_SetConfig+0x130>)
 8005676:	4293      	cmp	r3, r2
 8005678:	d108      	bne.n	800568c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005680:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	4313      	orrs	r3, r2
 8005698:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	68fa      	ldr	r2, [r7, #12]
 800569e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	689a      	ldr	r2, [r3, #8]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	4a10      	ldr	r2, [pc, #64]	; (80056f4 <TIM_Base_SetConfig+0x114>)
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d00f      	beq.n	80056d8 <TIM_Base_SetConfig+0xf8>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	4a12      	ldr	r2, [pc, #72]	; (8005704 <TIM_Base_SetConfig+0x124>)
 80056bc:	4293      	cmp	r3, r2
 80056be:	d00b      	beq.n	80056d8 <TIM_Base_SetConfig+0xf8>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	4a11      	ldr	r2, [pc, #68]	; (8005708 <TIM_Base_SetConfig+0x128>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d007      	beq.n	80056d8 <TIM_Base_SetConfig+0xf8>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	4a10      	ldr	r2, [pc, #64]	; (800570c <TIM_Base_SetConfig+0x12c>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d003      	beq.n	80056d8 <TIM_Base_SetConfig+0xf8>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4a0f      	ldr	r2, [pc, #60]	; (8005710 <TIM_Base_SetConfig+0x130>)
 80056d4:	4293      	cmp	r3, r2
 80056d6:	d103      	bne.n	80056e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2201      	movs	r2, #1
 80056e4:	615a      	str	r2, [r3, #20]
}
 80056e6:	bf00      	nop
 80056e8:	3714      	adds	r7, #20
 80056ea:	46bd      	mov	sp, r7
 80056ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	40010000 	.word	0x40010000
 80056f8:	40000400 	.word	0x40000400
 80056fc:	40000800 	.word	0x40000800
 8005700:	40000c00 	.word	0x40000c00
 8005704:	40010400 	.word	0x40010400
 8005708:	40014000 	.word	0x40014000
 800570c:	40014400 	.word	0x40014400
 8005710:	40014800 	.word	0x40014800

08005714 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6a1b      	ldr	r3, [r3, #32]
 8005724:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6a1b      	ldr	r3, [r3, #32]
 800572a:	f023 0201 	bic.w	r2, r3, #1
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	699b      	ldr	r3, [r3, #24]
 8005736:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800573e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800574a:	697b      	ldr	r3, [r7, #20]
 800574c:	f023 030a 	bic.w	r3, r3, #10
 8005750:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	4313      	orrs	r3, r2
 8005758:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	697a      	ldr	r2, [r7, #20]
 8005764:	621a      	str	r2, [r3, #32]
}
 8005766:	bf00      	nop
 8005768:	371c      	adds	r7, #28
 800576a:	46bd      	mov	sp, r7
 800576c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005770:	4770      	bx	lr

08005772 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005772:	b480      	push	{r7}
 8005774:	b087      	sub	sp, #28
 8005776:	af00      	add	r7, sp, #0
 8005778:	60f8      	str	r0, [r7, #12]
 800577a:	60b9      	str	r1, [r7, #8]
 800577c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	f023 0210 	bic.w	r2, r3, #16
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	699b      	ldr	r3, [r3, #24]
 800578e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6a1b      	ldr	r3, [r3, #32]
 8005794:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800579c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	4313      	orrs	r3, r2
 80057a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057a8:	693b      	ldr	r3, [r7, #16]
 80057aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80057ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	011b      	lsls	r3, r3, #4
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	697a      	ldr	r2, [r7, #20]
 80057be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	693a      	ldr	r2, [r7, #16]
 80057c4:	621a      	str	r2, [r3, #32]
}
 80057c6:	bf00      	nop
 80057c8:	371c      	adds	r7, #28
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr
	...

080057d4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b085      	sub	sp, #20
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	689b      	ldr	r3, [r3, #8]
 80057e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4b09      	ldr	r3, [pc, #36]	; (800580c <TIM_ITRx_SetConfig+0x38>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ec:	683a      	ldr	r2, [r7, #0]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	4313      	orrs	r3, r2
 80057f2:	f043 0307 	orr.w	r3, r3, #7
 80057f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	609a      	str	r2, [r3, #8]
}
 80057fe:	bf00      	nop
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr
 800580a:	bf00      	nop
 800580c:	ffcfff8f 	.word	0xffcfff8f

08005810 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005810:	b480      	push	{r7}
 8005812:	b087      	sub	sp, #28
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	607a      	str	r2, [r7, #4]
 800581c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800582a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	021a      	lsls	r2, r3, #8
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	431a      	orrs	r2, r3
 8005834:	68bb      	ldr	r3, [r7, #8]
 8005836:	4313      	orrs	r3, r2
 8005838:	697a      	ldr	r2, [r7, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	371c      	adds	r7, #28
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005850:	b480      	push	{r7}
 8005852:	b085      	sub	sp, #20
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
 8005858:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005860:	2b01      	cmp	r3, #1
 8005862:	d101      	bne.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005864:	2302      	movs	r3, #2
 8005866:	e06d      	b.n	8005944 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2201      	movs	r2, #1
 800586c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	2202      	movs	r2, #2
 8005874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	685b      	ldr	r3, [r3, #4]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a30      	ldr	r2, [pc, #192]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a2f      	ldr	r2, [pc, #188]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d108      	bne.n	80058ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a20      	ldr	r2, [pc, #128]	; (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d022      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058da:	d01d      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a1d      	ldr	r2, [pc, #116]	; (8005958 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d018      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a1c      	ldr	r2, [pc, #112]	; (800595c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d013      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a1a      	ldr	r2, [pc, #104]	; (8005960 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d00e      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4a15      	ldr	r2, [pc, #84]	; (8005954 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d009      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a16      	ldr	r2, [pc, #88]	; (8005964 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d004      	beq.n	8005918 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a15      	ldr	r2, [pc, #84]	; (8005968 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d10c      	bne.n	8005932 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800591e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	68ba      	ldr	r2, [r7, #8]
 8005926:	4313      	orrs	r3, r2
 8005928:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	68ba      	ldr	r2, [r7, #8]
 8005930:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	3714      	adds	r7, #20
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr
 8005950:	40010000 	.word	0x40010000
 8005954:	40010400 	.word	0x40010400
 8005958:	40000400 	.word	0x40000400
 800595c:	40000800 	.word	0x40000800
 8005960:	40000c00 	.word	0x40000c00
 8005964:	40001800 	.word	0x40001800
 8005968:	40014000 	.word	0x40014000

0800596c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80059a8:	b580      	push	{r7, lr}
 80059aa:	b082      	sub	sp, #8
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d101      	bne.n	80059ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e042      	b.n	8005a40 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d106      	bne.n	80059d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f003 f841 	bl	8008a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2224      	movs	r2, #36	; 0x24
 80059d6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f022 0201 	bic.w	r2, r2, #1
 80059e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f82c 	bl	8005a48 <UART_SetConfig>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d101      	bne.n	80059fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e022      	b.n	8005a40 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d002      	beq.n	8005a08 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 fd88 	bl	8006518 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	689a      	ldr	r2, [r3, #8]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f042 0201 	orr.w	r2, r2, #1
 8005a36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fe0f 	bl	800665c <UART_CheckIdleState>
 8005a3e:	4603      	mov	r3, r0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a4c:	b092      	sub	sp, #72	; 0x48
 8005a4e:	af00      	add	r7, sp, #0
 8005a50:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a52:	2300      	movs	r3, #0
 8005a54:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	689a      	ldr	r2, [r3, #8]
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	431a      	orrs	r2, r3
 8005a68:	697b      	ldr	r3, [r7, #20]
 8005a6a:	69db      	ldr	r3, [r3, #28]
 8005a6c:	4313      	orrs	r3, r2
 8005a6e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4bbe      	ldr	r3, [pc, #760]	; (8005d70 <UART_SetConfig+0x328>)
 8005a78:	4013      	ands	r3, r2
 8005a7a:	697a      	ldr	r2, [r7, #20]
 8005a7c:	6812      	ldr	r2, [r2, #0]
 8005a7e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a80:	430b      	orrs	r3, r1
 8005a82:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	68da      	ldr	r2, [r3, #12]
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	430a      	orrs	r2, r1
 8005a98:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005aa0:	697b      	ldr	r3, [r7, #20]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4ab3      	ldr	r2, [pc, #716]	; (8005d74 <UART_SetConfig+0x32c>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d004      	beq.n	8005ab4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005ab4:	697b      	ldr	r3, [r7, #20]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	689a      	ldr	r2, [r3, #8]
 8005aba:	4baf      	ldr	r3, [pc, #700]	; (8005d78 <UART_SetConfig+0x330>)
 8005abc:	4013      	ands	r3, r2
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	6812      	ldr	r2, [r2, #0]
 8005ac2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ac4:	430b      	orrs	r3, r1
 8005ac6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ace:	f023 010f 	bic.w	r1, r3, #15
 8005ad2:	697b      	ldr	r3, [r7, #20]
 8005ad4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	430a      	orrs	r2, r1
 8005adc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005ade:	697b      	ldr	r3, [r7, #20]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4aa6      	ldr	r2, [pc, #664]	; (8005d7c <UART_SetConfig+0x334>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d177      	bne.n	8005bd8 <UART_SetConfig+0x190>
 8005ae8:	4ba5      	ldr	r3, [pc, #660]	; (8005d80 <UART_SetConfig+0x338>)
 8005aea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aec:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005af0:	2b28      	cmp	r3, #40	; 0x28
 8005af2:	d86d      	bhi.n	8005bd0 <UART_SetConfig+0x188>
 8005af4:	a201      	add	r2, pc, #4	; (adr r2, 8005afc <UART_SetConfig+0xb4>)
 8005af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005afa:	bf00      	nop
 8005afc:	08005ba1 	.word	0x08005ba1
 8005b00:	08005bd1 	.word	0x08005bd1
 8005b04:	08005bd1 	.word	0x08005bd1
 8005b08:	08005bd1 	.word	0x08005bd1
 8005b0c:	08005bd1 	.word	0x08005bd1
 8005b10:	08005bd1 	.word	0x08005bd1
 8005b14:	08005bd1 	.word	0x08005bd1
 8005b18:	08005bd1 	.word	0x08005bd1
 8005b1c:	08005ba9 	.word	0x08005ba9
 8005b20:	08005bd1 	.word	0x08005bd1
 8005b24:	08005bd1 	.word	0x08005bd1
 8005b28:	08005bd1 	.word	0x08005bd1
 8005b2c:	08005bd1 	.word	0x08005bd1
 8005b30:	08005bd1 	.word	0x08005bd1
 8005b34:	08005bd1 	.word	0x08005bd1
 8005b38:	08005bd1 	.word	0x08005bd1
 8005b3c:	08005bb1 	.word	0x08005bb1
 8005b40:	08005bd1 	.word	0x08005bd1
 8005b44:	08005bd1 	.word	0x08005bd1
 8005b48:	08005bd1 	.word	0x08005bd1
 8005b4c:	08005bd1 	.word	0x08005bd1
 8005b50:	08005bd1 	.word	0x08005bd1
 8005b54:	08005bd1 	.word	0x08005bd1
 8005b58:	08005bd1 	.word	0x08005bd1
 8005b5c:	08005bb9 	.word	0x08005bb9
 8005b60:	08005bd1 	.word	0x08005bd1
 8005b64:	08005bd1 	.word	0x08005bd1
 8005b68:	08005bd1 	.word	0x08005bd1
 8005b6c:	08005bd1 	.word	0x08005bd1
 8005b70:	08005bd1 	.word	0x08005bd1
 8005b74:	08005bd1 	.word	0x08005bd1
 8005b78:	08005bd1 	.word	0x08005bd1
 8005b7c:	08005bc1 	.word	0x08005bc1
 8005b80:	08005bd1 	.word	0x08005bd1
 8005b84:	08005bd1 	.word	0x08005bd1
 8005b88:	08005bd1 	.word	0x08005bd1
 8005b8c:	08005bd1 	.word	0x08005bd1
 8005b90:	08005bd1 	.word	0x08005bd1
 8005b94:	08005bd1 	.word	0x08005bd1
 8005b98:	08005bd1 	.word	0x08005bd1
 8005b9c:	08005bc9 	.word	0x08005bc9
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba6:	e222      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005ba8:	2304      	movs	r3, #4
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bae:	e21e      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005bb0:	2308      	movs	r3, #8
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bb6:	e21a      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bbe:	e216      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005bc0:	2320      	movs	r3, #32
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bc6:	e212      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005bc8:	2340      	movs	r3, #64	; 0x40
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bce:	e20e      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005bd0:	2380      	movs	r3, #128	; 0x80
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bd6:	e20a      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a69      	ldr	r2, [pc, #420]	; (8005d84 <UART_SetConfig+0x33c>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d130      	bne.n	8005c44 <UART_SetConfig+0x1fc>
 8005be2:	4b67      	ldr	r3, [pc, #412]	; (8005d80 <UART_SetConfig+0x338>)
 8005be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be6:	f003 0307 	and.w	r3, r3, #7
 8005bea:	2b05      	cmp	r3, #5
 8005bec:	d826      	bhi.n	8005c3c <UART_SetConfig+0x1f4>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <UART_SetConfig+0x1ac>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c0d 	.word	0x08005c0d
 8005bf8:	08005c15 	.word	0x08005c15
 8005bfc:	08005c1d 	.word	0x08005c1d
 8005c00:	08005c25 	.word	0x08005c25
 8005c04:	08005c2d 	.word	0x08005c2d
 8005c08:	08005c35 	.word	0x08005c35
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c12:	e1ec      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c14:	2304      	movs	r3, #4
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c1a:	e1e8      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c1c:	2308      	movs	r3, #8
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c22:	e1e4      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c24:	2310      	movs	r3, #16
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c2a:	e1e0      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c2c:	2320      	movs	r3, #32
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c32:	e1dc      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c34:	2340      	movs	r3, #64	; 0x40
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c3a:	e1d8      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c3c:	2380      	movs	r3, #128	; 0x80
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c42:	e1d4      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c44:	697b      	ldr	r3, [r7, #20]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a4f      	ldr	r2, [pc, #316]	; (8005d88 <UART_SetConfig+0x340>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d130      	bne.n	8005cb0 <UART_SetConfig+0x268>
 8005c4e:	4b4c      	ldr	r3, [pc, #304]	; (8005d80 <UART_SetConfig+0x338>)
 8005c50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c52:	f003 0307 	and.w	r3, r3, #7
 8005c56:	2b05      	cmp	r3, #5
 8005c58:	d826      	bhi.n	8005ca8 <UART_SetConfig+0x260>
 8005c5a:	a201      	add	r2, pc, #4	; (adr r2, 8005c60 <UART_SetConfig+0x218>)
 8005c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c60:	08005c79 	.word	0x08005c79
 8005c64:	08005c81 	.word	0x08005c81
 8005c68:	08005c89 	.word	0x08005c89
 8005c6c:	08005c91 	.word	0x08005c91
 8005c70:	08005c99 	.word	0x08005c99
 8005c74:	08005ca1 	.word	0x08005ca1
 8005c78:	2300      	movs	r3, #0
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7e:	e1b6      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c80:	2304      	movs	r3, #4
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c86:	e1b2      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c88:	2308      	movs	r3, #8
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c8e:	e1ae      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c90:	2310      	movs	r3, #16
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c96:	e1aa      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005c98:	2320      	movs	r3, #32
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c9e:	e1a6      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005ca0:	2340      	movs	r3, #64	; 0x40
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ca6:	e1a2      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005ca8:	2380      	movs	r3, #128	; 0x80
 8005caa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cae:	e19e      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4a35      	ldr	r2, [pc, #212]	; (8005d8c <UART_SetConfig+0x344>)
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d130      	bne.n	8005d1c <UART_SetConfig+0x2d4>
 8005cba:	4b31      	ldr	r3, [pc, #196]	; (8005d80 <UART_SetConfig+0x338>)
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f003 0307 	and.w	r3, r3, #7
 8005cc2:	2b05      	cmp	r3, #5
 8005cc4:	d826      	bhi.n	8005d14 <UART_SetConfig+0x2cc>
 8005cc6:	a201      	add	r2, pc, #4	; (adr r2, 8005ccc <UART_SetConfig+0x284>)
 8005cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ccc:	08005ce5 	.word	0x08005ce5
 8005cd0:	08005ced 	.word	0x08005ced
 8005cd4:	08005cf5 	.word	0x08005cf5
 8005cd8:	08005cfd 	.word	0x08005cfd
 8005cdc:	08005d05 	.word	0x08005d05
 8005ce0:	08005d0d 	.word	0x08005d0d
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cea:	e180      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005cec:	2304      	movs	r3, #4
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cf2:	e17c      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005cf4:	2308      	movs	r3, #8
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cfa:	e178      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005cfc:	2310      	movs	r3, #16
 8005cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d02:	e174      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005d04:	2320      	movs	r3, #32
 8005d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d0a:	e170      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005d0c:	2340      	movs	r3, #64	; 0x40
 8005d0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d12:	e16c      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005d14:	2380      	movs	r3, #128	; 0x80
 8005d16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d1a:	e168      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1b      	ldr	r2, [pc, #108]	; (8005d90 <UART_SetConfig+0x348>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d142      	bne.n	8005dac <UART_SetConfig+0x364>
 8005d26:	4b16      	ldr	r3, [pc, #88]	; (8005d80 <UART_SetConfig+0x338>)
 8005d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2a:	f003 0307 	and.w	r3, r3, #7
 8005d2e:	2b05      	cmp	r3, #5
 8005d30:	d838      	bhi.n	8005da4 <UART_SetConfig+0x35c>
 8005d32:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <UART_SetConfig+0x2f0>)
 8005d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d38:	08005d51 	.word	0x08005d51
 8005d3c:	08005d59 	.word	0x08005d59
 8005d40:	08005d61 	.word	0x08005d61
 8005d44:	08005d69 	.word	0x08005d69
 8005d48:	08005d95 	.word	0x08005d95
 8005d4c:	08005d9d 	.word	0x08005d9d
 8005d50:	2300      	movs	r3, #0
 8005d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d56:	e14a      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d5e:	e146      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005d60:	2308      	movs	r3, #8
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d66:	e142      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e13e      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005d70:	cfff69f3 	.word	0xcfff69f3
 8005d74:	58000c00 	.word	0x58000c00
 8005d78:	11fff4ff 	.word	0x11fff4ff
 8005d7c:	40011000 	.word	0x40011000
 8005d80:	58024400 	.word	0x58024400
 8005d84:	40004400 	.word	0x40004400
 8005d88:	40004800 	.word	0x40004800
 8005d8c:	40004c00 	.word	0x40004c00
 8005d90:	40005000 	.word	0x40005000
 8005d94:	2320      	movs	r3, #32
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d9a:	e128      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005d9c:	2340      	movs	r3, #64	; 0x40
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005da2:	e124      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005da4:	2380      	movs	r3, #128	; 0x80
 8005da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005daa:	e120      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4acb      	ldr	r2, [pc, #812]	; (80060e0 <UART_SetConfig+0x698>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d176      	bne.n	8005ea4 <UART_SetConfig+0x45c>
 8005db6:	4bcb      	ldr	r3, [pc, #812]	; (80060e4 <UART_SetConfig+0x69c>)
 8005db8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005dbe:	2b28      	cmp	r3, #40	; 0x28
 8005dc0:	d86c      	bhi.n	8005e9c <UART_SetConfig+0x454>
 8005dc2:	a201      	add	r2, pc, #4	; (adr r2, 8005dc8 <UART_SetConfig+0x380>)
 8005dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc8:	08005e6d 	.word	0x08005e6d
 8005dcc:	08005e9d 	.word	0x08005e9d
 8005dd0:	08005e9d 	.word	0x08005e9d
 8005dd4:	08005e9d 	.word	0x08005e9d
 8005dd8:	08005e9d 	.word	0x08005e9d
 8005ddc:	08005e9d 	.word	0x08005e9d
 8005de0:	08005e9d 	.word	0x08005e9d
 8005de4:	08005e9d 	.word	0x08005e9d
 8005de8:	08005e75 	.word	0x08005e75
 8005dec:	08005e9d 	.word	0x08005e9d
 8005df0:	08005e9d 	.word	0x08005e9d
 8005df4:	08005e9d 	.word	0x08005e9d
 8005df8:	08005e9d 	.word	0x08005e9d
 8005dfc:	08005e9d 	.word	0x08005e9d
 8005e00:	08005e9d 	.word	0x08005e9d
 8005e04:	08005e9d 	.word	0x08005e9d
 8005e08:	08005e7d 	.word	0x08005e7d
 8005e0c:	08005e9d 	.word	0x08005e9d
 8005e10:	08005e9d 	.word	0x08005e9d
 8005e14:	08005e9d 	.word	0x08005e9d
 8005e18:	08005e9d 	.word	0x08005e9d
 8005e1c:	08005e9d 	.word	0x08005e9d
 8005e20:	08005e9d 	.word	0x08005e9d
 8005e24:	08005e9d 	.word	0x08005e9d
 8005e28:	08005e85 	.word	0x08005e85
 8005e2c:	08005e9d 	.word	0x08005e9d
 8005e30:	08005e9d 	.word	0x08005e9d
 8005e34:	08005e9d 	.word	0x08005e9d
 8005e38:	08005e9d 	.word	0x08005e9d
 8005e3c:	08005e9d 	.word	0x08005e9d
 8005e40:	08005e9d 	.word	0x08005e9d
 8005e44:	08005e9d 	.word	0x08005e9d
 8005e48:	08005e8d 	.word	0x08005e8d
 8005e4c:	08005e9d 	.word	0x08005e9d
 8005e50:	08005e9d 	.word	0x08005e9d
 8005e54:	08005e9d 	.word	0x08005e9d
 8005e58:	08005e9d 	.word	0x08005e9d
 8005e5c:	08005e9d 	.word	0x08005e9d
 8005e60:	08005e9d 	.word	0x08005e9d
 8005e64:	08005e9d 	.word	0x08005e9d
 8005e68:	08005e95 	.word	0x08005e95
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e72:	e0bc      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005e74:	2304      	movs	r3, #4
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e7a:	e0b8      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005e7c:	2308      	movs	r3, #8
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e82:	e0b4      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005e84:	2310      	movs	r3, #16
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e8a:	e0b0      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005e8c:	2320      	movs	r3, #32
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e92:	e0ac      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005e94:	2340      	movs	r3, #64	; 0x40
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e9a:	e0a8      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ea2:	e0a4      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a8f      	ldr	r2, [pc, #572]	; (80060e8 <UART_SetConfig+0x6a0>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d130      	bne.n	8005f10 <UART_SetConfig+0x4c8>
 8005eae:	4b8d      	ldr	r3, [pc, #564]	; (80060e4 <UART_SetConfig+0x69c>)
 8005eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eb2:	f003 0307 	and.w	r3, r3, #7
 8005eb6:	2b05      	cmp	r3, #5
 8005eb8:	d826      	bhi.n	8005f08 <UART_SetConfig+0x4c0>
 8005eba:	a201      	add	r2, pc, #4	; (adr r2, 8005ec0 <UART_SetConfig+0x478>)
 8005ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec0:	08005ed9 	.word	0x08005ed9
 8005ec4:	08005ee1 	.word	0x08005ee1
 8005ec8:	08005ee9 	.word	0x08005ee9
 8005ecc:	08005ef1 	.word	0x08005ef1
 8005ed0:	08005ef9 	.word	0x08005ef9
 8005ed4:	08005f01 	.word	0x08005f01
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ede:	e086      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005ee0:	2304      	movs	r3, #4
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ee6:	e082      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005ee8:	2308      	movs	r3, #8
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eee:	e07e      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005ef0:	2310      	movs	r3, #16
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ef6:	e07a      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005ef8:	2320      	movs	r3, #32
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005efe:	e076      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005f00:	2340      	movs	r3, #64	; 0x40
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f06:	e072      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005f08:	2380      	movs	r3, #128	; 0x80
 8005f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f0e:	e06e      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005f10:	697b      	ldr	r3, [r7, #20]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a75      	ldr	r2, [pc, #468]	; (80060ec <UART_SetConfig+0x6a4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d130      	bne.n	8005f7c <UART_SetConfig+0x534>
 8005f1a:	4b72      	ldr	r3, [pc, #456]	; (80060e4 <UART_SetConfig+0x69c>)
 8005f1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f1e:	f003 0307 	and.w	r3, r3, #7
 8005f22:	2b05      	cmp	r3, #5
 8005f24:	d826      	bhi.n	8005f74 <UART_SetConfig+0x52c>
 8005f26:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <UART_SetConfig+0x4e4>)
 8005f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2c:	08005f45 	.word	0x08005f45
 8005f30:	08005f4d 	.word	0x08005f4d
 8005f34:	08005f55 	.word	0x08005f55
 8005f38:	08005f5d 	.word	0x08005f5d
 8005f3c:	08005f65 	.word	0x08005f65
 8005f40:	08005f6d 	.word	0x08005f6d
 8005f44:	2300      	movs	r3, #0
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f4a:	e050      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005f4c:	2304      	movs	r3, #4
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f52:	e04c      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005f54:	2308      	movs	r3, #8
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f5a:	e048      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005f5c:	2310      	movs	r3, #16
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f62:	e044      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005f64:	2320      	movs	r3, #32
 8005f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f6a:	e040      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005f6c:	2340      	movs	r3, #64	; 0x40
 8005f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f72:	e03c      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005f74:	2380      	movs	r3, #128	; 0x80
 8005f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f7a:	e038      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a5b      	ldr	r2, [pc, #364]	; (80060f0 <UART_SetConfig+0x6a8>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d130      	bne.n	8005fe8 <UART_SetConfig+0x5a0>
 8005f86:	4b57      	ldr	r3, [pc, #348]	; (80060e4 <UART_SetConfig+0x69c>)
 8005f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	2b05      	cmp	r3, #5
 8005f90:	d826      	bhi.n	8005fe0 <UART_SetConfig+0x598>
 8005f92:	a201      	add	r2, pc, #4	; (adr r2, 8005f98 <UART_SetConfig+0x550>)
 8005f94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f98:	08005fb1 	.word	0x08005fb1
 8005f9c:	08005fb9 	.word	0x08005fb9
 8005fa0:	08005fc1 	.word	0x08005fc1
 8005fa4:	08005fc9 	.word	0x08005fc9
 8005fa8:	08005fd1 	.word	0x08005fd1
 8005fac:	08005fd9 	.word	0x08005fd9
 8005fb0:	2302      	movs	r3, #2
 8005fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb6:	e01a      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005fb8:	2304      	movs	r3, #4
 8005fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fbe:	e016      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fc6:	e012      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fce:	e00e      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005fd0:	2320      	movs	r3, #32
 8005fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fd6:	e00a      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005fd8:	2340      	movs	r3, #64	; 0x40
 8005fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fde:	e006      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005fe0:	2380      	movs	r3, #128	; 0x80
 8005fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fe6:	e002      	b.n	8005fee <UART_SetConfig+0x5a6>
 8005fe8:	2380      	movs	r3, #128	; 0x80
 8005fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a3f      	ldr	r2, [pc, #252]	; (80060f0 <UART_SetConfig+0x6a8>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	f040 80f8 	bne.w	80061ea <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005ffa:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005ffe:	2b20      	cmp	r3, #32
 8006000:	dc46      	bgt.n	8006090 <UART_SetConfig+0x648>
 8006002:	2b02      	cmp	r3, #2
 8006004:	f2c0 8082 	blt.w	800610c <UART_SetConfig+0x6c4>
 8006008:	3b02      	subs	r3, #2
 800600a:	2b1e      	cmp	r3, #30
 800600c:	d87e      	bhi.n	800610c <UART_SetConfig+0x6c4>
 800600e:	a201      	add	r2, pc, #4	; (adr r2, 8006014 <UART_SetConfig+0x5cc>)
 8006010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006014:	08006097 	.word	0x08006097
 8006018:	0800610d 	.word	0x0800610d
 800601c:	0800609f 	.word	0x0800609f
 8006020:	0800610d 	.word	0x0800610d
 8006024:	0800610d 	.word	0x0800610d
 8006028:	0800610d 	.word	0x0800610d
 800602c:	080060af 	.word	0x080060af
 8006030:	0800610d 	.word	0x0800610d
 8006034:	0800610d 	.word	0x0800610d
 8006038:	0800610d 	.word	0x0800610d
 800603c:	0800610d 	.word	0x0800610d
 8006040:	0800610d 	.word	0x0800610d
 8006044:	0800610d 	.word	0x0800610d
 8006048:	0800610d 	.word	0x0800610d
 800604c:	080060bf 	.word	0x080060bf
 8006050:	0800610d 	.word	0x0800610d
 8006054:	0800610d 	.word	0x0800610d
 8006058:	0800610d 	.word	0x0800610d
 800605c:	0800610d 	.word	0x0800610d
 8006060:	0800610d 	.word	0x0800610d
 8006064:	0800610d 	.word	0x0800610d
 8006068:	0800610d 	.word	0x0800610d
 800606c:	0800610d 	.word	0x0800610d
 8006070:	0800610d 	.word	0x0800610d
 8006074:	0800610d 	.word	0x0800610d
 8006078:	0800610d 	.word	0x0800610d
 800607c:	0800610d 	.word	0x0800610d
 8006080:	0800610d 	.word	0x0800610d
 8006084:	0800610d 	.word	0x0800610d
 8006088:	0800610d 	.word	0x0800610d
 800608c:	080060ff 	.word	0x080060ff
 8006090:	2b40      	cmp	r3, #64	; 0x40
 8006092:	d037      	beq.n	8006104 <UART_SetConfig+0x6bc>
 8006094:	e03a      	b.n	800610c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006096:	f7fe f9c3 	bl	8004420 <HAL_RCCEx_GetD3PCLK1Freq>
 800609a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800609c:	e03c      	b.n	8006118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800609e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fe f9d2 	bl	800444c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060ac:	e034      	b.n	8006118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80060ae:	f107 0318 	add.w	r3, r7, #24
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fb1e 	bl	80046f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060bc:	e02c      	b.n	8006118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80060be:	4b09      	ldr	r3, [pc, #36]	; (80060e4 <UART_SetConfig+0x69c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	f003 0320 	and.w	r3, r3, #32
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d016      	beq.n	80060f8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80060ca:	4b06      	ldr	r3, [pc, #24]	; (80060e4 <UART_SetConfig+0x69c>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	08db      	lsrs	r3, r3, #3
 80060d0:	f003 0303 	and.w	r3, r3, #3
 80060d4:	4a07      	ldr	r2, [pc, #28]	; (80060f4 <UART_SetConfig+0x6ac>)
 80060d6:	fa22 f303 	lsr.w	r3, r2, r3
 80060da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060dc:	e01c      	b.n	8006118 <UART_SetConfig+0x6d0>
 80060de:	bf00      	nop
 80060e0:	40011400 	.word	0x40011400
 80060e4:	58024400 	.word	0x58024400
 80060e8:	40007800 	.word	0x40007800
 80060ec:	40007c00 	.word	0x40007c00
 80060f0:	58000c00 	.word	0x58000c00
 80060f4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80060f8:	4b9d      	ldr	r3, [pc, #628]	; (8006370 <UART_SetConfig+0x928>)
 80060fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060fc:	e00c      	b.n	8006118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060fe:	4b9d      	ldr	r3, [pc, #628]	; (8006374 <UART_SetConfig+0x92c>)
 8006100:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006102:	e009      	b.n	8006118 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006104:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006108:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800610a:	e005      	b.n	8006118 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800610c:	2300      	movs	r3, #0
 800610e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006110:	2301      	movs	r3, #1
 8006112:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006116:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 81de 	beq.w	80064dc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006120:	697b      	ldr	r3, [r7, #20]
 8006122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006124:	4a94      	ldr	r2, [pc, #592]	; (8006378 <UART_SetConfig+0x930>)
 8006126:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800612a:	461a      	mov	r2, r3
 800612c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006132:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	685a      	ldr	r2, [r3, #4]
 8006138:	4613      	mov	r3, r2
 800613a:	005b      	lsls	r3, r3, #1
 800613c:	4413      	add	r3, r2
 800613e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006140:	429a      	cmp	r2, r3
 8006142:	d305      	bcc.n	8006150 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800614a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614c:	429a      	cmp	r2, r3
 800614e:	d903      	bls.n	8006158 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006156:	e1c1      	b.n	80064dc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615a:	2200      	movs	r2, #0
 800615c:	60bb      	str	r3, [r7, #8]
 800615e:	60fa      	str	r2, [r7, #12]
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006164:	4a84      	ldr	r2, [pc, #528]	; (8006378 <UART_SetConfig+0x930>)
 8006166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800616a:	b29b      	uxth	r3, r3
 800616c:	2200      	movs	r2, #0
 800616e:	603b      	str	r3, [r7, #0]
 8006170:	607a      	str	r2, [r7, #4]
 8006172:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006176:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800617a:	f7fa fb77 	bl	800086c <__aeabi_uldivmod>
 800617e:	4602      	mov	r2, r0
 8006180:	460b      	mov	r3, r1
 8006182:	4610      	mov	r0, r2
 8006184:	4619      	mov	r1, r3
 8006186:	f04f 0200 	mov.w	r2, #0
 800618a:	f04f 0300 	mov.w	r3, #0
 800618e:	020b      	lsls	r3, r1, #8
 8006190:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006194:	0202      	lsls	r2, r0, #8
 8006196:	6979      	ldr	r1, [r7, #20]
 8006198:	6849      	ldr	r1, [r1, #4]
 800619a:	0849      	lsrs	r1, r1, #1
 800619c:	2000      	movs	r0, #0
 800619e:	460c      	mov	r4, r1
 80061a0:	4605      	mov	r5, r0
 80061a2:	eb12 0804 	adds.w	r8, r2, r4
 80061a6:	eb43 0905 	adc.w	r9, r3, r5
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	469a      	mov	sl, r3
 80061b2:	4693      	mov	fp, r2
 80061b4:	4652      	mov	r2, sl
 80061b6:	465b      	mov	r3, fp
 80061b8:	4640      	mov	r0, r8
 80061ba:	4649      	mov	r1, r9
 80061bc:	f7fa fb56 	bl	800086c <__aeabi_uldivmod>
 80061c0:	4602      	mov	r2, r0
 80061c2:	460b      	mov	r3, r1
 80061c4:	4613      	mov	r3, r2
 80061c6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80061c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061ce:	d308      	bcc.n	80061e2 <UART_SetConfig+0x79a>
 80061d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061d6:	d204      	bcs.n	80061e2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061de:	60da      	str	r2, [r3, #12]
 80061e0:	e17c      	b.n	80064dc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061e8:	e178      	b.n	80064dc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	69db      	ldr	r3, [r3, #28]
 80061ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061f2:	f040 80c5 	bne.w	8006380 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80061f6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	dc48      	bgt.n	8006290 <UART_SetConfig+0x848>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	db7b      	blt.n	80062fa <UART_SetConfig+0x8b2>
 8006202:	2b20      	cmp	r3, #32
 8006204:	d879      	bhi.n	80062fa <UART_SetConfig+0x8b2>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <UART_SetConfig+0x7c4>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006297 	.word	0x08006297
 8006210:	0800629f 	.word	0x0800629f
 8006214:	080062fb 	.word	0x080062fb
 8006218:	080062fb 	.word	0x080062fb
 800621c:	080062a7 	.word	0x080062a7
 8006220:	080062fb 	.word	0x080062fb
 8006224:	080062fb 	.word	0x080062fb
 8006228:	080062fb 	.word	0x080062fb
 800622c:	080062b7 	.word	0x080062b7
 8006230:	080062fb 	.word	0x080062fb
 8006234:	080062fb 	.word	0x080062fb
 8006238:	080062fb 	.word	0x080062fb
 800623c:	080062fb 	.word	0x080062fb
 8006240:	080062fb 	.word	0x080062fb
 8006244:	080062fb 	.word	0x080062fb
 8006248:	080062fb 	.word	0x080062fb
 800624c:	080062c7 	.word	0x080062c7
 8006250:	080062fb 	.word	0x080062fb
 8006254:	080062fb 	.word	0x080062fb
 8006258:	080062fb 	.word	0x080062fb
 800625c:	080062fb 	.word	0x080062fb
 8006260:	080062fb 	.word	0x080062fb
 8006264:	080062fb 	.word	0x080062fb
 8006268:	080062fb 	.word	0x080062fb
 800626c:	080062fb 	.word	0x080062fb
 8006270:	080062fb 	.word	0x080062fb
 8006274:	080062fb 	.word	0x080062fb
 8006278:	080062fb 	.word	0x080062fb
 800627c:	080062fb 	.word	0x080062fb
 8006280:	080062fb 	.word	0x080062fb
 8006284:	080062fb 	.word	0x080062fb
 8006288:	080062fb 	.word	0x080062fb
 800628c:	080062ed 	.word	0x080062ed
 8006290:	2b40      	cmp	r3, #64	; 0x40
 8006292:	d02e      	beq.n	80062f2 <UART_SetConfig+0x8aa>
 8006294:	e031      	b.n	80062fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006296:	f7fc fe8d 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 800629a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800629c:	e033      	b.n	8006306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800629e:	f7fc fe9f 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 80062a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80062a4:	e02f      	b.n	8006306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80062a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe f8ce 	bl	800444c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80062b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062b4:	e027      	b.n	8006306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80062b6:	f107 0318 	add.w	r3, r7, #24
 80062ba:	4618      	mov	r0, r3
 80062bc:	f7fe fa1a 	bl	80046f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062c4:	e01f      	b.n	8006306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062c6:	4b2d      	ldr	r3, [pc, #180]	; (800637c <UART_SetConfig+0x934>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f003 0320 	and.w	r3, r3, #32
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d009      	beq.n	80062e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80062d2:	4b2a      	ldr	r3, [pc, #168]	; (800637c <UART_SetConfig+0x934>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	08db      	lsrs	r3, r3, #3
 80062d8:	f003 0303 	and.w	r3, r3, #3
 80062dc:	4a24      	ldr	r2, [pc, #144]	; (8006370 <UART_SetConfig+0x928>)
 80062de:	fa22 f303 	lsr.w	r3, r2, r3
 80062e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062e4:	e00f      	b.n	8006306 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80062e6:	4b22      	ldr	r3, [pc, #136]	; (8006370 <UART_SetConfig+0x928>)
 80062e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062ea:	e00c      	b.n	8006306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062ec:	4b21      	ldr	r3, [pc, #132]	; (8006374 <UART_SetConfig+0x92c>)
 80062ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062f0:	e009      	b.n	8006306 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062f8:	e005      	b.n	8006306 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80062fa:	2300      	movs	r3, #0
 80062fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006306:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 80e7 	beq.w	80064dc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	4a19      	ldr	r2, [pc, #100]	; (8006378 <UART_SetConfig+0x930>)
 8006314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006318:	461a      	mov	r2, r3
 800631a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800631c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006320:	005a      	lsls	r2, r3, #1
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	685b      	ldr	r3, [r3, #4]
 8006326:	085b      	lsrs	r3, r3, #1
 8006328:	441a      	add	r2, r3
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006332:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006336:	2b0f      	cmp	r3, #15
 8006338:	d916      	bls.n	8006368 <UART_SetConfig+0x920>
 800633a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800633c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006340:	d212      	bcs.n	8006368 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006344:	b29b      	uxth	r3, r3
 8006346:	f023 030f 	bic.w	r3, r3, #15
 800634a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800634c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800634e:	085b      	lsrs	r3, r3, #1
 8006350:	b29b      	uxth	r3, r3
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	b29a      	uxth	r2, r3
 8006358:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800635a:	4313      	orrs	r3, r2
 800635c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006364:	60da      	str	r2, [r3, #12]
 8006366:	e0b9      	b.n	80064dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800636e:	e0b5      	b.n	80064dc <UART_SetConfig+0xa94>
 8006370:	03d09000 	.word	0x03d09000
 8006374:	003d0900 	.word	0x003d0900
 8006378:	080099cc 	.word	0x080099cc
 800637c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8006380:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006384:	2b20      	cmp	r3, #32
 8006386:	dc49      	bgt.n	800641c <UART_SetConfig+0x9d4>
 8006388:	2b00      	cmp	r3, #0
 800638a:	db7c      	blt.n	8006486 <UART_SetConfig+0xa3e>
 800638c:	2b20      	cmp	r3, #32
 800638e:	d87a      	bhi.n	8006486 <UART_SetConfig+0xa3e>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <UART_SetConfig+0x950>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	08006423 	.word	0x08006423
 800639c:	0800642b 	.word	0x0800642b
 80063a0:	08006487 	.word	0x08006487
 80063a4:	08006487 	.word	0x08006487
 80063a8:	08006433 	.word	0x08006433
 80063ac:	08006487 	.word	0x08006487
 80063b0:	08006487 	.word	0x08006487
 80063b4:	08006487 	.word	0x08006487
 80063b8:	08006443 	.word	0x08006443
 80063bc:	08006487 	.word	0x08006487
 80063c0:	08006487 	.word	0x08006487
 80063c4:	08006487 	.word	0x08006487
 80063c8:	08006487 	.word	0x08006487
 80063cc:	08006487 	.word	0x08006487
 80063d0:	08006487 	.word	0x08006487
 80063d4:	08006487 	.word	0x08006487
 80063d8:	08006453 	.word	0x08006453
 80063dc:	08006487 	.word	0x08006487
 80063e0:	08006487 	.word	0x08006487
 80063e4:	08006487 	.word	0x08006487
 80063e8:	08006487 	.word	0x08006487
 80063ec:	08006487 	.word	0x08006487
 80063f0:	08006487 	.word	0x08006487
 80063f4:	08006487 	.word	0x08006487
 80063f8:	08006487 	.word	0x08006487
 80063fc:	08006487 	.word	0x08006487
 8006400:	08006487 	.word	0x08006487
 8006404:	08006487 	.word	0x08006487
 8006408:	08006487 	.word	0x08006487
 800640c:	08006487 	.word	0x08006487
 8006410:	08006487 	.word	0x08006487
 8006414:	08006487 	.word	0x08006487
 8006418:	08006479 	.word	0x08006479
 800641c:	2b40      	cmp	r3, #64	; 0x40
 800641e:	d02e      	beq.n	800647e <UART_SetConfig+0xa36>
 8006420:	e031      	b.n	8006486 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006422:	f7fc fdc7 	bl	8002fb4 <HAL_RCC_GetPCLK1Freq>
 8006426:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006428:	e033      	b.n	8006492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800642a:	f7fc fdd9 	bl	8002fe0 <HAL_RCC_GetPCLK2Freq>
 800642e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006430:	e02f      	b.n	8006492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006436:	4618      	mov	r0, r3
 8006438:	f7fe f808 	bl	800444c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006440:	e027      	b.n	8006492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006442:	f107 0318 	add.w	r3, r7, #24
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe f954 	bl	80046f4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006450:	e01f      	b.n	8006492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006452:	4b2d      	ldr	r3, [pc, #180]	; (8006508 <UART_SetConfig+0xac0>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d009      	beq.n	8006472 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800645e:	4b2a      	ldr	r3, [pc, #168]	; (8006508 <UART_SetConfig+0xac0>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	08db      	lsrs	r3, r3, #3
 8006464:	f003 0303 	and.w	r3, r3, #3
 8006468:	4a28      	ldr	r2, [pc, #160]	; (800650c <UART_SetConfig+0xac4>)
 800646a:	fa22 f303 	lsr.w	r3, r2, r3
 800646e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006470:	e00f      	b.n	8006492 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8006472:	4b26      	ldr	r3, [pc, #152]	; (800650c <UART_SetConfig+0xac4>)
 8006474:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006476:	e00c      	b.n	8006492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006478:	4b25      	ldr	r3, [pc, #148]	; (8006510 <UART_SetConfig+0xac8>)
 800647a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800647c:	e009      	b.n	8006492 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800647e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006484:	e005      	b.n	8006492 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006486:	2300      	movs	r3, #0
 8006488:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8006490:	bf00      	nop
    }

    if (pclk != 0U)
 8006492:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006494:	2b00      	cmp	r3, #0
 8006496:	d021      	beq.n	80064dc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	4a1d      	ldr	r2, [pc, #116]	; (8006514 <UART_SetConfig+0xacc>)
 800649e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064a2:	461a      	mov	r2, r3
 80064a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064a6:	fbb3 f2f2 	udiv	r2, r3, r2
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	685b      	ldr	r3, [r3, #4]
 80064ae:	085b      	lsrs	r3, r3, #1
 80064b0:	441a      	add	r2, r3
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ba:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064be:	2b0f      	cmp	r3, #15
 80064c0:	d909      	bls.n	80064d6 <UART_SetConfig+0xa8e>
 80064c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064c8:	d205      	bcs.n	80064d6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064cc:	b29a      	uxth	r2, r3
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	60da      	str	r2, [r3, #12]
 80064d4:	e002      	b.n	80064dc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	2201      	movs	r2, #1
 80064e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2200      	movs	r2, #0
 80064f0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	2200      	movs	r2, #0
 80064f6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80064f8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3748      	adds	r7, #72	; 0x48
 8006500:	46bd      	mov	sp, r7
 8006502:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006506:	bf00      	nop
 8006508:	58024400 	.word	0x58024400
 800650c:	03d09000 	.word	0x03d09000
 8006510:	003d0900 	.word	0x003d0900
 8006514:	080099cc 	.word	0x080099cc

08006518 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006518:	b480      	push	{r7}
 800651a:	b083      	sub	sp, #12
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006524:	f003 0301 	and.w	r3, r3, #1
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00a      	beq.n	8006542 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006546:	f003 0302 	and.w	r3, r3, #2
 800654a:	2b00      	cmp	r3, #0
 800654c:	d00a      	beq.n	8006564 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	685b      	ldr	r3, [r3, #4]
 8006554:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	430a      	orrs	r2, r1
 8006562:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006568:	f003 0304 	and.w	r3, r3, #4
 800656c:	2b00      	cmp	r3, #0
 800656e:	d00a      	beq.n	8006586 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	685b      	ldr	r3, [r3, #4]
 8006576:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	430a      	orrs	r2, r1
 8006584:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800658a:	f003 0308 	and.w	r3, r3, #8
 800658e:	2b00      	cmp	r3, #0
 8006590:	d00a      	beq.n	80065a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	685b      	ldr	r3, [r3, #4]
 8006598:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	430a      	orrs	r2, r1
 80065a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ac:	f003 0310 	and.w	r3, r3, #16
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00a      	beq.n	80065ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	689b      	ldr	r3, [r3, #8]
 80065ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	430a      	orrs	r2, r1
 80065c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ce:	f003 0320 	and.w	r3, r3, #32
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d00a      	beq.n	80065ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d01a      	beq.n	800662e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	430a      	orrs	r2, r1
 800660c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006616:	d10a      	bne.n	800662e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	430a      	orrs	r2, r1
 800662c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006632:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00a      	beq.n	8006650 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	430a      	orrs	r2, r1
 800664e:	605a      	str	r2, [r3, #4]
  }
}
 8006650:	bf00      	nop
 8006652:	370c      	adds	r7, #12
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b098      	sub	sp, #96	; 0x60
 8006660:	af02      	add	r7, sp, #8
 8006662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2200      	movs	r2, #0
 8006668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800666c:	f7fa fb06 	bl	8000c7c <HAL_GetTick>
 8006670:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	f003 0308 	and.w	r3, r3, #8
 800667c:	2b08      	cmp	r3, #8
 800667e:	d12f      	bne.n	80066e0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006688:	2200      	movs	r2, #0
 800668a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 f88e 	bl	80067b0 <UART_WaitOnFlagUntilTimeout>
 8006694:	4603      	mov	r3, r0
 8006696:	2b00      	cmp	r3, #0
 8006698:	d022      	beq.n	80066e0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066a2:	e853 3f00 	ldrex	r3, [r3]
 80066a6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80066a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80066ae:	653b      	str	r3, [r7, #80]	; 0x50
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	461a      	mov	r2, r3
 80066b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066b8:	647b      	str	r3, [r7, #68]	; 0x44
 80066ba:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80066be:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066c0:	e841 2300 	strex	r3, r2, [r1]
 80066c4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80066c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d1e6      	bne.n	800669a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2220      	movs	r2, #32
 80066d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066dc:	2303      	movs	r3, #3
 80066de:	e063      	b.n	80067a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d149      	bne.n	8006782 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066f2:	9300      	str	r3, [sp, #0]
 80066f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066f6:	2200      	movs	r2, #0
 80066f8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066fc:	6878      	ldr	r0, [r7, #4]
 80066fe:	f000 f857 	bl	80067b0 <UART_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d03c      	beq.n	8006782 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	623b      	str	r3, [r7, #32]
   return(result);
 8006716:	6a3b      	ldr	r3, [r7, #32]
 8006718:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800671c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	461a      	mov	r2, r3
 8006724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006726:	633b      	str	r3, [r7, #48]	; 0x30
 8006728:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800672c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e6      	bne.n	8006708 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	3308      	adds	r3, #8
 8006740:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	e853 3f00 	ldrex	r3, [r3]
 8006748:	60fb      	str	r3, [r7, #12]
   return(result);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	f023 0301 	bic.w	r3, r3, #1
 8006750:	64bb      	str	r3, [r7, #72]	; 0x48
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800675a:	61fa      	str	r2, [r7, #28]
 800675c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	69b9      	ldr	r1, [r7, #24]
 8006760:	69fa      	ldr	r2, [r7, #28]
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	617b      	str	r3, [r7, #20]
   return(result);
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e5      	bne.n	800673a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2220      	movs	r2, #32
 8006772:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	2200      	movs	r2, #0
 800677a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e012      	b.n	80067a8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	2220      	movs	r2, #32
 8006786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2220      	movs	r2, #32
 800678e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2200      	movs	r2, #0
 800679c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3758      	adds	r7, #88	; 0x58
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b084      	sub	sp, #16
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	60b9      	str	r1, [r7, #8]
 80067ba:	603b      	str	r3, [r7, #0]
 80067bc:	4613      	mov	r3, r2
 80067be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067c0:	e049      	b.n	8006856 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c8:	d045      	beq.n	8006856 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ca:	f7fa fa57 	bl	8000c7c <HAL_GetTick>
 80067ce:	4602      	mov	r2, r0
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	1ad3      	subs	r3, r2, r3
 80067d4:	69ba      	ldr	r2, [r7, #24]
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d302      	bcc.n	80067e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d101      	bne.n	80067e4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e048      	b.n	8006876 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f003 0304 	and.w	r3, r3, #4
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d031      	beq.n	8006856 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	69db      	ldr	r3, [r3, #28]
 80067f8:	f003 0308 	and.w	r3, r3, #8
 80067fc:	2b08      	cmp	r3, #8
 80067fe:	d110      	bne.n	8006822 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2208      	movs	r2, #8
 8006806:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f839 	bl	8006880 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2208      	movs	r2, #8
 8006812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e029      	b.n	8006876 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69db      	ldr	r3, [r3, #28]
 8006828:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800682c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006830:	d111      	bne.n	8006856 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800683a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800683c:	68f8      	ldr	r0, [r7, #12]
 800683e:	f000 f81f 	bl	8006880 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2220      	movs	r2, #32
 8006846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006852:	2303      	movs	r3, #3
 8006854:	e00f      	b.n	8006876 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	69da      	ldr	r2, [r3, #28]
 800685c:	68bb      	ldr	r3, [r7, #8]
 800685e:	4013      	ands	r3, r2
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	429a      	cmp	r2, r3
 8006864:	bf0c      	ite	eq
 8006866:	2301      	moveq	r3, #1
 8006868:	2300      	movne	r3, #0
 800686a:	b2db      	uxtb	r3, r3
 800686c:	461a      	mov	r2, r3
 800686e:	79fb      	ldrb	r3, [r7, #7]
 8006870:	429a      	cmp	r2, r3
 8006872:	d0a6      	beq.n	80067c2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006874:	2300      	movs	r3, #0
}
 8006876:	4618      	mov	r0, r3
 8006878:	3710      	adds	r7, #16
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
	...

08006880 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006880:	b480      	push	{r7}
 8006882:	b095      	sub	sp, #84	; 0x54
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006898:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800689c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80068a6:	643b      	str	r3, [r7, #64]	; 0x40
 80068a8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e6      	bne.n	8006888 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	3308      	adds	r3, #8
 80068c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c2:	6a3b      	ldr	r3, [r7, #32]
 80068c4:	e853 3f00 	ldrex	r3, [r3]
 80068c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ca:	69fa      	ldr	r2, [r7, #28]
 80068cc:	4b1e      	ldr	r3, [pc, #120]	; (8006948 <UART_EndRxTransfer+0xc8>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	64bb      	str	r3, [r7, #72]	; 0x48
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	3308      	adds	r3, #8
 80068d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068dc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d1e5      	bne.n	80068ba <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d118      	bne.n	8006928 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	60bb      	str	r3, [r7, #8]
   return(result);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	f023 0310 	bic.w	r3, r3, #16
 800690a:	647b      	str	r3, [r7, #68]	; 0x44
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	461a      	mov	r2, r3
 8006912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6979      	ldr	r1, [r7, #20]
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	613b      	str	r3, [r7, #16]
   return(result);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e6      	bne.n	80068f6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2220      	movs	r2, #32
 800692c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2200      	movs	r2, #0
 8006934:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2200      	movs	r2, #0
 800693a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800693c:	bf00      	nop
 800693e:	3754      	adds	r7, #84	; 0x54
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	effffffe 	.word	0xeffffffe

0800694c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800695a:	2b01      	cmp	r3, #1
 800695c:	d101      	bne.n	8006962 <HAL_UARTEx_DisableFifoMode+0x16>
 800695e:	2302      	movs	r3, #2
 8006960:	e027      	b.n	80069b2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	2224      	movs	r2, #36	; 0x24
 800696e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0201 	bic.w	r2, r2, #1
 8006988:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006990:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069b0:	2300      	movs	r3, #0
}
 80069b2:	4618      	mov	r0, r3
 80069b4:	3714      	adds	r7, #20
 80069b6:	46bd      	mov	sp, r7
 80069b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069bc:	4770      	bx	lr

080069be <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80069be:	b580      	push	{r7, lr}
 80069c0:	b084      	sub	sp, #16
 80069c2:	af00      	add	r7, sp, #0
 80069c4:	6078      	str	r0, [r7, #4]
 80069c6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d101      	bne.n	80069d6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80069d2:	2302      	movs	r3, #2
 80069d4:	e02d      	b.n	8006a32 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2201      	movs	r2, #1
 80069da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2224      	movs	r2, #36	; 0x24
 80069e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	681a      	ldr	r2, [r3, #0]
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	f022 0201 	bic.w	r2, r2, #1
 80069fc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	683a      	ldr	r2, [r7, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f000 f850 	bl	8006ab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a30:	2300      	movs	r3, #0
}
 8006a32:	4618      	mov	r0, r3
 8006a34:	3710      	adds	r7, #16
 8006a36:	46bd      	mov	sp, r7
 8006a38:	bd80      	pop	{r7, pc}

08006a3a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a3a:	b580      	push	{r7, lr}
 8006a3c:	b084      	sub	sp, #16
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	6078      	str	r0, [r7, #4]
 8006a42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a4a:	2b01      	cmp	r3, #1
 8006a4c:	d101      	bne.n	8006a52 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a4e:	2302      	movs	r3, #2
 8006a50:	e02d      	b.n	8006aae <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2201      	movs	r2, #1
 8006a56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2224      	movs	r2, #36	; 0x24
 8006a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	681a      	ldr	r2, [r3, #0]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 0201 	bic.w	r2, r2, #1
 8006a78:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	430a      	orrs	r2, r1
 8006a8c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a8e:	6878      	ldr	r0, [r7, #4]
 8006a90:	f000 f812 	bl	8006ab8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68fa      	ldr	r2, [r7, #12]
 8006a9a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2220      	movs	r2, #32
 8006aa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006aac:	2300      	movs	r3, #0
}
 8006aae:	4618      	mov	r0, r3
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
	...

08006ab8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d108      	bne.n	8006ada <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2201      	movs	r2, #1
 8006acc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ad8:	e031      	b.n	8006b3e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ada:	2310      	movs	r3, #16
 8006adc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ade:	2310      	movs	r3, #16
 8006ae0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	0e5b      	lsrs	r3, r3, #25
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	f003 0307 	and.w	r3, r3, #7
 8006af0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	0f5b      	lsrs	r3, r3, #29
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	f003 0307 	and.w	r3, r3, #7
 8006b00:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b02:	7bbb      	ldrb	r3, [r7, #14]
 8006b04:	7b3a      	ldrb	r2, [r7, #12]
 8006b06:	4911      	ldr	r1, [pc, #68]	; (8006b4c <UARTEx_SetNbDataToProcess+0x94>)
 8006b08:	5c8a      	ldrb	r2, [r1, r2]
 8006b0a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006b0e:	7b3a      	ldrb	r2, [r7, #12]
 8006b10:	490f      	ldr	r1, [pc, #60]	; (8006b50 <UARTEx_SetNbDataToProcess+0x98>)
 8006b12:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006b14:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b18:	b29a      	uxth	r2, r3
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b20:	7bfb      	ldrb	r3, [r7, #15]
 8006b22:	7b7a      	ldrb	r2, [r7, #13]
 8006b24:	4909      	ldr	r1, [pc, #36]	; (8006b4c <UARTEx_SetNbDataToProcess+0x94>)
 8006b26:	5c8a      	ldrb	r2, [r1, r2]
 8006b28:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006b2c:	7b7a      	ldrb	r2, [r7, #13]
 8006b2e:	4908      	ldr	r1, [pc, #32]	; (8006b50 <UARTEx_SetNbDataToProcess+0x98>)
 8006b30:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006b32:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b3e:	bf00      	nop
 8006b40:	3714      	adds	r7, #20
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr
 8006b4a:	bf00      	nop
 8006b4c:	080099e4 	.word	0x080099e4
 8006b50:	080099ec 	.word	0x080099ec

08006b54 <motor_es>:
	data_buffer[6] = byte_8.buffer[4];
	data_buffer[7] = byte_8.buffer[5];
}

void motor_es(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006b66:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	601a      	str	r2, [r3, #0]

	data_buffer[0] = 0x08;
 8006b72:	68bb      	ldr	r3, [r7, #8]
 8006b74:	2208      	movs	r2, #8
 8006b76:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	3301      	adds	r3, #1
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	3302      	adds	r3, #2
 8006b84:	2200      	movs	r2, #0
 8006b86:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	3303      	adds	r3, #3
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	3304      	adds	r3, #4
 8006b94:	2200      	movs	r2, #0
 8006b96:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	3305      	adds	r3, #5
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8006ba0:	68bb      	ldr	r3, [r7, #8]
 8006ba2:	3306      	adds	r3, #6
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	3307      	adds	r3, #7
 8006bac:	2200      	movs	r2, #0
 8006bae:	701a      	strb	r2, [r3, #0]
}
 8006bb0:	bf00      	nop
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <motor_null>:
	data_buffer[6] = 0x00;
	data_buffer[7] = 0x00;
}

void motor_null(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	60f8      	str	r0, [r7, #12]
 8006bc4:	60b9      	str	r1, [r7, #8]
 8006bc6:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006bce:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	601a      	str	r2, [r3, #0]

	data_buffer[0] = 0x00;
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	3301      	adds	r3, #1
 8006be4:	2200      	movs	r2, #0
 8006be6:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	3302      	adds	r3, #2
 8006bec:	2200      	movs	r2, #0
 8006bee:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	3303      	adds	r3, #3
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	3304      	adds	r3, #4
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 8006c00:	68bb      	ldr	r3, [r7, #8]
 8006c02:	3305      	adds	r3, #5
 8006c04:	2200      	movs	r2, #0
 8006c06:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	3306      	adds	r3, #6
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 8006c10:	68bb      	ldr	r3, [r7, #8]
 8006c12:	3307      	adds	r3, #7
 8006c14:	2200      	movs	r2, #0
 8006c16:	701a      	strb	r2, [r3, #0]
}
 8006c18:	bf00      	nop
 8006c1a:	3714      	adds	r7, #20
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c22:	4770      	bx	lr

08006c24 <motor_current>:

void motor_current(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, int16_t data_in, uint32_t Id)
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	60f8      	str	r0, [r7, #12]
 8006c2c:	60b9      	str	r1, [r7, #8]
 8006c2e:	603b      	str	r3, [r7, #0]
 8006c30:	4613      	mov	r3, r2
 8006c32:	80fb      	strh	r3, [r7, #6]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006c3a:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	601a      	str	r2, [r3, #0]
	byte_2_reply.udata = data_in;
 8006c46:	4a17      	ldr	r2, [pc, #92]	; (8006ca4 <motor_current+0x80>)
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	8013      	strh	r3, [r2, #0]

	data_buffer[0] = 0xa1;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	22a1      	movs	r2, #161	; 0xa1
 8006c50:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	3301      	adds	r3, #1
 8006c56:	2200      	movs	r2, #0
 8006c58:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0;
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	3302      	adds	r3, #2
 8006c5e:	2200      	movs	r2, #0
 8006c60:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0;
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	3303      	adds	r3, #3
 8006c66:	2200      	movs	r2, #0
 8006c68:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = byte_2_reply.buffer[0];
 8006c6a:	4b0e      	ldr	r3, [pc, #56]	; (8006ca4 <motor_current+0x80>)
 8006c6c:	f993 2000 	ldrsb.w	r2, [r3]
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	3304      	adds	r3, #4
 8006c74:	b2d2      	uxtb	r2, r2
 8006c76:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = byte_2_reply.buffer[1];
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <motor_current+0x80>)
 8006c7a:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	3305      	adds	r3, #5
 8006c82:	b2d2      	uxtb	r2, r2
 8006c84:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	3306      	adds	r3, #6
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	3307      	adds	r3, #7
 8006c92:	2200      	movs	r2, #0
 8006c94:	701a      	strb	r2, [r3, #0]
}
 8006c96:	bf00      	nop
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	240000a8 	.word	0x240000a8

08006ca8 <motor_get_sglPos>:
	data_buffer[6] = byte_8.buffer[4];
	data_buffer[7] = byte_8.buffer[5];
}

void motor_get_sglPos(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b085      	sub	sp, #20
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006cba:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	601a      	str	r2, [r3, #0]

	data_buffer[0] = 0x94;
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	2294      	movs	r2, #148	; 0x94
 8006cca:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	3301      	adds	r3, #1
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	3302      	adds	r3, #2
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	3303      	adds	r3, #3
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	3304      	adds	r3, #4
 8006ce8:	2200      	movs	r2, #0
 8006cea:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 8006cec:	68bb      	ldr	r3, [r7, #8]
 8006cee:	3305      	adds	r3, #5
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	3306      	adds	r3, #6
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	3307      	adds	r3, #7
 8006d00:	2200      	movs	r2, #0
 8006d02:	701a      	strb	r2, [r3, #0]
}
 8006d04:	bf00      	nop
 8006d06:	3714      	adds	r7, #20
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0e:	4770      	bx	lr

08006d10 <motor_decode_pvt>:
	data_buffer[6] = 0x00;
	data_buffer[7] = 0x00;
}

void motor_decode_pvt(uint8_t* data, float_t* pos, float_t* vel, float_t* tor)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b085      	sub	sp, #20
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	60f8      	str	r0, [r7, #12]
 8006d18:	60b9      	str	r1, [r7, #8]
 8006d1a:	607a      	str	r2, [r7, #4]
 8006d1c:	603b      	str	r3, [r7, #0]
	byte_2_reply.buffer[0] = data[2];
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3302      	adds	r3, #2
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	b25a      	sxtb	r2, r3
 8006d26:	4b32      	ldr	r3, [pc, #200]	; (8006df0 <motor_decode_pvt+0xe0>)
 8006d28:	701a      	strb	r2, [r3, #0]
	byte_2_reply.buffer[1] = data[3];
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	3303      	adds	r3, #3
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	b25a      	sxtb	r2, r3
 8006d32:	4b2f      	ldr	r3, [pc, #188]	; (8006df0 <motor_decode_pvt+0xe0>)
 8006d34:	705a      	strb	r2, [r3, #1]
	*pos = (float_t)byte_2_reply.udata * 0.01;
 8006d36:	4b2e      	ldr	r3, [pc, #184]	; (8006df0 <motor_decode_pvt+0xe0>)
 8006d38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d3c:	ee07 3a90 	vmov	s15, r3
 8006d40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d44:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006d48:	ed9f 6b23 	vldr	d6, [pc, #140]	; 8006dd8 <motor_decode_pvt+0xc8>
 8006d4c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006d50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	edc3 7a00 	vstr	s15, [r3]
	byte_2_reply.buffer[0] = data[4];
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	3304      	adds	r3, #4
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	b25a      	sxtb	r2, r3
 8006d62:	4b23      	ldr	r3, [pc, #140]	; (8006df0 <motor_decode_pvt+0xe0>)
 8006d64:	701a      	strb	r2, [r3, #0]
	byte_2_reply.buffer[1] = data[5];
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	3305      	adds	r3, #5
 8006d6a:	781b      	ldrb	r3, [r3, #0]
 8006d6c:	b25a      	sxtb	r2, r3
 8006d6e:	4b20      	ldr	r3, [pc, #128]	; (8006df0 <motor_decode_pvt+0xe0>)
 8006d70:	705a      	strb	r2, [r3, #1]
	*vel = (float_t)byte_2_reply.udata;
 8006d72:	4b1f      	ldr	r3, [pc, #124]	; (8006df0 <motor_decode_pvt+0xe0>)
 8006d74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d78:	ee07 3a90 	vmov	s15, r3
 8006d7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	edc3 7a00 	vstr	s15, [r3]
	byte_2_reply.buffer[0] = data[6];
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	3306      	adds	r3, #6
 8006d8a:	781b      	ldrb	r3, [r3, #0]
 8006d8c:	b25a      	sxtb	r2, r3
 8006d8e:	4b18      	ldr	r3, [pc, #96]	; (8006df0 <motor_decode_pvt+0xe0>)
 8006d90:	701a      	strb	r2, [r3, #0]
	byte_2_reply.buffer[1] = data[7];
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3307      	adds	r3, #7
 8006d96:	781b      	ldrb	r3, [r3, #0]
 8006d98:	b25a      	sxtb	r2, r3
 8006d9a:	4b15      	ldr	r3, [pc, #84]	; (8006df0 <motor_decode_pvt+0xe0>)
 8006d9c:	705a      	strb	r2, [r3, #1]
	*tor = (float_t)byte_2_reply.udata * 66.0 / 4096;
 8006d9e:	4b14      	ldr	r3, [pc, #80]	; (8006df0 <motor_decode_pvt+0xe0>)
 8006da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006da4:	ee07 3a90 	vmov	s15, r3
 8006da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006dac:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006db0:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8006de0 <motor_decode_pvt+0xd0>
 8006db4:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006db8:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8006de8 <motor_decode_pvt+0xd8>
 8006dbc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006dc0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	edc3 7a00 	vstr	s15, [r3]
}
 8006dca:	bf00      	nop
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	47ae147b 	.word	0x47ae147b
 8006ddc:	3f847ae1 	.word	0x3f847ae1
 8006de0:	00000000 	.word	0x00000000
 8006de4:	40508000 	.word	0x40508000
 8006de8:	00000000 	.word	0x00000000
 8006dec:	40b00000 	.word	0x40b00000
 8006df0:	240000a8 	.word	0x240000a8
 8006df4:	00000000 	.word	0x00000000

08006df8 <motor_decode_sglPos>:

void motor_decode_sglPos(uint8_t* data, float_t * sglPos)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	6039      	str	r1, [r7, #0]
	byte_4_int32.buffer[0]=data[4];
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	791a      	ldrb	r2, [r3, #4]
 8006e06:	4b14      	ldr	r3, [pc, #80]	; (8006e58 <motor_decode_sglPos+0x60>)
 8006e08:	701a      	strb	r2, [r3, #0]
	byte_4_int32.buffer[1]=data[5];
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	795a      	ldrb	r2, [r3, #5]
 8006e0e:	4b12      	ldr	r3, [pc, #72]	; (8006e58 <motor_decode_sglPos+0x60>)
 8006e10:	705a      	strb	r2, [r3, #1]
	byte_4_int32.buffer[2]=data[6];
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	799a      	ldrb	r2, [r3, #6]
 8006e16:	4b10      	ldr	r3, [pc, #64]	; (8006e58 <motor_decode_sglPos+0x60>)
 8006e18:	709a      	strb	r2, [r3, #2]
	byte_4_int32.buffer[3]=data[7];
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	79da      	ldrb	r2, [r3, #7]
 8006e1e:	4b0e      	ldr	r3, [pc, #56]	; (8006e58 <motor_decode_sglPos+0x60>)
 8006e20:	70da      	strb	r2, [r3, #3]

	*sglPos=(float_t)byte_4_int32.udata*0.01;
 8006e22:	4b0d      	ldr	r3, [pc, #52]	; (8006e58 <motor_decode_sglPos+0x60>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	ee07 3a90 	vmov	s15, r3
 8006e2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e2e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e32:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8006e50 <motor_decode_sglPos+0x58>
 8006e36:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006e3a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006e3e:	683b      	ldr	r3, [r7, #0]
 8006e40:	edc3 7a00 	vstr	s15, [r3]
}
 8006e44:	bf00      	nop
 8006e46:	370c      	adds	r7, #12
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4e:	4770      	bx	lr
 8006e50:	47ae147b 	.word	0x47ae147b
 8006e54:	3f847ae1 	.word	0x3f847ae1
 8006e58:	240000c0 	.word	0x240000c0
 8006e5c:	00000000 	.word	0x00000000

08006e60 <motor_decode_mulPos>:


void motor_decode_mulPos(uint8_t* data, float_t * mulPos)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b082      	sub	sp, #8
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
 8006e68:	6039      	str	r1, [r7, #0]
	byte_8_int64.buffer[3]=data[3];
	byte_8_int64.buffer[4]=data[4];
	byte_8_int64.buffer[5]=data[5];
	byte_8_int64.buffer[6]=data[6];
	byte_8_int64.buffer[7]=data[7];*/
	byte_8_int64.buffer[0]=data[1];
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	785a      	ldrb	r2, [r3, #1]
 8006e6e:	4b1c      	ldr	r3, [pc, #112]	; (8006ee0 <motor_decode_mulPos+0x80>)
 8006e70:	701a      	strb	r2, [r3, #0]
	byte_8_int64.buffer[1]=data[2];
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	789a      	ldrb	r2, [r3, #2]
 8006e76:	4b1a      	ldr	r3, [pc, #104]	; (8006ee0 <motor_decode_mulPos+0x80>)
 8006e78:	705a      	strb	r2, [r3, #1]
	byte_8_int64.buffer[2]=data[3];
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	78da      	ldrb	r2, [r3, #3]
 8006e7e:	4b18      	ldr	r3, [pc, #96]	; (8006ee0 <motor_decode_mulPos+0x80>)
 8006e80:	709a      	strb	r2, [r3, #2]
	byte_8_int64.buffer[3]=data[4];
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	791a      	ldrb	r2, [r3, #4]
 8006e86:	4b16      	ldr	r3, [pc, #88]	; (8006ee0 <motor_decode_mulPos+0x80>)
 8006e88:	70da      	strb	r2, [r3, #3]
	byte_8_int64.buffer[4]=data[5];
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	795a      	ldrb	r2, [r3, #5]
 8006e8e:	4b14      	ldr	r3, [pc, #80]	; (8006ee0 <motor_decode_mulPos+0x80>)
 8006e90:	711a      	strb	r2, [r3, #4]
	byte_8_int64.buffer[5]=data[6];
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	799a      	ldrb	r2, [r3, #6]
 8006e96:	4b12      	ldr	r3, [pc, #72]	; (8006ee0 <motor_decode_mulPos+0x80>)
 8006e98:	715a      	strb	r2, [r3, #5]
	byte_8_int64.buffer[6]=data[7];
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	79da      	ldrb	r2, [r3, #7]
 8006e9e:	4b10      	ldr	r3, [pc, #64]	; (8006ee0 <motor_decode_mulPos+0x80>)
 8006ea0:	719a      	strb	r2, [r3, #6]
	byte_8_int64.buffer[7]=0;
 8006ea2:	4b0f      	ldr	r3, [pc, #60]	; (8006ee0 <motor_decode_mulPos+0x80>)
 8006ea4:	2200      	movs	r2, #0
 8006ea6:	71da      	strb	r2, [r3, #7]
	*mulPos=(float_t)byte_8_int64.udata*0.01;
 8006ea8:	4b0d      	ldr	r3, [pc, #52]	; (8006ee0 <motor_decode_mulPos+0x80>)
 8006eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eae:	4610      	mov	r0, r2
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	f7f9 fc9d 	bl	80007f0 <__aeabi_l2f>
 8006eb6:	ee07 0a90 	vmov	s15, r0
 8006eba:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006ebe:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8006ed8 <motor_decode_mulPos+0x78>
 8006ec2:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006ec6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	edc3 7a00 	vstr	s15, [r3]
}
 8006ed0:	bf00      	nop
 8006ed2:	3708      	adds	r7, #8
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	bd80      	pop	{r7, pc}
 8006ed8:	47ae147b 	.word	0x47ae147b
 8006edc:	3f847ae1 	.word	0x3f847ae1
 8006ee0:	240000b8 	.word	0x240000b8
 8006ee4:	00000000 	.word	0x00000000

08006ee8 <motor_decode_cur>:

void motor_decode_cur(uint8_t* data, float_t* pos, float_t* vel, float_t* tor)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60f8      	str	r0, [r7, #12]
 8006ef0:	60b9      	str	r1, [r7, #8]
 8006ef2:	607a      	str	r2, [r7, #4]
 8006ef4:	603b      	str	r3, [r7, #0]
	byte_2u_reply.buffer[0] = data[6];
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	799a      	ldrb	r2, [r3, #6]
 8006efa:	4b33      	ldr	r3, [pc, #204]	; (8006fc8 <motor_decode_cur+0xe0>)
 8006efc:	701a      	strb	r2, [r3, #0]
	byte_2u_reply.buffer[1] = data[7];
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	79da      	ldrb	r2, [r3, #7]
 8006f02:	4b31      	ldr	r3, [pc, #196]	; (8006fc8 <motor_decode_cur+0xe0>)
 8006f04:	705a      	strb	r2, [r3, #1]
	*pos = (double_t)byte_2u_reply.udata /65535.0*360.0;
 8006f06:	4b30      	ldr	r3, [pc, #192]	; (8006fc8 <motor_decode_cur+0xe0>)
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006f12:	ed9f 5b25 	vldr	d5, [pc, #148]	; 8006fa8 <motor_decode_cur+0xc0>
 8006f16:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f1a:	ed9f 6b25 	vldr	d6, [pc, #148]	; 8006fb0 <motor_decode_cur+0xc8>
 8006f1e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f22:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	edc3 7a00 	vstr	s15, [r3]
	byte_2_reply.buffer[0] = data[4];
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	3304      	adds	r3, #4
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	b25a      	sxtb	r2, r3
 8006f34:	4b25      	ldr	r3, [pc, #148]	; (8006fcc <motor_decode_cur+0xe4>)
 8006f36:	701a      	strb	r2, [r3, #0]
	byte_2_reply.buffer[1] = data[5];
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	3305      	adds	r3, #5
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	b25a      	sxtb	r2, r3
 8006f40:	4b22      	ldr	r3, [pc, #136]	; (8006fcc <motor_decode_cur+0xe4>)
 8006f42:	705a      	strb	r2, [r3, #1]
	*vel = (float_t)byte_2_reply.udata;
 8006f44:	4b21      	ldr	r3, [pc, #132]	; (8006fcc <motor_decode_cur+0xe4>)
 8006f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f4a:	ee07 3a90 	vmov	s15, r3
 8006f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	edc3 7a00 	vstr	s15, [r3]
	byte_2_reply.buffer[0] = data[2];
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	3302      	adds	r3, #2
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	b25a      	sxtb	r2, r3
 8006f60:	4b1a      	ldr	r3, [pc, #104]	; (8006fcc <motor_decode_cur+0xe4>)
 8006f62:	701a      	strb	r2, [r3, #0]
	byte_2_reply.buffer[1] = data[3];
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3303      	adds	r3, #3
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	b25a      	sxtb	r2, r3
 8006f6c:	4b17      	ldr	r3, [pc, #92]	; (8006fcc <motor_decode_cur+0xe4>)
 8006f6e:	705a      	strb	r2, [r3, #1]
	*tor = (float_t)byte_2_reply.udata * 66.0 / 4096;
 8006f70:	4b16      	ldr	r3, [pc, #88]	; (8006fcc <motor_decode_cur+0xe4>)
 8006f72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006f76:	ee07 3a90 	vmov	s15, r3
 8006f7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f7e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f82:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8006fb8 <motor_decode_cur+0xd0>
 8006f86:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006f8a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8006fc0 <motor_decode_cur+0xd8>
 8006f8e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006f92:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	edc3 7a00 	vstr	s15, [r3]
}
 8006f9c:	bf00      	nop
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr
 8006fa8:	00000000 	.word	0x00000000
 8006fac:	40efffe0 	.word	0x40efffe0
 8006fb0:	00000000 	.word	0x00000000
 8006fb4:	40768000 	.word	0x40768000
 8006fb8:	00000000 	.word	0x00000000
 8006fbc:	40508000 	.word	0x40508000
 8006fc0:	00000000 	.word	0x00000000
 8006fc4:	40b00000 	.word	0x40b00000
 8006fc8:	240000ac 	.word	0x240000ac
 8006fcc:	240000a8 	.word	0x240000a8

08006fd0 <motor_vel>:
	else
		return 0.0;
}

void motor_vel(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, int32_t data_in, uint32_t Id)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	60f8      	str	r0, [r7, #12]
 8006fd8:	60b9      	str	r1, [r7, #8]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006fe4:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	601a      	str	r2, [r3, #0]

	byte_4_int32.udata=data_in;
 8006ff0:	4a15      	ldr	r2, [pc, #84]	; (8007048 <motor_vel+0x78>)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6013      	str	r3, [r2, #0]

	data_buffer[0] = 0xa2;
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	22a2      	movs	r2, #162	; 0xa2
 8006ffa:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	3301      	adds	r3, #1
 8007000:	2200      	movs	r2, #0
 8007002:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	3302      	adds	r3, #2
 8007008:	2200      	movs	r2, #0
 800700a:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 800700c:	68bb      	ldr	r3, [r7, #8]
 800700e:	3303      	adds	r3, #3
 8007010:	2200      	movs	r2, #0
 8007012:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = byte_4_int32.buffer[0];
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	3304      	adds	r3, #4
 8007018:	4a0b      	ldr	r2, [pc, #44]	; (8007048 <motor_vel+0x78>)
 800701a:	7812      	ldrb	r2, [r2, #0]
 800701c:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = byte_4_int32.buffer[1];
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	3305      	adds	r3, #5
 8007022:	4a09      	ldr	r2, [pc, #36]	; (8007048 <motor_vel+0x78>)
 8007024:	7852      	ldrb	r2, [r2, #1]
 8007026:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = byte_4_int32.buffer[2];
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	3306      	adds	r3, #6
 800702c:	4a06      	ldr	r2, [pc, #24]	; (8007048 <motor_vel+0x78>)
 800702e:	7892      	ldrb	r2, [r2, #2]
 8007030:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = byte_4_int32.buffer[3];
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	3307      	adds	r3, #7
 8007036:	4a04      	ldr	r2, [pc, #16]	; (8007048 <motor_vel+0x78>)
 8007038:	78d2      	ldrb	r2, [r2, #3]
 800703a:	701a      	strb	r2, [r3, #0]
}
 800703c:	bf00      	nop
 800703e:	3714      	adds	r7, #20
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr
 8007048:	240000c0 	.word	0x240000c0

0800704c <delay_us>:
void send_to_all_slave_sgl();
void send_to_all_slave_mul();
void send_to_all_slave_cur0();

void delay_us(uint16_t us)
{
 800704c:	b480      	push	{r7}
 800704e:	b083      	sub	sp, #12
 8007050:	af00      	add	r7, sp, #0
 8007052:	4603      	mov	r3, r0
 8007054:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0); 
 8007056:	4b09      	ldr	r3, [pc, #36]	; (800707c <delay_us+0x30>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	2200      	movs	r2, #0
 800705c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us) ;
 800705e:	bf00      	nop
 8007060:	4b06      	ldr	r3, [pc, #24]	; (800707c <delay_us+0x30>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007066:	88fb      	ldrh	r3, [r7, #6]
 8007068:	429a      	cmp	r2, r3
 800706a:	d3f9      	bcc.n	8007060 <delay_us+0x14>
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	240003bc 	.word	0x240003bc

08007080 <control>:

void control()
{
 8007080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007084:	b087      	sub	sp, #28
 8007086:	af00      	add	r7, sp, #0
	loop_1ms_count++;
 8007088:	4b89      	ldr	r3, [pc, #548]	; (80072b0 <control+0x230>)
 800708a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800708e:	1c56      	adds	r6, r2, #1
 8007090:	4630      	mov	r0, r6
 8007092:	f143 0300 	adc.w	r3, r3, #0
 8007096:	4619      	mov	r1, r3
 8007098:	4b85      	ldr	r3, [pc, #532]	; (80072b0 <control+0x230>)
 800709a:	460a      	mov	r2, r1
 800709c:	4601      	mov	r1, r0
 800709e:	e9c3 1200 	strd	r1, r2, [r3]
	if (loop_1ms_count==6)
 80070a2:	4b83      	ldr	r3, [pc, #524]	; (80072b0 <control+0x230>)
 80070a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070a8:	1f96      	subs	r6, r2, #6
 80070aa:	4333      	orrs	r3, r6
 80070ac:	d106      	bne.n	80070bc <control+0x3c>
		loop_1ms_count=0;
 80070ae:	4e80      	ldr	r6, [pc, #512]	; (80072b0 <control+0x230>)
 80070b0:	f04f 0200 	mov.w	r2, #0
 80070b4:	f04f 0300 	mov.w	r3, #0
 80070b8:	e9c6 2300 	strd	r2, r3, [r6]

	if (control_word==0)
 80070bc:	4b7d      	ldr	r3, [pc, #500]	; (80072b4 <control+0x234>)
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d102      	bne.n	80070ca <control+0x4a>
			control_word=1;
 80070c4:	4b7b      	ldr	r3, [pc, #492]	; (80072b4 <control+0x234>)
 80070c6:	2201      	movs	r2, #1
 80070c8:	801a      	strh	r2, [r3, #0]

	if (control_word == 1)
 80070ca:	4b7a      	ldr	r3, [pc, #488]	; (80072b4 <control+0x234>)
 80070cc:	881b      	ldrh	r3, [r3, #0]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d149      	bne.n	8007166 <control+0xe6>
	{
		if (is_init == 0)   // init
 80070d2:	4b79      	ldr	r3, [pc, #484]	; (80072b8 <control+0x238>)
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d13e      	bne.n	8007158 <control+0xd8>
		{
			if (init_counter < 20)
 80070da:	4b78      	ldr	r3, [pc, #480]	; (80072bc <control+0x23c>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	2b13      	cmp	r3, #19
 80070e0:	d805      	bhi.n	80070ee <control+0x6e>
			{
				init_counter++;
 80070e2:	4b76      	ldr	r3, [pc, #472]	; (80072bc <control+0x23c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3301      	adds	r3, #1
 80070e8:	4a74      	ldr	r2, [pc, #464]	; (80072bc <control+0x23c>)
 80070ea:	6013      	str	r3, [r2, #0]
 80070ec:	e005      	b.n	80070fa <control+0x7a>
			}
			else
			{
				init_counter = 0;
 80070ee:	4b73      	ldr	r3, [pc, #460]	; (80072bc <control+0x23c>)
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
				is_init = 1;
 80070f4:	4b70      	ldr	r3, [pc, #448]	; (80072b8 <control+0x238>)
 80070f6:	2201      	movs	r2, #1
 80070f8:	601a      	str	r2, [r3, #0]
			}
			if (loop_1ms_count%2==0)
 80070fa:	4b6d      	ldr	r3, [pc, #436]	; (80072b0 <control+0x230>)
 80070fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007100:	f002 0301 	and.w	r3, r2, #1
 8007104:	60bb      	str	r3, [r7, #8]
 8007106:	2300      	movs	r3, #0
 8007108:	60fb      	str	r3, [r7, #12]
 800710a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800710e:	460b      	mov	r3, r1
 8007110:	4313      	orrs	r3, r2
 8007112:	d101      	bne.n	8007118 <control+0x98>
				send_to_all_slave_sgl();
 8007114:	f001 f9ba 	bl	800848c <send_to_all_slave_sgl>
			if (loop_1ms_count%2==1)
 8007118:	4b65      	ldr	r3, [pc, #404]	; (80072b0 <control+0x230>)
 800711a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711e:	f002 0401 	and.w	r4, r2, #1
 8007122:	f003 4500 	and.w	r5, r3, #2147483648	; 0x80000000
 8007126:	2d00      	cmp	r5, #0
 8007128:	da0e      	bge.n	8007148 <control+0xc8>
 800712a:	f114 3aff 	adds.w	sl, r4, #4294967295
 800712e:	f145 3bff 	adc.w	fp, r5, #4294967295
 8007132:	f06a 0401 	orn	r4, sl, #1
 8007136:	f04f 35ff 	mov.w	r5, #4294967295
 800713a:	1c63      	adds	r3, r4, #1
 800713c:	603b      	str	r3, [r7, #0]
 800713e:	f145 0300 	adc.w	r3, r5, #0
 8007142:	607b      	str	r3, [r7, #4]
 8007144:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007148:	4622      	mov	r2, r4
 800714a:	462b      	mov	r3, r5
 800714c:	1e51      	subs	r1, r2, #1
 800714e:	430b      	orrs	r3, r1
 8007150:	d105      	bne.n	800715e <control+0xde>
				send_to_all_slave_cur0();
 8007152:	f001 f9b9 	bl	80084c8 <send_to_all_slave_cur0>
 8007156:	e002      	b.n	800715e <control+0xde>
		}
		else  // get data
		{
			control_word=2;
 8007158:	4b56      	ldr	r3, [pc, #344]	; (80072b4 <control+0x234>)
 800715a:	2202      	movs	r2, #2
 800715c:	801a      	strh	r2, [r3, #0]
		}

		is_run = 0;
 800715e:	4b58      	ldr	r3, [pc, #352]	; (80072c0 <control+0x240>)
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]
	}
	else  // stop
	{
		//HAL_GPIO_WritePin(GPIOA, ES_Pin, GPIO_PIN_SET);
	}
}
 8007164:	e096      	b.n	8007294 <control+0x214>
	else if (control_word == 2)  // parameter
 8007166:	4b53      	ldr	r3, [pc, #332]	; (80072b4 <control+0x234>)
 8007168:	881b      	ldrh	r3, [r3, #0]
 800716a:	2b02      	cmp	r3, #2
 800716c:	d170      	bne.n	8007250 <control+0x1d0>
		if (is_run == 0)
 800716e:	4b54      	ldr	r3, [pc, #336]	; (80072c0 <control+0x240>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d103      	bne.n	800717e <control+0xfe>
			is_run = 1;
 8007176:	4b52      	ldr	r3, [pc, #328]	; (80072c0 <control+0x240>)
 8007178:	2201      	movs	r2, #1
 800717a:	601a      	str	r2, [r3, #0]
 800717c:	e064      	b.n	8007248 <control+0x1c8>
		else if (is_run == 1)
 800717e:	4b50      	ldr	r3, [pc, #320]	; (80072c0 <control+0x240>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d103      	bne.n	800718e <control+0x10e>
			is_run = 2;
 8007186:	4b4e      	ldr	r3, [pc, #312]	; (80072c0 <control+0x240>)
 8007188:	2202      	movs	r2, #2
 800718a:	601a      	str	r2, [r3, #0]
 800718c:	e05c      	b.n	8007248 <control+0x1c8>
			phi=2.0*3.14159265*pos_cnt[0]/ we[0];
 800718e:	4b4d      	ldr	r3, [pc, #308]	; (80072c4 <control+0x244>)
 8007190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007194:	4610      	mov	r0, r2
 8007196:	4619      	mov	r1, r3
 8007198:	f7f9 fa24 	bl	80005e4 <__aeabi_ul2d>
 800719c:	ec41 0b16 	vmov	d6, r0, r1
 80071a0:	ed9f 7b3f 	vldr	d7, [pc, #252]	; 80072a0 <control+0x220>
 80071a4:	ee26 5b07 	vmul.f64	d5, d6, d7
 80071a8:	4b47      	ldr	r3, [pc, #284]	; (80072c8 <control+0x248>)
 80071aa:	ed93 6b00 	vldr	d6, [r3]
 80071ae:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80071b2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80071b6:	edc7 7a05 	vstr	s15, [r7, #20]
			if (phi>=2*3.14159265)
 80071ba:	edd7 7a05 	vldr	s15, [r7, #20]
 80071be:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80071c2:	ed9f 6b37 	vldr	d6, [pc, #220]	; 80072a0 <control+0x220>
 80071c6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071ce:	db06      	blt.n	80071de <control+0x15e>
				pos_cnt[0]=0;
 80071d0:	493c      	ldr	r1, [pc, #240]	; (80072c4 <control+0x244>)
 80071d2:	f04f 0200 	mov.w	r2, #0
 80071d6:	f04f 0300 	mov.w	r3, #0
 80071da:	e9c1 2300 	strd	r2, r3, [r1]
			vel_des=70.0*sin(phi)+13;
 80071de:	edd7 7a05 	vldr	s15, [r7, #20]
 80071e2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80071e6:	eeb0 0b47 	vmov.f64	d0, d7
 80071ea:	f001 fdbd 	bl	8008d68 <sin>
 80071ee:	eeb0 7b40 	vmov.f64	d7, d0
 80071f2:	ed9f 6b2d 	vldr	d6, [pc, #180]	; 80072a8 <control+0x228>
 80071f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80071fa:	eeb2 6b0a 	vmov.f64	d6, #42	; 0x41500000  13.0
 80071fe:	ee37 7b06 	vadd.f64	d7, d7, d6
 8007202:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007206:	edc7 7a04 	vstr	s15, [r7, #16]
			motor_vel(&joint_1, joint_1_data, (int32_t)(vel_des*100*10), 1); // 10 for the gear ratio
 800720a:	edd7 7a04 	vldr	s15, [r7, #16]
 800720e:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80072cc <control+0x24c>
 8007212:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007216:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800721a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800721e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8007222:	2301      	movs	r3, #1
 8007224:	ee17 2a90 	vmov	r2, s15
 8007228:	4929      	ldr	r1, [pc, #164]	; (80072d0 <control+0x250>)
 800722a:	482a      	ldr	r0, [pc, #168]	; (80072d4 <control+0x254>)
 800722c:	f7ff fed0 	bl	8006fd0 <motor_vel>
			send_to_all_slave();
 8007230:	f001 f912 	bl	8008458 <send_to_all_slave>
			pos_cnt[0]++;
 8007234:	4b23      	ldr	r3, [pc, #140]	; (80072c4 <control+0x244>)
 8007236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723a:	f112 0801 	adds.w	r8, r2, #1
 800723e:	f143 0900 	adc.w	r9, r3, #0
 8007242:	4b20      	ldr	r3, [pc, #128]	; (80072c4 <control+0x244>)
 8007244:	e9c3 8900 	strd	r8, r9, [r3]
		is_init = 0;
 8007248:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <control+0x238>)
 800724a:	2200      	movs	r2, #0
 800724c:	601a      	str	r2, [r3, #0]
}
 800724e:	e021      	b.n	8007294 <control+0x214>
	else if(control_word == 3)  // stop
 8007250:	4b18      	ldr	r3, [pc, #96]	; (80072b4 <control+0x234>)
 8007252:	881b      	ldrh	r3, [r3, #0]
 8007254:	2b03      	cmp	r3, #3
 8007256:	d11d      	bne.n	8007294 <control+0x214>
		motor_es(&joint_1, joint_1_data, 1);
 8007258:	2201      	movs	r2, #1
 800725a:	491d      	ldr	r1, [pc, #116]	; (80072d0 <control+0x250>)
 800725c:	481d      	ldr	r0, [pc, #116]	; (80072d4 <control+0x254>)
 800725e:	f7ff fc79 	bl	8006b54 <motor_es>
		motor_es(&joint_2, joint_2_data, 2);
 8007262:	2202      	movs	r2, #2
 8007264:	491c      	ldr	r1, [pc, #112]	; (80072d8 <control+0x258>)
 8007266:	481d      	ldr	r0, [pc, #116]	; (80072dc <control+0x25c>)
 8007268:	f7ff fc74 	bl	8006b54 <motor_es>
		motor_es(&joint_3, joint_3_data, 3);
 800726c:	2203      	movs	r2, #3
 800726e:	491c      	ldr	r1, [pc, #112]	; (80072e0 <control+0x260>)
 8007270:	481c      	ldr	r0, [pc, #112]	; (80072e4 <control+0x264>)
 8007272:	f7ff fc6f 	bl	8006b54 <motor_es>
		motor_es(&joint_4, joint_4_data, 4);
 8007276:	2204      	movs	r2, #4
 8007278:	491b      	ldr	r1, [pc, #108]	; (80072e8 <control+0x268>)
 800727a:	481c      	ldr	r0, [pc, #112]	; (80072ec <control+0x26c>)
 800727c:	f7ff fc6a 	bl	8006b54 <motor_es>
		motor_null(&joint_5, joint_5_data, 5);
 8007280:	2205      	movs	r2, #5
 8007282:	491b      	ldr	r1, [pc, #108]	; (80072f0 <control+0x270>)
 8007284:	481b      	ldr	r0, [pc, #108]	; (80072f4 <control+0x274>)
 8007286:	f7ff fc99 	bl	8006bbc <motor_null>
		is_run = 0;
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <control+0x240>)
 800728c:	2200      	movs	r2, #0
 800728e:	601a      	str	r2, [r3, #0]
		send_to_all_slave();
 8007290:	f001 f8e2 	bl	8008458 <send_to_all_slave>
}
 8007294:	bf00      	nop
 8007296:	371c      	adds	r7, #28
 8007298:	46bd      	mov	sp, r7
 800729a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800729e:	bf00      	nop
 80072a0:	53c8d4f1 	.word	0x53c8d4f1
 80072a4:	401921fb 	.word	0x401921fb
 80072a8:	00000000 	.word	0x00000000
 80072ac:	40518000 	.word	0x40518000
 80072b0:	24000760 	.word	0x24000760
 80072b4:	24000660 	.word	0x24000660
 80072b8:	24000664 	.word	0x24000664
 80072bc:	2400066c 	.word	0x2400066c
 80072c0:	24000668 	.word	0x24000668
 80072c4:	24000680 	.word	0x24000680
 80072c8:	24000038 	.word	0x24000038
 80072cc:	42c80000 	.word	0x42c80000
 80072d0:	240005c0 	.word	0x240005c0
 80072d4:	240004e8 	.word	0x240004e8
 80072d8:	240005c8 	.word	0x240005c8
 80072dc:	2400050c 	.word	0x2400050c
 80072e0:	240005d0 	.word	0x240005d0
 80072e4:	24000530 	.word	0x24000530
 80072e8:	240005d8 	.word	0x240005d8
 80072ec:	24000554 	.word	0x24000554
 80072f0:	240005e0 	.word	0x240005e0
 80072f4:	24000578 	.word	0x24000578

080072f8 <unpack_reply>:

void unpack_reply(FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *data)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b08e      	sub	sp, #56	; 0x38
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
	//TODO 
	if (pRxHeader->DataLength == FDCAN_DLC_BYTES_8)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	68db      	ldr	r3, [r3, #12]
 8007306:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800730a:	f040 83d8 	bne.w	8007abe <unpack_reply+0x7c6>
	{
		int id = pRxHeader->Identifier - 0x140;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8007316:	61fb      	str	r3, [r7, #28]
		if (id > 0 && id < 7)
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	f340 83cf 	ble.w	8007abe <unpack_reply+0x7c6>
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	2b06      	cmp	r3, #6
 8007324:	f300 83cb 	bgt.w	8007abe <unpack_reply+0x7c6>
		{
			if (id > 0 && id < 5)
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	2b00      	cmp	r3, #0
 800732c:	dd20      	ble.n	8007370 <unpack_reply+0x78>
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	2b04      	cmp	r3, #4
 8007332:	dc1d      	bgt.n	8007370 <unpack_reply+0x78>
			{
				if (data[0] == 0xae)
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2bae      	cmp	r3, #174	; 0xae
 800733a:	d12e      	bne.n	800739a <unpack_reply+0xa2>
				{
					for (size_t i = 0; i < 6; i++)
 800733c:	2300      	movs	r3, #0
 800733e:	637b      	str	r3, [r7, #52]	; 0x34
 8007340:	e00c      	b.n	800735c <unpack_reply+0x64>
						byte_8_reply.buffer[i] = data[i + 2];
 8007342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007344:	3302      	adds	r3, #2
 8007346:	683a      	ldr	r2, [r7, #0]
 8007348:	4413      	add	r3, r2
 800734a:	7819      	ldrb	r1, [r3, #0]
 800734c:	4a94      	ldr	r2, [pc, #592]	; (80075a0 <unpack_reply+0x2a8>)
 800734e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007350:	4413      	add	r3, r2
 8007352:	460a      	mov	r2, r1
 8007354:	701a      	strb	r2, [r3, #0]
					for (size_t i = 0; i < 6; i++)
 8007356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007358:	3301      	adds	r3, #1
 800735a:	637b      	str	r3, [r7, #52]	; 0x34
 800735c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800735e:	2b05      	cmp	r3, #5
 8007360:	d9ef      	bls.n	8007342 <unpack_reply+0x4a>
					byte_8_reply.buffer[6] = 0x00;
 8007362:	4b8f      	ldr	r3, [pc, #572]	; (80075a0 <unpack_reply+0x2a8>)
 8007364:	2200      	movs	r2, #0
 8007366:	719a      	strb	r2, [r3, #6]
					byte_8_reply.buffer[7] = 0x00;
 8007368:	4b8d      	ldr	r3, [pc, #564]	; (80075a0 <unpack_reply+0x2a8>)
 800736a:	2200      	movs	r2, #0
 800736c:	71da      	strb	r2, [r3, #7]
				if (data[0] == 0xae)
 800736e:	e014      	b.n	800739a <unpack_reply+0xa2>
				}
			}
			else if (id == 5)
 8007370:	69fb      	ldr	r3, [r7, #28]
 8007372:	2b05      	cmp	r3, #5
 8007374:	d111      	bne.n	800739a <unpack_reply+0xa2>
			{
				for (size_t i = 0; i < 8; i++)
 8007376:	2300      	movs	r3, #0
 8007378:	633b      	str	r3, [r7, #48]	; 0x30
 800737a:	e00b      	b.n	8007394 <unpack_reply+0x9c>
					byte_8_reply.buffer[i] = data[i];
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007380:	4413      	add	r3, r2
 8007382:	7819      	ldrb	r1, [r3, #0]
 8007384:	4a86      	ldr	r2, [pc, #536]	; (80075a0 <unpack_reply+0x2a8>)
 8007386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007388:	4413      	add	r3, r2
 800738a:	460a      	mov	r2, r1
 800738c:	701a      	strb	r2, [r3, #0]
				for (size_t i = 0; i < 8; i++)
 800738e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007390:	3301      	adds	r3, #1
 8007392:	633b      	str	r3, [r7, #48]	; 0x30
 8007394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007396:	2b07      	cmp	r3, #7
 8007398:	d9f0      	bls.n	800737c <unpack_reply+0x84>
			}		
			joint_r_data[id - 1] = byte_8_reply.udata;
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	1e59      	subs	r1, r3, #1
 800739e:	4b80      	ldr	r3, [pc, #512]	; (80075a0 <unpack_reply+0x2a8>)
 80073a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073a4:	487f      	ldr	r0, [pc, #508]	; (80075a4 <unpack_reply+0x2ac>)
 80073a6:	00c9      	lsls	r1, r1, #3
 80073a8:	4401      	add	r1, r0
 80073aa:	e9c1 2300 	strd	r2, r3, [r1]
			reply_hs[id - 1] = hs_;
 80073ae:	69fb      	ldr	r3, [r7, #28]
 80073b0:	1e59      	subs	r1, r3, #1
 80073b2:	4b7d      	ldr	r3, [pc, #500]	; (80075a8 <unpack_reply+0x2b0>)
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	487c      	ldr	r0, [pc, #496]	; (80075ac <unpack_reply+0x2b4>)
 80073ba:	00c9      	lsls	r1, r1, #3
 80073bc:	4401      	add	r1, r0
 80073be:	e9c1 2300 	strd	r2, r3, [r1]

			if (id == 1)
 80073c2:	69fb      	ldr	r3, [r7, #28]
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	f040 8303 	bne.w	80079d0 <unpack_reply+0x6d8>
			{
				if (data[0]==0xAF)
 80073ca:	683b      	ldr	r3, [r7, #0]
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2baf      	cmp	r3, #175	; 0xaf
 80073d0:	f040 8136 	bne.w	8007640 <unpack_reply+0x348>
				{
				motor_decode_pvt(data, &pos1, &vel1, &tor1);
 80073d4:	4b76      	ldr	r3, [pc, #472]	; (80075b0 <unpack_reply+0x2b8>)
 80073d6:	4a77      	ldr	r2, [pc, #476]	; (80075b4 <unpack_reply+0x2bc>)
 80073d8:	4977      	ldr	r1, [pc, #476]	; (80075b8 <unpack_reply+0x2c0>)
 80073da:	6838      	ldr	r0, [r7, #0]
 80073dc:	f7ff fc98 	bl	8006d10 <motor_decode_pvt>

				if (pos1>180)
 80073e0:	4b75      	ldr	r3, [pc, #468]	; (80075b8 <unpack_reply+0x2c0>)
 80073e2:	edd3 7a00 	vldr	s15, [r3]
 80073e6:	ed9f 7a75 	vldr	s14, [pc, #468]	; 80075bc <unpack_reply+0x2c4>
 80073ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80073ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80073f2:	dd09      	ble.n	8007408 <unpack_reply+0x110>
					pos1=pos1-360;
 80073f4:	4b70      	ldr	r3, [pc, #448]	; (80075b8 <unpack_reply+0x2c0>)
 80073f6:	edd3 7a00 	vldr	s15, [r3]
 80073fa:	ed9f 7a71 	vldr	s14, [pc, #452]	; 80075c0 <unpack_reply+0x2c8>
 80073fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007402:	4b6d      	ldr	r3, [pc, #436]	; (80075b8 <unpack_reply+0x2c0>)
 8007404:	edc3 7a00 	vstr	s15, [r3]
				if (pos1<-180)
 8007408:	4b6b      	ldr	r3, [pc, #428]	; (80075b8 <unpack_reply+0x2c0>)
 800740a:	edd3 7a00 	vldr	s15, [r3]
 800740e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 80075c4 <unpack_reply+0x2cc>
 8007412:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007416:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800741a:	d509      	bpl.n	8007430 <unpack_reply+0x138>
					pos1=pos1+360;
 800741c:	4b66      	ldr	r3, [pc, #408]	; (80075b8 <unpack_reply+0x2c0>)
 800741e:	edd3 7a00 	vldr	s15, [r3]
 8007422:	ed9f 7a67 	vldr	s14, [pc, #412]	; 80075c0 <unpack_reply+0x2c8>
 8007426:	ee77 7a87 	vadd.f32	s15, s15, s14
 800742a:	4b63      	ldr	r3, [pc, #396]	; (80075b8 <unpack_reply+0x2c0>)
 800742c:	edc3 7a00 	vstr	s15, [r3]

				// vel from the diff of pos
				float_t tmp;
				tmp=(pos1-pos1_old)/0.001;
 8007430:	4b61      	ldr	r3, [pc, #388]	; (80075b8 <unpack_reply+0x2c0>)
 8007432:	ed93 7a00 	vldr	s14, [r3]
 8007436:	4b64      	ldr	r3, [pc, #400]	; (80075c8 <unpack_reply+0x2d0>)
 8007438:	edd3 7a00 	vldr	s15, [r3]
 800743c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007440:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8007444:	ed9f 5b54 	vldr	d5, [pc, #336]	; 8007598 <unpack_reply+0x2a0>
 8007448:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800744c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007450:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
				if (tmp>1000 || tmp<-1000)
 8007454:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8007458:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 80075cc <unpack_reply+0x2d4>
 800745c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007460:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007464:	dc08      	bgt.n	8007478 <unpack_reply+0x180>
 8007466:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800746a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80075d0 <unpack_reply+0x2d8>
 800746e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007476:	d502      	bpl.n	800747e <unpack_reply+0x186>
					tmp=0;
 8007478:	f04f 0300 	mov.w	r3, #0
 800747c:	62fb      	str	r3, [r7, #44]	; 0x2c
				vel1_cal=tmp;
 800747e:	4a55      	ldr	r2, [pc, #340]	; (80075d4 <unpack_reply+0x2dc>)
 8007480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007482:	6013      	str	r3, [r2, #0]

				// vel from low pass of vel feedback
				for (int i=0;i<2;i++)
 8007484:	2300      	movs	r3, #0
 8007486:	62bb      	str	r3, [r7, #40]	; 0x28
 8007488:	e00d      	b.n	80074a6 <unpack_reply+0x1ae>
					vel1_rec[i]=vel1_rec[i+1];
 800748a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748c:	3301      	adds	r3, #1
 800748e:	4a52      	ldr	r2, [pc, #328]	; (80075d8 <unpack_reply+0x2e0>)
 8007490:	009b      	lsls	r3, r3, #2
 8007492:	4413      	add	r3, r2
 8007494:	681a      	ldr	r2, [r3, #0]
 8007496:	4950      	ldr	r1, [pc, #320]	; (80075d8 <unpack_reply+0x2e0>)
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	009b      	lsls	r3, r3, #2
 800749c:	440b      	add	r3, r1
 800749e:	601a      	str	r2, [r3, #0]
				for (int i=0;i<2;i++)
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	3301      	adds	r3, #1
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80074a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a8:	2b01      	cmp	r3, #1
 80074aa:	ddee      	ble.n	800748a <unpack_reply+0x192>
				vel1_rec[2]=vel1;
 80074ac:	4b41      	ldr	r3, [pc, #260]	; (80075b4 <unpack_reply+0x2bc>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a49      	ldr	r2, [pc, #292]	; (80075d8 <unpack_reply+0x2e0>)
 80074b2:	6093      	str	r3, [r2, #8]

				float_t tmp2=0;
 80074b4:	f04f 0300 	mov.w	r3, #0
 80074b8:	627b      	str	r3, [r7, #36]	; 0x24
				for (int i=0;i<3;i++)
 80074ba:	2300      	movs	r3, #0
 80074bc:	623b      	str	r3, [r7, #32]
 80074be:	e016      	b.n	80074ee <unpack_reply+0x1f6>
					tmp2+=vel1_rec[i]*fir_par[i];
 80074c0:	4a45      	ldr	r2, [pc, #276]	; (80075d8 <unpack_reply+0x2e0>)
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	009b      	lsls	r3, r3, #2
 80074c6:	4413      	add	r3, r2
 80074c8:	ed93 7a00 	vldr	s14, [r3]
 80074cc:	4a43      	ldr	r2, [pc, #268]	; (80075dc <unpack_reply+0x2e4>)
 80074ce:	6a3b      	ldr	r3, [r7, #32]
 80074d0:	009b      	lsls	r3, r3, #2
 80074d2:	4413      	add	r3, r2
 80074d4:	edd3 7a00 	vldr	s15, [r3]
 80074d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80074e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074e4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
				for (int i=0;i<3;i++)
 80074e8:	6a3b      	ldr	r3, [r7, #32]
 80074ea:	3301      	adds	r3, #1
 80074ec:	623b      	str	r3, [r7, #32]
 80074ee:	6a3b      	ldr	r3, [r7, #32]
 80074f0:	2b02      	cmp	r3, #2
 80074f2:	dde5      	ble.n	80074c0 <unpack_reply+0x1c8>
				//---

				if (TD_iniCount==0)
 80074f4:	4b3a      	ldr	r3, [pc, #232]	; (80075e0 <unpack_reply+0x2e8>)
 80074f6:	edd3 7a00 	vldr	s15, [r3]
 80074fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80074fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007502:	d17b      	bne.n	80075fc <unpack_reply+0x304>
				{
					TD_x1=TD_x1_old+TD_h*TD_x2_old;
 8007504:	ed9f 7a37 	vldr	s14, [pc, #220]	; 80075e4 <unpack_reply+0x2ec>
 8007508:	4b37      	ldr	r3, [pc, #220]	; (80075e8 <unpack_reply+0x2f0>)
 800750a:	edd3 7a00 	vldr	s15, [r3]
 800750e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007512:	4b36      	ldr	r3, [pc, #216]	; (80075ec <unpack_reply+0x2f4>)
 8007514:	edd3 7a00 	vldr	s15, [r3]
 8007518:	ee77 7a27 	vadd.f32	s15, s14, s15
 800751c:	4b34      	ldr	r3, [pc, #208]	; (80075f0 <unpack_reply+0x2f8>)
 800751e:	edc3 7a00 	vstr	s15, [r3]
					TD_x2=TD_x2_old-TD_h*(TD_r*TD_r*TD_x1_old+2*TD_r*TD_x2_old-TD_r*TD_r*pos1);
 8007522:	4b31      	ldr	r3, [pc, #196]	; (80075e8 <unpack_reply+0x2f0>)
 8007524:	ed93 7a00 	vldr	s14, [r3]
 8007528:	eddf 6a32 	vldr	s13, [pc, #200]	; 80075f4 <unpack_reply+0x2fc>
 800752c:	eddf 7a31 	vldr	s15, [pc, #196]	; 80075f4 <unpack_reply+0x2fc>
 8007530:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8007534:	4b2d      	ldr	r3, [pc, #180]	; (80075ec <unpack_reply+0x2f4>)
 8007536:	edd3 7a00 	vldr	s15, [r3]
 800753a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800753e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 80075f4 <unpack_reply+0x2fc>
 8007542:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8007546:	4b28      	ldr	r3, [pc, #160]	; (80075e8 <unpack_reply+0x2f0>)
 8007548:	edd3 7a00 	vldr	s15, [r3]
 800754c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007550:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007554:	ed9f 6a27 	vldr	s12, [pc, #156]	; 80075f4 <unpack_reply+0x2fc>
 8007558:	eddf 7a26 	vldr	s15, [pc, #152]	; 80075f4 <unpack_reply+0x2fc>
 800755c:	ee26 6a27 	vmul.f32	s12, s12, s15
 8007560:	4b15      	ldr	r3, [pc, #84]	; (80075b8 <unpack_reply+0x2c0>)
 8007562:	edd3 7a00 	vldr	s15, [r3]
 8007566:	ee66 7a27 	vmul.f32	s15, s12, s15
 800756a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800756e:	eddf 6a1d 	vldr	s13, [pc, #116]	; 80075e4 <unpack_reply+0x2ec>
 8007572:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800757a:	4b1f      	ldr	r3, [pc, #124]	; (80075f8 <unpack_reply+0x300>)
 800757c:	edc3 7a00 	vstr	s15, [r3]
					TD_x1_old=TD_x1;
 8007580:	4b1b      	ldr	r3, [pc, #108]	; (80075f0 <unpack_reply+0x2f8>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4a19      	ldr	r2, [pc, #100]	; (80075ec <unpack_reply+0x2f4>)
 8007586:	6013      	str	r3, [r2, #0]
					TD_x2_old=TD_x2;
 8007588:	4b1b      	ldr	r3, [pc, #108]	; (80075f8 <unpack_reply+0x300>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a16      	ldr	r2, [pc, #88]	; (80075e8 <unpack_reply+0x2f0>)
 800758e:	6013      	str	r3, [r2, #0]
 8007590:	e04e      	b.n	8007630 <unpack_reply+0x338>
 8007592:	bf00      	nop
 8007594:	f3af 8000 	nop.w
 8007598:	d2f1a9fc 	.word	0xd2f1a9fc
 800759c:	3f50624d 	.word	0x3f50624d
 80075a0:	240000a0 	.word	0x240000a0
 80075a4:	240005f0 	.word	0x240005f0
 80075a8:	24000670 	.word	0x24000670
 80075ac:	240006f8 	.word	0x240006f8
 80075b0:	240006b8 	.word	0x240006b8
 80075b4:	240006b4 	.word	0x240006b4
 80075b8:	240006b0 	.word	0x240006b0
 80075bc:	43340000 	.word	0x43340000
 80075c0:	43b40000 	.word	0x43b40000
 80075c4:	c3340000 	.word	0xc3340000
 80075c8:	240006bc 	.word	0x240006bc
 80075cc:	447a0000 	.word	0x447a0000
 80075d0:	c47a0000 	.word	0xc47a0000
 80075d4:	240006c0 	.word	0x240006c0
 80075d8:	24000728 	.word	0x24000728
 80075dc:	24000068 	.word	0x24000068
 80075e0:	24000074 	.word	0x24000074
 80075e4:	3a83126f 	.word	0x3a83126f
 80075e8:	24000740 	.word	0x24000740
 80075ec:	24000738 	.word	0x24000738
 80075f0:	2400073c 	.word	0x2400073c
 80075f4:	442f0000 	.word	0x442f0000
 80075f8:	24000744 	.word	0x24000744
				}
				else
				{
					TD_iniCount--;
 80075fc:	4bb8      	ldr	r3, [pc, #736]	; (80078e0 <unpack_reply+0x5e8>)
 80075fe:	edd3 7a00 	vldr	s15, [r3]
 8007602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007606:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800760a:	4bb5      	ldr	r3, [pc, #724]	; (80078e0 <unpack_reply+0x5e8>)
 800760c:	edc3 7a00 	vstr	s15, [r3]
					TD_x1_old=pos1;
 8007610:	4bb4      	ldr	r3, [pc, #720]	; (80078e4 <unpack_reply+0x5ec>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	4ab4      	ldr	r2, [pc, #720]	; (80078e8 <unpack_reply+0x5f0>)
 8007616:	6013      	str	r3, [r2, #0]
					TD_x2_old=vel1;
 8007618:	4bb4      	ldr	r3, [pc, #720]	; (80078ec <unpack_reply+0x5f4>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4ab4      	ldr	r2, [pc, #720]	; (80078f0 <unpack_reply+0x5f8>)
 800761e:	6013      	str	r3, [r2, #0]
					TD_x1=pos1;
 8007620:	4bb0      	ldr	r3, [pc, #704]	; (80078e4 <unpack_reply+0x5ec>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4ab3      	ldr	r2, [pc, #716]	; (80078f4 <unpack_reply+0x5fc>)
 8007626:	6013      	str	r3, [r2, #0]
					TD_x2=vel1;
 8007628:	4bb0      	ldr	r3, [pc, #704]	; (80078ec <unpack_reply+0x5f4>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4ab2      	ldr	r2, [pc, #712]	; (80078f8 <unpack_reply+0x600>)
 800762e:	6013      	str	r3, [r2, #0]
				}

				vel1_fil=TD_x2;
 8007630:	4bb1      	ldr	r3, [pc, #708]	; (80078f8 <unpack_reply+0x600>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	4ab1      	ldr	r2, [pc, #708]	; (80078fc <unpack_reply+0x604>)
 8007636:	6013      	str	r3, [r2, #0]

				pos1_old=pos1;
 8007638:	4baa      	ldr	r3, [pc, #680]	; (80078e4 <unpack_reply+0x5ec>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4ab0      	ldr	r2, [pc, #704]	; (8007900 <unpack_reply+0x608>)
 800763e:	6013      	str	r3, [r2, #0]
				}

				if (data[0]==0x94)
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b94      	cmp	r3, #148	; 0x94
 8007646:	d152      	bne.n	80076ee <unpack_reply+0x3f6>
							pos_tmp-=360;

						MF_1.out_Pos=pos_tmp;
					}*/

					if (MF_1.sgl_pos_old!=0 && MF_1.pos_off!=0)
 8007648:	4bae      	ldr	r3, [pc, #696]	; (8007904 <unpack_reply+0x60c>)
 800764a:	edd3 7a05 	vldr	s15, [r3, #20]
 800764e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007656:	d00b      	beq.n	8007670 <unpack_reply+0x378>
 8007658:	4baa      	ldr	r3, [pc, #680]	; (8007904 <unpack_reply+0x60c>)
 800765a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800765e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007662:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007666:	d003      	beq.n	8007670 <unpack_reply+0x378>
						MF_1.iniReady=1;
 8007668:	4ba6      	ldr	r3, [pc, #664]	; (8007904 <unpack_reply+0x60c>)
 800766a:	2201      	movs	r2, #1
 800766c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

					sgl_pos=MF_1.sgl_pos;
 8007670:	4ba4      	ldr	r3, [pc, #656]	; (8007904 <unpack_reply+0x60c>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4aa4      	ldr	r2, [pc, #656]	; (8007908 <unpack_reply+0x610>)
 8007676:	6013      	str	r3, [r2, #0]

					float_t pos_tmp;
					motor_decode_sglPos(data, &pos_tmp);
 8007678:	f107 0318 	add.w	r3, r7, #24
 800767c:	4619      	mov	r1, r3
 800767e:	6838      	ldr	r0, [r7, #0]
 8007680:	f7ff fbba 	bl	8006df8 <motor_decode_sglPos>
					//pos_tmp=pos_tmp-floor(pos_tmp/360)*360; // round to 0-360
					MF_1.mul_pos=pos_tmp;
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	4a9f      	ldr	r2, [pc, #636]	; (8007904 <unpack_reply+0x60c>)
 8007688:	6053      	str	r3, [r2, #4]
					if (MF_1.sgl_pos_old!=0 && MF_1.sgl_pos!=0 && MF_1.iniReady==0)
 800768a:	4b9e      	ldr	r3, [pc, #632]	; (8007904 <unpack_reply+0x60c>)
 800768c:	edd3 7a05 	vldr	s15, [r3, #20]
 8007690:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007698:	d01f      	beq.n	80076da <unpack_reply+0x3e2>
 800769a:	4b9a      	ldr	r3, [pc, #616]	; (8007904 <unpack_reply+0x60c>)
 800769c:	edd3 7a00 	vldr	s15, [r3]
 80076a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80076a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076a8:	d017      	beq.n	80076da <unpack_reply+0x3e2>
 80076aa:	4b96      	ldr	r3, [pc, #600]	; (8007904 <unpack_reply+0x60c>)
 80076ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d112      	bne.n	80076da <unpack_reply+0x3e2>
					{
						MF_1.pos_off=MF_1.mul_pos-MF_1.sgl_pos;
 80076b4:	4b93      	ldr	r3, [pc, #588]	; (8007904 <unpack_reply+0x60c>)
 80076b6:	ed93 7a01 	vldr	s14, [r3, #4]
 80076ba:	4b92      	ldr	r3, [pc, #584]	; (8007904 <unpack_reply+0x60c>)
 80076bc:	edd3 7a00 	vldr	s15, [r3]
 80076c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076c4:	4b8f      	ldr	r3, [pc, #572]	; (8007904 <unpack_reply+0x60c>)
 80076c6:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
						MF_1.loopNum=0;
 80076ca:	4b8e      	ldr	r3, [pc, #568]	; (8007904 <unpack_reply+0x60c>)
 80076cc:	f04f 0200 	mov.w	r2, #0
 80076d0:	609a      	str	r2, [r3, #8]
						MF_1.iniReady=1;
 80076d2:	4b8c      	ldr	r3, [pc, #560]	; (8007904 <unpack_reply+0x60c>)
 80076d4:	2201      	movs	r2, #1
 80076d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					}

					mul_pos=MF_1.mul_pos/10.0;
 80076da:	4b8a      	ldr	r3, [pc, #552]	; (8007904 <unpack_reply+0x60c>)
 80076dc:	ed93 7a01 	vldr	s14, [r3, #4]
 80076e0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80076e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076e8:	4b88      	ldr	r3, [pc, #544]	; (800790c <unpack_reply+0x614>)
 80076ea:	edc3 7a00 	vstr	s15, [r3]
				}
				if (data[0]==0x92)
 80076ee:	683b      	ldr	r3, [r7, #0]
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	2b92      	cmp	r3, #146	; 0x92
 80076f4:	d13a      	bne.n	800776c <unpack_reply+0x474>
				{
					float_t pos_tmp;
					motor_decode_mulPos(data, &pos_tmp);
 80076f6:	f107 0314 	add.w	r3, r7, #20
 80076fa:	4619      	mov	r1, r3
 80076fc:	6838      	ldr	r0, [r7, #0]
 80076fe:	f7ff fbaf 	bl	8006e60 <motor_decode_mulPos>
					//pos_tmp=pos_tmp-floor(pos_tmp/360)*360; // round to 0-360
					MF_1.mul_pos=pos_tmp;
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	4a7f      	ldr	r2, [pc, #508]	; (8007904 <unpack_reply+0x60c>)
 8007706:	6053      	str	r3, [r2, #4]
					if (MF_1.sgl_pos_old!=0 && MF_1.sgl_pos!=0 && MF_1.iniReady==0)
 8007708:	4b7e      	ldr	r3, [pc, #504]	; (8007904 <unpack_reply+0x60c>)
 800770a:	edd3 7a05 	vldr	s15, [r3, #20]
 800770e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007712:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007716:	d01f      	beq.n	8007758 <unpack_reply+0x460>
 8007718:	4b7a      	ldr	r3, [pc, #488]	; (8007904 <unpack_reply+0x60c>)
 800771a:	edd3 7a00 	vldr	s15, [r3]
 800771e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007726:	d017      	beq.n	8007758 <unpack_reply+0x460>
 8007728:	4b76      	ldr	r3, [pc, #472]	; (8007904 <unpack_reply+0x60c>)
 800772a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800772e:	2b00      	cmp	r3, #0
 8007730:	d112      	bne.n	8007758 <unpack_reply+0x460>
					{
						MF_1.pos_off=MF_1.mul_pos-MF_1.sgl_pos;
 8007732:	4b74      	ldr	r3, [pc, #464]	; (8007904 <unpack_reply+0x60c>)
 8007734:	ed93 7a01 	vldr	s14, [r3, #4]
 8007738:	4b72      	ldr	r3, [pc, #456]	; (8007904 <unpack_reply+0x60c>)
 800773a:	edd3 7a00 	vldr	s15, [r3]
 800773e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007742:	4b70      	ldr	r3, [pc, #448]	; (8007904 <unpack_reply+0x60c>)
 8007744:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
						MF_1.loopNum=0;
 8007748:	4b6e      	ldr	r3, [pc, #440]	; (8007904 <unpack_reply+0x60c>)
 800774a:	f04f 0200 	mov.w	r2, #0
 800774e:	609a      	str	r2, [r3, #8]
						MF_1.iniReady=1;
 8007750:	4b6c      	ldr	r3, [pc, #432]	; (8007904 <unpack_reply+0x60c>)
 8007752:	2201      	movs	r2, #1
 8007754:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					}

					mul_pos=MF_1.mul_pos/10.0;
 8007758:	4b6a      	ldr	r3, [pc, #424]	; (8007904 <unpack_reply+0x60c>)
 800775a:	ed93 7a01 	vldr	s14, [r3, #4]
 800775e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8007762:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007766:	4b69      	ldr	r3, [pc, #420]	; (800790c <unpack_reply+0x614>)
 8007768:	edc3 7a00 	vstr	s15, [r3]

				}
				if (data[0]==0xa1)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	781b      	ldrb	r3, [r3, #0]
 8007770:	2ba1      	cmp	r3, #161	; 0xa1
 8007772:	f040 812d 	bne.w	80079d0 <unpack_reply+0x6d8>
				{
					float_t pos_tmp, vel_tmp, tor_tmp;
					motor_decode_cur(data, &pos_tmp, &vel_tmp, &tor_tmp);
 8007776:	f107 0308 	add.w	r3, r7, #8
 800777a:	f107 020c 	add.w	r2, r7, #12
 800777e:	f107 0110 	add.w	r1, r7, #16
 8007782:	6838      	ldr	r0, [r7, #0]
 8007784:	f7ff fbb0 	bl	8006ee8 <motor_decode_cur>
					MF_1.sgl_pos_old=MF_1.sgl_pos;
 8007788:	4b5e      	ldr	r3, [pc, #376]	; (8007904 <unpack_reply+0x60c>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a5d      	ldr	r2, [pc, #372]	; (8007904 <unpack_reply+0x60c>)
 800778e:	6153      	str	r3, [r2, #20]
					MF_1.sgl_pos=pos_tmp;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	4a5c      	ldr	r2, [pc, #368]	; (8007904 <unpack_reply+0x60c>)
 8007794:	6013      	str	r3, [r2, #0]
					MF_1.vel=vel_tmp;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	4a5a      	ldr	r2, [pc, #360]	; (8007904 <unpack_reply+0x60c>)
 800779a:	60d3      	str	r3, [r2, #12]
					MF_1.tor=tor_tmp;
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	4a59      	ldr	r2, [pc, #356]	; (8007904 <unpack_reply+0x60c>)
 80077a0:	6113      	str	r3, [r2, #16]
					MF_1.out_Vel=vel_tmp/10;
 80077a2:	ed97 7a03 	vldr	s14, [r7, #12]
 80077a6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80077aa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80077ae:	4b55      	ldr	r3, [pc, #340]	; (8007904 <unpack_reply+0x60c>)
 80077b0:	edc3 7a07 	vstr	s15, [r3, #28]

					if (MF_1.iniReady>0)
 80077b4:	4b53      	ldr	r3, [pc, #332]	; (8007904 <unpack_reply+0x60c>)
 80077b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d065      	beq.n	800788a <unpack_reply+0x592>
					{
						if (MF_1.sgl_pos-MF_1.sgl_pos_old<-300)
 80077be:	4b51      	ldr	r3, [pc, #324]	; (8007904 <unpack_reply+0x60c>)
 80077c0:	ed93 7a00 	vldr	s14, [r3]
 80077c4:	4b4f      	ldr	r3, [pc, #316]	; (8007904 <unpack_reply+0x60c>)
 80077c6:	edd3 7a05 	vldr	s15, [r3, #20]
 80077ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077ce:	ed9f 7a50 	vldr	s14, [pc, #320]	; 8007910 <unpack_reply+0x618>
 80077d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80077d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077da:	d509      	bpl.n	80077f0 <unpack_reply+0x4f8>
							MF_1.loopNum++;
 80077dc:	4b49      	ldr	r3, [pc, #292]	; (8007904 <unpack_reply+0x60c>)
 80077de:	edd3 7a02 	vldr	s15, [r3, #8]
 80077e2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80077ea:	4b46      	ldr	r3, [pc, #280]	; (8007904 <unpack_reply+0x60c>)
 80077ec:	edc3 7a02 	vstr	s15, [r3, #8]
						if (MF_1.sgl_pos-MF_1.sgl_pos_old>300)
 80077f0:	4b44      	ldr	r3, [pc, #272]	; (8007904 <unpack_reply+0x60c>)
 80077f2:	ed93 7a00 	vldr	s14, [r3]
 80077f6:	4b43      	ldr	r3, [pc, #268]	; (8007904 <unpack_reply+0x60c>)
 80077f8:	edd3 7a05 	vldr	s15, [r3, #20]
 80077fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007800:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8007914 <unpack_reply+0x61c>
 8007804:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800780c:	dd09      	ble.n	8007822 <unpack_reply+0x52a>
							MF_1.loopNum--;
 800780e:	4b3d      	ldr	r3, [pc, #244]	; (8007904 <unpack_reply+0x60c>)
 8007810:	edd3 7a02 	vldr	s15, [r3, #8]
 8007814:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007818:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800781c:	4b39      	ldr	r3, [pc, #228]	; (8007904 <unpack_reply+0x60c>)
 800781e:	edc3 7a02 	vstr	s15, [r3, #8]

						pos_tmp=(MF_1.sgl_pos+MF_1.pos_off+MF_1.loopNum*360.)/MF_1.ratio;
 8007822:	4b38      	ldr	r3, [pc, #224]	; (8007904 <unpack_reply+0x60c>)
 8007824:	ed93 7a00 	vldr	s14, [r3]
 8007828:	4b36      	ldr	r3, [pc, #216]	; (8007904 <unpack_reply+0x60c>)
 800782a:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800782e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007832:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8007836:	4b33      	ldr	r3, [pc, #204]	; (8007904 <unpack_reply+0x60c>)
 8007838:	edd3 7a02 	vldr	s15, [r3, #8]
 800783c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007840:	ed9f 5b25 	vldr	d5, [pc, #148]	; 80078d8 <unpack_reply+0x5e0>
 8007844:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007848:	ee36 5b07 	vadd.f64	d5, d6, d7
 800784c:	4b2d      	ldr	r3, [pc, #180]	; (8007904 <unpack_reply+0x60c>)
 800784e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8007852:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 8007856:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800785a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800785e:	edc7 7a04 	vstr	s15, [r7, #16]
						if (pos_tmp>180)
 8007862:	edd7 7a04 	vldr	s15, [r7, #16]
 8007866:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8007918 <unpack_reply+0x620>
 800786a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800786e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007872:	dd07      	ble.n	8007884 <unpack_reply+0x58c>
							pos_tmp-=360;
 8007874:	edd7 7a04 	vldr	s15, [r7, #16]
 8007878:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800791c <unpack_reply+0x624>
 800787c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007880:	edc7 7a04 	vstr	s15, [r7, #16]

						MF_1.out_Pos=pos_tmp;
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	4a1f      	ldr	r2, [pc, #124]	; (8007904 <unpack_reply+0x60c>)
 8007888:	6193      	str	r3, [r2, #24]
					}

					if (TD_iniCount==0)
 800788a:	4b15      	ldr	r3, [pc, #84]	; (80078e0 <unpack_reply+0x5e8>)
 800788c:	edd3 7a00 	vldr	s15, [r3]
 8007890:	eef5 7a40 	vcmp.f32	s15, #0.0
 8007894:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007898:	d170      	bne.n	800797c <unpack_reply+0x684>
					{
						TD_x1=TD_x1_old+TD_h*TD_x2_old;
 800789a:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8007920 <unpack_reply+0x628>
 800789e:	4b14      	ldr	r3, [pc, #80]	; (80078f0 <unpack_reply+0x5f8>)
 80078a0:	edd3 7a00 	vldr	s15, [r3]
 80078a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80078a8:	4b0f      	ldr	r3, [pc, #60]	; (80078e8 <unpack_reply+0x5f0>)
 80078aa:	edd3 7a00 	vldr	s15, [r3]
 80078ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80078b2:	4b10      	ldr	r3, [pc, #64]	; (80078f4 <unpack_reply+0x5fc>)
 80078b4:	edc3 7a00 	vstr	s15, [r3]
						TD_x2=TD_x2_old-TD_h*(TD_r*TD_r*TD_x1_old+2*TD_r*TD_x2_old-TD_r*TD_r*MF_1.out_Pos);
 80078b8:	4b0d      	ldr	r3, [pc, #52]	; (80078f0 <unpack_reply+0x5f8>)
 80078ba:	ed93 7a00 	vldr	s14, [r3]
 80078be:	eddf 6a19 	vldr	s13, [pc, #100]	; 8007924 <unpack_reply+0x62c>
 80078c2:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007924 <unpack_reply+0x62c>
 80078c6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80078ca:	4b07      	ldr	r3, [pc, #28]	; (80078e8 <unpack_reply+0x5f0>)
 80078cc:	edd3 7a00 	vldr	s15, [r3]
 80078d0:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80078d4:	e028      	b.n	8007928 <unpack_reply+0x630>
 80078d6:	bf00      	nop
 80078d8:	00000000 	.word	0x00000000
 80078dc:	40768000 	.word	0x40768000
 80078e0:	24000074 	.word	0x24000074
 80078e4:	240006b0 	.word	0x240006b0
 80078e8:	24000738 	.word	0x24000738
 80078ec:	240006b4 	.word	0x240006b4
 80078f0:	24000740 	.word	0x24000740
 80078f4:	2400073c 	.word	0x2400073c
 80078f8:	24000744 	.word	0x24000744
 80078fc:	24000734 	.word	0x24000734
 8007900:	240006bc 	.word	0x240006bc
 8007904:	24000008 	.word	0x24000008
 8007908:	2400074c 	.word	0x2400074c
 800790c:	24000748 	.word	0x24000748
 8007910:	c3960000 	.word	0xc3960000
 8007914:	43960000 	.word	0x43960000
 8007918:	43340000 	.word	0x43340000
 800791c:	43b40000 	.word	0x43b40000
 8007920:	3a83126f 	.word	0x3a83126f
 8007924:	442f0000 	.word	0x442f0000
 8007928:	ed5f 7a02 	vldr	s15, [pc, #-8]	; 8007924 <unpack_reply+0x62c>
 800792c:	ee37 6aa7 	vadd.f32	s12, s15, s15
 8007930:	4b6b      	ldr	r3, [pc, #428]	; (8007ae0 <unpack_reply+0x7e8>)
 8007932:	edd3 7a00 	vldr	s15, [r3]
 8007936:	ee66 7a27 	vmul.f32	s15, s12, s15
 800793a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 800793e:	ed9f 6a69 	vldr	s12, [pc, #420]	; 8007ae4 <unpack_reply+0x7ec>
 8007942:	eddf 7a68 	vldr	s15, [pc, #416]	; 8007ae4 <unpack_reply+0x7ec>
 8007946:	ee26 6a27 	vmul.f32	s12, s12, s15
 800794a:	4b67      	ldr	r3, [pc, #412]	; (8007ae8 <unpack_reply+0x7f0>)
 800794c:	edd3 7a06 	vldr	s15, [r3, #24]
 8007950:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007954:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007958:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007aec <unpack_reply+0x7f4>
 800795c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007960:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007964:	4b62      	ldr	r3, [pc, #392]	; (8007af0 <unpack_reply+0x7f8>)
 8007966:	edc3 7a00 	vstr	s15, [r3]
						TD_x1_old=TD_x1;
 800796a:	4b62      	ldr	r3, [pc, #392]	; (8007af4 <unpack_reply+0x7fc>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	4a62      	ldr	r2, [pc, #392]	; (8007af8 <unpack_reply+0x800>)
 8007970:	6013      	str	r3, [r2, #0]
						TD_x2_old=TD_x2;
 8007972:	4b5f      	ldr	r3, [pc, #380]	; (8007af0 <unpack_reply+0x7f8>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a5a      	ldr	r2, [pc, #360]	; (8007ae0 <unpack_reply+0x7e8>)
 8007978:	6013      	str	r3, [r2, #0]
 800797a:	e019      	b.n	80079b0 <unpack_reply+0x6b8>
					}
					else
					{
						TD_iniCount--;
 800797c:	4b5f      	ldr	r3, [pc, #380]	; (8007afc <unpack_reply+0x804>)
 800797e:	edd3 7a00 	vldr	s15, [r3]
 8007982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800798a:	4b5c      	ldr	r3, [pc, #368]	; (8007afc <unpack_reply+0x804>)
 800798c:	edc3 7a00 	vstr	s15, [r3]
						TD_x1_old=MF_1.out_Pos;
 8007990:	4b55      	ldr	r3, [pc, #340]	; (8007ae8 <unpack_reply+0x7f0>)
 8007992:	699b      	ldr	r3, [r3, #24]
 8007994:	4a58      	ldr	r2, [pc, #352]	; (8007af8 <unpack_reply+0x800>)
 8007996:	6013      	str	r3, [r2, #0]
						TD_x2_old=MF_1.out_Vel;
 8007998:	4b53      	ldr	r3, [pc, #332]	; (8007ae8 <unpack_reply+0x7f0>)
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	4a50      	ldr	r2, [pc, #320]	; (8007ae0 <unpack_reply+0x7e8>)
 800799e:	6013      	str	r3, [r2, #0]
						TD_x1=MF_1.out_Pos;
 80079a0:	4b51      	ldr	r3, [pc, #324]	; (8007ae8 <unpack_reply+0x7f0>)
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	4a53      	ldr	r2, [pc, #332]	; (8007af4 <unpack_reply+0x7fc>)
 80079a6:	6013      	str	r3, [r2, #0]
						TD_x2=MF_1.out_Vel;
 80079a8:	4b4f      	ldr	r3, [pc, #316]	; (8007ae8 <unpack_reply+0x7f0>)
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	4a50      	ldr	r2, [pc, #320]	; (8007af0 <unpack_reply+0x7f8>)
 80079ae:	6013      	str	r3, [r2, #0]
					}

					MF_1.out_Vel_fil=TD_x2;
 80079b0:	4b4f      	ldr	r3, [pc, #316]	; (8007af0 <unpack_reply+0x7f8>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a4c      	ldr	r2, [pc, #304]	; (8007ae8 <unpack_reply+0x7f0>)
 80079b6:	6213      	str	r3, [r2, #32]

					tor_pos=MF_1.out_Pos;
 80079b8:	4b4b      	ldr	r3, [pc, #300]	; (8007ae8 <unpack_reply+0x7f0>)
 80079ba:	699b      	ldr	r3, [r3, #24]
 80079bc:	4a50      	ldr	r2, [pc, #320]	; (8007b00 <unpack_reply+0x808>)
 80079be:	6013      	str	r3, [r2, #0]
					vel_cur=MF_1.out_Vel;
 80079c0:	4b49      	ldr	r3, [pc, #292]	; (8007ae8 <unpack_reply+0x7f0>)
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	4a4f      	ldr	r2, [pc, #316]	; (8007b04 <unpack_reply+0x80c>)
 80079c6:	6013      	str	r3, [r2, #0]
					vel_cur_fil=MF_1.out_Vel_fil;
 80079c8:	4b47      	ldr	r3, [pc, #284]	; (8007ae8 <unpack_reply+0x7f0>)
 80079ca:	6a1b      	ldr	r3, [r3, #32]
 80079cc:	4a4e      	ldr	r2, [pc, #312]	; (8007b08 <unpack_reply+0x810>)
 80079ce:	6013      	str	r3, [r2, #0]
				}
			}			
			if (id == 2)
 80079d0:	69fb      	ldr	r3, [r7, #28]
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d105      	bne.n	80079e2 <unpack_reply+0x6ea>
			{
				motor_decode_pvt(data, &pos2, &vel2, &tor2);
 80079d6:	4b4d      	ldr	r3, [pc, #308]	; (8007b0c <unpack_reply+0x814>)
 80079d8:	4a4d      	ldr	r2, [pc, #308]	; (8007b10 <unpack_reply+0x818>)
 80079da:	494e      	ldr	r1, [pc, #312]	; (8007b14 <unpack_reply+0x81c>)
 80079dc:	6838      	ldr	r0, [r7, #0]
 80079de:	f7ff f997 	bl	8006d10 <motor_decode_pvt>
			}
			if (id == 3)
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d105      	bne.n	80079f4 <unpack_reply+0x6fc>
			{
				motor_decode_pvt(data, &pos3, &vel3, &tor3);
 80079e8:	4b4b      	ldr	r3, [pc, #300]	; (8007b18 <unpack_reply+0x820>)
 80079ea:	4a4c      	ldr	r2, [pc, #304]	; (8007b1c <unpack_reply+0x824>)
 80079ec:	494c      	ldr	r1, [pc, #304]	; (8007b20 <unpack_reply+0x828>)
 80079ee:	6838      	ldr	r0, [r7, #0]
 80079f0:	f7ff f98e 	bl	8006d10 <motor_decode_pvt>
			}			
			
			if (id == 4)
 80079f4:	69fb      	ldr	r3, [r7, #28]
 80079f6:	2b04      	cmp	r3, #4
 80079f8:	d105      	bne.n	8007a06 <unpack_reply+0x70e>
			{
				motor_decode_pvt(data, &pos4, &vel4, &tor4);
 80079fa:	4b4a      	ldr	r3, [pc, #296]	; (8007b24 <unpack_reply+0x82c>)
 80079fc:	4a4a      	ldr	r2, [pc, #296]	; (8007b28 <unpack_reply+0x830>)
 80079fe:	494b      	ldr	r1, [pc, #300]	; (8007b2c <unpack_reply+0x834>)
 8007a00:	6838      	ldr	r0, [r7, #0]
 8007a02:	f7ff f985 	bl	8006d10 <motor_decode_pvt>
			}
			if (id == 5)
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	2b05      	cmp	r3, #5
 8007a0a:	d158      	bne.n	8007abe <unpack_reply+0x7c6>
			{
				byte_2u_reply.buffer[0] = data[0];
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	781a      	ldrb	r2, [r3, #0]
 8007a10:	4b47      	ldr	r3, [pc, #284]	; (8007b30 <unpack_reply+0x838>)
 8007a12:	701a      	strb	r2, [r3, #0]
				byte_2u_reply.buffer[1] = data[1];
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	785a      	ldrb	r2, [r3, #1]
 8007a18:	4b45      	ldr	r3, [pc, #276]	; (8007b30 <unpack_reply+0x838>)
 8007a1a:	705a      	strb	r2, [r3, #1]
				pos_p1 = (double_t)byte_2u_reply.udata / 65536 * 360.0;
 8007a1c:	4b44      	ldr	r3, [pc, #272]	; (8007b30 <unpack_reply+0x838>)
 8007a1e:	881b      	ldrh	r3, [r3, #0]
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8007a28:	ed9f 5b27 	vldr	d5, [pc, #156]	; 8007ac8 <unpack_reply+0x7d0>
 8007a2c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007a30:	ed9f 6b27 	vldr	d6, [pc, #156]	; 8007ad0 <unpack_reply+0x7d8>
 8007a34:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a38:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007a3c:	4b3d      	ldr	r3, [pc, #244]	; (8007b34 <unpack_reply+0x83c>)
 8007a3e:	edc3 7a00 	vstr	s15, [r3]
				byte_2u_reply.buffer[0] = data[2];
 8007a42:	683b      	ldr	r3, [r7, #0]
 8007a44:	789a      	ldrb	r2, [r3, #2]
 8007a46:	4b3a      	ldr	r3, [pc, #232]	; (8007b30 <unpack_reply+0x838>)
 8007a48:	701a      	strb	r2, [r3, #0]
				byte_2u_reply.buffer[1] = data[3];
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	78da      	ldrb	r2, [r3, #3]
 8007a4e:	4b38      	ldr	r3, [pc, #224]	; (8007b30 <unpack_reply+0x838>)
 8007a50:	705a      	strb	r2, [r3, #1]
				pos_p2 = (double_t)byte_2u_reply.udata / 65536 * 360.0;
 8007a52:	4b37      	ldr	r3, [pc, #220]	; (8007b30 <unpack_reply+0x838>)
 8007a54:	881b      	ldrh	r3, [r3, #0]
 8007a56:	ee07 3a90 	vmov	s15, r3
 8007a5a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8007a5e:	ed9f 5b1a 	vldr	d5, [pc, #104]	; 8007ac8 <unpack_reply+0x7d0>
 8007a62:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007a66:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8007ad0 <unpack_reply+0x7d8>
 8007a6a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007a6e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007a72:	4b31      	ldr	r3, [pc, #196]	; (8007b38 <unpack_reply+0x840>)
 8007a74:	edc3 7a00 	vstr	s15, [r3]
				byte_4_reply.buffer[0] = data[4];
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	791a      	ldrb	r2, [r3, #4]
 8007a7c:	4b2f      	ldr	r3, [pc, #188]	; (8007b3c <unpack_reply+0x844>)
 8007a7e:	701a      	strb	r2, [r3, #0]
				byte_4_reply.buffer[1] = data[5];
 8007a80:	683b      	ldr	r3, [r7, #0]
 8007a82:	795a      	ldrb	r2, [r3, #5]
 8007a84:	4b2d      	ldr	r3, [pc, #180]	; (8007b3c <unpack_reply+0x844>)
 8007a86:	705a      	strb	r2, [r3, #1]
				byte_4_reply.buffer[2] = data[6];
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	799a      	ldrb	r2, [r3, #6]
 8007a8c:	4b2b      	ldr	r3, [pc, #172]	; (8007b3c <unpack_reply+0x844>)
 8007a8e:	709a      	strb	r2, [r3, #2]
				byte_4_reply.buffer[3] = data[7];
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	79da      	ldrb	r2, [r3, #7]
 8007a94:	4b29      	ldr	r3, [pc, #164]	; (8007b3c <unpack_reply+0x844>)
 8007a96:	70da      	strb	r2, [r3, #3]
				pos_s = (double_t)byte_4_reply.udata / 4096 * 360.0;				
 8007a98:	4b28      	ldr	r3, [pc, #160]	; (8007b3c <unpack_reply+0x844>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	ee07 3a90 	vmov	s15, r3
 8007aa0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8007aa4:	ed9f 5b0c 	vldr	d5, [pc, #48]	; 8007ad8 <unpack_reply+0x7e0>
 8007aa8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007aac:	ed9f 6b08 	vldr	d6, [pc, #32]	; 8007ad0 <unpack_reply+0x7d8>
 8007ab0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007ab4:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007ab8:	4b21      	ldr	r3, [pc, #132]	; (8007b40 <unpack_reply+0x848>)
 8007aba:	edc3 7a00 	vstr	s15, [r3]
			}		
		}
	}	
}
 8007abe:	bf00      	nop
 8007ac0:	3738      	adds	r7, #56	; 0x38
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	00000000 	.word	0x00000000
 8007acc:	40f00000 	.word	0x40f00000
 8007ad0:	00000000 	.word	0x00000000
 8007ad4:	40768000 	.word	0x40768000
 8007ad8:	00000000 	.word	0x00000000
 8007adc:	40b00000 	.word	0x40b00000
 8007ae0:	24000740 	.word	0x24000740
 8007ae4:	442f0000 	.word	0x442f0000
 8007ae8:	24000008 	.word	0x24000008
 8007aec:	3a83126f 	.word	0x3a83126f
 8007af0:	24000744 	.word	0x24000744
 8007af4:	2400073c 	.word	0x2400073c
 8007af8:	24000738 	.word	0x24000738
 8007afc:	24000074 	.word	0x24000074
 8007b00:	24000750 	.word	0x24000750
 8007b04:	24000754 	.word	0x24000754
 8007b08:	24000758 	.word	0x24000758
 8007b0c:	240006cc 	.word	0x240006cc
 8007b10:	240006c8 	.word	0x240006c8
 8007b14:	240006c4 	.word	0x240006c4
 8007b18:	240006d8 	.word	0x240006d8
 8007b1c:	240006d4 	.word	0x240006d4
 8007b20:	240006d0 	.word	0x240006d0
 8007b24:	240006e4 	.word	0x240006e4
 8007b28:	240006e0 	.word	0x240006e0
 8007b2c:	240006dc 	.word	0x240006dc
 8007b30:	240000ac 	.word	0x240000ac
 8007b34:	240006ec 	.word	0x240006ec
 8007b38:	240006f0 	.word	0x240006f0
 8007b3c:	240000b0 	.word	0x240000b0
 8007b40:	240006e8 	.word	0x240006e8

08007b44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007b44:	b580      	push	{r7, lr}
 8007b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8007b48:	f000 fdac 	bl	80086a4 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007b4c:	f7f9 f810 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007b50:	f000 f918 	bl	8007d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007b54:	f000 fc1c 	bl	8008390 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8007b58:	f000 f9c2 	bl	8007ee0 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8007b5c:	f000 fa24 	bl	8007fa8 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8007b60:	f000 fa88 	bl	8008074 <MX_SPI1_Init>
  MX_TIM2_Init();
 8007b64:	f000 fade 	bl	8008124 <MX_TIM2_Init>
  MX_TIM4_Init();
 8007b68:	f000 fb2a 	bl	80081c0 <MX_TIM4_Init>
  MX_TIM5_Init();
 8007b6c:	f000 fb76 	bl	800825c <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8007b70:	f000 fbc2 	bl	80082f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	
	//1. init tx msg
	joint_1.Identifier = 0x1;
 8007b74:	4b71      	ldr	r3, [pc, #452]	; (8007d3c <main+0x1f8>)
 8007b76:	2201      	movs	r2, #1
 8007b78:	601a      	str	r2, [r3, #0]
	joint_1.IdType = FDCAN_STANDARD_ID;
 8007b7a:	4b70      	ldr	r3, [pc, #448]	; (8007d3c <main+0x1f8>)
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	605a      	str	r2, [r3, #4]
	joint_1.TxFrameType = FDCAN_DATA_FRAME;
 8007b80:	4b6e      	ldr	r3, [pc, #440]	; (8007d3c <main+0x1f8>)
 8007b82:	2200      	movs	r2, #0
 8007b84:	609a      	str	r2, [r3, #8]
	joint_1.DataLength = FDCAN_DLC_BYTES_8;
 8007b86:	4b6d      	ldr	r3, [pc, #436]	; (8007d3c <main+0x1f8>)
 8007b88:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007b8c:	60da      	str	r2, [r3, #12]
	joint_1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007b8e:	4b6b      	ldr	r3, [pc, #428]	; (8007d3c <main+0x1f8>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	611a      	str	r2, [r3, #16]
	joint_1.BitRateSwitch = FDCAN_BRS_OFF;
 8007b94:	4b69      	ldr	r3, [pc, #420]	; (8007d3c <main+0x1f8>)
 8007b96:	2200      	movs	r2, #0
 8007b98:	615a      	str	r2, [r3, #20]
	joint_1.FDFormat = FDCAN_CLASSIC_CAN;
 8007b9a:	4b68      	ldr	r3, [pc, #416]	; (8007d3c <main+0x1f8>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	619a      	str	r2, [r3, #24]
	joint_1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007ba0:	4b66      	ldr	r3, [pc, #408]	; (8007d3c <main+0x1f8>)
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	61da      	str	r2, [r3, #28]
	joint_1.MessageMarker = 0;
 8007ba6:	4b65      	ldr	r3, [pc, #404]	; (8007d3c <main+0x1f8>)
 8007ba8:	2200      	movs	r2, #0
 8007baa:	621a      	str	r2, [r3, #32]
	
	joint_2.Identifier = 0x2;
 8007bac:	4b64      	ldr	r3, [pc, #400]	; (8007d40 <main+0x1fc>)
 8007bae:	2202      	movs	r2, #2
 8007bb0:	601a      	str	r2, [r3, #0]
	joint_2.IdType = FDCAN_STANDARD_ID;
 8007bb2:	4b63      	ldr	r3, [pc, #396]	; (8007d40 <main+0x1fc>)
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	605a      	str	r2, [r3, #4]
	joint_2.TxFrameType = FDCAN_DATA_FRAME;
 8007bb8:	4b61      	ldr	r3, [pc, #388]	; (8007d40 <main+0x1fc>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	609a      	str	r2, [r3, #8]
	joint_2.DataLength = FDCAN_DLC_BYTES_8;
 8007bbe:	4b60      	ldr	r3, [pc, #384]	; (8007d40 <main+0x1fc>)
 8007bc0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007bc4:	60da      	str	r2, [r3, #12]
	joint_2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007bc6:	4b5e      	ldr	r3, [pc, #376]	; (8007d40 <main+0x1fc>)
 8007bc8:	2200      	movs	r2, #0
 8007bca:	611a      	str	r2, [r3, #16]
	joint_2.BitRateSwitch = FDCAN_BRS_OFF;
 8007bcc:	4b5c      	ldr	r3, [pc, #368]	; (8007d40 <main+0x1fc>)
 8007bce:	2200      	movs	r2, #0
 8007bd0:	615a      	str	r2, [r3, #20]
	joint_2.FDFormat = FDCAN_CLASSIC_CAN;
 8007bd2:	4b5b      	ldr	r3, [pc, #364]	; (8007d40 <main+0x1fc>)
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	619a      	str	r2, [r3, #24]
	joint_2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007bd8:	4b59      	ldr	r3, [pc, #356]	; (8007d40 <main+0x1fc>)
 8007bda:	2200      	movs	r2, #0
 8007bdc:	61da      	str	r2, [r3, #28]
	joint_2.MessageMarker = 0;
 8007bde:	4b58      	ldr	r3, [pc, #352]	; (8007d40 <main+0x1fc>)
 8007be0:	2200      	movs	r2, #0
 8007be2:	621a      	str	r2, [r3, #32]
	
	joint_3.Identifier = 0x3;
 8007be4:	4b57      	ldr	r3, [pc, #348]	; (8007d44 <main+0x200>)
 8007be6:	2203      	movs	r2, #3
 8007be8:	601a      	str	r2, [r3, #0]
	joint_3.IdType = FDCAN_STANDARD_ID;
 8007bea:	4b56      	ldr	r3, [pc, #344]	; (8007d44 <main+0x200>)
 8007bec:	2200      	movs	r2, #0
 8007bee:	605a      	str	r2, [r3, #4]
	joint_3.TxFrameType = FDCAN_DATA_FRAME;
 8007bf0:	4b54      	ldr	r3, [pc, #336]	; (8007d44 <main+0x200>)
 8007bf2:	2200      	movs	r2, #0
 8007bf4:	609a      	str	r2, [r3, #8]
	joint_3.DataLength = FDCAN_DLC_BYTES_8;
 8007bf6:	4b53      	ldr	r3, [pc, #332]	; (8007d44 <main+0x200>)
 8007bf8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007bfc:	60da      	str	r2, [r3, #12]
	joint_3.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007bfe:	4b51      	ldr	r3, [pc, #324]	; (8007d44 <main+0x200>)
 8007c00:	2200      	movs	r2, #0
 8007c02:	611a      	str	r2, [r3, #16]
	joint_3.BitRateSwitch = FDCAN_BRS_OFF;
 8007c04:	4b4f      	ldr	r3, [pc, #316]	; (8007d44 <main+0x200>)
 8007c06:	2200      	movs	r2, #0
 8007c08:	615a      	str	r2, [r3, #20]
	joint_3.FDFormat = FDCAN_CLASSIC_CAN;
 8007c0a:	4b4e      	ldr	r3, [pc, #312]	; (8007d44 <main+0x200>)
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	619a      	str	r2, [r3, #24]
	joint_3.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007c10:	4b4c      	ldr	r3, [pc, #304]	; (8007d44 <main+0x200>)
 8007c12:	2200      	movs	r2, #0
 8007c14:	61da      	str	r2, [r3, #28]
	joint_3.MessageMarker = 0;
 8007c16:	4b4b      	ldr	r3, [pc, #300]	; (8007d44 <main+0x200>)
 8007c18:	2200      	movs	r2, #0
 8007c1a:	621a      	str	r2, [r3, #32]
	
	joint_4.Identifier = 0x4;
 8007c1c:	4b4a      	ldr	r3, [pc, #296]	; (8007d48 <main+0x204>)
 8007c1e:	2204      	movs	r2, #4
 8007c20:	601a      	str	r2, [r3, #0]
	joint_4.IdType = FDCAN_STANDARD_ID;
 8007c22:	4b49      	ldr	r3, [pc, #292]	; (8007d48 <main+0x204>)
 8007c24:	2200      	movs	r2, #0
 8007c26:	605a      	str	r2, [r3, #4]
	joint_4.TxFrameType = FDCAN_DATA_FRAME;
 8007c28:	4b47      	ldr	r3, [pc, #284]	; (8007d48 <main+0x204>)
 8007c2a:	2200      	movs	r2, #0
 8007c2c:	609a      	str	r2, [r3, #8]
	joint_4.DataLength = FDCAN_DLC_BYTES_8;
 8007c2e:	4b46      	ldr	r3, [pc, #280]	; (8007d48 <main+0x204>)
 8007c30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c34:	60da      	str	r2, [r3, #12]
	joint_4.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007c36:	4b44      	ldr	r3, [pc, #272]	; (8007d48 <main+0x204>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	611a      	str	r2, [r3, #16]
	joint_4.BitRateSwitch = FDCAN_BRS_OFF;
 8007c3c:	4b42      	ldr	r3, [pc, #264]	; (8007d48 <main+0x204>)
 8007c3e:	2200      	movs	r2, #0
 8007c40:	615a      	str	r2, [r3, #20]
	joint_4.FDFormat = FDCAN_CLASSIC_CAN;
 8007c42:	4b41      	ldr	r3, [pc, #260]	; (8007d48 <main+0x204>)
 8007c44:	2200      	movs	r2, #0
 8007c46:	619a      	str	r2, [r3, #24]
	joint_4.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007c48:	4b3f      	ldr	r3, [pc, #252]	; (8007d48 <main+0x204>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	61da      	str	r2, [r3, #28]
	joint_4.MessageMarker = 0;
 8007c4e:	4b3e      	ldr	r3, [pc, #248]	; (8007d48 <main+0x204>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	621a      	str	r2, [r3, #32]
	
	joint_5.Identifier = 0x5;
 8007c54:	4b3d      	ldr	r3, [pc, #244]	; (8007d4c <main+0x208>)
 8007c56:	2205      	movs	r2, #5
 8007c58:	601a      	str	r2, [r3, #0]
	joint_5.IdType = FDCAN_STANDARD_ID;
 8007c5a:	4b3c      	ldr	r3, [pc, #240]	; (8007d4c <main+0x208>)
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	605a      	str	r2, [r3, #4]
	joint_5.TxFrameType = FDCAN_DATA_FRAME;
 8007c60:	4b3a      	ldr	r3, [pc, #232]	; (8007d4c <main+0x208>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	609a      	str	r2, [r3, #8]
	joint_5.DataLength = FDCAN_DLC_BYTES_8;
 8007c66:	4b39      	ldr	r3, [pc, #228]	; (8007d4c <main+0x208>)
 8007c68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007c6c:	60da      	str	r2, [r3, #12]
	joint_5.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007c6e:	4b37      	ldr	r3, [pc, #220]	; (8007d4c <main+0x208>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	611a      	str	r2, [r3, #16]
	joint_5.BitRateSwitch = FDCAN_BRS_OFF;
 8007c74:	4b35      	ldr	r3, [pc, #212]	; (8007d4c <main+0x208>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	615a      	str	r2, [r3, #20]
	joint_5.FDFormat = FDCAN_CLASSIC_CAN;
 8007c7a:	4b34      	ldr	r3, [pc, #208]	; (8007d4c <main+0x208>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	619a      	str	r2, [r3, #24]
	joint_5.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007c80:	4b32      	ldr	r3, [pc, #200]	; (8007d4c <main+0x208>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	61da      	str	r2, [r3, #28]
	joint_5.MessageMarker = 0;
 8007c86:	4b31      	ldr	r3, [pc, #196]	; (8007d4c <main+0x208>)
 8007c88:	2200      	movs	r2, #0
 8007c8a:	621a      	str	r2, [r3, #32]

	joint_6.Identifier = 0x6;
 8007c8c:	4b30      	ldr	r3, [pc, #192]	; (8007d50 <main+0x20c>)
 8007c8e:	2206      	movs	r2, #6
 8007c90:	601a      	str	r2, [r3, #0]
	joint_6.IdType = FDCAN_STANDARD_ID;
 8007c92:	4b2f      	ldr	r3, [pc, #188]	; (8007d50 <main+0x20c>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	605a      	str	r2, [r3, #4]
	joint_6.TxFrameType = FDCAN_DATA_FRAME;
 8007c98:	4b2d      	ldr	r3, [pc, #180]	; (8007d50 <main+0x20c>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	609a      	str	r2, [r3, #8]
	joint_6.DataLength = FDCAN_DLC_BYTES_8;
 8007c9e:	4b2c      	ldr	r3, [pc, #176]	; (8007d50 <main+0x20c>)
 8007ca0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007ca4:	60da      	str	r2, [r3, #12]
	joint_6.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007ca6:	4b2a      	ldr	r3, [pc, #168]	; (8007d50 <main+0x20c>)
 8007ca8:	2200      	movs	r2, #0
 8007caa:	611a      	str	r2, [r3, #16]
	joint_6.BitRateSwitch = FDCAN_BRS_OFF;
 8007cac:	4b28      	ldr	r3, [pc, #160]	; (8007d50 <main+0x20c>)
 8007cae:	2200      	movs	r2, #0
 8007cb0:	615a      	str	r2, [r3, #20]
	joint_6.FDFormat = FDCAN_CLASSIC_CAN;
 8007cb2:	4b27      	ldr	r3, [pc, #156]	; (8007d50 <main+0x20c>)
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	619a      	str	r2, [r3, #24]
	joint_6.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007cb8:	4b25      	ldr	r3, [pc, #148]	; (8007d50 <main+0x20c>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	61da      	str	r2, [r3, #28]
	joint_6.MessageMarker = 0;	
 8007cbe:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <main+0x20c>)
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	621a      	str	r2, [r3, #32]
	
	
	HAL_FDCAN_Start(&hfdcan1);
 8007cc4:	4823      	ldr	r0, [pc, #140]	; (8007d54 <main+0x210>)
 8007cc6:	f7f9 fb7f 	bl	80013c8 <HAL_FDCAN_Start>
	HAL_FDCAN_Start(&hfdcan2);
 8007cca:	4823      	ldr	r0, [pc, #140]	; (8007d58 <main+0x214>)
 8007ccc:	f7f9 fb7c 	bl	80013c8 <HAL_FDCAN_Start>
	
	HAL_Delay(10);
 8007cd0:	200a      	movs	r0, #10
 8007cd2:	f7f8 ffdf 	bl	8000c94 <HAL_Delay>
	HAL_TIM_Base_Start(&htim2);
 8007cd6:	4821      	ldr	r0, [pc, #132]	; (8007d5c <main+0x218>)
 8007cd8:	f7fd f95a 	bl	8004f90 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8007cdc:	4820      	ldr	r0, [pc, #128]	; (8007d60 <main+0x21c>)
 8007cde:	f7fd f957 	bl	8004f90 <HAL_TIM_Base_Start>
	
	HAL_Delay(10);
 8007ce2:	200a      	movs	r0, #10
 8007ce4:	f7f8 ffd6 	bl	8000c94 <HAL_Delay>

	// 1. init lan9252
	ethercat_slave.spi = &hspi1;
 8007ce8:	4b1e      	ldr	r3, [pc, #120]	; (8007d64 <main+0x220>)
 8007cea:	4a1f      	ldr	r2, [pc, #124]	; (8007d68 <main+0x224>)
 8007cec:	605a      	str	r2, [r3, #4]
	ethercat_slave.uart = &huart2;
 8007cee:	4b1d      	ldr	r3, [pc, #116]	; (8007d64 <main+0x220>)
 8007cf0:	4a1e      	ldr	r2, [pc, #120]	; (8007d6c <main+0x228>)
 8007cf2:	601a      	str	r2, [r3, #0]
	ethercat_slave.bIn = &BufferIn;
 8007cf4:	4b1b      	ldr	r3, [pc, #108]	; (8007d64 <main+0x220>)
 8007cf6:	4a1e      	ldr	r2, [pc, #120]	; (8007d70 <main+0x22c>)
 8007cf8:	609a      	str	r2, [r3, #8]
	ethercat_slave.bOut = &BufferOut;
 8007cfa:	4b1a      	ldr	r3, [pc, #104]	; (8007d64 <main+0x220>)
 8007cfc:	4a1d      	ldr	r2, [pc, #116]	; (8007d74 <main+0x230>)
 8007cfe:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8007d00:	200a      	movs	r0, #10
 8007d02:	f7f8 ffc7 	bl	8000c94 <HAL_Delay>
	
	//init9252(&ethercat_slave); // change this !!!!!!!!!!!!!!
	
	HAL_Delay(100);
 8007d06:	2064      	movs	r0, #100	; 0x64
 8007d08:	f7f8 ffc4 	bl	8000c94 <HAL_Delay>
	
	HAL_TIM_Base_Start_IT(&htim5);
 8007d0c:	481a      	ldr	r0, [pc, #104]	; (8007d78 <main+0x234>)
 8007d0e:	f7fd f9af 	bl	8005070 <HAL_TIM_Base_Start_IT>
	
	HAL_Delay(100);
 8007d12:	2064      	movs	r0, #100	; 0x64
 8007d14:	f7f8 ffbe 	bl	8000c94 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //while (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0)	
	  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 8007d18:	4b18      	ldr	r3, [pc, #96]	; (8007d7c <main+0x238>)
 8007d1a:	4a19      	ldr	r2, [pc, #100]	; (8007d80 <main+0x23c>)
 8007d1c:	2140      	movs	r1, #64	; 0x40
 8007d1e:	480d      	ldr	r0, [pc, #52]	; (8007d54 <main+0x210>)
 8007d20:	f7f9 fbd8 	bl	80014d4 <HAL_FDCAN_GetRxMessage>
 8007d24:	4603      	mov	r3, r0
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d103      	bne.n	8007d32 <main+0x1ee>
	  {
		  unpack_reply(&rx_header, rx_data);
 8007d2a:	4914      	ldr	r1, [pc, #80]	; (8007d7c <main+0x238>)
 8007d2c:	4814      	ldr	r0, [pc, #80]	; (8007d80 <main+0x23c>)
 8007d2e:	f7ff fae3 	bl	80072f8 <unpack_reply>
	  /*
	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
	  {
		  unpack_reply(&rx_header, rx_data);
	  }*/
	  delay_us(10);
 8007d32:	200a      	movs	r0, #10
 8007d34:	f7ff f98a 	bl	800704c <delay_us>
	  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 8007d38:	e7ee      	b.n	8007d18 <main+0x1d4>
 8007d3a:	bf00      	nop
 8007d3c:	240004e8 	.word	0x240004e8
 8007d40:	2400050c 	.word	0x2400050c
 8007d44:	24000530 	.word	0x24000530
 8007d48:	24000554 	.word	0x24000554
 8007d4c:	24000578 	.word	0x24000578
 8007d50:	2400059c 	.word	0x2400059c
 8007d54:	240001a8 	.word	0x240001a8
 8007d58:	24000248 	.word	0x24000248
 8007d5c:	24000370 	.word	0x24000370
 8007d60:	240003bc 	.word	0x240003bc
 8007d64:	24000190 	.word	0x24000190
 8007d68:	240002e8 	.word	0x240002e8
 8007d6c:	24000454 	.word	0x24000454
 8007d70:	24000138 	.word	0x24000138
 8007d74:	240000c8 	.word	0x240000c8
 8007d78:	24000408 	.word	0x24000408
 8007d7c:	24000648 	.word	0x24000648
 8007d80:	24000620 	.word	0x24000620

08007d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b09e      	sub	sp, #120	; 0x78
 8007d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007d8e:	224c      	movs	r2, #76	; 0x4c
 8007d90:	2100      	movs	r1, #0
 8007d92:	4618      	mov	r0, r3
 8007d94:	f000 ffde 	bl	8008d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d98:	f107 030c 	add.w	r3, r7, #12
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	2100      	movs	r1, #0
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 ffd7 	bl	8008d54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007da6:	2002      	movs	r0, #2
 8007da8:	f7fa f910 	bl	8001fcc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007dac:	2300      	movs	r3, #0
 8007dae:	60bb      	str	r3, [r7, #8]
 8007db0:	4b48      	ldr	r3, [pc, #288]	; (8007ed4 <SystemClock_Config+0x150>)
 8007db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db4:	4a47      	ldr	r2, [pc, #284]	; (8007ed4 <SystemClock_Config+0x150>)
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007dbc:	4b45      	ldr	r3, [pc, #276]	; (8007ed4 <SystemClock_Config+0x150>)
 8007dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dc0:	f003 0301 	and.w	r3, r3, #1
 8007dc4:	60bb      	str	r3, [r7, #8]
 8007dc6:	4b44      	ldr	r3, [pc, #272]	; (8007ed8 <SystemClock_Config+0x154>)
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	4a43      	ldr	r2, [pc, #268]	; (8007ed8 <SystemClock_Config+0x154>)
 8007dcc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007dd0:	6193      	str	r3, [r2, #24]
 8007dd2:	4b41      	ldr	r3, [pc, #260]	; (8007ed8 <SystemClock_Config+0x154>)
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dda:	60bb      	str	r3, [r7, #8]
 8007ddc:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007dde:	bf00      	nop
 8007de0:	4b3d      	ldr	r3, [pc, #244]	; (8007ed8 <SystemClock_Config+0x154>)
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007dec:	d1f8      	bne.n	8007de0 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007dee:	4b3b      	ldr	r3, [pc, #236]	; (8007edc <SystemClock_Config+0x158>)
 8007df0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007df4:	4a39      	ldr	r2, [pc, #228]	; (8007edc <SystemClock_Config+0x158>)
 8007df6:	f043 0302 	orr.w	r3, r3, #2
 8007dfa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007dfe:	4b37      	ldr	r3, [pc, #220]	; (8007edc <SystemClock_Config+0x158>)
 8007e00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	607b      	str	r3, [r7, #4]
 8007e0a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	603b      	str	r3, [r7, #0]
 8007e10:	4b31      	ldr	r3, [pc, #196]	; (8007ed8 <SystemClock_Config+0x154>)
 8007e12:	699b      	ldr	r3, [r3, #24]
 8007e14:	4a30      	ldr	r2, [pc, #192]	; (8007ed8 <SystemClock_Config+0x154>)
 8007e16:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e1a:	6193      	str	r3, [r2, #24]
 8007e1c:	4b2e      	ldr	r3, [pc, #184]	; (8007ed8 <SystemClock_Config+0x154>)
 8007e1e:	699b      	ldr	r3, [r3, #24]
 8007e20:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007e24:	603b      	str	r3, [r7, #0]
 8007e26:	4b2b      	ldr	r3, [pc, #172]	; (8007ed4 <SystemClock_Config+0x150>)
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	4a2a      	ldr	r2, [pc, #168]	; (8007ed4 <SystemClock_Config+0x150>)
 8007e2c:	f043 0301 	orr.w	r3, r3, #1
 8007e30:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007e32:	4b28      	ldr	r3, [pc, #160]	; (8007ed4 <SystemClock_Config+0x150>)
 8007e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007e3e:	bf00      	nop
 8007e40:	4b25      	ldr	r3, [pc, #148]	; (8007ed8 <SystemClock_Config+0x154>)
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007e4c:	d1f8      	bne.n	8007e40 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007e52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e58:	2302      	movs	r3, #2
 8007e5a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 3;
 8007e60:	2303      	movs	r3, #3
 8007e62:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8007e64:	23f0      	movs	r3, #240	; 0xf0
 8007e66:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007e68:	2302      	movs	r3, #2
 8007e6a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8007e6c:	2308      	movs	r3, #8
 8007e6e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007e70:	2302      	movs	r3, #2
 8007e72:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007e74:	2308      	movs	r3, #8
 8007e76:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007e78:	2300      	movs	r3, #0
 8007e7a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007e84:	4618      	mov	r0, r3
 8007e86:	f7fa f8db 	bl	8002040 <HAL_RCC_OscConfig>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d001      	beq.n	8007e94 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8007e90:	f000 fc34 	bl	80086fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e94:	233f      	movs	r3, #63	; 0x3f
 8007e96:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007e98:	2303      	movs	r3, #3
 8007e9a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007ea0:	2308      	movs	r3, #8
 8007ea2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007ea4:	2340      	movs	r3, #64	; 0x40
 8007ea6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007ea8:	2340      	movs	r3, #64	; 0x40
 8007eaa:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007eac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007eb0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007eb2:	2340      	movs	r3, #64	; 0x40
 8007eb4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007eb6:	f107 030c 	add.w	r3, r7, #12
 8007eba:	2104      	movs	r1, #4
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fa fd19 	bl	80028f4 <HAL_RCC_ClockConfig>
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d001      	beq.n	8007ecc <SystemClock_Config+0x148>
  {
    Error_Handler();
 8007ec8:	f000 fc18 	bl	80086fc <Error_Handler>
  }
}
 8007ecc:	bf00      	nop
 8007ece:	3778      	adds	r7, #120	; 0x78
 8007ed0:	46bd      	mov	sp, r7
 8007ed2:	bd80      	pop	{r7, pc}
 8007ed4:	58000400 	.word	0x58000400
 8007ed8:	58024800 	.word	0x58024800
 8007edc:	58024400 	.word	0x58024400

08007ee0 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8007ee4:	4b2e      	ldr	r3, [pc, #184]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007ee6:	4a2f      	ldr	r2, [pc, #188]	; (8007fa4 <MX_FDCAN1_Init+0xc4>)
 8007ee8:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8007eea:	4b2d      	ldr	r3, [pc, #180]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007eec:	2200      	movs	r2, #0
 8007eee:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8007ef0:	4b2b      	ldr	r3, [pc, #172]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8007ef6:	4b2a      	ldr	r3, [pc, #168]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007ef8:	2201      	movs	r2, #1
 8007efa:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8007efc:	4b28      	ldr	r3, [pc, #160]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007efe:	2200      	movs	r2, #0
 8007f00:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8007f02:	4b27      	ldr	r3, [pc, #156]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f04:	2200      	movs	r2, #0
 8007f06:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8007f08:	4b25      	ldr	r3, [pc, #148]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f0a:	2208      	movs	r2, #8
 8007f0c:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8007f0e:	4b24      	ldr	r3, [pc, #144]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f10:	2201      	movs	r2, #1
 8007f12:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8007f14:	4b22      	ldr	r3, [pc, #136]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f16:	220a      	movs	r2, #10
 8007f18:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8007f1a:	4b21      	ldr	r3, [pc, #132]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f1c:	2204      	movs	r2, #4
 8007f1e:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 8007f20:	4b1f      	ldr	r3, [pc, #124]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f22:	2208      	movs	r2, #8
 8007f24:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8007f26:	4b1e      	ldr	r3, [pc, #120]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f28:	2201      	movs	r2, #1
 8007f2a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8007f2c:	4b1c      	ldr	r3, [pc, #112]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f2e:	220a      	movs	r2, #10
 8007f30:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8007f32:	4b1b      	ldr	r3, [pc, #108]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f34:	2204      	movs	r2, #4
 8007f36:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8007f38:	4b19      	ldr	r3, [pc, #100]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8007f3e:	4b18      	ldr	r3, [pc, #96]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f40:	2200      	movs	r2, #0
 8007f42:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8007f44:	4b16      	ldr	r3, [pc, #88]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f46:	2200      	movs	r2, #0
 8007f48:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 6;
 8007f4a:	4b15      	ldr	r3, [pc, #84]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f4c:	2206      	movs	r2, #6
 8007f4e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8007f50:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f52:	2204      	movs	r2, #4
 8007f54:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8007f56:	4b12      	ldr	r3, [pc, #72]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8007f5c:	4b10      	ldr	r3, [pc, #64]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f5e:	2204      	movs	r2, #4
 8007f60:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8007f62:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f64:	2200      	movs	r2, #0
 8007f66:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8007f68:	4b0d      	ldr	r3, [pc, #52]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f6a:	2204      	movs	r2, #4
 8007f6c:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8007f6e:	4b0c      	ldr	r3, [pc, #48]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f70:	2200      	movs	r2, #0
 8007f72:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8007f74:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f76:	2200      	movs	r2, #0
 8007f78:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 6;
 8007f7a:	4b09      	ldr	r3, [pc, #36]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f7c:	2206      	movs	r2, #6
 8007f7e:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8007f80:	4b07      	ldr	r3, [pc, #28]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8007f86:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f88:	2204      	movs	r2, #4
 8007f8a:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8007f8c:	4804      	ldr	r0, [pc, #16]	; (8007fa0 <MX_FDCAN1_Init+0xc0>)
 8007f8e:	f7f9 f83d 	bl	800100c <HAL_FDCAN_Init>
 8007f92:	4603      	mov	r3, r0
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d001      	beq.n	8007f9c <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8007f98:	f000 fbb0 	bl	80086fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8007f9c:	bf00      	nop
 8007f9e:	bd80      	pop	{r7, pc}
 8007fa0:	240001a8 	.word	0x240001a8
 8007fa4:	4000a000 	.word	0x4000a000

08007fa8 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8007fac:	4b2f      	ldr	r3, [pc, #188]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fae:	4a30      	ldr	r2, [pc, #192]	; (8008070 <MX_FDCAN2_Init+0xc8>)
 8007fb0:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8007fb2:	4b2e      	ldr	r3, [pc, #184]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8007fb8:	4b2c      	ldr	r3, [pc, #176]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fba:	2200      	movs	r2, #0
 8007fbc:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8007fbe:	4b2b      	ldr	r3, [pc, #172]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8007fc4:	4b29      	ldr	r3, [pc, #164]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8007fca:	4b28      	ldr	r3, [pc, #160]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 8;
 8007fd0:	4b26      	ldr	r3, [pc, #152]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fd2:	2208      	movs	r2, #8
 8007fd4:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8007fd6:	4b25      	ldr	r3, [pc, #148]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fd8:	2201      	movs	r2, #1
 8007fda:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8007fdc:	4b23      	ldr	r3, [pc, #140]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fde:	220a      	movs	r2, #10
 8007fe0:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 4;
 8007fe2:	4b22      	ldr	r3, [pc, #136]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fe4:	2204      	movs	r2, #4
 8007fe6:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 8;
 8007fe8:	4b20      	ldr	r3, [pc, #128]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007fea:	2208      	movs	r2, #8
 8007fec:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8007fee:	4b1f      	ldr	r3, [pc, #124]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 10;
 8007ff4:	4b1d      	ldr	r3, [pc, #116]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007ff6:	220a      	movs	r2, #10
 8007ff8:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 8007ffa:	4b1c      	ldr	r3, [pc, #112]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8007ffc:	2204      	movs	r2, #4
 8007ffe:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 1024;
 8008000:	4b1a      	ldr	r3, [pc, #104]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8008002:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008006:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8008008:	4b18      	ldr	r3, [pc, #96]	; (800806c <MX_FDCAN2_Init+0xc4>)
 800800a:	2200      	movs	r2, #0
 800800c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 800800e:	4b17      	ldr	r3, [pc, #92]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8008010:	2200      	movs	r2, #0
 8008012:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 6;
 8008014:	4b15      	ldr	r3, [pc, #84]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8008016:	2206      	movs	r2, #6
 8008018:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800801a:	4b14      	ldr	r3, [pc, #80]	; (800806c <MX_FDCAN2_Init+0xc4>)
 800801c:	2204      	movs	r2, #4
 800801e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8008020:	4b12      	ldr	r3, [pc, #72]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8008022:	2200      	movs	r2, #0
 8008024:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8008026:	4b11      	ldr	r3, [pc, #68]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8008028:	2204      	movs	r2, #4
 800802a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 800802c:	4b0f      	ldr	r3, [pc, #60]	; (800806c <MX_FDCAN2_Init+0xc4>)
 800802e:	2200      	movs	r2, #0
 8008030:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8008032:	4b0e      	ldr	r3, [pc, #56]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8008034:	2204      	movs	r2, #4
 8008036:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8008038:	4b0c      	ldr	r3, [pc, #48]	; (800806c <MX_FDCAN2_Init+0xc4>)
 800803a:	2200      	movs	r2, #0
 800803c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 800803e:	4b0b      	ldr	r3, [pc, #44]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8008040:	2200      	movs	r2, #0
 8008042:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 6;
 8008044:	4b09      	ldr	r3, [pc, #36]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8008046:	2206      	movs	r2, #6
 8008048:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800804a:	4b08      	ldr	r3, [pc, #32]	; (800806c <MX_FDCAN2_Init+0xc4>)
 800804c:	2200      	movs	r2, #0
 800804e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8008050:	4b06      	ldr	r3, [pc, #24]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8008052:	2204      	movs	r2, #4
 8008054:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8008056:	4805      	ldr	r0, [pc, #20]	; (800806c <MX_FDCAN2_Init+0xc4>)
 8008058:	f7f8 ffd8 	bl	800100c <HAL_FDCAN_Init>
 800805c:	4603      	mov	r3, r0
 800805e:	2b00      	cmp	r3, #0
 8008060:	d001      	beq.n	8008066 <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8008062:	f000 fb4b 	bl	80086fc <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8008066:	bf00      	nop
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	24000248 	.word	0x24000248
 8008070:	4000a400 	.word	0x4000a400

08008074 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8008078:	4b28      	ldr	r3, [pc, #160]	; (800811c <MX_SPI1_Init+0xa8>)
 800807a:	4a29      	ldr	r2, [pc, #164]	; (8008120 <MX_SPI1_Init+0xac>)
 800807c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800807e:	4b27      	ldr	r3, [pc, #156]	; (800811c <MX_SPI1_Init+0xa8>)
 8008080:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8008084:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8008086:	4b25      	ldr	r3, [pc, #148]	; (800811c <MX_SPI1_Init+0xa8>)
 8008088:	2200      	movs	r2, #0
 800808a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800808c:	4b23      	ldr	r3, [pc, #140]	; (800811c <MX_SPI1_Init+0xa8>)
 800808e:	2207      	movs	r2, #7
 8008090:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8008092:	4b22      	ldr	r3, [pc, #136]	; (800811c <MX_SPI1_Init+0xa8>)
 8008094:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008098:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 800809a:	4b20      	ldr	r3, [pc, #128]	; (800811c <MX_SPI1_Init+0xa8>)
 800809c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80080a0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80080a2:	4b1e      	ldr	r3, [pc, #120]	; (800811c <MX_SPI1_Init+0xa8>)
 80080a4:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80080a8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80080aa:	4b1c      	ldr	r3, [pc, #112]	; (800811c <MX_SPI1_Init+0xa8>)
 80080ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80080b0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80080b2:	4b1a      	ldr	r3, [pc, #104]	; (800811c <MX_SPI1_Init+0xa8>)
 80080b4:	2200      	movs	r2, #0
 80080b6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80080b8:	4b18      	ldr	r3, [pc, #96]	; (800811c <MX_SPI1_Init+0xa8>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80080be:	4b17      	ldr	r3, [pc, #92]	; (800811c <MX_SPI1_Init+0xa8>)
 80080c0:	2200      	movs	r2, #0
 80080c2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80080c4:	4b15      	ldr	r3, [pc, #84]	; (800811c <MX_SPI1_Init+0xa8>)
 80080c6:	2200      	movs	r2, #0
 80080c8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80080ca:	4b14      	ldr	r3, [pc, #80]	; (800811c <MX_SPI1_Init+0xa8>)
 80080cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80080d0:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80080d2:	4b12      	ldr	r3, [pc, #72]	; (800811c <MX_SPI1_Init+0xa8>)
 80080d4:	2200      	movs	r2, #0
 80080d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80080d8:	4b10      	ldr	r3, [pc, #64]	; (800811c <MX_SPI1_Init+0xa8>)
 80080da:	2200      	movs	r2, #0
 80080dc:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80080de:	4b0f      	ldr	r3, [pc, #60]	; (800811c <MX_SPI1_Init+0xa8>)
 80080e0:	2200      	movs	r2, #0
 80080e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80080e4:	4b0d      	ldr	r3, [pc, #52]	; (800811c <MX_SPI1_Init+0xa8>)
 80080e6:	2200      	movs	r2, #0
 80080e8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80080ea:	4b0c      	ldr	r3, [pc, #48]	; (800811c <MX_SPI1_Init+0xa8>)
 80080ec:	2200      	movs	r2, #0
 80080ee:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80080f0:	4b0a      	ldr	r3, [pc, #40]	; (800811c <MX_SPI1_Init+0xa8>)
 80080f2:	2200      	movs	r2, #0
 80080f4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80080f6:	4b09      	ldr	r3, [pc, #36]	; (800811c <MX_SPI1_Init+0xa8>)
 80080f8:	2200      	movs	r2, #0
 80080fa:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80080fc:	4b07      	ldr	r3, [pc, #28]	; (800811c <MX_SPI1_Init+0xa8>)
 80080fe:	2200      	movs	r2, #0
 8008100:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8008102:	4b06      	ldr	r3, [pc, #24]	; (800811c <MX_SPI1_Init+0xa8>)
 8008104:	2200      	movs	r2, #0
 8008106:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8008108:	4804      	ldr	r0, [pc, #16]	; (800811c <MX_SPI1_Init+0xa8>)
 800810a:	f7fc fdab 	bl	8004c64 <HAL_SPI_Init>
 800810e:	4603      	mov	r3, r0
 8008110:	2b00      	cmp	r3, #0
 8008112:	d001      	beq.n	8008118 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8008114:	f000 faf2 	bl	80086fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8008118:	bf00      	nop
 800811a:	bd80      	pop	{r7, pc}
 800811c:	240002e8 	.word	0x240002e8
 8008120:	40013000 	.word	0x40013000

08008124 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008124:	b580      	push	{r7, lr}
 8008126:	b088      	sub	sp, #32
 8008128:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800812a:	f107 0310 	add.w	r3, r7, #16
 800812e:	2200      	movs	r2, #0
 8008130:	601a      	str	r2, [r3, #0]
 8008132:	605a      	str	r2, [r3, #4]
 8008134:	609a      	str	r2, [r3, #8]
 8008136:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008138:	1d3b      	adds	r3, r7, #4
 800813a:	2200      	movs	r2, #0
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	605a      	str	r2, [r3, #4]
 8008140:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008142:	4b1e      	ldr	r3, [pc, #120]	; (80081bc <MX_TIM2_Init+0x98>)
 8008144:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008148:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 800814a:	4b1c      	ldr	r3, [pc, #112]	; (80081bc <MX_TIM2_Init+0x98>)
 800814c:	22ef      	movs	r2, #239	; 0xef
 800814e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008150:	4b1a      	ldr	r3, [pc, #104]	; (80081bc <MX_TIM2_Init+0x98>)
 8008152:	2200      	movs	r2, #0
 8008154:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8008156:	4b19      	ldr	r3, [pc, #100]	; (80081bc <MX_TIM2_Init+0x98>)
 8008158:	f04f 32ff 	mov.w	r2, #4294967295
 800815c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800815e:	4b17      	ldr	r3, [pc, #92]	; (80081bc <MX_TIM2_Init+0x98>)
 8008160:	2200      	movs	r2, #0
 8008162:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008164:	4b15      	ldr	r3, [pc, #84]	; (80081bc <MX_TIM2_Init+0x98>)
 8008166:	2200      	movs	r2, #0
 8008168:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800816a:	4814      	ldr	r0, [pc, #80]	; (80081bc <MX_TIM2_Init+0x98>)
 800816c:	f7fc feb9 	bl	8004ee2 <HAL_TIM_Base_Init>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8008176:	f000 fac1 	bl	80086fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800817a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800817e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008180:	f107 0310 	add.w	r3, r7, #16
 8008184:	4619      	mov	r1, r3
 8008186:	480d      	ldr	r0, [pc, #52]	; (80081bc <MX_TIM2_Init+0x98>)
 8008188:	f7fd f90a 	bl	80053a0 <HAL_TIM_ConfigClockSource>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8008192:	f000 fab3 	bl	80086fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008196:	2300      	movs	r3, #0
 8008198:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800819e:	1d3b      	adds	r3, r7, #4
 80081a0:	4619      	mov	r1, r3
 80081a2:	4806      	ldr	r0, [pc, #24]	; (80081bc <MX_TIM2_Init+0x98>)
 80081a4:	f7fd fb54 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d001      	beq.n	80081b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80081ae:	f000 faa5 	bl	80086fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80081b2:	bf00      	nop
 80081b4:	3720      	adds	r7, #32
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}
 80081ba:	bf00      	nop
 80081bc:	24000370 	.word	0x24000370

080081c0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80081c0:	b580      	push	{r7, lr}
 80081c2:	b088      	sub	sp, #32
 80081c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80081c6:	f107 0310 	add.w	r3, r7, #16
 80081ca:	2200      	movs	r2, #0
 80081cc:	601a      	str	r2, [r3, #0]
 80081ce:	605a      	str	r2, [r3, #4]
 80081d0:	609a      	str	r2, [r3, #8]
 80081d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80081d4:	1d3b      	adds	r3, r7, #4
 80081d6:	2200      	movs	r2, #0
 80081d8:	601a      	str	r2, [r3, #0]
 80081da:	605a      	str	r2, [r3, #4]
 80081dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80081de:	4b1d      	ldr	r3, [pc, #116]	; (8008254 <MX_TIM4_Init+0x94>)
 80081e0:	4a1d      	ldr	r2, [pc, #116]	; (8008258 <MX_TIM4_Init+0x98>)
 80081e2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 239;
 80081e4:	4b1b      	ldr	r3, [pc, #108]	; (8008254 <MX_TIM4_Init+0x94>)
 80081e6:	22ef      	movs	r2, #239	; 0xef
 80081e8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80081ea:	4b1a      	ldr	r3, [pc, #104]	; (8008254 <MX_TIM4_Init+0x94>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 80081f0:	4b18      	ldr	r3, [pc, #96]	; (8008254 <MX_TIM4_Init+0x94>)
 80081f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80081f6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80081f8:	4b16      	ldr	r3, [pc, #88]	; (8008254 <MX_TIM4_Init+0x94>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80081fe:	4b15      	ldr	r3, [pc, #84]	; (8008254 <MX_TIM4_Init+0x94>)
 8008200:	2200      	movs	r2, #0
 8008202:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8008204:	4813      	ldr	r0, [pc, #76]	; (8008254 <MX_TIM4_Init+0x94>)
 8008206:	f7fc fe6c 	bl	8004ee2 <HAL_TIM_Base_Init>
 800820a:	4603      	mov	r3, r0
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8008210:	f000 fa74 	bl	80086fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008218:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800821a:	f107 0310 	add.w	r3, r7, #16
 800821e:	4619      	mov	r1, r3
 8008220:	480c      	ldr	r0, [pc, #48]	; (8008254 <MX_TIM4_Init+0x94>)
 8008222:	f7fd f8bd 	bl	80053a0 <HAL_TIM_ConfigClockSource>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d001      	beq.n	8008230 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800822c:	f000 fa66 	bl	80086fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008230:	2300      	movs	r3, #0
 8008232:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008234:	2300      	movs	r3, #0
 8008236:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008238:	1d3b      	adds	r3, r7, #4
 800823a:	4619      	mov	r1, r3
 800823c:	4805      	ldr	r0, [pc, #20]	; (8008254 <MX_TIM4_Init+0x94>)
 800823e:	f7fd fb07 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d001      	beq.n	800824c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8008248:	f000 fa58 	bl	80086fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800824c:	bf00      	nop
 800824e:	3720      	adds	r7, #32
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}
 8008254:	240003bc 	.word	0x240003bc
 8008258:	40000800 	.word	0x40000800

0800825c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b088      	sub	sp, #32
 8008260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008262:	f107 0310 	add.w	r3, r7, #16
 8008266:	2200      	movs	r2, #0
 8008268:	601a      	str	r2, [r3, #0]
 800826a:	605a      	str	r2, [r3, #4]
 800826c:	609a      	str	r2, [r3, #8]
 800826e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008270:	1d3b      	adds	r3, r7, #4
 8008272:	2200      	movs	r2, #0
 8008274:	601a      	str	r2, [r3, #0]
 8008276:	605a      	str	r2, [r3, #4]
 8008278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800827a:	4b1d      	ldr	r3, [pc, #116]	; (80082f0 <MX_TIM5_Init+0x94>)
 800827c:	4a1d      	ldr	r2, [pc, #116]	; (80082f4 <MX_TIM5_Init+0x98>)
 800827e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 239;
 8008280:	4b1b      	ldr	r3, [pc, #108]	; (80082f0 <MX_TIM5_Init+0x94>)
 8008282:	22ef      	movs	r2, #239	; 0xef
 8008284:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008286:	4b1a      	ldr	r3, [pc, #104]	; (80082f0 <MX_TIM5_Init+0x94>)
 8008288:	2200      	movs	r2, #0
 800828a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 800828c:	4b18      	ldr	r3, [pc, #96]	; (80082f0 <MX_TIM5_Init+0x94>)
 800828e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008292:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008294:	4b16      	ldr	r3, [pc, #88]	; (80082f0 <MX_TIM5_Init+0x94>)
 8008296:	2200      	movs	r2, #0
 8008298:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800829a:	4b15      	ldr	r3, [pc, #84]	; (80082f0 <MX_TIM5_Init+0x94>)
 800829c:	2200      	movs	r2, #0
 800829e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80082a0:	4813      	ldr	r0, [pc, #76]	; (80082f0 <MX_TIM5_Init+0x94>)
 80082a2:	f7fc fe1e 	bl	8004ee2 <HAL_TIM_Base_Init>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d001      	beq.n	80082b0 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80082ac:	f000 fa26 	bl	80086fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80082b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80082b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80082b6:	f107 0310 	add.w	r3, r7, #16
 80082ba:	4619      	mov	r1, r3
 80082bc:	480c      	ldr	r0, [pc, #48]	; (80082f0 <MX_TIM5_Init+0x94>)
 80082be:	f7fd f86f 	bl	80053a0 <HAL_TIM_ConfigClockSource>
 80082c2:	4603      	mov	r3, r0
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d001      	beq.n	80082cc <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80082c8:	f000 fa18 	bl	80086fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80082cc:	2300      	movs	r3, #0
 80082ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80082d0:	2300      	movs	r3, #0
 80082d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80082d4:	1d3b      	adds	r3, r7, #4
 80082d6:	4619      	mov	r1, r3
 80082d8:	4805      	ldr	r0, [pc, #20]	; (80082f0 <MX_TIM5_Init+0x94>)
 80082da:	f7fd fab9 	bl	8005850 <HAL_TIMEx_MasterConfigSynchronization>
 80082de:	4603      	mov	r3, r0
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d001      	beq.n	80082e8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80082e4:	f000 fa0a 	bl	80086fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80082e8:	bf00      	nop
 80082ea:	3720      	adds	r7, #32
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}
 80082f0:	24000408 	.word	0x24000408
 80082f4:	40000c00 	.word	0x40000c00

080082f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80082f8:	b580      	push	{r7, lr}
 80082fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80082fc:	4b22      	ldr	r3, [pc, #136]	; (8008388 <MX_USART2_UART_Init+0x90>)
 80082fe:	4a23      	ldr	r2, [pc, #140]	; (800838c <MX_USART2_UART_Init+0x94>)
 8008300:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008302:	4b21      	ldr	r3, [pc, #132]	; (8008388 <MX_USART2_UART_Init+0x90>)
 8008304:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008308:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800830a:	4b1f      	ldr	r3, [pc, #124]	; (8008388 <MX_USART2_UART_Init+0x90>)
 800830c:	2200      	movs	r2, #0
 800830e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008310:	4b1d      	ldr	r3, [pc, #116]	; (8008388 <MX_USART2_UART_Init+0x90>)
 8008312:	2200      	movs	r2, #0
 8008314:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008316:	4b1c      	ldr	r3, [pc, #112]	; (8008388 <MX_USART2_UART_Init+0x90>)
 8008318:	2200      	movs	r2, #0
 800831a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800831c:	4b1a      	ldr	r3, [pc, #104]	; (8008388 <MX_USART2_UART_Init+0x90>)
 800831e:	220c      	movs	r2, #12
 8008320:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008322:	4b19      	ldr	r3, [pc, #100]	; (8008388 <MX_USART2_UART_Init+0x90>)
 8008324:	2200      	movs	r2, #0
 8008326:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008328:	4b17      	ldr	r3, [pc, #92]	; (8008388 <MX_USART2_UART_Init+0x90>)
 800832a:	2200      	movs	r2, #0
 800832c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800832e:	4b16      	ldr	r3, [pc, #88]	; (8008388 <MX_USART2_UART_Init+0x90>)
 8008330:	2200      	movs	r2, #0
 8008332:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8008334:	4b14      	ldr	r3, [pc, #80]	; (8008388 <MX_USART2_UART_Init+0x90>)
 8008336:	2200      	movs	r2, #0
 8008338:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800833a:	4b13      	ldr	r3, [pc, #76]	; (8008388 <MX_USART2_UART_Init+0x90>)
 800833c:	2200      	movs	r2, #0
 800833e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008340:	4811      	ldr	r0, [pc, #68]	; (8008388 <MX_USART2_UART_Init+0x90>)
 8008342:	f7fd fb31 	bl	80059a8 <HAL_UART_Init>
 8008346:	4603      	mov	r3, r0
 8008348:	2b00      	cmp	r3, #0
 800834a:	d001      	beq.n	8008350 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800834c:	f000 f9d6 	bl	80086fc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008350:	2100      	movs	r1, #0
 8008352:	480d      	ldr	r0, [pc, #52]	; (8008388 <MX_USART2_UART_Init+0x90>)
 8008354:	f7fe fb33 	bl	80069be <HAL_UARTEx_SetTxFifoThreshold>
 8008358:	4603      	mov	r3, r0
 800835a:	2b00      	cmp	r3, #0
 800835c:	d001      	beq.n	8008362 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800835e:	f000 f9cd 	bl	80086fc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008362:	2100      	movs	r1, #0
 8008364:	4808      	ldr	r0, [pc, #32]	; (8008388 <MX_USART2_UART_Init+0x90>)
 8008366:	f7fe fb68 	bl	8006a3a <HAL_UARTEx_SetRxFifoThreshold>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008370:	f000 f9c4 	bl	80086fc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8008374:	4804      	ldr	r0, [pc, #16]	; (8008388 <MX_USART2_UART_Init+0x90>)
 8008376:	f7fe fae9 	bl	800694c <HAL_UARTEx_DisableFifoMode>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	d001      	beq.n	8008384 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008380:	f000 f9bc 	bl	80086fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008384:	bf00      	nop
 8008386:	bd80      	pop	{r7, pc}
 8008388:	24000454 	.word	0x24000454
 800838c:	40004400 	.word	0x40004400

08008390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b08a      	sub	sp, #40	; 0x28
 8008394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008396:	f107 0314 	add.w	r3, r7, #20
 800839a:	2200      	movs	r2, #0
 800839c:	601a      	str	r2, [r3, #0]
 800839e:	605a      	str	r2, [r3, #4]
 80083a0:	609a      	str	r2, [r3, #8]
 80083a2:	60da      	str	r2, [r3, #12]
 80083a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80083a6:	4b2a      	ldr	r3, [pc, #168]	; (8008450 <MX_GPIO_Init+0xc0>)
 80083a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083ac:	4a28      	ldr	r2, [pc, #160]	; (8008450 <MX_GPIO_Init+0xc0>)
 80083ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80083b6:	4b26      	ldr	r3, [pc, #152]	; (8008450 <MX_GPIO_Init+0xc0>)
 80083b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80083c0:	613b      	str	r3, [r7, #16]
 80083c2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80083c4:	4b22      	ldr	r3, [pc, #136]	; (8008450 <MX_GPIO_Init+0xc0>)
 80083c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083ca:	4a21      	ldr	r2, [pc, #132]	; (8008450 <MX_GPIO_Init+0xc0>)
 80083cc:	f043 0301 	orr.w	r3, r3, #1
 80083d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80083d4:	4b1e      	ldr	r3, [pc, #120]	; (8008450 <MX_GPIO_Init+0xc0>)
 80083d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083da:	f003 0301 	and.w	r3, r3, #1
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80083e2:	4b1b      	ldr	r3, [pc, #108]	; (8008450 <MX_GPIO_Init+0xc0>)
 80083e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083e8:	4a19      	ldr	r2, [pc, #100]	; (8008450 <MX_GPIO_Init+0xc0>)
 80083ea:	f043 0302 	orr.w	r3, r3, #2
 80083ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80083f2:	4b17      	ldr	r3, [pc, #92]	; (8008450 <MX_GPIO_Init+0xc0>)
 80083f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80083f8:	f003 0302 	and.w	r3, r3, #2
 80083fc:	60bb      	str	r3, [r7, #8]
 80083fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008400:	4b13      	ldr	r3, [pc, #76]	; (8008450 <MX_GPIO_Init+0xc0>)
 8008402:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008406:	4a12      	ldr	r2, [pc, #72]	; (8008450 <MX_GPIO_Init+0xc0>)
 8008408:	f043 0308 	orr.w	r3, r3, #8
 800840c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008410:	4b0f      	ldr	r3, [pc, #60]	; (8008450 <MX_GPIO_Init+0xc0>)
 8008412:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008416:	f003 0308 	and.w	r3, r3, #8
 800841a:	607b      	str	r3, [r7, #4]
 800841c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, CSS_Pin|ES_Pin, GPIO_PIN_RESET);
 800841e:	2200      	movs	r2, #0
 8008420:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8008424:	480b      	ldr	r0, [pc, #44]	; (8008454 <MX_GPIO_Init+0xc4>)
 8008426:	f7f9 fd9d 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CSS_Pin ES_Pin */
  GPIO_InitStruct.Pin = CSS_Pin|ES_Pin;
 800842a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800842e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008430:	2301      	movs	r3, #1
 8008432:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008434:	2300      	movs	r3, #0
 8008436:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008438:	2300      	movs	r3, #0
 800843a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800843c:	f107 0314 	add.w	r3, r7, #20
 8008440:	4619      	mov	r1, r3
 8008442:	4804      	ldr	r0, [pc, #16]	; (8008454 <MX_GPIO_Init+0xc4>)
 8008444:	f7f9 fbde 	bl	8001c04 <HAL_GPIO_Init>

}
 8008448:	bf00      	nop
 800844a:	3728      	adds	r7, #40	; 0x28
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}
 8008450:	58024400 	.word	0x58024400
 8008454:	58020000 	.word	0x58020000

08008458 <send_to_all_slave>:

//int is_enable = 0;
//int motor_init_state = 0;

void send_to_all_slave()
{	
 8008458:	b580      	push	{r7, lr}
 800845a:	af00      	add	r7, sp, #0
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
		{
			unpack_reply(&rx_header, rx_data);
			  
		}*/
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &joint_1, joint_1_data) != HAL_OK)
 800845c:	4a07      	ldr	r2, [pc, #28]	; (800847c <send_to_all_slave+0x24>)
 800845e:	4908      	ldr	r1, [pc, #32]	; (8008480 <send_to_all_slave+0x28>)
 8008460:	4808      	ldr	r0, [pc, #32]	; (8008484 <send_to_all_slave+0x2c>)
 8008462:	f7f8 ffdc 	bl	800141e <HAL_FDCAN_AddMessageToTxFifoQ>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d004      	beq.n	8008476 <send_to_all_slave+0x1e>
	{
		can1_error_counter += 1;
 800846c:	4b06      	ldr	r3, [pc, #24]	; (8008488 <send_to_all_slave+0x30>)
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	3301      	adds	r3, #1
 8008472:	4a05      	ldr	r2, [pc, #20]	; (8008488 <send_to_all_slave+0x30>)
 8008474:	6013      	str	r3, [r2, #0]
//	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &joint_6, joint_6_data) != HAL_OK)
//	{
//		can2_error_counter += 1;
//	}*/

}
 8008476:	bf00      	nop
 8008478:	bd80      	pop	{r7, pc}
 800847a:	bf00      	nop
 800847c:	240005c0 	.word	0x240005c0
 8008480:	240004e8 	.word	0x240004e8
 8008484:	240001a8 	.word	0x240001a8
 8008488:	24000650 	.word	0x24000650

0800848c <send_to_all_slave_sgl>:
void send_to_all_slave_sgl()
{
 800848c:	b580      	push	{r7, lr}
 800848e:	af00      	add	r7, sp, #0
	motor_get_sglPos(&joint_1, joint_1_data, 1);
 8008490:	2201      	movs	r2, #1
 8008492:	4909      	ldr	r1, [pc, #36]	; (80084b8 <send_to_all_slave_sgl+0x2c>)
 8008494:	4809      	ldr	r0, [pc, #36]	; (80084bc <send_to_all_slave_sgl+0x30>)
 8008496:	f7fe fc07 	bl	8006ca8 <motor_get_sglPos>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &joint_1, joint_1_data) != HAL_OK)
 800849a:	4a07      	ldr	r2, [pc, #28]	; (80084b8 <send_to_all_slave_sgl+0x2c>)
 800849c:	4907      	ldr	r1, [pc, #28]	; (80084bc <send_to_all_slave_sgl+0x30>)
 800849e:	4808      	ldr	r0, [pc, #32]	; (80084c0 <send_to_all_slave_sgl+0x34>)
 80084a0:	f7f8 ffbd 	bl	800141e <HAL_FDCAN_AddMessageToTxFifoQ>
 80084a4:	4603      	mov	r3, r0
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d004      	beq.n	80084b4 <send_to_all_slave_sgl+0x28>
	{
		can1_error_counter += 1;
 80084aa:	4b06      	ldr	r3, [pc, #24]	; (80084c4 <send_to_all_slave_sgl+0x38>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	3301      	adds	r3, #1
 80084b0:	4a04      	ldr	r2, [pc, #16]	; (80084c4 <send_to_all_slave_sgl+0x38>)
 80084b2:	6013      	str	r3, [r2, #0]
	}

}
 80084b4:	bf00      	nop
 80084b6:	bd80      	pop	{r7, pc}
 80084b8:	240005c0 	.word	0x240005c0
 80084bc:	240004e8 	.word	0x240004e8
 80084c0:	240001a8 	.word	0x240001a8
 80084c4:	24000650 	.word	0x24000650

080084c8 <send_to_all_slave_cur0>:
		can1_error_counter += 1;
	}
}

void send_to_all_slave_cur0()
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	af00      	add	r7, sp, #0
	motor_current(&joint_1, joint_1_data, 0, 1);
 80084cc:	2301      	movs	r3, #1
 80084ce:	2200      	movs	r2, #0
 80084d0:	4909      	ldr	r1, [pc, #36]	; (80084f8 <send_to_all_slave_cur0+0x30>)
 80084d2:	480a      	ldr	r0, [pc, #40]	; (80084fc <send_to_all_slave_cur0+0x34>)
 80084d4:	f7fe fba6 	bl	8006c24 <motor_current>
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &joint_1, joint_1_data) != HAL_OK)
 80084d8:	4a07      	ldr	r2, [pc, #28]	; (80084f8 <send_to_all_slave_cur0+0x30>)
 80084da:	4908      	ldr	r1, [pc, #32]	; (80084fc <send_to_all_slave_cur0+0x34>)
 80084dc:	4808      	ldr	r0, [pc, #32]	; (8008500 <send_to_all_slave_cur0+0x38>)
 80084de:	f7f8 ff9e 	bl	800141e <HAL_FDCAN_AddMessageToTxFifoQ>
 80084e2:	4603      	mov	r3, r0
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d004      	beq.n	80084f2 <send_to_all_slave_cur0+0x2a>
	{
		can1_error_counter += 1;
 80084e8:	4b06      	ldr	r3, [pc, #24]	; (8008504 <send_to_all_slave_cur0+0x3c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	3301      	adds	r3, #1
 80084ee:	4a05      	ldr	r2, [pc, #20]	; (8008504 <send_to_all_slave_cur0+0x3c>)
 80084f0:	6013      	str	r3, [r2, #0]
	}
}
 80084f2:	bf00      	nop
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	240005c0 	.word	0x240005c0
 80084fc:	240004e8 	.word	0x240004e8
 8008500:	240001a8 	.word	0x240001a8
 8008504:	24000650 	.word	0x24000650

08008508 <HAL_TIM_PeriodElapsedCallback>:
	BufferIn.Cust.motor_status = motor_status_can;

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b08a      	sub	sp, #40	; 0x28
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a4c      	ldr	r2, [pc, #304]	; (8008648 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8008516:	4293      	cmp	r3, r2
 8008518:	f040 8091 	bne.w	800863e <HAL_TIM_PeriodElapsedCallback+0x136>
	{		
		//pack_ethercat_data();                // change this !!!!!!!!!!!
		//main_task(&ethercat_slave);          // change this !!!!!!!!!!!!
		
		uint64_t tmp_hs_ = 1;//BufferOut.Cust.hs; // change this !!!!!!!!!!!!!
 800851c:	f04f 0201 	mov.w	r2, #1
 8008520:	f04f 0300 	mov.w	r3, #0
 8008524:	e9c7 2308 	strd	r2, r3, [r7, #32]
		
		// 1. control
		if (tmp_hs_ > hs_ || tmp_hs_ == 1)
 8008528:	4b48      	ldr	r3, [pc, #288]	; (800864c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800852a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800852e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008532:	4290      	cmp	r0, r2
 8008534:	eb71 0303 	sbcs.w	r3, r1, r3
 8008538:	d304      	bcc.n	8008544 <HAL_TIM_PeriodElapsedCallback+0x3c>
 800853a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800853e:	1e51      	subs	r1, r2, #1
 8008540:	430b      	orrs	r3, r1
 8008542:	d107      	bne.n	8008554 <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			//control_word = BufferOut.Cust.control_word; // and commit this !!!!!!!!!!!!
			control();			
 8008544:	f7fe fd9c 	bl	8007080 <control>
			hs_ = tmp_hs_;			
 8008548:	4940      	ldr	r1, [pc, #256]	; (800864c <HAL_TIM_PeriodElapsedCallback+0x144>)
 800854a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800854e:	e9c1 2300 	strd	r2, r3, [r1]
 8008552:	e02d      	b.n	80085b0 <HAL_TIM_PeriodElapsedCallback+0xa8>
		}
		else
		{
			error_hs_++;
 8008554:	4b3e      	ldr	r3, [pc, #248]	; (8008650 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	3301      	adds	r3, #1
 800855a:	b2da      	uxtb	r2, r3
 800855c:	4b3c      	ldr	r3, [pc, #240]	; (8008650 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800855e:	701a      	strb	r2, [r3, #0]
			if (error_hs_ == 20 || motor_status_can != 0x00)
 8008560:	4b3b      	ldr	r3, [pc, #236]	; (8008650 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	2b14      	cmp	r3, #20
 8008566:	d003      	beq.n	8008570 <HAL_TIM_PeriodElapsedCallback+0x68>
 8008568:	4b3a      	ldr	r3, [pc, #232]	; (8008654 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800856a:	881b      	ldrh	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d01f      	beq.n	80085b0 <HAL_TIM_PeriodElapsedCallback+0xa8>
			{
				motor_es(&joint_1, joint_1_data, 1);
 8008570:	2201      	movs	r2, #1
 8008572:	4939      	ldr	r1, [pc, #228]	; (8008658 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8008574:	4839      	ldr	r0, [pc, #228]	; (800865c <HAL_TIM_PeriodElapsedCallback+0x154>)
 8008576:	f7fe faed 	bl	8006b54 <motor_es>
				motor_es(&joint_2, joint_2_data, 2);
 800857a:	2202      	movs	r2, #2
 800857c:	4938      	ldr	r1, [pc, #224]	; (8008660 <HAL_TIM_PeriodElapsedCallback+0x158>)
 800857e:	4839      	ldr	r0, [pc, #228]	; (8008664 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8008580:	f7fe fae8 	bl	8006b54 <motor_es>
				motor_es(&joint_3, joint_3_data, 3);
 8008584:	2203      	movs	r2, #3
 8008586:	4938      	ldr	r1, [pc, #224]	; (8008668 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8008588:	4838      	ldr	r0, [pc, #224]	; (800866c <HAL_TIM_PeriodElapsedCallback+0x164>)
 800858a:	f7fe fae3 	bl	8006b54 <motor_es>
				motor_es(&joint_4, joint_4_data, 4);
 800858e:	2204      	movs	r2, #4
 8008590:	4937      	ldr	r1, [pc, #220]	; (8008670 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8008592:	4838      	ldr	r0, [pc, #224]	; (8008674 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8008594:	f7fe fade 	bl	8006b54 <motor_es>
				motor_es(&joint_5, joint_5_data, 5);
 8008598:	2205      	movs	r2, #5
 800859a:	4937      	ldr	r1, [pc, #220]	; (8008678 <HAL_TIM_PeriodElapsedCallback+0x170>)
 800859c:	4837      	ldr	r0, [pc, #220]	; (800867c <HAL_TIM_PeriodElapsedCallback+0x174>)
 800859e:	f7fe fad9 	bl	8006b54 <motor_es>
				motor_es(&joint_6, joint_6_data, 6);				
 80085a2:	2206      	movs	r2, #6
 80085a4:	4936      	ldr	r1, [pc, #216]	; (8008680 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80085a6:	4837      	ldr	r0, [pc, #220]	; (8008684 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80085a8:	f7fe fad4 	bl	8006b54 <motor_es>
				send_to_all_slave();
 80085ac:	f7ff ff54 	bl	8008458 <send_to_all_slave>
			}
		}
		
		
		// error check
		can1_last_error_code = READ_REG(hfdcan1.Instance->PSR);	
 80085b0:	4b35      	ldr	r3, [pc, #212]	; (8008688 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085b6:	4a35      	ldr	r2, [pc, #212]	; (800868c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80085b8:	6013      	str	r3, [r2, #0]
		can1_last_error_code = can1_last_error_code & 0x0007; 
 80085ba:	4b34      	ldr	r3, [pc, #208]	; (800868c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 0307 	and.w	r3, r3, #7
 80085c2:	4a32      	ldr	r2, [pc, #200]	; (800868c <HAL_TIM_PeriodElapsedCallback+0x184>)
 80085c4:	6013      	str	r3, [r2, #0]
		
		can2_last_error_code = READ_REG(hfdcan2.Instance->PSR);	
 80085c6:	4b32      	ldr	r3, [pc, #200]	; (8008690 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085cc:	4a31      	ldr	r2, [pc, #196]	; (8008694 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80085ce:	6013      	str	r3, [r2, #0]
		can2_last_error_code = can2_last_error_code & 0x0007;
 80085d0:	4b30      	ldr	r3, [pc, #192]	; (8008694 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	f003 0307 	and.w	r3, r3, #7
 80085d8:	4a2e      	ldr	r2, [pc, #184]	; (8008694 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 80085da:	6013      	str	r3, [r2, #0]
		FDCAN_ErrorCountersTypeDef ErrorCounters;
		uint8_t error_counter1;
		uint8_t error_counter2;
		uint8_t error_counter3;
		uint8_t error_counter4;
		HAL_FDCAN_GetErrorCounters(&hfdcan1, &ErrorCounters);
 80085dc:	f107 030c 	add.w	r3, r7, #12
 80085e0:	4619      	mov	r1, r3
 80085e2:	4829      	ldr	r0, [pc, #164]	; (8008688 <HAL_TIM_PeriodElapsedCallback+0x180>)
 80085e4:	f7f9 f8e4 	bl	80017b0 <HAL_FDCAN_GetErrorCounters>
		error_counter1 = (uint8_t)ErrorCounters.RxErrorCnt;
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	77fb      	strb	r3, [r7, #31]
		error_counter2 = (uint8_t)ErrorCounters.TxErrorCnt; 
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	77bb      	strb	r3, [r7, #30]
		
		can1_error_counter += error_counter1;
 80085f0:	7ffa      	ldrb	r2, [r7, #31]
 80085f2:	4b29      	ldr	r3, [pc, #164]	; (8008698 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4413      	add	r3, r2
 80085f8:	4a27      	ldr	r2, [pc, #156]	; (8008698 <HAL_TIM_PeriodElapsedCallback+0x190>)
 80085fa:	6013      	str	r3, [r2, #0]
		can1_error_counter += error_counter2;
 80085fc:	7fba      	ldrb	r2, [r7, #30]
 80085fe:	4b26      	ldr	r3, [pc, #152]	; (8008698 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4413      	add	r3, r2
 8008604:	4a24      	ldr	r2, [pc, #144]	; (8008698 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8008606:	6013      	str	r3, [r2, #0]
		
		HAL_FDCAN_GetErrorCounters(&hfdcan2, &ErrorCounters);
 8008608:	f107 030c 	add.w	r3, r7, #12
 800860c:	4619      	mov	r1, r3
 800860e:	4820      	ldr	r0, [pc, #128]	; (8008690 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8008610:	f7f9 f8ce 	bl	80017b0 <HAL_FDCAN_GetErrorCounters>
		error_counter3 = (uint8_t)ErrorCounters.RxErrorCnt;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	777b      	strb	r3, [r7, #29]
		error_counter4 = (uint8_t)ErrorCounters.TxErrorCnt;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	773b      	strb	r3, [r7, #28]
		
		can2_error_counter += error_counter3;
 800861c:	7f7a      	ldrb	r2, [r7, #29]
 800861e:	4b1f      	ldr	r3, [pc, #124]	; (800869c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4413      	add	r3, r2
 8008624:	4a1d      	ldr	r2, [pc, #116]	; (800869c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8008626:	6013      	str	r3, [r2, #0]
		can2_error_counter += error_counter4;
 8008628:	7f3a      	ldrb	r2, [r7, #28]
 800862a:	4b1c      	ldr	r3, [pc, #112]	; (800869c <HAL_TIM_PeriodElapsedCallback+0x194>)
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4413      	add	r3, r2
 8008630:	4a1a      	ldr	r2, [pc, #104]	; (800869c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8008632:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOA, ES_Pin);
 8008634:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008638:	4819      	ldr	r0, [pc, #100]	; (80086a0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800863a:	f7f9 fcac 	bl	8001f96 <HAL_GPIO_TogglePin>
	}
}
 800863e:	bf00      	nop
 8008640:	3728      	adds	r7, #40	; 0x28
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
 8008646:	bf00      	nop
 8008648:	40000c00 	.word	0x40000c00
 800864c:	24000670 	.word	0x24000670
 8008650:	24000678 	.word	0x24000678
 8008654:	2400067a 	.word	0x2400067a
 8008658:	240005c0 	.word	0x240005c0
 800865c:	240004e8 	.word	0x240004e8
 8008660:	240005c8 	.word	0x240005c8
 8008664:	2400050c 	.word	0x2400050c
 8008668:	240005d0 	.word	0x240005d0
 800866c:	24000530 	.word	0x24000530
 8008670:	240005d8 	.word	0x240005d8
 8008674:	24000554 	.word	0x24000554
 8008678:	240005e0 	.word	0x240005e0
 800867c:	24000578 	.word	0x24000578
 8008680:	240005e8 	.word	0x240005e8
 8008684:	2400059c 	.word	0x2400059c
 8008688:	240001a8 	.word	0x240001a8
 800868c:	24000658 	.word	0x24000658
 8008690:	24000248 	.word	0x24000248
 8008694:	2400065c 	.word	0x2400065c
 8008698:	24000650 	.word	0x24000650
 800869c:	24000654 	.word	0x24000654
 80086a0:	58020000 	.word	0x58020000

080086a4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b084      	sub	sp, #16
 80086a8:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 80086aa:	463b      	mov	r3, r7
 80086ac:	2200      	movs	r2, #0
 80086ae:	601a      	str	r2, [r3, #0]
 80086b0:	605a      	str	r2, [r3, #4]
 80086b2:	609a      	str	r2, [r3, #8]
 80086b4:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80086b6:	f7f8 fc2d 	bl	8000f14 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80086ba:	2301      	movs	r3, #1
 80086bc:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80086be:	2300      	movs	r3, #0
 80086c0:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80086c2:	2300      	movs	r3, #0
 80086c4:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80086c6:	231f      	movs	r3, #31
 80086c8:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80086ca:	2387      	movs	r3, #135	; 0x87
 80086cc:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80086d2:	2300      	movs	r3, #0
 80086d4:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80086d6:	2301      	movs	r3, #1
 80086d8:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80086da:	2301      	movs	r3, #1
 80086dc:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80086de:	2300      	movs	r3, #0
 80086e0:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80086e2:	2300      	movs	r3, #0
 80086e4:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80086e6:	463b      	mov	r3, r7
 80086e8:	4618      	mov	r0, r3
 80086ea:	f7f8 fc4b 	bl	8000f84 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80086ee:	2004      	movs	r0, #4
 80086f0:	f7f8 fc28 	bl	8000f44 <HAL_MPU_Enable>

}
 80086f4:	bf00      	nop
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008700:	b672      	cpsid	i
}
 8008702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008704:	e7fe      	b.n	8008704 <Error_Handler+0x8>
	...

08008708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008708:	b480      	push	{r7}
 800870a:	b083      	sub	sp, #12
 800870c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800870e:	4b0a      	ldr	r3, [pc, #40]	; (8008738 <HAL_MspInit+0x30>)
 8008710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008714:	4a08      	ldr	r2, [pc, #32]	; (8008738 <HAL_MspInit+0x30>)
 8008716:	f043 0302 	orr.w	r3, r3, #2
 800871a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800871e:	4b06      	ldr	r3, [pc, #24]	; (8008738 <HAL_MspInit+0x30>)
 8008720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008724:	f003 0302 	and.w	r3, r3, #2
 8008728:	607b      	str	r3, [r7, #4]
 800872a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800872c:	bf00      	nop
 800872e:	370c      	adds	r7, #12
 8008730:	46bd      	mov	sp, r7
 8008732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008736:	4770      	bx	lr
 8008738:	58024400 	.word	0x58024400

0800873c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b0bc      	sub	sp, #240	; 0xf0
 8008740:	af00      	add	r7, sp, #0
 8008742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008744:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
 800874c:	605a      	str	r2, [r3, #4]
 800874e:	609a      	str	r2, [r3, #8]
 8008750:	60da      	str	r2, [r3, #12]
 8008752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008754:	f107 0318 	add.w	r3, r7, #24
 8008758:	22c0      	movs	r2, #192	; 0xc0
 800875a:	2100      	movs	r1, #0
 800875c:	4618      	mov	r0, r3
 800875e:	f000 faf9 	bl	8008d54 <memset>
  if(hfdcan->Instance==FDCAN1)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a57      	ldr	r2, [pc, #348]	; (80088c4 <HAL_FDCAN_MspInit+0x188>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d150      	bne.n	800880e <HAL_FDCAN_MspInit+0xd2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 800876c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008770:	f04f 0300 	mov.w	r3, #0
 8008774:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8008778:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800877c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008780:	f107 0318 	add.w	r3, r7, #24
 8008784:	4618      	mov	r0, r3
 8008786:	f7fa fc41 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 800878a:	4603      	mov	r3, r0
 800878c:	2b00      	cmp	r3, #0
 800878e:	d001      	beq.n	8008794 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8008790:	f7ff ffb4 	bl	80086fc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8008794:	4b4c      	ldr	r3, [pc, #304]	; (80088c8 <HAL_FDCAN_MspInit+0x18c>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	3301      	adds	r3, #1
 800879a:	4a4b      	ldr	r2, [pc, #300]	; (80088c8 <HAL_FDCAN_MspInit+0x18c>)
 800879c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800879e:	4b4a      	ldr	r3, [pc, #296]	; (80088c8 <HAL_FDCAN_MspInit+0x18c>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d10e      	bne.n	80087c4 <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80087a6:	4b49      	ldr	r3, [pc, #292]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 80087a8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80087ac:	4a47      	ldr	r2, [pc, #284]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 80087ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087b2:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80087b6:	4b45      	ldr	r3, [pc, #276]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 80087b8:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80087bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c0:	617b      	str	r3, [r7, #20]
 80087c2:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80087c4:	4b41      	ldr	r3, [pc, #260]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 80087c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087ca:	4a40      	ldr	r2, [pc, #256]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 80087cc:	f043 0308 	orr.w	r3, r3, #8
 80087d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80087d4:	4b3d      	ldr	r3, [pc, #244]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 80087d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80087da:	f003 0308 	and.w	r3, r3, #8
 80087de:	613b      	str	r3, [r7, #16]
 80087e0:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80087e2:	2303      	movs	r3, #3
 80087e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087e8:	2302      	movs	r3, #2
 80087ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087ee:	2300      	movs	r3, #0
 80087f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80087f4:	2300      	movs	r3, #0
 80087f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80087fa:	2309      	movs	r3, #9
 80087fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008800:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8008804:	4619      	mov	r1, r3
 8008806:	4832      	ldr	r0, [pc, #200]	; (80088d0 <HAL_FDCAN_MspInit+0x194>)
 8008808:	f7f9 f9fc 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800880c:	e055      	b.n	80088ba <HAL_FDCAN_MspInit+0x17e>
  else if(hfdcan->Instance==FDCAN2)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a30      	ldr	r2, [pc, #192]	; (80088d4 <HAL_FDCAN_MspInit+0x198>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d150      	bne.n	80088ba <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8008818:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800881c:	f04f 0300 	mov.w	r3, #0
 8008820:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8008824:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800882c:	f107 0318 	add.w	r3, r7, #24
 8008830:	4618      	mov	r0, r3
 8008832:	f7fa fbeb 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <HAL_FDCAN_MspInit+0x104>
      Error_Handler();
 800883c:	f7ff ff5e 	bl	80086fc <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8008840:	4b21      	ldr	r3, [pc, #132]	; (80088c8 <HAL_FDCAN_MspInit+0x18c>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	3301      	adds	r3, #1
 8008846:	4a20      	ldr	r2, [pc, #128]	; (80088c8 <HAL_FDCAN_MspInit+0x18c>)
 8008848:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 800884a:	4b1f      	ldr	r3, [pc, #124]	; (80088c8 <HAL_FDCAN_MspInit+0x18c>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	2b01      	cmp	r3, #1
 8008850:	d10e      	bne.n	8008870 <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8008852:	4b1e      	ldr	r3, [pc, #120]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 8008854:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008858:	4a1c      	ldr	r2, [pc, #112]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 800885a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800885e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8008862:	4b1a      	ldr	r3, [pc, #104]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 8008864:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008868:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800886c:	60fb      	str	r3, [r7, #12]
 800886e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008870:	4b16      	ldr	r3, [pc, #88]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 8008872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008876:	4a15      	ldr	r2, [pc, #84]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 8008878:	f043 0302 	orr.w	r3, r3, #2
 800887c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008880:	4b12      	ldr	r3, [pc, #72]	; (80088cc <HAL_FDCAN_MspInit+0x190>)
 8008882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008886:	f003 0302 	and.w	r3, r3, #2
 800888a:	60bb      	str	r3, [r7, #8]
 800888c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 800888e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8008892:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008896:	2302      	movs	r3, #2
 8008898:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800889c:	2300      	movs	r3, #0
 800889e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088a2:	2300      	movs	r3, #0
 80088a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 80088a8:	2309      	movs	r3, #9
 80088aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80088ae:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80088b2:	4619      	mov	r1, r3
 80088b4:	4808      	ldr	r0, [pc, #32]	; (80088d8 <HAL_FDCAN_MspInit+0x19c>)
 80088b6:	f7f9 f9a5 	bl	8001c04 <HAL_GPIO_Init>
}
 80088ba:	bf00      	nop
 80088bc:	37f0      	adds	r7, #240	; 0xf0
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	4000a000 	.word	0x4000a000
 80088c8:	24000768 	.word	0x24000768
 80088cc:	58024400 	.word	0x58024400
 80088d0:	58020c00 	.word	0x58020c00
 80088d4:	4000a400 	.word	0x4000a400
 80088d8:	58020400 	.word	0x58020400

080088dc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b0ba      	sub	sp, #232	; 0xe8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	605a      	str	r2, [r3, #4]
 80088ee:	609a      	str	r2, [r3, #8]
 80088f0:	60da      	str	r2, [r3, #12]
 80088f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80088f4:	f107 0310 	add.w	r3, r7, #16
 80088f8:	22c0      	movs	r2, #192	; 0xc0
 80088fa:	2100      	movs	r1, #0
 80088fc:	4618      	mov	r0, r3
 80088fe:	f000 fa29 	bl	8008d54 <memset>
  if(hspi->Instance==SPI1)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a26      	ldr	r2, [pc, #152]	; (80089a0 <HAL_SPI_MspInit+0xc4>)
 8008908:	4293      	cmp	r3, r2
 800890a:	d144      	bne.n	8008996 <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 800890c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008910:	f04f 0300 	mov.w	r3, #0
 8008914:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8008918:	2300      	movs	r3, #0
 800891a:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800891c:	f107 0310 	add.w	r3, r7, #16
 8008920:	4618      	mov	r0, r3
 8008922:	f7fa fb73 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 8008926:	4603      	mov	r3, r0
 8008928:	2b00      	cmp	r3, #0
 800892a:	d001      	beq.n	8008930 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 800892c:	f7ff fee6 	bl	80086fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008930:	4b1c      	ldr	r3, [pc, #112]	; (80089a4 <HAL_SPI_MspInit+0xc8>)
 8008932:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008936:	4a1b      	ldr	r2, [pc, #108]	; (80089a4 <HAL_SPI_MspInit+0xc8>)
 8008938:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800893c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008940:	4b18      	ldr	r3, [pc, #96]	; (80089a4 <HAL_SPI_MspInit+0xc8>)
 8008942:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800894e:	4b15      	ldr	r3, [pc, #84]	; (80089a4 <HAL_SPI_MspInit+0xc8>)
 8008950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008954:	4a13      	ldr	r2, [pc, #76]	; (80089a4 <HAL_SPI_MspInit+0xc8>)
 8008956:	f043 0301 	orr.w	r3, r3, #1
 800895a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800895e:	4b11      	ldr	r3, [pc, #68]	; (80089a4 <HAL_SPI_MspInit+0xc8>)
 8008960:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008964:	f003 0301 	and.w	r3, r3, #1
 8008968:	60bb      	str	r3, [r7, #8]
 800896a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800896c:	23e0      	movs	r3, #224	; 0xe0
 800896e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008972:	2302      	movs	r3, #2
 8008974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008978:	2300      	movs	r3, #0
 800897a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800897e:	2300      	movs	r3, #0
 8008980:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8008984:	2305      	movs	r3, #5
 8008986:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800898a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800898e:	4619      	mov	r1, r3
 8008990:	4805      	ldr	r0, [pc, #20]	; (80089a8 <HAL_SPI_MspInit+0xcc>)
 8008992:	f7f9 f937 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8008996:	bf00      	nop
 8008998:	37e8      	adds	r7, #232	; 0xe8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	40013000 	.word	0x40013000
 80089a4:	58024400 	.word	0x58024400
 80089a8:	58020000 	.word	0x58020000

080089ac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80089ac:	b580      	push	{r7, lr}
 80089ae:	b086      	sub	sp, #24
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089bc:	d10f      	bne.n	80089de <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80089be:	4b22      	ldr	r3, [pc, #136]	; (8008a48 <HAL_TIM_Base_MspInit+0x9c>)
 80089c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089c4:	4a20      	ldr	r2, [pc, #128]	; (8008a48 <HAL_TIM_Base_MspInit+0x9c>)
 80089c6:	f043 0301 	orr.w	r3, r3, #1
 80089ca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80089ce:	4b1e      	ldr	r3, [pc, #120]	; (8008a48 <HAL_TIM_Base_MspInit+0x9c>)
 80089d0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089d4:	f003 0301 	and.w	r3, r3, #1
 80089d8:	617b      	str	r3, [r7, #20]
 80089da:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80089dc:	e030      	b.n	8008a40 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM4)
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	4a1a      	ldr	r2, [pc, #104]	; (8008a4c <HAL_TIM_Base_MspInit+0xa0>)
 80089e4:	4293      	cmp	r3, r2
 80089e6:	d10f      	bne.n	8008a08 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80089e8:	4b17      	ldr	r3, [pc, #92]	; (8008a48 <HAL_TIM_Base_MspInit+0x9c>)
 80089ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089ee:	4a16      	ldr	r2, [pc, #88]	; (8008a48 <HAL_TIM_Base_MspInit+0x9c>)
 80089f0:	f043 0304 	orr.w	r3, r3, #4
 80089f4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80089f8:	4b13      	ldr	r3, [pc, #76]	; (8008a48 <HAL_TIM_Base_MspInit+0x9c>)
 80089fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80089fe:	f003 0304 	and.w	r3, r3, #4
 8008a02:	613b      	str	r3, [r7, #16]
 8008a04:	693b      	ldr	r3, [r7, #16]
}
 8008a06:	e01b      	b.n	8008a40 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM5)
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	4a10      	ldr	r2, [pc, #64]	; (8008a50 <HAL_TIM_Base_MspInit+0xa4>)
 8008a0e:	4293      	cmp	r3, r2
 8008a10:	d116      	bne.n	8008a40 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008a12:	4b0d      	ldr	r3, [pc, #52]	; (8008a48 <HAL_TIM_Base_MspInit+0x9c>)
 8008a14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a18:	4a0b      	ldr	r2, [pc, #44]	; (8008a48 <HAL_TIM_Base_MspInit+0x9c>)
 8008a1a:	f043 0308 	orr.w	r3, r3, #8
 8008a1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008a22:	4b09      	ldr	r3, [pc, #36]	; (8008a48 <HAL_TIM_Base_MspInit+0x9c>)
 8008a24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008a28:	f003 0308 	and.w	r3, r3, #8
 8008a2c:	60fb      	str	r3, [r7, #12]
 8008a2e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8008a30:	2200      	movs	r2, #0
 8008a32:	2100      	movs	r1, #0
 8008a34:	2032      	movs	r0, #50	; 0x32
 8008a36:	f7f8 fa38 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008a3a:	2032      	movs	r0, #50	; 0x32
 8008a3c:	f7f8 fa4f 	bl	8000ede <HAL_NVIC_EnableIRQ>
}
 8008a40:	bf00      	nop
 8008a42:	3718      	adds	r7, #24
 8008a44:	46bd      	mov	sp, r7
 8008a46:	bd80      	pop	{r7, pc}
 8008a48:	58024400 	.word	0x58024400
 8008a4c:	40000800 	.word	0x40000800
 8008a50:	40000c00 	.word	0x40000c00

08008a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b0ba      	sub	sp, #232	; 0xe8
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a5c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008a60:	2200      	movs	r2, #0
 8008a62:	601a      	str	r2, [r3, #0]
 8008a64:	605a      	str	r2, [r3, #4]
 8008a66:	609a      	str	r2, [r3, #8]
 8008a68:	60da      	str	r2, [r3, #12]
 8008a6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008a6c:	f107 0310 	add.w	r3, r7, #16
 8008a70:	22c0      	movs	r2, #192	; 0xc0
 8008a72:	2100      	movs	r1, #0
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 f96d 	bl	8008d54 <memset>
  if(huart->Instance==USART2)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	4a26      	ldr	r2, [pc, #152]	; (8008b18 <HAL_UART_MspInit+0xc4>)
 8008a80:	4293      	cmp	r3, r2
 8008a82:	d145      	bne.n	8008b10 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8008a84:	f04f 0202 	mov.w	r2, #2
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8008a90:	2300      	movs	r3, #0
 8008a92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008a96:	f107 0310 	add.w	r3, r7, #16
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fa fab6 	bl	800300c <HAL_RCCEx_PeriphCLKConfig>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8008aa6:	f7ff fe29 	bl	80086fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008aaa:	4b1c      	ldr	r3, [pc, #112]	; (8008b1c <HAL_UART_MspInit+0xc8>)
 8008aac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ab0:	4a1a      	ldr	r2, [pc, #104]	; (8008b1c <HAL_UART_MspInit+0xc8>)
 8008ab2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ab6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008aba:	4b18      	ldr	r3, [pc, #96]	; (8008b1c <HAL_UART_MspInit+0xc8>)
 8008abc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ac4:	60fb      	str	r3, [r7, #12]
 8008ac6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ac8:	4b14      	ldr	r3, [pc, #80]	; (8008b1c <HAL_UART_MspInit+0xc8>)
 8008aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ace:	4a13      	ldr	r2, [pc, #76]	; (8008b1c <HAL_UART_MspInit+0xc8>)
 8008ad0:	f043 0301 	orr.w	r3, r3, #1
 8008ad4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008ad8:	4b10      	ldr	r3, [pc, #64]	; (8008b1c <HAL_UART_MspInit+0xc8>)
 8008ada:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008ade:	f003 0301 	and.w	r3, r3, #1
 8008ae2:	60bb      	str	r3, [r7, #8]
 8008ae4:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8008ae6:	230c      	movs	r3, #12
 8008ae8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008aec:	2302      	movs	r3, #2
 8008aee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008af2:	2300      	movs	r3, #0
 8008af4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008af8:	2300      	movs	r3, #0
 8008afa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008afe:	2307      	movs	r3, #7
 8008b00:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b04:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008b08:	4619      	mov	r1, r3
 8008b0a:	4805      	ldr	r0, [pc, #20]	; (8008b20 <HAL_UART_MspInit+0xcc>)
 8008b0c:	f7f9 f87a 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008b10:	bf00      	nop
 8008b12:	37e8      	adds	r7, #232	; 0xe8
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	40004400 	.word	0x40004400
 8008b1c:	58024400 	.word	0x58024400
 8008b20:	58020000 	.word	0x58020000

08008b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b24:	b480      	push	{r7}
 8008b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008b28:	e7fe      	b.n	8008b28 <NMI_Handler+0x4>

08008b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b2a:	b480      	push	{r7}
 8008b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b2e:	e7fe      	b.n	8008b2e <HardFault_Handler+0x4>

08008b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b30:	b480      	push	{r7}
 8008b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b34:	e7fe      	b.n	8008b34 <MemManage_Handler+0x4>

08008b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b36:	b480      	push	{r7}
 8008b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b3a:	e7fe      	b.n	8008b3a <BusFault_Handler+0x4>

08008b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b3c:	b480      	push	{r7}
 8008b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b40:	e7fe      	b.n	8008b40 <UsageFault_Handler+0x4>

08008b42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b42:	b480      	push	{r7}
 8008b44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b46:	bf00      	nop
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4e:	4770      	bx	lr

08008b50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b50:	b480      	push	{r7}
 8008b52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b54:	bf00      	nop
 8008b56:	46bd      	mov	sp, r7
 8008b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5c:	4770      	bx	lr

08008b5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b5e:	b480      	push	{r7}
 8008b60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b62:	bf00      	nop
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008b70:	f7f8 f870 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008b74:	bf00      	nop
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008b7c:	4802      	ldr	r0, [pc, #8]	; (8008b88 <TIM5_IRQHandler+0x10>)
 8008b7e:	f7fc faef 	bl	8005160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8008b82:	bf00      	nop
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	bf00      	nop
 8008b88:	24000408 	.word	0x24000408

08008b8c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008b90:	4b37      	ldr	r3, [pc, #220]	; (8008c70 <SystemInit+0xe4>)
 8008b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b96:	4a36      	ldr	r2, [pc, #216]	; (8008c70 <SystemInit+0xe4>)
 8008b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008ba0:	4b34      	ldr	r3, [pc, #208]	; (8008c74 <SystemInit+0xe8>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f003 030f 	and.w	r3, r3, #15
 8008ba8:	2b06      	cmp	r3, #6
 8008baa:	d807      	bhi.n	8008bbc <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008bac:	4b31      	ldr	r3, [pc, #196]	; (8008c74 <SystemInit+0xe8>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f023 030f 	bic.w	r3, r3, #15
 8008bb4:	4a2f      	ldr	r2, [pc, #188]	; (8008c74 <SystemInit+0xe8>)
 8008bb6:	f043 0307 	orr.w	r3, r3, #7
 8008bba:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008bbc:	4b2e      	ldr	r3, [pc, #184]	; (8008c78 <SystemInit+0xec>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	4a2d      	ldr	r2, [pc, #180]	; (8008c78 <SystemInit+0xec>)
 8008bc2:	f043 0301 	orr.w	r3, r3, #1
 8008bc6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008bc8:	4b2b      	ldr	r3, [pc, #172]	; (8008c78 <SystemInit+0xec>)
 8008bca:	2200      	movs	r2, #0
 8008bcc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008bce:	4b2a      	ldr	r3, [pc, #168]	; (8008c78 <SystemInit+0xec>)
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	4929      	ldr	r1, [pc, #164]	; (8008c78 <SystemInit+0xec>)
 8008bd4:	4b29      	ldr	r3, [pc, #164]	; (8008c7c <SystemInit+0xf0>)
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008bda:	4b26      	ldr	r3, [pc, #152]	; (8008c74 <SystemInit+0xe8>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f003 0308 	and.w	r3, r3, #8
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d007      	beq.n	8008bf6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008be6:	4b23      	ldr	r3, [pc, #140]	; (8008c74 <SystemInit+0xe8>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f023 030f 	bic.w	r3, r3, #15
 8008bee:	4a21      	ldr	r2, [pc, #132]	; (8008c74 <SystemInit+0xe8>)
 8008bf0:	f043 0307 	orr.w	r3, r3, #7
 8008bf4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008bf6:	4b20      	ldr	r3, [pc, #128]	; (8008c78 <SystemInit+0xec>)
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008bfc:	4b1e      	ldr	r3, [pc, #120]	; (8008c78 <SystemInit+0xec>)
 8008bfe:	2200      	movs	r2, #0
 8008c00:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008c02:	4b1d      	ldr	r3, [pc, #116]	; (8008c78 <SystemInit+0xec>)
 8008c04:	2200      	movs	r2, #0
 8008c06:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008c08:	4b1b      	ldr	r3, [pc, #108]	; (8008c78 <SystemInit+0xec>)
 8008c0a:	4a1d      	ldr	r2, [pc, #116]	; (8008c80 <SystemInit+0xf4>)
 8008c0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008c0e:	4b1a      	ldr	r3, [pc, #104]	; (8008c78 <SystemInit+0xec>)
 8008c10:	4a1c      	ldr	r2, [pc, #112]	; (8008c84 <SystemInit+0xf8>)
 8008c12:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008c14:	4b18      	ldr	r3, [pc, #96]	; (8008c78 <SystemInit+0xec>)
 8008c16:	4a1c      	ldr	r2, [pc, #112]	; (8008c88 <SystemInit+0xfc>)
 8008c18:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008c1a:	4b17      	ldr	r3, [pc, #92]	; (8008c78 <SystemInit+0xec>)
 8008c1c:	2200      	movs	r2, #0
 8008c1e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008c20:	4b15      	ldr	r3, [pc, #84]	; (8008c78 <SystemInit+0xec>)
 8008c22:	4a19      	ldr	r2, [pc, #100]	; (8008c88 <SystemInit+0xfc>)
 8008c24:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008c26:	4b14      	ldr	r3, [pc, #80]	; (8008c78 <SystemInit+0xec>)
 8008c28:	2200      	movs	r2, #0
 8008c2a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008c2c:	4b12      	ldr	r3, [pc, #72]	; (8008c78 <SystemInit+0xec>)
 8008c2e:	4a16      	ldr	r2, [pc, #88]	; (8008c88 <SystemInit+0xfc>)
 8008c30:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008c32:	4b11      	ldr	r3, [pc, #68]	; (8008c78 <SystemInit+0xec>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008c38:	4b0f      	ldr	r3, [pc, #60]	; (8008c78 <SystemInit+0xec>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a0e      	ldr	r2, [pc, #56]	; (8008c78 <SystemInit+0xec>)
 8008c3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c42:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008c44:	4b0c      	ldr	r3, [pc, #48]	; (8008c78 <SystemInit+0xec>)
 8008c46:	2200      	movs	r2, #0
 8008c48:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008c4a:	4b10      	ldr	r3, [pc, #64]	; (8008c8c <SystemInit+0x100>)
 8008c4c:	681a      	ldr	r2, [r3, #0]
 8008c4e:	4b10      	ldr	r3, [pc, #64]	; (8008c90 <SystemInit+0x104>)
 8008c50:	4013      	ands	r3, r2
 8008c52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c56:	d202      	bcs.n	8008c5e <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008c58:	4b0e      	ldr	r3, [pc, #56]	; (8008c94 <SystemInit+0x108>)
 8008c5a:	2201      	movs	r2, #1
 8008c5c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008c5e:	4b0e      	ldr	r3, [pc, #56]	; (8008c98 <SystemInit+0x10c>)
 8008c60:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008c64:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008c66:	bf00      	nop
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6e:	4770      	bx	lr
 8008c70:	e000ed00 	.word	0xe000ed00
 8008c74:	52002000 	.word	0x52002000
 8008c78:	58024400 	.word	0x58024400
 8008c7c:	eaf6ed7f 	.word	0xeaf6ed7f
 8008c80:	02020200 	.word	0x02020200
 8008c84:	01ff0000 	.word	0x01ff0000
 8008c88:	01010280 	.word	0x01010280
 8008c8c:	5c001000 	.word	0x5c001000
 8008c90:	ffff0000 	.word	0xffff0000
 8008c94:	51008108 	.word	0x51008108
 8008c98:	52004000 	.word	0x52004000

08008c9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008cd4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008ca0:	f7ff ff74 	bl	8008b8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ca4:	480c      	ldr	r0, [pc, #48]	; (8008cd8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008ca6:	490d      	ldr	r1, [pc, #52]	; (8008cdc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008ca8:	4a0d      	ldr	r2, [pc, #52]	; (8008ce0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008caa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008cac:	e002      	b.n	8008cb4 <LoopCopyDataInit>

08008cae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008cae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008cb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008cb2:	3304      	adds	r3, #4

08008cb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008cb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008cb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008cb8:	d3f9      	bcc.n	8008cae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008cba:	4a0a      	ldr	r2, [pc, #40]	; (8008ce4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008cbc:	4c0a      	ldr	r4, [pc, #40]	; (8008ce8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008cbe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008cc0:	e001      	b.n	8008cc6 <LoopFillZerobss>

08008cc2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008cc2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008cc4:	3204      	adds	r2, #4

08008cc6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008cc6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008cc8:	d3fb      	bcc.n	8008cc2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008cca:	f000 f811 	bl	8008cf0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008cce:	f7fe ff39 	bl	8007b44 <main>
  bx  lr
 8008cd2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008cd4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8008cd8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008cdc:	24000080 	.word	0x24000080
  ldr r2, =_sidata
 8008ce0:	08009bf0 	.word	0x08009bf0
  ldr r2, =_sbss
 8008ce4:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8008ce8:	2400076c 	.word	0x2400076c

08008cec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008cec:	e7fe      	b.n	8008cec <ADC3_IRQHandler>
	...

08008cf0 <__libc_init_array>:
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	4d0d      	ldr	r5, [pc, #52]	; (8008d28 <__libc_init_array+0x38>)
 8008cf4:	4c0d      	ldr	r4, [pc, #52]	; (8008d2c <__libc_init_array+0x3c>)
 8008cf6:	1b64      	subs	r4, r4, r5
 8008cf8:	10a4      	asrs	r4, r4, #2
 8008cfa:	2600      	movs	r6, #0
 8008cfc:	42a6      	cmp	r6, r4
 8008cfe:	d109      	bne.n	8008d14 <__libc_init_array+0x24>
 8008d00:	4d0b      	ldr	r5, [pc, #44]	; (8008d30 <__libc_init_array+0x40>)
 8008d02:	4c0c      	ldr	r4, [pc, #48]	; (8008d34 <__libc_init_array+0x44>)
 8008d04:	f000 fe26 	bl	8009954 <_init>
 8008d08:	1b64      	subs	r4, r4, r5
 8008d0a:	10a4      	asrs	r4, r4, #2
 8008d0c:	2600      	movs	r6, #0
 8008d0e:	42a6      	cmp	r6, r4
 8008d10:	d105      	bne.n	8008d1e <__libc_init_array+0x2e>
 8008d12:	bd70      	pop	{r4, r5, r6, pc}
 8008d14:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d18:	4798      	blx	r3
 8008d1a:	3601      	adds	r6, #1
 8008d1c:	e7ee      	b.n	8008cfc <__libc_init_array+0xc>
 8008d1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008d22:	4798      	blx	r3
 8008d24:	3601      	adds	r6, #1
 8008d26:	e7f2      	b.n	8008d0e <__libc_init_array+0x1e>
 8008d28:	08009be8 	.word	0x08009be8
 8008d2c:	08009be8 	.word	0x08009be8
 8008d30:	08009be8 	.word	0x08009be8
 8008d34:	08009bec 	.word	0x08009bec

08008d38 <memcpy>:
 8008d38:	440a      	add	r2, r1
 8008d3a:	4291      	cmp	r1, r2
 8008d3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d40:	d100      	bne.n	8008d44 <memcpy+0xc>
 8008d42:	4770      	bx	lr
 8008d44:	b510      	push	{r4, lr}
 8008d46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d4e:	4291      	cmp	r1, r2
 8008d50:	d1f9      	bne.n	8008d46 <memcpy+0xe>
 8008d52:	bd10      	pop	{r4, pc}

08008d54 <memset>:
 8008d54:	4402      	add	r2, r0
 8008d56:	4603      	mov	r3, r0
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d100      	bne.n	8008d5e <memset+0xa>
 8008d5c:	4770      	bx	lr
 8008d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008d62:	e7f9      	b.n	8008d58 <memset+0x4>
 8008d64:	0000      	movs	r0, r0
	...

08008d68 <sin>:
 8008d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008d6a:	eeb0 7b40 	vmov.f64	d7, d0
 8008d6e:	ee17 3a90 	vmov	r3, s15
 8008d72:	4a21      	ldr	r2, [pc, #132]	; (8008df8 <sin+0x90>)
 8008d74:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	dc07      	bgt.n	8008d8c <sin+0x24>
 8008d7c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8008df0 <sin+0x88>
 8008d80:	2000      	movs	r0, #0
 8008d82:	b005      	add	sp, #20
 8008d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d88:	f000 bc82 	b.w	8009690 <__kernel_sin>
 8008d8c:	4a1b      	ldr	r2, [pc, #108]	; (8008dfc <sin+0x94>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	dd04      	ble.n	8008d9c <sin+0x34>
 8008d92:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008d96:	b005      	add	sp, #20
 8008d98:	f85d fb04 	ldr.w	pc, [sp], #4
 8008d9c:	4668      	mov	r0, sp
 8008d9e:	f000 f82f 	bl	8008e00 <__ieee754_rem_pio2>
 8008da2:	f000 0003 	and.w	r0, r0, #3
 8008da6:	2801      	cmp	r0, #1
 8008da8:	d00a      	beq.n	8008dc0 <sin+0x58>
 8008daa:	2802      	cmp	r0, #2
 8008dac:	d00f      	beq.n	8008dce <sin+0x66>
 8008dae:	b9c0      	cbnz	r0, 8008de2 <sin+0x7a>
 8008db0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008db4:	ed9d 0b00 	vldr	d0, [sp]
 8008db8:	2001      	movs	r0, #1
 8008dba:	f000 fc69 	bl	8009690 <__kernel_sin>
 8008dbe:	e7ea      	b.n	8008d96 <sin+0x2e>
 8008dc0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008dc4:	ed9d 0b00 	vldr	d0, [sp]
 8008dc8:	f000 f95e 	bl	8009088 <__kernel_cos>
 8008dcc:	e7e3      	b.n	8008d96 <sin+0x2e>
 8008dce:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008dd2:	ed9d 0b00 	vldr	d0, [sp]
 8008dd6:	2001      	movs	r0, #1
 8008dd8:	f000 fc5a 	bl	8009690 <__kernel_sin>
 8008ddc:	eeb1 0b40 	vneg.f64	d0, d0
 8008de0:	e7d9      	b.n	8008d96 <sin+0x2e>
 8008de2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008de6:	ed9d 0b00 	vldr	d0, [sp]
 8008dea:	f000 f94d 	bl	8009088 <__kernel_cos>
 8008dee:	e7f5      	b.n	8008ddc <sin+0x74>
	...
 8008df8:	3fe921fb 	.word	0x3fe921fb
 8008dfc:	7fefffff 	.word	0x7fefffff

08008e00 <__ieee754_rem_pio2>:
 8008e00:	b570      	push	{r4, r5, r6, lr}
 8008e02:	eeb0 7b40 	vmov.f64	d7, d0
 8008e06:	ee17 5a90 	vmov	r5, s15
 8008e0a:	4b99      	ldr	r3, [pc, #612]	; (8009070 <__ieee754_rem_pio2+0x270>)
 8008e0c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008e10:	429e      	cmp	r6, r3
 8008e12:	b088      	sub	sp, #32
 8008e14:	4604      	mov	r4, r0
 8008e16:	dc07      	bgt.n	8008e28 <__ieee754_rem_pio2+0x28>
 8008e18:	2200      	movs	r2, #0
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	ed84 0b00 	vstr	d0, [r4]
 8008e20:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008e24:	2000      	movs	r0, #0
 8008e26:	e01b      	b.n	8008e60 <__ieee754_rem_pio2+0x60>
 8008e28:	4b92      	ldr	r3, [pc, #584]	; (8009074 <__ieee754_rem_pio2+0x274>)
 8008e2a:	429e      	cmp	r6, r3
 8008e2c:	dc3b      	bgt.n	8008ea6 <__ieee754_rem_pio2+0xa6>
 8008e2e:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8008e32:	2d00      	cmp	r5, #0
 8008e34:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8009030 <__ieee754_rem_pio2+0x230>
 8008e38:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008e3c:	dd19      	ble.n	8008e72 <__ieee754_rem_pio2+0x72>
 8008e3e:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008e42:	429e      	cmp	r6, r3
 8008e44:	d00e      	beq.n	8008e64 <__ieee754_rem_pio2+0x64>
 8008e46:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8009038 <__ieee754_rem_pio2+0x238>
 8008e4a:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008e4e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008e52:	ed84 5b00 	vstr	d5, [r4]
 8008e56:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008e5a:	ed84 7b02 	vstr	d7, [r4, #8]
 8008e5e:	2001      	movs	r0, #1
 8008e60:	b008      	add	sp, #32
 8008e62:	bd70      	pop	{r4, r5, r6, pc}
 8008e64:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8009040 <__ieee754_rem_pio2+0x240>
 8008e68:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008e6c:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8009048 <__ieee754_rem_pio2+0x248>
 8008e70:	e7eb      	b.n	8008e4a <__ieee754_rem_pio2+0x4a>
 8008e72:	429e      	cmp	r6, r3
 8008e74:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008e78:	d00e      	beq.n	8008e98 <__ieee754_rem_pio2+0x98>
 8008e7a:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8009038 <__ieee754_rem_pio2+0x238>
 8008e7e:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008e82:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008e86:	ed84 5b00 	vstr	d5, [r4]
 8008e8a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008e8e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e92:	ed84 7b02 	vstr	d7, [r4, #8]
 8008e96:	e7e3      	b.n	8008e60 <__ieee754_rem_pio2+0x60>
 8008e98:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009040 <__ieee754_rem_pio2+0x240>
 8008e9c:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008ea0:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8009048 <__ieee754_rem_pio2+0x248>
 8008ea4:	e7eb      	b.n	8008e7e <__ieee754_rem_pio2+0x7e>
 8008ea6:	4b74      	ldr	r3, [pc, #464]	; (8009078 <__ieee754_rem_pio2+0x278>)
 8008ea8:	429e      	cmp	r6, r3
 8008eaa:	dc70      	bgt.n	8008f8e <__ieee754_rem_pio2+0x18e>
 8008eac:	f000 fc48 	bl	8009740 <fabs>
 8008eb0:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008eb4:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009050 <__ieee754_rem_pio2+0x250>
 8008eb8:	eea0 7b06 	vfma.f64	d7, d0, d6
 8008ebc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008ec0:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008ec4:	ee17 0a90 	vmov	r0, s15
 8008ec8:	eeb1 4b45 	vneg.f64	d4, d5
 8008ecc:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8009030 <__ieee754_rem_pio2+0x230>
 8008ed0:	eea5 0b47 	vfms.f64	d0, d5, d7
 8008ed4:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8009038 <__ieee754_rem_pio2+0x238>
 8008ed8:	281f      	cmp	r0, #31
 8008eda:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008ede:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008ee2:	dc08      	bgt.n	8008ef6 <__ieee754_rem_pio2+0xf6>
 8008ee4:	4b65      	ldr	r3, [pc, #404]	; (800907c <__ieee754_rem_pio2+0x27c>)
 8008ee6:	1e42      	subs	r2, r0, #1
 8008ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008eec:	42b3      	cmp	r3, r6
 8008eee:	d002      	beq.n	8008ef6 <__ieee754_rem_pio2+0xf6>
 8008ef0:	ed84 6b00 	vstr	d6, [r4]
 8008ef4:	e026      	b.n	8008f44 <__ieee754_rem_pio2+0x144>
 8008ef6:	ee16 3a90 	vmov	r3, s13
 8008efa:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008efe:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8008f02:	2b10      	cmp	r3, #16
 8008f04:	ea4f 5226 	mov.w	r2, r6, asr #20
 8008f08:	ddf2      	ble.n	8008ef0 <__ieee754_rem_pio2+0xf0>
 8008f0a:	eeb0 6b40 	vmov.f64	d6, d0
 8008f0e:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8009040 <__ieee754_rem_pio2+0x240>
 8008f12:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8009048 <__ieee754_rem_pio2+0x248>
 8008f16:	eea4 6b07 	vfma.f64	d6, d4, d7
 8008f1a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008f1e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8008f22:	eeb0 7b40 	vmov.f64	d7, d0
 8008f26:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8008f2a:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008f2e:	ee13 3a90 	vmov	r3, s7
 8008f32:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008f36:	1ad3      	subs	r3, r2, r3
 8008f38:	2b31      	cmp	r3, #49	; 0x31
 8008f3a:	dc17      	bgt.n	8008f6c <__ieee754_rem_pio2+0x16c>
 8008f3c:	eeb0 0b46 	vmov.f64	d0, d6
 8008f40:	ed84 3b00 	vstr	d3, [r4]
 8008f44:	ed94 6b00 	vldr	d6, [r4]
 8008f48:	2d00      	cmp	r5, #0
 8008f4a:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008f4e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008f52:	ed84 0b02 	vstr	d0, [r4, #8]
 8008f56:	da83      	bge.n	8008e60 <__ieee754_rem_pio2+0x60>
 8008f58:	eeb1 6b46 	vneg.f64	d6, d6
 8008f5c:	eeb1 0b40 	vneg.f64	d0, d0
 8008f60:	ed84 6b00 	vstr	d6, [r4]
 8008f64:	ed84 0b02 	vstr	d0, [r4, #8]
 8008f68:	4240      	negs	r0, r0
 8008f6a:	e779      	b.n	8008e60 <__ieee754_rem_pio2+0x60>
 8008f6c:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8009058 <__ieee754_rem_pio2+0x258>
 8008f70:	eeb0 0b46 	vmov.f64	d0, d6
 8008f74:	eea4 0b03 	vfma.f64	d0, d4, d3
 8008f78:	ee36 7b40 	vsub.f64	d7, d6, d0
 8008f7c:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8009060 <__ieee754_rem_pio2+0x260>
 8008f80:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008f84:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8008f88:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008f8c:	e7b0      	b.n	8008ef0 <__ieee754_rem_pio2+0xf0>
 8008f8e:	4b3c      	ldr	r3, [pc, #240]	; (8009080 <__ieee754_rem_pio2+0x280>)
 8008f90:	429e      	cmp	r6, r3
 8008f92:	dd06      	ble.n	8008fa2 <__ieee754_rem_pio2+0x1a2>
 8008f94:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008f98:	ed80 7b02 	vstr	d7, [r0, #8]
 8008f9c:	ed80 7b00 	vstr	d7, [r0]
 8008fa0:	e740      	b.n	8008e24 <__ieee754_rem_pio2+0x24>
 8008fa2:	1532      	asrs	r2, r6, #20
 8008fa4:	ee10 0a10 	vmov	r0, s0
 8008fa8:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8008fac:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008fb0:	ec41 0b17 	vmov	d7, r0, r1
 8008fb4:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008fb8:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8009068 <__ieee754_rem_pio2+0x268>
 8008fbc:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008fc0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008fc4:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008fc8:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008fcc:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008fd0:	a902      	add	r1, sp, #8
 8008fd2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008fd6:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008fda:	ed8d 6b04 	vstr	d6, [sp, #16]
 8008fde:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008fe2:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008fe6:	2603      	movs	r6, #3
 8008fe8:	4608      	mov	r0, r1
 8008fea:	ed91 7b04 	vldr	d7, [r1, #16]
 8008fee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ff6:	4633      	mov	r3, r6
 8008ff8:	f1a1 0108 	sub.w	r1, r1, #8
 8008ffc:	f106 36ff 	add.w	r6, r6, #4294967295
 8009000:	d0f3      	beq.n	8008fea <__ieee754_rem_pio2+0x1ea>
 8009002:	4920      	ldr	r1, [pc, #128]	; (8009084 <__ieee754_rem_pio2+0x284>)
 8009004:	9101      	str	r1, [sp, #4]
 8009006:	2102      	movs	r1, #2
 8009008:	9100      	str	r1, [sp, #0]
 800900a:	4621      	mov	r1, r4
 800900c:	f000 f8a8 	bl	8009160 <__kernel_rem_pio2>
 8009010:	2d00      	cmp	r5, #0
 8009012:	f6bf af25 	bge.w	8008e60 <__ieee754_rem_pio2+0x60>
 8009016:	ed94 7b00 	vldr	d7, [r4]
 800901a:	eeb1 7b47 	vneg.f64	d7, d7
 800901e:	ed84 7b00 	vstr	d7, [r4]
 8009022:	ed94 7b02 	vldr	d7, [r4, #8]
 8009026:	eeb1 7b47 	vneg.f64	d7, d7
 800902a:	ed84 7b02 	vstr	d7, [r4, #8]
 800902e:	e79b      	b.n	8008f68 <__ieee754_rem_pio2+0x168>
 8009030:	54400000 	.word	0x54400000
 8009034:	3ff921fb 	.word	0x3ff921fb
 8009038:	1a626331 	.word	0x1a626331
 800903c:	3dd0b461 	.word	0x3dd0b461
 8009040:	1a600000 	.word	0x1a600000
 8009044:	3dd0b461 	.word	0x3dd0b461
 8009048:	2e037073 	.word	0x2e037073
 800904c:	3ba3198a 	.word	0x3ba3198a
 8009050:	6dc9c883 	.word	0x6dc9c883
 8009054:	3fe45f30 	.word	0x3fe45f30
 8009058:	2e000000 	.word	0x2e000000
 800905c:	3ba3198a 	.word	0x3ba3198a
 8009060:	252049c1 	.word	0x252049c1
 8009064:	397b839a 	.word	0x397b839a
 8009068:	00000000 	.word	0x00000000
 800906c:	41700000 	.word	0x41700000
 8009070:	3fe921fb 	.word	0x3fe921fb
 8009074:	4002d97b 	.word	0x4002d97b
 8009078:	413921fb 	.word	0x413921fb
 800907c:	08009a04 	.word	0x08009a04
 8009080:	7fefffff 	.word	0x7fefffff
 8009084:	08009a84 	.word	0x08009a84

08009088 <__kernel_cos>:
 8009088:	ee10 1a90 	vmov	r1, s1
 800908c:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8009090:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009094:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8009098:	da05      	bge.n	80090a6 <__kernel_cos+0x1e>
 800909a:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800909e:	ee17 3a90 	vmov	r3, s15
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d03d      	beq.n	8009122 <__kernel_cos+0x9a>
 80090a6:	ee20 3b00 	vmul.f64	d3, d0, d0
 80090aa:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8009128 <__kernel_cos+0xa0>
 80090ae:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009130 <__kernel_cos+0xa8>
 80090b2:	eea3 6b07 	vfma.f64	d6, d3, d7
 80090b6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009138 <__kernel_cos+0xb0>
 80090ba:	eea6 7b03 	vfma.f64	d7, d6, d3
 80090be:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8009140 <__kernel_cos+0xb8>
 80090c2:	eea7 6b03 	vfma.f64	d6, d7, d3
 80090c6:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009148 <__kernel_cos+0xc0>
 80090ca:	4b23      	ldr	r3, [pc, #140]	; (8009158 <__kernel_cos+0xd0>)
 80090cc:	eea6 7b03 	vfma.f64	d7, d6, d3
 80090d0:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8009150 <__kernel_cos+0xc8>
 80090d4:	4299      	cmp	r1, r3
 80090d6:	eea7 6b03 	vfma.f64	d6, d7, d3
 80090da:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 80090de:	ee26 5b03 	vmul.f64	d5, d6, d3
 80090e2:	ee23 7b07 	vmul.f64	d7, d3, d7
 80090e6:	ee21 6b40 	vnmul.f64	d6, d1, d0
 80090ea:	eea3 6b05 	vfma.f64	d6, d3, d5
 80090ee:	dc04      	bgt.n	80090fa <__kernel_cos+0x72>
 80090f0:	ee37 6b46 	vsub.f64	d6, d7, d6
 80090f4:	ee34 0b46 	vsub.f64	d0, d4, d6
 80090f8:	4770      	bx	lr
 80090fa:	4b18      	ldr	r3, [pc, #96]	; (800915c <__kernel_cos+0xd4>)
 80090fc:	4299      	cmp	r1, r3
 80090fe:	dc0d      	bgt.n	800911c <__kernel_cos+0x94>
 8009100:	2200      	movs	r2, #0
 8009102:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8009106:	ec43 2b15 	vmov	d5, r2, r3
 800910a:	ee34 0b45 	vsub.f64	d0, d4, d5
 800910e:	ee37 7b45 	vsub.f64	d7, d7, d5
 8009112:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009116:	ee30 0b47 	vsub.f64	d0, d0, d7
 800911a:	4770      	bx	lr
 800911c:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8009120:	e7f3      	b.n	800910a <__kernel_cos+0x82>
 8009122:	eeb0 0b44 	vmov.f64	d0, d4
 8009126:	4770      	bx	lr
 8009128:	be8838d4 	.word	0xbe8838d4
 800912c:	bda8fae9 	.word	0xbda8fae9
 8009130:	bdb4b1c4 	.word	0xbdb4b1c4
 8009134:	3e21ee9e 	.word	0x3e21ee9e
 8009138:	809c52ad 	.word	0x809c52ad
 800913c:	be927e4f 	.word	0xbe927e4f
 8009140:	19cb1590 	.word	0x19cb1590
 8009144:	3efa01a0 	.word	0x3efa01a0
 8009148:	16c15177 	.word	0x16c15177
 800914c:	bf56c16c 	.word	0xbf56c16c
 8009150:	5555554c 	.word	0x5555554c
 8009154:	3fa55555 	.word	0x3fa55555
 8009158:	3fd33332 	.word	0x3fd33332
 800915c:	3fe90000 	.word	0x3fe90000

08009160 <__kernel_rem_pio2>:
 8009160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009164:	ed2d 8b06 	vpush	{d8-d10}
 8009168:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 800916c:	460f      	mov	r7, r1
 800916e:	9002      	str	r0, [sp, #8]
 8009170:	49c5      	ldr	r1, [pc, #788]	; (8009488 <__kernel_rem_pio2+0x328>)
 8009172:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8009174:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8009178:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 800917c:	9301      	str	r3, [sp, #4]
 800917e:	f112 0f14 	cmn.w	r2, #20
 8009182:	bfa8      	it	ge
 8009184:	2018      	movge	r0, #24
 8009186:	f103 31ff 	add.w	r1, r3, #4294967295
 800918a:	bfb8      	it	lt
 800918c:	2000      	movlt	r0, #0
 800918e:	f06f 0417 	mvn.w	r4, #23
 8009192:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 8009470 <__kernel_rem_pio2+0x310>
 8009196:	bfa4      	itt	ge
 8009198:	f1a2 0a03 	subge.w	sl, r2, #3
 800919c:	fb9a f0f0 	sdivge	r0, sl, r0
 80091a0:	fb00 4404 	mla	r4, r0, r4, r4
 80091a4:	1a46      	subs	r6, r0, r1
 80091a6:	4414      	add	r4, r2
 80091a8:	eb09 0c01 	add.w	ip, r9, r1
 80091ac:	ad1a      	add	r5, sp, #104	; 0x68
 80091ae:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80091b2:	2200      	movs	r2, #0
 80091b4:	4562      	cmp	r2, ip
 80091b6:	dd10      	ble.n	80091da <__kernel_rem_pio2+0x7a>
 80091b8:	9a01      	ldr	r2, [sp, #4]
 80091ba:	ab1a      	add	r3, sp, #104	; 0x68
 80091bc:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80091c0:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 80091c4:	f04f 0c00 	mov.w	ip, #0
 80091c8:	45cc      	cmp	ip, r9
 80091ca:	dc26      	bgt.n	800921a <__kernel_rem_pio2+0xba>
 80091cc:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 8009470 <__kernel_rem_pio2+0x310>
 80091d0:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80091d4:	4616      	mov	r6, r2
 80091d6:	2500      	movs	r5, #0
 80091d8:	e015      	b.n	8009206 <__kernel_rem_pio2+0xa6>
 80091da:	42d6      	cmn	r6, r2
 80091dc:	d409      	bmi.n	80091f2 <__kernel_rem_pio2+0x92>
 80091de:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 80091e2:	ee07 3a90 	vmov	s15, r3
 80091e6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80091ea:	eca5 7b02 	vstmia	r5!, {d7}
 80091ee:	3201      	adds	r2, #1
 80091f0:	e7e0      	b.n	80091b4 <__kernel_rem_pio2+0x54>
 80091f2:	eeb0 7b46 	vmov.f64	d7, d6
 80091f6:	e7f8      	b.n	80091ea <__kernel_rem_pio2+0x8a>
 80091f8:	ecb8 5b02 	vldmia	r8!, {d5}
 80091fc:	ed96 6b00 	vldr	d6, [r6]
 8009200:	3501      	adds	r5, #1
 8009202:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009206:	428d      	cmp	r5, r1
 8009208:	f1a6 0608 	sub.w	r6, r6, #8
 800920c:	ddf4      	ble.n	80091f8 <__kernel_rem_pio2+0x98>
 800920e:	ecaa 7b02 	vstmia	sl!, {d7}
 8009212:	f10c 0c01 	add.w	ip, ip, #1
 8009216:	3208      	adds	r2, #8
 8009218:	e7d6      	b.n	80091c8 <__kernel_rem_pio2+0x68>
 800921a:	ab06      	add	r3, sp, #24
 800921c:	ed9f 9b96 	vldr	d9, [pc, #600]	; 8009478 <__kernel_rem_pio2+0x318>
 8009220:	ed9f ab97 	vldr	d10, [pc, #604]	; 8009480 <__kernel_rem_pio2+0x320>
 8009224:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8009228:	9303      	str	r3, [sp, #12]
 800922a:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 800922e:	464d      	mov	r5, r9
 8009230:	00eb      	lsls	r3, r5, #3
 8009232:	9304      	str	r3, [sp, #16]
 8009234:	ab92      	add	r3, sp, #584	; 0x248
 8009236:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800923a:	f10d 0b18 	add.w	fp, sp, #24
 800923e:	ab6a      	add	r3, sp, #424	; 0x1a8
 8009240:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8009244:	465e      	mov	r6, fp
 8009246:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 800924a:	4628      	mov	r0, r5
 800924c:	2800      	cmp	r0, #0
 800924e:	f1a2 0208 	sub.w	r2, r2, #8
 8009252:	dc4c      	bgt.n	80092ee <__kernel_rem_pio2+0x18e>
 8009254:	4620      	mov	r0, r4
 8009256:	9105      	str	r1, [sp, #20]
 8009258:	f000 faf2 	bl	8009840 <scalbn>
 800925c:	eeb0 8b40 	vmov.f64	d8, d0
 8009260:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8009264:	ee28 0b00 	vmul.f64	d0, d8, d0
 8009268:	f000 fa76 	bl	8009758 <floor>
 800926c:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8009270:	eea0 8b47 	vfms.f64	d8, d0, d7
 8009274:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8009278:	2c00      	cmp	r4, #0
 800927a:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 800927e:	ee17 8a90 	vmov	r8, s15
 8009282:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009286:	9905      	ldr	r1, [sp, #20]
 8009288:	dd43      	ble.n	8009312 <__kernel_rem_pio2+0x1b2>
 800928a:	1e68      	subs	r0, r5, #1
 800928c:	ab06      	add	r3, sp, #24
 800928e:	f1c4 0c18 	rsb	ip, r4, #24
 8009292:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8009296:	fa46 f20c 	asr.w	r2, r6, ip
 800929a:	4490      	add	r8, r2
 800929c:	fa02 f20c 	lsl.w	r2, r2, ip
 80092a0:	1ab6      	subs	r6, r6, r2
 80092a2:	f1c4 0217 	rsb	r2, r4, #23
 80092a6:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 80092aa:	4116      	asrs	r6, r2
 80092ac:	2e00      	cmp	r6, #0
 80092ae:	dd3f      	ble.n	8009330 <__kernel_rem_pio2+0x1d0>
 80092b0:	f04f 0c00 	mov.w	ip, #0
 80092b4:	f108 0801 	add.w	r8, r8, #1
 80092b8:	4660      	mov	r0, ip
 80092ba:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 80092be:	4565      	cmp	r5, ip
 80092c0:	dc6e      	bgt.n	80093a0 <__kernel_rem_pio2+0x240>
 80092c2:	2c00      	cmp	r4, #0
 80092c4:	dd04      	ble.n	80092d0 <__kernel_rem_pio2+0x170>
 80092c6:	2c01      	cmp	r4, #1
 80092c8:	d07f      	beq.n	80093ca <__kernel_rem_pio2+0x26a>
 80092ca:	2c02      	cmp	r4, #2
 80092cc:	f000 8087 	beq.w	80093de <__kernel_rem_pio2+0x27e>
 80092d0:	2e02      	cmp	r6, #2
 80092d2:	d12d      	bne.n	8009330 <__kernel_rem_pio2+0x1d0>
 80092d4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80092d8:	ee30 8b48 	vsub.f64	d8, d0, d8
 80092dc:	b340      	cbz	r0, 8009330 <__kernel_rem_pio2+0x1d0>
 80092de:	4620      	mov	r0, r4
 80092e0:	9105      	str	r1, [sp, #20]
 80092e2:	f000 faad 	bl	8009840 <scalbn>
 80092e6:	9905      	ldr	r1, [sp, #20]
 80092e8:	ee38 8b40 	vsub.f64	d8, d8, d0
 80092ec:	e020      	b.n	8009330 <__kernel_rem_pio2+0x1d0>
 80092ee:	ee20 7b09 	vmul.f64	d7, d0, d9
 80092f2:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80092f6:	3801      	subs	r0, #1
 80092f8:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 80092fc:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009300:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009304:	eca6 0a01 	vstmia	r6!, {s0}
 8009308:	ed92 0b00 	vldr	d0, [r2]
 800930c:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009310:	e79c      	b.n	800924c <__kernel_rem_pio2+0xec>
 8009312:	d105      	bne.n	8009320 <__kernel_rem_pio2+0x1c0>
 8009314:	1e6a      	subs	r2, r5, #1
 8009316:	ab06      	add	r3, sp, #24
 8009318:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 800931c:	15f6      	asrs	r6, r6, #23
 800931e:	e7c5      	b.n	80092ac <__kernel_rem_pio2+0x14c>
 8009320:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8009324:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800932c:	da36      	bge.n	800939c <__kernel_rem_pio2+0x23c>
 800932e:	2600      	movs	r6, #0
 8009330:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009338:	f040 80aa 	bne.w	8009490 <__kernel_rem_pio2+0x330>
 800933c:	f105 3bff 	add.w	fp, r5, #4294967295
 8009340:	4658      	mov	r0, fp
 8009342:	2200      	movs	r2, #0
 8009344:	4548      	cmp	r0, r9
 8009346:	da52      	bge.n	80093ee <__kernel_rem_pio2+0x28e>
 8009348:	2a00      	cmp	r2, #0
 800934a:	f000 8081 	beq.w	8009450 <__kernel_rem_pio2+0x2f0>
 800934e:	ab06      	add	r3, sp, #24
 8009350:	3c18      	subs	r4, #24
 8009352:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8009356:	2b00      	cmp	r3, #0
 8009358:	f000 8087 	beq.w	800946a <__kernel_rem_pio2+0x30a>
 800935c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009360:	4620      	mov	r0, r4
 8009362:	f000 fa6d 	bl	8009840 <scalbn>
 8009366:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800936a:	ed9f 6b43 	vldr	d6, [pc, #268]	; 8009478 <__kernel_rem_pio2+0x318>
 800936e:	a96a      	add	r1, sp, #424	; 0x1a8
 8009370:	f103 0208 	add.w	r2, r3, #8
 8009374:	1888      	adds	r0, r1, r2
 8009376:	4659      	mov	r1, fp
 8009378:	2900      	cmp	r1, #0
 800937a:	f280 80b7 	bge.w	80094ec <__kernel_rem_pio2+0x38c>
 800937e:	4659      	mov	r1, fp
 8009380:	2900      	cmp	r1, #0
 8009382:	f2c0 80d5 	blt.w	8009530 <__kernel_rem_pio2+0x3d0>
 8009386:	a86a      	add	r0, sp, #424	; 0x1a8
 8009388:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 800938c:	ed9f 7b38 	vldr	d7, [pc, #224]	; 8009470 <__kernel_rem_pio2+0x310>
 8009390:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 800948c <__kernel_rem_pio2+0x32c>
 8009394:	2400      	movs	r4, #0
 8009396:	ebab 0001 	sub.w	r0, fp, r1
 800939a:	e0be      	b.n	800951a <__kernel_rem_pio2+0x3ba>
 800939c:	2602      	movs	r6, #2
 800939e:	e787      	b.n	80092b0 <__kernel_rem_pio2+0x150>
 80093a0:	f8db 2000 	ldr.w	r2, [fp]
 80093a4:	b958      	cbnz	r0, 80093be <__kernel_rem_pio2+0x25e>
 80093a6:	b122      	cbz	r2, 80093b2 <__kernel_rem_pio2+0x252>
 80093a8:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 80093ac:	f8cb 2000 	str.w	r2, [fp]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f10c 0c01 	add.w	ip, ip, #1
 80093b6:	f10b 0b04 	add.w	fp, fp, #4
 80093ba:	4610      	mov	r0, r2
 80093bc:	e77f      	b.n	80092be <__kernel_rem_pio2+0x15e>
 80093be:	ebae 0202 	sub.w	r2, lr, r2
 80093c2:	f8cb 2000 	str.w	r2, [fp]
 80093c6:	4602      	mov	r2, r0
 80093c8:	e7f3      	b.n	80093b2 <__kernel_rem_pio2+0x252>
 80093ca:	f105 3cff 	add.w	ip, r5, #4294967295
 80093ce:	ab06      	add	r3, sp, #24
 80093d0:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80093d4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 80093d8:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 80093dc:	e778      	b.n	80092d0 <__kernel_rem_pio2+0x170>
 80093de:	f105 3cff 	add.w	ip, r5, #4294967295
 80093e2:	ab06      	add	r3, sp, #24
 80093e4:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 80093e8:	f3c2 0215 	ubfx	r2, r2, #0, #22
 80093ec:	e7f4      	b.n	80093d8 <__kernel_rem_pio2+0x278>
 80093ee:	ab06      	add	r3, sp, #24
 80093f0:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80093f4:	3801      	subs	r0, #1
 80093f6:	431a      	orrs	r2, r3
 80093f8:	e7a4      	b.n	8009344 <__kernel_rem_pio2+0x1e4>
 80093fa:	f10c 0c01 	add.w	ip, ip, #1
 80093fe:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 8009402:	2800      	cmp	r0, #0
 8009404:	d0f9      	beq.n	80093fa <__kernel_rem_pio2+0x29a>
 8009406:	9b04      	ldr	r3, [sp, #16]
 8009408:	f503 7312 	add.w	r3, r3, #584	; 0x248
 800940c:	eb0d 0203 	add.w	r2, sp, r3
 8009410:	9b01      	ldr	r3, [sp, #4]
 8009412:	18e8      	adds	r0, r5, r3
 8009414:	ab1a      	add	r3, sp, #104	; 0x68
 8009416:	1c6e      	adds	r6, r5, #1
 8009418:	3a98      	subs	r2, #152	; 0x98
 800941a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 800941e:	4465      	add	r5, ip
 8009420:	42b5      	cmp	r5, r6
 8009422:	f6ff af05 	blt.w	8009230 <__kernel_rem_pio2+0xd0>
 8009426:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 800942a:	f8dd e008 	ldr.w	lr, [sp, #8]
 800942e:	ee07 3a90 	vmov	s15, r3
 8009432:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009436:	f04f 0c00 	mov.w	ip, #0
 800943a:	eca0 7b02 	vstmia	r0!, {d7}
 800943e:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009470 <__kernel_rem_pio2+0x310>
 8009442:	4680      	mov	r8, r0
 8009444:	458c      	cmp	ip, r1
 8009446:	dd07      	ble.n	8009458 <__kernel_rem_pio2+0x2f8>
 8009448:	eca2 7b02 	vstmia	r2!, {d7}
 800944c:	3601      	adds	r6, #1
 800944e:	e7e7      	b.n	8009420 <__kernel_rem_pio2+0x2c0>
 8009450:	9a03      	ldr	r2, [sp, #12]
 8009452:	f04f 0c01 	mov.w	ip, #1
 8009456:	e7d2      	b.n	80093fe <__kernel_rem_pio2+0x29e>
 8009458:	ecbe 5b02 	vldmia	lr!, {d5}
 800945c:	ed38 6b02 	vldmdb	r8!, {d6}
 8009460:	f10c 0c01 	add.w	ip, ip, #1
 8009464:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009468:	e7ec      	b.n	8009444 <__kernel_rem_pio2+0x2e4>
 800946a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800946e:	e76e      	b.n	800934e <__kernel_rem_pio2+0x1ee>
	...
 800947c:	3e700000 	.word	0x3e700000
 8009480:	00000000 	.word	0x00000000
 8009484:	41700000 	.word	0x41700000
 8009488:	08009bd0 	.word	0x08009bd0
 800948c:	08009b90 	.word	0x08009b90
 8009490:	4260      	negs	r0, r4
 8009492:	eeb0 0b48 	vmov.f64	d0, d8
 8009496:	f000 f9d3 	bl	8009840 <scalbn>
 800949a:	ed9f 6b77 	vldr	d6, [pc, #476]	; 8009678 <__kernel_rem_pio2+0x518>
 800949e:	eeb4 0bc6 	vcmpe.f64	d0, d6
 80094a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094a6:	db18      	blt.n	80094da <__kernel_rem_pio2+0x37a>
 80094a8:	ed9f 7b75 	vldr	d7, [pc, #468]	; 8009680 <__kernel_rem_pio2+0x520>
 80094ac:	ee20 7b07 	vmul.f64	d7, d0, d7
 80094b0:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 80094b4:	aa06      	add	r2, sp, #24
 80094b6:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 80094ba:	eea5 0b46 	vfms.f64	d0, d5, d6
 80094be:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80094c2:	f105 0b01 	add.w	fp, r5, #1
 80094c6:	ee10 3a10 	vmov	r3, s0
 80094ca:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80094ce:	ee17 3a10 	vmov	r3, s14
 80094d2:	3418      	adds	r4, #24
 80094d4:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 80094d8:	e740      	b.n	800935c <__kernel_rem_pio2+0x1fc>
 80094da:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 80094de:	aa06      	add	r2, sp, #24
 80094e0:	ee10 3a10 	vmov	r3, s0
 80094e4:	46ab      	mov	fp, r5
 80094e6:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 80094ea:	e737      	b.n	800935c <__kernel_rem_pio2+0x1fc>
 80094ec:	ac06      	add	r4, sp, #24
 80094ee:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 80094f2:	9401      	str	r4, [sp, #4]
 80094f4:	ee07 4a90 	vmov	s15, r4
 80094f8:	3901      	subs	r1, #1
 80094fa:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80094fe:	ee27 7b00 	vmul.f64	d7, d7, d0
 8009502:	ee20 0b06 	vmul.f64	d0, d0, d6
 8009506:	ed20 7b02 	vstmdb	r0!, {d7}
 800950a:	e735      	b.n	8009378 <__kernel_rem_pio2+0x218>
 800950c:	ecbc 5b02 	vldmia	ip!, {d5}
 8009510:	ecb5 6b02 	vldmia	r5!, {d6}
 8009514:	3401      	adds	r4, #1
 8009516:	eea5 7b06 	vfma.f64	d7, d5, d6
 800951a:	454c      	cmp	r4, r9
 800951c:	dc01      	bgt.n	8009522 <__kernel_rem_pio2+0x3c2>
 800951e:	4284      	cmp	r4, r0
 8009520:	ddf4      	ble.n	800950c <__kernel_rem_pio2+0x3ac>
 8009522:	ac42      	add	r4, sp, #264	; 0x108
 8009524:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8009528:	ed80 7b00 	vstr	d7, [r0]
 800952c:	3901      	subs	r1, #1
 800952e:	e727      	b.n	8009380 <__kernel_rem_pio2+0x220>
 8009530:	99a2      	ldr	r1, [sp, #648]	; 0x288
 8009532:	2902      	cmp	r1, #2
 8009534:	dc0a      	bgt.n	800954c <__kernel_rem_pio2+0x3ec>
 8009536:	2900      	cmp	r1, #0
 8009538:	dc2c      	bgt.n	8009594 <__kernel_rem_pio2+0x434>
 800953a:	d045      	beq.n	80095c8 <__kernel_rem_pio2+0x468>
 800953c:	f008 0007 	and.w	r0, r8, #7
 8009540:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 8009544:	ecbd 8b06 	vpop	{d8-d10}
 8009548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800954c:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 800954e:	2a03      	cmp	r2, #3
 8009550:	d1f4      	bne.n	800953c <__kernel_rem_pio2+0x3dc>
 8009552:	aa42      	add	r2, sp, #264	; 0x108
 8009554:	4413      	add	r3, r2
 8009556:	461a      	mov	r2, r3
 8009558:	4619      	mov	r1, r3
 800955a:	4658      	mov	r0, fp
 800955c:	2800      	cmp	r0, #0
 800955e:	f1a1 0108 	sub.w	r1, r1, #8
 8009562:	dc54      	bgt.n	800960e <__kernel_rem_pio2+0x4ae>
 8009564:	4659      	mov	r1, fp
 8009566:	2901      	cmp	r1, #1
 8009568:	f1a2 0208 	sub.w	r2, r2, #8
 800956c:	dc5f      	bgt.n	800962e <__kernel_rem_pio2+0x4ce>
 800956e:	ed9f 7b46 	vldr	d7, [pc, #280]	; 8009688 <__kernel_rem_pio2+0x528>
 8009572:	3308      	adds	r3, #8
 8009574:	f1bb 0f01 	cmp.w	fp, #1
 8009578:	dc69      	bgt.n	800964e <__kernel_rem_pio2+0x4ee>
 800957a:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 800957e:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 8009582:	2e00      	cmp	r6, #0
 8009584:	d16a      	bne.n	800965c <__kernel_rem_pio2+0x4fc>
 8009586:	ed87 5b00 	vstr	d5, [r7]
 800958a:	ed87 6b02 	vstr	d6, [r7, #8]
 800958e:	ed87 7b04 	vstr	d7, [r7, #16]
 8009592:	e7d3      	b.n	800953c <__kernel_rem_pio2+0x3dc>
 8009594:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 8009688 <__kernel_rem_pio2+0x528>
 8009598:	ab42      	add	r3, sp, #264	; 0x108
 800959a:	441a      	add	r2, r3
 800959c:	465b      	mov	r3, fp
 800959e:	2b00      	cmp	r3, #0
 80095a0:	da26      	bge.n	80095f0 <__kernel_rem_pio2+0x490>
 80095a2:	b35e      	cbz	r6, 80095fc <__kernel_rem_pio2+0x49c>
 80095a4:	eeb1 7b46 	vneg.f64	d7, d6
 80095a8:	ed87 7b00 	vstr	d7, [r7]
 80095ac:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 80095b0:	aa44      	add	r2, sp, #272	; 0x110
 80095b2:	2301      	movs	r3, #1
 80095b4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80095b8:	459b      	cmp	fp, r3
 80095ba:	da22      	bge.n	8009602 <__kernel_rem_pio2+0x4a2>
 80095bc:	b10e      	cbz	r6, 80095c2 <__kernel_rem_pio2+0x462>
 80095be:	eeb1 7b47 	vneg.f64	d7, d7
 80095c2:	ed87 7b02 	vstr	d7, [r7, #8]
 80095c6:	e7b9      	b.n	800953c <__kernel_rem_pio2+0x3dc>
 80095c8:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009688 <__kernel_rem_pio2+0x528>
 80095cc:	ab42      	add	r3, sp, #264	; 0x108
 80095ce:	441a      	add	r2, r3
 80095d0:	f1bb 0f00 	cmp.w	fp, #0
 80095d4:	da05      	bge.n	80095e2 <__kernel_rem_pio2+0x482>
 80095d6:	b10e      	cbz	r6, 80095dc <__kernel_rem_pio2+0x47c>
 80095d8:	eeb1 7b47 	vneg.f64	d7, d7
 80095dc:	ed87 7b00 	vstr	d7, [r7]
 80095e0:	e7ac      	b.n	800953c <__kernel_rem_pio2+0x3dc>
 80095e2:	ed32 6b02 	vldmdb	r2!, {d6}
 80095e6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80095ea:	ee37 7b06 	vadd.f64	d7, d7, d6
 80095ee:	e7ef      	b.n	80095d0 <__kernel_rem_pio2+0x470>
 80095f0:	ed32 7b02 	vldmdb	r2!, {d7}
 80095f4:	3b01      	subs	r3, #1
 80095f6:	ee36 6b07 	vadd.f64	d6, d6, d7
 80095fa:	e7d0      	b.n	800959e <__kernel_rem_pio2+0x43e>
 80095fc:	eeb0 7b46 	vmov.f64	d7, d6
 8009600:	e7d2      	b.n	80095a8 <__kernel_rem_pio2+0x448>
 8009602:	ecb2 6b02 	vldmia	r2!, {d6}
 8009606:	3301      	adds	r3, #1
 8009608:	ee37 7b06 	vadd.f64	d7, d7, d6
 800960c:	e7d4      	b.n	80095b8 <__kernel_rem_pio2+0x458>
 800960e:	ed91 7b00 	vldr	d7, [r1]
 8009612:	ed91 5b02 	vldr	d5, [r1, #8]
 8009616:	3801      	subs	r0, #1
 8009618:	ee37 6b05 	vadd.f64	d6, d7, d5
 800961c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009620:	ed81 6b00 	vstr	d6, [r1]
 8009624:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009628:	ed81 7b02 	vstr	d7, [r1, #8]
 800962c:	e796      	b.n	800955c <__kernel_rem_pio2+0x3fc>
 800962e:	ed92 7b00 	vldr	d7, [r2]
 8009632:	ed92 5b02 	vldr	d5, [r2, #8]
 8009636:	3901      	subs	r1, #1
 8009638:	ee37 6b05 	vadd.f64	d6, d7, d5
 800963c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009640:	ed82 6b00 	vstr	d6, [r2]
 8009644:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009648:	ed82 7b02 	vstr	d7, [r2, #8]
 800964c:	e78b      	b.n	8009566 <__kernel_rem_pio2+0x406>
 800964e:	ed33 6b02 	vldmdb	r3!, {d6}
 8009652:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009656:	ee37 7b06 	vadd.f64	d7, d7, d6
 800965a:	e78b      	b.n	8009574 <__kernel_rem_pio2+0x414>
 800965c:	eeb1 5b45 	vneg.f64	d5, d5
 8009660:	eeb1 6b46 	vneg.f64	d6, d6
 8009664:	ed87 5b00 	vstr	d5, [r7]
 8009668:	eeb1 7b47 	vneg.f64	d7, d7
 800966c:	ed87 6b02 	vstr	d6, [r7, #8]
 8009670:	e78d      	b.n	800958e <__kernel_rem_pio2+0x42e>
 8009672:	bf00      	nop
 8009674:	f3af 8000 	nop.w
 8009678:	00000000 	.word	0x00000000
 800967c:	41700000 	.word	0x41700000
 8009680:	00000000 	.word	0x00000000
 8009684:	3e700000 	.word	0x3e700000
	...

08009690 <__kernel_sin>:
 8009690:	ee10 3a90 	vmov	r3, s1
 8009694:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009698:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800969c:	da04      	bge.n	80096a8 <__kernel_sin+0x18>
 800969e:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 80096a2:	ee17 3a90 	vmov	r3, s15
 80096a6:	b35b      	cbz	r3, 8009700 <__kernel_sin+0x70>
 80096a8:	ee20 6b00 	vmul.f64	d6, d0, d0
 80096ac:	ee20 5b06 	vmul.f64	d5, d0, d6
 80096b0:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009708 <__kernel_sin+0x78>
 80096b4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009710 <__kernel_sin+0x80>
 80096b8:	eea6 4b07 	vfma.f64	d4, d6, d7
 80096bc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009718 <__kernel_sin+0x88>
 80096c0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80096c4:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009720 <__kernel_sin+0x90>
 80096c8:	eea7 4b06 	vfma.f64	d4, d7, d6
 80096cc:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009728 <__kernel_sin+0x98>
 80096d0:	eea4 7b06 	vfma.f64	d7, d4, d6
 80096d4:	b930      	cbnz	r0, 80096e4 <__kernel_sin+0x54>
 80096d6:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009730 <__kernel_sin+0xa0>
 80096da:	eea6 4b07 	vfma.f64	d4, d6, d7
 80096de:	eea4 0b05 	vfma.f64	d0, d4, d5
 80096e2:	4770      	bx	lr
 80096e4:	ee27 7b45 	vnmul.f64	d7, d7, d5
 80096e8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 80096ec:	eea1 7b04 	vfma.f64	d7, d1, d4
 80096f0:	ee97 1b06 	vfnms.f64	d1, d7, d6
 80096f4:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8009738 <__kernel_sin+0xa8>
 80096f8:	eea5 1b07 	vfma.f64	d1, d5, d7
 80096fc:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	f3af 8000 	nop.w
 8009708:	5acfd57c 	.word	0x5acfd57c
 800970c:	3de5d93a 	.word	0x3de5d93a
 8009710:	8a2b9ceb 	.word	0x8a2b9ceb
 8009714:	be5ae5e6 	.word	0xbe5ae5e6
 8009718:	57b1fe7d 	.word	0x57b1fe7d
 800971c:	3ec71de3 	.word	0x3ec71de3
 8009720:	19c161d5 	.word	0x19c161d5
 8009724:	bf2a01a0 	.word	0xbf2a01a0
 8009728:	1110f8a6 	.word	0x1110f8a6
 800972c:	3f811111 	.word	0x3f811111
 8009730:	55555549 	.word	0x55555549
 8009734:	bfc55555 	.word	0xbfc55555
 8009738:	55555549 	.word	0x55555549
 800973c:	3fc55555 	.word	0x3fc55555

08009740 <fabs>:
 8009740:	ec51 0b10 	vmov	r0, r1, d0
 8009744:	ee10 2a10 	vmov	r2, s0
 8009748:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800974c:	ec43 2b10 	vmov	d0, r2, r3
 8009750:	4770      	bx	lr
 8009752:	0000      	movs	r0, r0
 8009754:	0000      	movs	r0, r0
	...

08009758 <floor>:
 8009758:	ee10 1a90 	vmov	r1, s1
 800975c:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009760:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 8009764:	2b13      	cmp	r3, #19
 8009766:	b530      	push	{r4, r5, lr}
 8009768:	ee10 0a10 	vmov	r0, s0
 800976c:	ee10 5a10 	vmov	r5, s0
 8009770:	dc31      	bgt.n	80097d6 <floor+0x7e>
 8009772:	2b00      	cmp	r3, #0
 8009774:	da15      	bge.n	80097a2 <floor+0x4a>
 8009776:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009830 <floor+0xd8>
 800977a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800977e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009782:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009786:	dd07      	ble.n	8009798 <floor+0x40>
 8009788:	2900      	cmp	r1, #0
 800978a:	da4e      	bge.n	800982a <floor+0xd2>
 800978c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009790:	4318      	orrs	r0, r3
 8009792:	d001      	beq.n	8009798 <floor+0x40>
 8009794:	4928      	ldr	r1, [pc, #160]	; (8009838 <floor+0xe0>)
 8009796:	2000      	movs	r0, #0
 8009798:	460b      	mov	r3, r1
 800979a:	4602      	mov	r2, r0
 800979c:	ec43 2b10 	vmov	d0, r2, r3
 80097a0:	e020      	b.n	80097e4 <floor+0x8c>
 80097a2:	4a26      	ldr	r2, [pc, #152]	; (800983c <floor+0xe4>)
 80097a4:	411a      	asrs	r2, r3
 80097a6:	ea01 0402 	and.w	r4, r1, r2
 80097aa:	4304      	orrs	r4, r0
 80097ac:	d01a      	beq.n	80097e4 <floor+0x8c>
 80097ae:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009830 <floor+0xd8>
 80097b2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80097b6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80097ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80097be:	ddeb      	ble.n	8009798 <floor+0x40>
 80097c0:	2900      	cmp	r1, #0
 80097c2:	bfbe      	ittt	lt
 80097c4:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 80097c8:	fa40 f303 	asrlt.w	r3, r0, r3
 80097cc:	18c9      	addlt	r1, r1, r3
 80097ce:	ea21 0102 	bic.w	r1, r1, r2
 80097d2:	2000      	movs	r0, #0
 80097d4:	e7e0      	b.n	8009798 <floor+0x40>
 80097d6:	2b33      	cmp	r3, #51	; 0x33
 80097d8:	dd05      	ble.n	80097e6 <floor+0x8e>
 80097da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097de:	d101      	bne.n	80097e4 <floor+0x8c>
 80097e0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80097e4:	bd30      	pop	{r4, r5, pc}
 80097e6:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 80097ea:	f04f 32ff 	mov.w	r2, #4294967295
 80097ee:	40e2      	lsrs	r2, r4
 80097f0:	4202      	tst	r2, r0
 80097f2:	d0f7      	beq.n	80097e4 <floor+0x8c>
 80097f4:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8009830 <floor+0xd8>
 80097f8:	ee30 0b07 	vadd.f64	d0, d0, d7
 80097fc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009804:	ddc8      	ble.n	8009798 <floor+0x40>
 8009806:	2900      	cmp	r1, #0
 8009808:	da02      	bge.n	8009810 <floor+0xb8>
 800980a:	2b14      	cmp	r3, #20
 800980c:	d103      	bne.n	8009816 <floor+0xbe>
 800980e:	3101      	adds	r1, #1
 8009810:	ea20 0002 	bic.w	r0, r0, r2
 8009814:	e7c0      	b.n	8009798 <floor+0x40>
 8009816:	2401      	movs	r4, #1
 8009818:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800981c:	fa04 f303 	lsl.w	r3, r4, r3
 8009820:	4418      	add	r0, r3
 8009822:	42a8      	cmp	r0, r5
 8009824:	bf38      	it	cc
 8009826:	1909      	addcc	r1, r1, r4
 8009828:	e7f2      	b.n	8009810 <floor+0xb8>
 800982a:	2000      	movs	r0, #0
 800982c:	4601      	mov	r1, r0
 800982e:	e7b3      	b.n	8009798 <floor+0x40>
 8009830:	8800759c 	.word	0x8800759c
 8009834:	7e37e43c 	.word	0x7e37e43c
 8009838:	bff00000 	.word	0xbff00000
 800983c:	000fffff 	.word	0x000fffff

08009840 <scalbn>:
 8009840:	ee10 1a90 	vmov	r1, s1
 8009844:	b510      	push	{r4, lr}
 8009846:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800984a:	b98c      	cbnz	r4, 8009870 <scalbn+0x30>
 800984c:	ee10 3a10 	vmov	r3, s0
 8009850:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009854:	430b      	orrs	r3, r1
 8009856:	d011      	beq.n	800987c <scalbn+0x3c>
 8009858:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8009920 <scalbn+0xe0>
 800985c:	4b3c      	ldr	r3, [pc, #240]	; (8009950 <scalbn+0x110>)
 800985e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8009862:	4298      	cmp	r0, r3
 8009864:	da0b      	bge.n	800987e <scalbn+0x3e>
 8009866:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009928 <scalbn+0xe8>
 800986a:	ee20 0b07 	vmul.f64	d0, d0, d7
 800986e:	e005      	b.n	800987c <scalbn+0x3c>
 8009870:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009874:	429c      	cmp	r4, r3
 8009876:	d107      	bne.n	8009888 <scalbn+0x48>
 8009878:	ee30 0b00 	vadd.f64	d0, d0, d0
 800987c:	bd10      	pop	{r4, pc}
 800987e:	ee10 1a90 	vmov	r1, s1
 8009882:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8009886:	3c36      	subs	r4, #54	; 0x36
 8009888:	4404      	add	r4, r0
 800988a:	f240 73fe 	movw	r3, #2046	; 0x7fe
 800988e:	429c      	cmp	r4, r3
 8009890:	dd0d      	ble.n	80098ae <scalbn+0x6e>
 8009892:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8009930 <scalbn+0xf0>
 8009896:	ed9f 5b28 	vldr	d5, [pc, #160]	; 8009938 <scalbn+0xf8>
 800989a:	eeb0 6b47 	vmov.f64	d6, d7
 800989e:	ee10 3a90 	vmov	r3, s1
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	fe27 7b05 	vselge.f64	d7, d7, d5
 80098a8:	ee27 0b06 	vmul.f64	d0, d7, d6
 80098ac:	e7e6      	b.n	800987c <scalbn+0x3c>
 80098ae:	2c00      	cmp	r4, #0
 80098b0:	dd0a      	ble.n	80098c8 <scalbn+0x88>
 80098b2:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 80098b6:	ec53 2b10 	vmov	r2, r3, d0
 80098ba:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 80098be:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 80098c2:	ec43 2b10 	vmov	d0, r2, r3
 80098c6:	e7d9      	b.n	800987c <scalbn+0x3c>
 80098c8:	f114 0f35 	cmn.w	r4, #53	; 0x35
 80098cc:	da19      	bge.n	8009902 <scalbn+0xc2>
 80098ce:	f24c 3350 	movw	r3, #50000	; 0xc350
 80098d2:	4298      	cmp	r0, r3
 80098d4:	ee10 3a90 	vmov	r3, s1
 80098d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80098dc:	dd09      	ble.n	80098f2 <scalbn+0xb2>
 80098de:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8009930 <scalbn+0xf0>
 80098e2:	ed9f 6b15 	vldr	d6, [pc, #84]	; 8009938 <scalbn+0xf8>
 80098e6:	eeb0 7b40 	vmov.f64	d7, d0
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	fe00 0b06 	vseleq.f64	d0, d0, d6
 80098f0:	e7bb      	b.n	800986a <scalbn+0x2a>
 80098f2:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8009928 <scalbn+0xe8>
 80098f6:	ed9f 6b12 	vldr	d6, [pc, #72]	; 8009940 <scalbn+0x100>
 80098fa:	eeb0 7b40 	vmov.f64	d7, d0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	e7f4      	b.n	80098ec <scalbn+0xac>
 8009902:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 8009906:	ec53 2b10 	vmov	r2, r3, d0
 800990a:	3436      	adds	r4, #54	; 0x36
 800990c:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8009910:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 8009914:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 8009948 <scalbn+0x108>
 8009918:	ec43 2b10 	vmov	d0, r2, r3
 800991c:	e7a5      	b.n	800986a <scalbn+0x2a>
 800991e:	bf00      	nop
 8009920:	00000000 	.word	0x00000000
 8009924:	43500000 	.word	0x43500000
 8009928:	c2f8f359 	.word	0xc2f8f359
 800992c:	01a56e1f 	.word	0x01a56e1f
 8009930:	8800759c 	.word	0x8800759c
 8009934:	7e37e43c 	.word	0x7e37e43c
 8009938:	8800759c 	.word	0x8800759c
 800993c:	fe37e43c 	.word	0xfe37e43c
 8009940:	c2f8f359 	.word	0xc2f8f359
 8009944:	81a56e1f 	.word	0x81a56e1f
 8009948:	00000000 	.word	0x00000000
 800994c:	3c900000 	.word	0x3c900000
 8009950:	ffff3cb0 	.word	0xffff3cb0

08009954 <_init>:
 8009954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009956:	bf00      	nop
 8009958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800995a:	bc08      	pop	{r3}
 800995c:	469e      	mov	lr, r3
 800995e:	4770      	bx	lr

08009960 <_fini>:
 8009960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009962:	bf00      	nop
 8009964:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009966:	bc08      	pop	{r3}
 8009968:	469e      	mov	lr, r3
 800996a:	4770      	bx	lr
