
Ethercat_can.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000943c  08000298  08000298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080096d8  080096d8  000196d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009948  08009948  00019948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08009950  08009950  00019950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08009954  08009954  00019954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000007c  24000000  08009958  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000006d4  24000080  080099d4  00020080  2**3
                  ALLOC
  8 ._user_heap_stack 00000604  24000754  080099d4  00020754  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001d0c6  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002a9a  00000000  00000000  0003d170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000015f0  00000000  00000000  0003fc10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 000014f0  00000000  00000000  00041200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003903d  00000000  00000000  000426f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0001a65f  00000000  00000000  0007b72d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00171337  00000000  00000000  00095d8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  002070c3  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000628c  00000000  00000000  00207114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000080 	.word	0x24000080
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080096bc 	.word	0x080096bc

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000084 	.word	0x24000084
 80002d4:	080096bc 	.word	0x080096bc

080002d8 <__aeabi_drsub>:
 80002d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002dc:	e002      	b.n	80002e4 <__adddf3>
 80002de:	bf00      	nop

080002e0 <__aeabi_dsub>:
 80002e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002e4 <__adddf3>:
 80002e4:	b530      	push	{r4, r5, lr}
 80002e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002ee:	ea94 0f05 	teq	r4, r5
 80002f2:	bf08      	it	eq
 80002f4:	ea90 0f02 	teqeq	r0, r2
 80002f8:	bf1f      	itttt	ne
 80002fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000302:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000306:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800030a:	f000 80e2 	beq.w	80004d2 <__adddf3+0x1ee>
 800030e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000312:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000316:	bfb8      	it	lt
 8000318:	426d      	neglt	r5, r5
 800031a:	dd0c      	ble.n	8000336 <__adddf3+0x52>
 800031c:	442c      	add	r4, r5
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	ea82 0000 	eor.w	r0, r2, r0
 800032a:	ea83 0101 	eor.w	r1, r3, r1
 800032e:	ea80 0202 	eor.w	r2, r0, r2
 8000332:	ea81 0303 	eor.w	r3, r1, r3
 8000336:	2d36      	cmp	r5, #54	; 0x36
 8000338:	bf88      	it	hi
 800033a:	bd30      	pophi	{r4, r5, pc}
 800033c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000340:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000344:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000348:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800034c:	d002      	beq.n	8000354 <__adddf3+0x70>
 800034e:	4240      	negs	r0, r0
 8000350:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000354:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000358:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800035c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000360:	d002      	beq.n	8000368 <__adddf3+0x84>
 8000362:	4252      	negs	r2, r2
 8000364:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000368:	ea94 0f05 	teq	r4, r5
 800036c:	f000 80a7 	beq.w	80004be <__adddf3+0x1da>
 8000370:	f1a4 0401 	sub.w	r4, r4, #1
 8000374:	f1d5 0e20 	rsbs	lr, r5, #32
 8000378:	db0d      	blt.n	8000396 <__adddf3+0xb2>
 800037a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800037e:	fa22 f205 	lsr.w	r2, r2, r5
 8000382:	1880      	adds	r0, r0, r2
 8000384:	f141 0100 	adc.w	r1, r1, #0
 8000388:	fa03 f20e 	lsl.w	r2, r3, lr
 800038c:	1880      	adds	r0, r0, r2
 800038e:	fa43 f305 	asr.w	r3, r3, r5
 8000392:	4159      	adcs	r1, r3
 8000394:	e00e      	b.n	80003b4 <__adddf3+0xd0>
 8000396:	f1a5 0520 	sub.w	r5, r5, #32
 800039a:	f10e 0e20 	add.w	lr, lr, #32
 800039e:	2a01      	cmp	r2, #1
 80003a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003a4:	bf28      	it	cs
 80003a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003aa:	fa43 f305 	asr.w	r3, r3, r5
 80003ae:	18c0      	adds	r0, r0, r3
 80003b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b8:	d507      	bpl.n	80003ca <__adddf3+0xe6>
 80003ba:	f04f 0e00 	mov.w	lr, #0
 80003be:	f1dc 0c00 	rsbs	ip, ip, #0
 80003c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003ce:	d31b      	bcc.n	8000408 <__adddf3+0x124>
 80003d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003d4:	d30c      	bcc.n	80003f0 <__adddf3+0x10c>
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e0:	f104 0401 	add.w	r4, r4, #1
 80003e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003ec:	f080 809a 	bcs.w	8000524 <__adddf3+0x240>
 80003f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003f4:	bf08      	it	eq
 80003f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003fa:	f150 0000 	adcs.w	r0, r0, #0
 80003fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000402:	ea41 0105 	orr.w	r1, r1, r5
 8000406:	bd30      	pop	{r4, r5, pc}
 8000408:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800040c:	4140      	adcs	r0, r0
 800040e:	eb41 0101 	adc.w	r1, r1, r1
 8000412:	3c01      	subs	r4, #1
 8000414:	bf28      	it	cs
 8000416:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800041a:	d2e9      	bcs.n	80003f0 <__adddf3+0x10c>
 800041c:	f091 0f00 	teq	r1, #0
 8000420:	bf04      	itt	eq
 8000422:	4601      	moveq	r1, r0
 8000424:	2000      	moveq	r0, #0
 8000426:	fab1 f381 	clz	r3, r1
 800042a:	bf08      	it	eq
 800042c:	3320      	addeq	r3, #32
 800042e:	f1a3 030b 	sub.w	r3, r3, #11
 8000432:	f1b3 0220 	subs.w	r2, r3, #32
 8000436:	da0c      	bge.n	8000452 <__adddf3+0x16e>
 8000438:	320c      	adds	r2, #12
 800043a:	dd08      	ble.n	800044e <__adddf3+0x16a>
 800043c:	f102 0c14 	add.w	ip, r2, #20
 8000440:	f1c2 020c 	rsb	r2, r2, #12
 8000444:	fa01 f00c 	lsl.w	r0, r1, ip
 8000448:	fa21 f102 	lsr.w	r1, r1, r2
 800044c:	e00c      	b.n	8000468 <__adddf3+0x184>
 800044e:	f102 0214 	add.w	r2, r2, #20
 8000452:	bfd8      	it	le
 8000454:	f1c2 0c20 	rsble	ip, r2, #32
 8000458:	fa01 f102 	lsl.w	r1, r1, r2
 800045c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000460:	bfdc      	itt	le
 8000462:	ea41 010c 	orrle.w	r1, r1, ip
 8000466:	4090      	lslle	r0, r2
 8000468:	1ae4      	subs	r4, r4, r3
 800046a:	bfa2      	ittt	ge
 800046c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000470:	4329      	orrge	r1, r5
 8000472:	bd30      	popge	{r4, r5, pc}
 8000474:	ea6f 0404 	mvn.w	r4, r4
 8000478:	3c1f      	subs	r4, #31
 800047a:	da1c      	bge.n	80004b6 <__adddf3+0x1d2>
 800047c:	340c      	adds	r4, #12
 800047e:	dc0e      	bgt.n	800049e <__adddf3+0x1ba>
 8000480:	f104 0414 	add.w	r4, r4, #20
 8000484:	f1c4 0220 	rsb	r2, r4, #32
 8000488:	fa20 f004 	lsr.w	r0, r0, r4
 800048c:	fa01 f302 	lsl.w	r3, r1, r2
 8000490:	ea40 0003 	orr.w	r0, r0, r3
 8000494:	fa21 f304 	lsr.w	r3, r1, r4
 8000498:	ea45 0103 	orr.w	r1, r5, r3
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	f1c4 040c 	rsb	r4, r4, #12
 80004a2:	f1c4 0220 	rsb	r2, r4, #32
 80004a6:	fa20 f002 	lsr.w	r0, r0, r2
 80004aa:	fa01 f304 	lsl.w	r3, r1, r4
 80004ae:	ea40 0003 	orr.w	r0, r0, r3
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	fa21 f004 	lsr.w	r0, r1, r4
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	f094 0f00 	teq	r4, #0
 80004c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004c6:	bf06      	itte	eq
 80004c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004cc:	3401      	addeq	r4, #1
 80004ce:	3d01      	subne	r5, #1
 80004d0:	e74e      	b.n	8000370 <__adddf3+0x8c>
 80004d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004d6:	bf18      	it	ne
 80004d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004dc:	d029      	beq.n	8000532 <__adddf3+0x24e>
 80004de:	ea94 0f05 	teq	r4, r5
 80004e2:	bf08      	it	eq
 80004e4:	ea90 0f02 	teqeq	r0, r2
 80004e8:	d005      	beq.n	80004f6 <__adddf3+0x212>
 80004ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80004ee:	bf04      	itt	eq
 80004f0:	4619      	moveq	r1, r3
 80004f2:	4610      	moveq	r0, r2
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	ea91 0f03 	teq	r1, r3
 80004fa:	bf1e      	ittt	ne
 80004fc:	2100      	movne	r1, #0
 80004fe:	2000      	movne	r0, #0
 8000500:	bd30      	popne	{r4, r5, pc}
 8000502:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000506:	d105      	bne.n	8000514 <__adddf3+0x230>
 8000508:	0040      	lsls	r0, r0, #1
 800050a:	4149      	adcs	r1, r1
 800050c:	bf28      	it	cs
 800050e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000518:	bf3c      	itt	cc
 800051a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800051e:	bd30      	popcc	{r4, r5, pc}
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000528:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800052c:	f04f 0000 	mov.w	r0, #0
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000536:	bf1a      	itte	ne
 8000538:	4619      	movne	r1, r3
 800053a:	4610      	movne	r0, r2
 800053c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000540:	bf1c      	itt	ne
 8000542:	460b      	movne	r3, r1
 8000544:	4602      	movne	r2, r0
 8000546:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800054a:	bf06      	itte	eq
 800054c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000550:	ea91 0f03 	teqeq	r1, r3
 8000554:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000558:	bd30      	pop	{r4, r5, pc}
 800055a:	bf00      	nop

0800055c <__aeabi_ui2d>:
 800055c:	f090 0f00 	teq	r0, #0
 8000560:	bf04      	itt	eq
 8000562:	2100      	moveq	r1, #0
 8000564:	4770      	bxeq	lr
 8000566:	b530      	push	{r4, r5, lr}
 8000568:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800056c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000570:	f04f 0500 	mov.w	r5, #0
 8000574:	f04f 0100 	mov.w	r1, #0
 8000578:	e750      	b.n	800041c <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_i2d>:
 800057c:	f090 0f00 	teq	r0, #0
 8000580:	bf04      	itt	eq
 8000582:	2100      	moveq	r1, #0
 8000584:	4770      	bxeq	lr
 8000586:	b530      	push	{r4, r5, lr}
 8000588:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800058c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000590:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000594:	bf48      	it	mi
 8000596:	4240      	negmi	r0, r0
 8000598:	f04f 0100 	mov.w	r1, #0
 800059c:	e73e      	b.n	800041c <__adddf3+0x138>
 800059e:	bf00      	nop

080005a0 <__aeabi_f2d>:
 80005a0:	0042      	lsls	r2, r0, #1
 80005a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005ae:	bf1f      	itttt	ne
 80005b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005bc:	4770      	bxne	lr
 80005be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005c2:	bf08      	it	eq
 80005c4:	4770      	bxeq	lr
 80005c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ca:	bf04      	itt	eq
 80005cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e71c      	b.n	800041c <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aed8 	beq.w	80003ca <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6bd      	b.n	80003ca <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_frsub>:
 8000650:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000654:	e002      	b.n	800065c <__addsf3>
 8000656:	bf00      	nop

08000658 <__aeabi_fsub>:
 8000658:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0800065c <__addsf3>:
 800065c:	0042      	lsls	r2, r0, #1
 800065e:	bf1f      	itttt	ne
 8000660:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000664:	ea92 0f03 	teqne	r2, r3
 8000668:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800066c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000670:	d06a      	beq.n	8000748 <__addsf3+0xec>
 8000672:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000676:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800067a:	bfc1      	itttt	gt
 800067c:	18d2      	addgt	r2, r2, r3
 800067e:	4041      	eorgt	r1, r0
 8000680:	4048      	eorgt	r0, r1
 8000682:	4041      	eorgt	r1, r0
 8000684:	bfb8      	it	lt
 8000686:	425b      	neglt	r3, r3
 8000688:	2b19      	cmp	r3, #25
 800068a:	bf88      	it	hi
 800068c:	4770      	bxhi	lr
 800068e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000692:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000696:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800069a:	bf18      	it	ne
 800069c:	4240      	negne	r0, r0
 800069e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80006a2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80006a6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4249      	negne	r1, r1
 80006ae:	ea92 0f03 	teq	r2, r3
 80006b2:	d03f      	beq.n	8000734 <__addsf3+0xd8>
 80006b4:	f1a2 0201 	sub.w	r2, r2, #1
 80006b8:	fa41 fc03 	asr.w	ip, r1, r3
 80006bc:	eb10 000c 	adds.w	r0, r0, ip
 80006c0:	f1c3 0320 	rsb	r3, r3, #32
 80006c4:	fa01 f103 	lsl.w	r1, r1, r3
 80006c8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80006cc:	d502      	bpl.n	80006d4 <__addsf3+0x78>
 80006ce:	4249      	negs	r1, r1
 80006d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006d4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80006d8:	d313      	bcc.n	8000702 <__addsf3+0xa6>
 80006da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80006de:	d306      	bcc.n	80006ee <__addsf3+0x92>
 80006e0:	0840      	lsrs	r0, r0, #1
 80006e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006e6:	f102 0201 	add.w	r2, r2, #1
 80006ea:	2afe      	cmp	r2, #254	; 0xfe
 80006ec:	d251      	bcs.n	8000792 <__addsf3+0x136>
 80006ee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80006f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80006f6:	bf08      	it	eq
 80006f8:	f020 0001 	biceq.w	r0, r0, #1
 80006fc:	ea40 0003 	orr.w	r0, r0, r3
 8000700:	4770      	bx	lr
 8000702:	0049      	lsls	r1, r1, #1
 8000704:	eb40 0000 	adc.w	r0, r0, r0
 8000708:	3a01      	subs	r2, #1
 800070a:	bf28      	it	cs
 800070c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000710:	d2ed      	bcs.n	80006ee <__addsf3+0x92>
 8000712:	fab0 fc80 	clz	ip, r0
 8000716:	f1ac 0c08 	sub.w	ip, ip, #8
 800071a:	ebb2 020c 	subs.w	r2, r2, ip
 800071e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000722:	bfaa      	itet	ge
 8000724:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000728:	4252      	neglt	r2, r2
 800072a:	4318      	orrge	r0, r3
 800072c:	bfbc      	itt	lt
 800072e:	40d0      	lsrlt	r0, r2
 8000730:	4318      	orrlt	r0, r3
 8000732:	4770      	bx	lr
 8000734:	f092 0f00 	teq	r2, #0
 8000738:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 800073c:	bf06      	itte	eq
 800073e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000742:	3201      	addeq	r2, #1
 8000744:	3b01      	subne	r3, #1
 8000746:	e7b5      	b.n	80006b4 <__addsf3+0x58>
 8000748:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800074c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000750:	bf18      	it	ne
 8000752:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000756:	d021      	beq.n	800079c <__addsf3+0x140>
 8000758:	ea92 0f03 	teq	r2, r3
 800075c:	d004      	beq.n	8000768 <__addsf3+0x10c>
 800075e:	f092 0f00 	teq	r2, #0
 8000762:	bf08      	it	eq
 8000764:	4608      	moveq	r0, r1
 8000766:	4770      	bx	lr
 8000768:	ea90 0f01 	teq	r0, r1
 800076c:	bf1c      	itt	ne
 800076e:	2000      	movne	r0, #0
 8000770:	4770      	bxne	lr
 8000772:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000776:	d104      	bne.n	8000782 <__addsf3+0x126>
 8000778:	0040      	lsls	r0, r0, #1
 800077a:	bf28      	it	cs
 800077c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000780:	4770      	bx	lr
 8000782:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000786:	bf3c      	itt	cc
 8000788:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800078c:	4770      	bxcc	lr
 800078e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000792:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000796:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800079a:	4770      	bx	lr
 800079c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007a0:	bf16      	itet	ne
 80007a2:	4608      	movne	r0, r1
 80007a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007a8:	4601      	movne	r1, r0
 80007aa:	0242      	lsls	r2, r0, #9
 80007ac:	bf06      	itte	eq
 80007ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007b2:	ea90 0f01 	teqeq	r0, r1
 80007b6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80007ba:	4770      	bx	lr

080007bc <__aeabi_ui2f>:
 80007bc:	f04f 0300 	mov.w	r3, #0
 80007c0:	e004      	b.n	80007cc <__aeabi_i2f+0x8>
 80007c2:	bf00      	nop

080007c4 <__aeabi_i2f>:
 80007c4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80007c8:	bf48      	it	mi
 80007ca:	4240      	negmi	r0, r0
 80007cc:	ea5f 0c00 	movs.w	ip, r0
 80007d0:	bf08      	it	eq
 80007d2:	4770      	bxeq	lr
 80007d4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80007d8:	4601      	mov	r1, r0
 80007da:	f04f 0000 	mov.w	r0, #0
 80007de:	e01c      	b.n	800081a <__aeabi_l2f+0x2a>

080007e0 <__aeabi_ul2f>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	f04f 0300 	mov.w	r3, #0
 80007ec:	e00a      	b.n	8000804 <__aeabi_l2f+0x14>
 80007ee:	bf00      	nop

080007f0 <__aeabi_l2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80007fc:	d502      	bpl.n	8000804 <__aeabi_l2f+0x14>
 80007fe:	4240      	negs	r0, r0
 8000800:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000804:	ea5f 0c01 	movs.w	ip, r1
 8000808:	bf02      	ittt	eq
 800080a:	4684      	moveq	ip, r0
 800080c:	4601      	moveq	r1, r0
 800080e:	2000      	moveq	r0, #0
 8000810:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000814:	bf08      	it	eq
 8000816:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 800081a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800081e:	fabc f28c 	clz	r2, ip
 8000822:	3a08      	subs	r2, #8
 8000824:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000828:	db10      	blt.n	800084c <__aeabi_l2f+0x5c>
 800082a:	fa01 fc02 	lsl.w	ip, r1, r2
 800082e:	4463      	add	r3, ip
 8000830:	fa00 fc02 	lsl.w	ip, r0, r2
 8000834:	f1c2 0220 	rsb	r2, r2, #32
 8000838:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800083c:	fa20 f202 	lsr.w	r2, r0, r2
 8000840:	eb43 0002 	adc.w	r0, r3, r2
 8000844:	bf08      	it	eq
 8000846:	f020 0001 	biceq.w	r0, r0, #1
 800084a:	4770      	bx	lr
 800084c:	f102 0220 	add.w	r2, r2, #32
 8000850:	fa01 fc02 	lsl.w	ip, r1, r2
 8000854:	f1c2 0220 	rsb	r2, r2, #32
 8000858:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800085c:	fa21 f202 	lsr.w	r2, r1, r2
 8000860:	eb43 0002 	adc.w	r0, r3, r2
 8000864:	bf08      	it	eq
 8000866:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800086a:	4770      	bx	lr

0800086c <__aeabi_uldivmod>:
 800086c:	b953      	cbnz	r3, 8000884 <__aeabi_uldivmod+0x18>
 800086e:	b94a      	cbnz	r2, 8000884 <__aeabi_uldivmod+0x18>
 8000870:	2900      	cmp	r1, #0
 8000872:	bf08      	it	eq
 8000874:	2800      	cmpeq	r0, #0
 8000876:	bf1c      	itt	ne
 8000878:	f04f 31ff 	movne.w	r1, #4294967295
 800087c:	f04f 30ff 	movne.w	r0, #4294967295
 8000880:	f000 b974 	b.w	8000b6c <__aeabi_idiv0>
 8000884:	f1ad 0c08 	sub.w	ip, sp, #8
 8000888:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800088c:	f000 f806 	bl	800089c <__udivmoddi4>
 8000890:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000894:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000898:	b004      	add	sp, #16
 800089a:	4770      	bx	lr

0800089c <__udivmoddi4>:
 800089c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008a0:	9d08      	ldr	r5, [sp, #32]
 80008a2:	4604      	mov	r4, r0
 80008a4:	468e      	mov	lr, r1
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d14d      	bne.n	8000946 <__udivmoddi4+0xaa>
 80008aa:	428a      	cmp	r2, r1
 80008ac:	4694      	mov	ip, r2
 80008ae:	d969      	bls.n	8000984 <__udivmoddi4+0xe8>
 80008b0:	fab2 f282 	clz	r2, r2
 80008b4:	b152      	cbz	r2, 80008cc <__udivmoddi4+0x30>
 80008b6:	fa01 f302 	lsl.w	r3, r1, r2
 80008ba:	f1c2 0120 	rsb	r1, r2, #32
 80008be:	fa20 f101 	lsr.w	r1, r0, r1
 80008c2:	fa0c fc02 	lsl.w	ip, ip, r2
 80008c6:	ea41 0e03 	orr.w	lr, r1, r3
 80008ca:	4094      	lsls	r4, r2
 80008cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80008d0:	0c21      	lsrs	r1, r4, #16
 80008d2:	fbbe f6f8 	udiv	r6, lr, r8
 80008d6:	fa1f f78c 	uxth.w	r7, ip
 80008da:	fb08 e316 	mls	r3, r8, r6, lr
 80008de:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80008e2:	fb06 f107 	mul.w	r1, r6, r7
 80008e6:	4299      	cmp	r1, r3
 80008e8:	d90a      	bls.n	8000900 <__udivmoddi4+0x64>
 80008ea:	eb1c 0303 	adds.w	r3, ip, r3
 80008ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80008f2:	f080 811f 	bcs.w	8000b34 <__udivmoddi4+0x298>
 80008f6:	4299      	cmp	r1, r3
 80008f8:	f240 811c 	bls.w	8000b34 <__udivmoddi4+0x298>
 80008fc:	3e02      	subs	r6, #2
 80008fe:	4463      	add	r3, ip
 8000900:	1a5b      	subs	r3, r3, r1
 8000902:	b2a4      	uxth	r4, r4
 8000904:	fbb3 f0f8 	udiv	r0, r3, r8
 8000908:	fb08 3310 	mls	r3, r8, r0, r3
 800090c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000910:	fb00 f707 	mul.w	r7, r0, r7
 8000914:	42a7      	cmp	r7, r4
 8000916:	d90a      	bls.n	800092e <__udivmoddi4+0x92>
 8000918:	eb1c 0404 	adds.w	r4, ip, r4
 800091c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000920:	f080 810a 	bcs.w	8000b38 <__udivmoddi4+0x29c>
 8000924:	42a7      	cmp	r7, r4
 8000926:	f240 8107 	bls.w	8000b38 <__udivmoddi4+0x29c>
 800092a:	4464      	add	r4, ip
 800092c:	3802      	subs	r0, #2
 800092e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000932:	1be4      	subs	r4, r4, r7
 8000934:	2600      	movs	r6, #0
 8000936:	b11d      	cbz	r5, 8000940 <__udivmoddi4+0xa4>
 8000938:	40d4      	lsrs	r4, r2
 800093a:	2300      	movs	r3, #0
 800093c:	e9c5 4300 	strd	r4, r3, [r5]
 8000940:	4631      	mov	r1, r6
 8000942:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000946:	428b      	cmp	r3, r1
 8000948:	d909      	bls.n	800095e <__udivmoddi4+0xc2>
 800094a:	2d00      	cmp	r5, #0
 800094c:	f000 80ef 	beq.w	8000b2e <__udivmoddi4+0x292>
 8000950:	2600      	movs	r6, #0
 8000952:	e9c5 0100 	strd	r0, r1, [r5]
 8000956:	4630      	mov	r0, r6
 8000958:	4631      	mov	r1, r6
 800095a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095e:	fab3 f683 	clz	r6, r3
 8000962:	2e00      	cmp	r6, #0
 8000964:	d14a      	bne.n	80009fc <__udivmoddi4+0x160>
 8000966:	428b      	cmp	r3, r1
 8000968:	d302      	bcc.n	8000970 <__udivmoddi4+0xd4>
 800096a:	4282      	cmp	r2, r0
 800096c:	f200 80f9 	bhi.w	8000b62 <__udivmoddi4+0x2c6>
 8000970:	1a84      	subs	r4, r0, r2
 8000972:	eb61 0303 	sbc.w	r3, r1, r3
 8000976:	2001      	movs	r0, #1
 8000978:	469e      	mov	lr, r3
 800097a:	2d00      	cmp	r5, #0
 800097c:	d0e0      	beq.n	8000940 <__udivmoddi4+0xa4>
 800097e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000982:	e7dd      	b.n	8000940 <__udivmoddi4+0xa4>
 8000984:	b902      	cbnz	r2, 8000988 <__udivmoddi4+0xec>
 8000986:	deff      	udf	#255	; 0xff
 8000988:	fab2 f282 	clz	r2, r2
 800098c:	2a00      	cmp	r2, #0
 800098e:	f040 8092 	bne.w	8000ab6 <__udivmoddi4+0x21a>
 8000992:	eba1 010c 	sub.w	r1, r1, ip
 8000996:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800099a:	fa1f fe8c 	uxth.w	lr, ip
 800099e:	2601      	movs	r6, #1
 80009a0:	0c20      	lsrs	r0, r4, #16
 80009a2:	fbb1 f3f7 	udiv	r3, r1, r7
 80009a6:	fb07 1113 	mls	r1, r7, r3, r1
 80009aa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009ae:	fb0e f003 	mul.w	r0, lr, r3
 80009b2:	4288      	cmp	r0, r1
 80009b4:	d908      	bls.n	80009c8 <__udivmoddi4+0x12c>
 80009b6:	eb1c 0101 	adds.w	r1, ip, r1
 80009ba:	f103 38ff 	add.w	r8, r3, #4294967295
 80009be:	d202      	bcs.n	80009c6 <__udivmoddi4+0x12a>
 80009c0:	4288      	cmp	r0, r1
 80009c2:	f200 80cb 	bhi.w	8000b5c <__udivmoddi4+0x2c0>
 80009c6:	4643      	mov	r3, r8
 80009c8:	1a09      	subs	r1, r1, r0
 80009ca:	b2a4      	uxth	r4, r4
 80009cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80009d0:	fb07 1110 	mls	r1, r7, r0, r1
 80009d4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80009d8:	fb0e fe00 	mul.w	lr, lr, r0
 80009dc:	45a6      	cmp	lr, r4
 80009de:	d908      	bls.n	80009f2 <__udivmoddi4+0x156>
 80009e0:	eb1c 0404 	adds.w	r4, ip, r4
 80009e4:	f100 31ff 	add.w	r1, r0, #4294967295
 80009e8:	d202      	bcs.n	80009f0 <__udivmoddi4+0x154>
 80009ea:	45a6      	cmp	lr, r4
 80009ec:	f200 80bb 	bhi.w	8000b66 <__udivmoddi4+0x2ca>
 80009f0:	4608      	mov	r0, r1
 80009f2:	eba4 040e 	sub.w	r4, r4, lr
 80009f6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80009fa:	e79c      	b.n	8000936 <__udivmoddi4+0x9a>
 80009fc:	f1c6 0720 	rsb	r7, r6, #32
 8000a00:	40b3      	lsls	r3, r6
 8000a02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000a0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000a12:	431c      	orrs	r4, r3
 8000a14:	40f9      	lsrs	r1, r7
 8000a16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000a1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000a22:	0c20      	lsrs	r0, r4, #16
 8000a24:	fa1f fe8c 	uxth.w	lr, ip
 8000a28:	fb09 1118 	mls	r1, r9, r8, r1
 8000a2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000a30:	fb08 f00e 	mul.w	r0, r8, lr
 8000a34:	4288      	cmp	r0, r1
 8000a36:	fa02 f206 	lsl.w	r2, r2, r6
 8000a3a:	d90b      	bls.n	8000a54 <__udivmoddi4+0x1b8>
 8000a3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a44:	f080 8088 	bcs.w	8000b58 <__udivmoddi4+0x2bc>
 8000a48:	4288      	cmp	r0, r1
 8000a4a:	f240 8085 	bls.w	8000b58 <__udivmoddi4+0x2bc>
 8000a4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a52:	4461      	add	r1, ip
 8000a54:	1a09      	subs	r1, r1, r0
 8000a56:	b2a4      	uxth	r4, r4
 8000a58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000a5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000a60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000a64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a68:	458e      	cmp	lr, r1
 8000a6a:	d908      	bls.n	8000a7e <__udivmoddi4+0x1e2>
 8000a6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000a70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a74:	d26c      	bcs.n	8000b50 <__udivmoddi4+0x2b4>
 8000a76:	458e      	cmp	lr, r1
 8000a78:	d96a      	bls.n	8000b50 <__udivmoddi4+0x2b4>
 8000a7a:	3802      	subs	r0, #2
 8000a7c:	4461      	add	r1, ip
 8000a7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a82:	fba0 9402 	umull	r9, r4, r0, r2
 8000a86:	eba1 010e 	sub.w	r1, r1, lr
 8000a8a:	42a1      	cmp	r1, r4
 8000a8c:	46c8      	mov	r8, r9
 8000a8e:	46a6      	mov	lr, r4
 8000a90:	d356      	bcc.n	8000b40 <__udivmoddi4+0x2a4>
 8000a92:	d053      	beq.n	8000b3c <__udivmoddi4+0x2a0>
 8000a94:	b15d      	cbz	r5, 8000aae <__udivmoddi4+0x212>
 8000a96:	ebb3 0208 	subs.w	r2, r3, r8
 8000a9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000a9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000aa2:	fa22 f306 	lsr.w	r3, r2, r6
 8000aa6:	40f1      	lsrs	r1, r6
 8000aa8:	431f      	orrs	r7, r3
 8000aaa:	e9c5 7100 	strd	r7, r1, [r5]
 8000aae:	2600      	movs	r6, #0
 8000ab0:	4631      	mov	r1, r6
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab6:	f1c2 0320 	rsb	r3, r2, #32
 8000aba:	40d8      	lsrs	r0, r3
 8000abc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac0:	fa21 f303 	lsr.w	r3, r1, r3
 8000ac4:	4091      	lsls	r1, r2
 8000ac6:	4301      	orrs	r1, r0
 8000ac8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000acc:	fa1f fe8c 	uxth.w	lr, ip
 8000ad0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ad4:	fb07 3610 	mls	r6, r7, r0, r3
 8000ad8:	0c0b      	lsrs	r3, r1, #16
 8000ada:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ade:	fb00 f60e 	mul.w	r6, r0, lr
 8000ae2:	429e      	cmp	r6, r3
 8000ae4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ae8:	d908      	bls.n	8000afc <__udivmoddi4+0x260>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af2:	d22f      	bcs.n	8000b54 <__udivmoddi4+0x2b8>
 8000af4:	429e      	cmp	r6, r3
 8000af6:	d92d      	bls.n	8000b54 <__udivmoddi4+0x2b8>
 8000af8:	3802      	subs	r0, #2
 8000afa:	4463      	add	r3, ip
 8000afc:	1b9b      	subs	r3, r3, r6
 8000afe:	b289      	uxth	r1, r1
 8000b00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000b04:	fb07 3316 	mls	r3, r7, r6, r3
 8000b08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000b10:	428b      	cmp	r3, r1
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x28a>
 8000b14:	eb1c 0101 	adds.w	r1, ip, r1
 8000b18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000b1c:	d216      	bcs.n	8000b4c <__udivmoddi4+0x2b0>
 8000b1e:	428b      	cmp	r3, r1
 8000b20:	d914      	bls.n	8000b4c <__udivmoddi4+0x2b0>
 8000b22:	3e02      	subs	r6, #2
 8000b24:	4461      	add	r1, ip
 8000b26:	1ac9      	subs	r1, r1, r3
 8000b28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000b2c:	e738      	b.n	80009a0 <__udivmoddi4+0x104>
 8000b2e:	462e      	mov	r6, r5
 8000b30:	4628      	mov	r0, r5
 8000b32:	e705      	b.n	8000940 <__udivmoddi4+0xa4>
 8000b34:	4606      	mov	r6, r0
 8000b36:	e6e3      	b.n	8000900 <__udivmoddi4+0x64>
 8000b38:	4618      	mov	r0, r3
 8000b3a:	e6f8      	b.n	800092e <__udivmoddi4+0x92>
 8000b3c:	454b      	cmp	r3, r9
 8000b3e:	d2a9      	bcs.n	8000a94 <__udivmoddi4+0x1f8>
 8000b40:	ebb9 0802 	subs.w	r8, r9, r2
 8000b44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000b48:	3801      	subs	r0, #1
 8000b4a:	e7a3      	b.n	8000a94 <__udivmoddi4+0x1f8>
 8000b4c:	4646      	mov	r6, r8
 8000b4e:	e7ea      	b.n	8000b26 <__udivmoddi4+0x28a>
 8000b50:	4620      	mov	r0, r4
 8000b52:	e794      	b.n	8000a7e <__udivmoddi4+0x1e2>
 8000b54:	4640      	mov	r0, r8
 8000b56:	e7d1      	b.n	8000afc <__udivmoddi4+0x260>
 8000b58:	46d0      	mov	r8, sl
 8000b5a:	e77b      	b.n	8000a54 <__udivmoddi4+0x1b8>
 8000b5c:	3b02      	subs	r3, #2
 8000b5e:	4461      	add	r1, ip
 8000b60:	e732      	b.n	80009c8 <__udivmoddi4+0x12c>
 8000b62:	4630      	mov	r0, r6
 8000b64:	e709      	b.n	800097a <__udivmoddi4+0xde>
 8000b66:	4464      	add	r4, ip
 8000b68:	3802      	subs	r0, #2
 8000b6a:	e742      	b.n	80009f2 <__udivmoddi4+0x156>

08000b6c <__aeabi_idiv0>:
 8000b6c:	4770      	bx	lr
 8000b6e:	bf00      	nop

08000b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b76:	2003      	movs	r0, #3
 8000b78:	f000 f98c 	bl	8000e94 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b7c:	f002 f856 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8000b80:	4602      	mov	r2, r0
 8000b82:	4b15      	ldr	r3, [pc, #84]	; (8000bd8 <HAL_Init+0x68>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	0a1b      	lsrs	r3, r3, #8
 8000b88:	f003 030f 	and.w	r3, r3, #15
 8000b8c:	4913      	ldr	r1, [pc, #76]	; (8000bdc <HAL_Init+0x6c>)
 8000b8e:	5ccb      	ldrb	r3, [r1, r3]
 8000b90:	f003 031f 	and.w	r3, r3, #31
 8000b94:	fa22 f303 	lsr.w	r3, r2, r3
 8000b98:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b9a:	4b0f      	ldr	r3, [pc, #60]	; (8000bd8 <HAL_Init+0x68>)
 8000b9c:	699b      	ldr	r3, [r3, #24]
 8000b9e:	f003 030f 	and.w	r3, r3, #15
 8000ba2:	4a0e      	ldr	r2, [pc, #56]	; (8000bdc <HAL_Init+0x6c>)
 8000ba4:	5cd3      	ldrb	r3, [r2, r3]
 8000ba6:	f003 031f 	and.w	r3, r3, #31
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	fa22 f303 	lsr.w	r3, r2, r3
 8000bb0:	4a0b      	ldr	r2, [pc, #44]	; (8000be0 <HAL_Init+0x70>)
 8000bb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000bb4:	4a0b      	ldr	r2, [pc, #44]	; (8000be4 <HAL_Init+0x74>)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f000 f814 	bl	8000be8 <HAL_InitTick>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e002      	b.n	8000bd0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000bca:	f007 fc51 	bl	8008470 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bce:	2300      	movs	r3, #0
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3708      	adds	r7, #8
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	58024400 	.word	0x58024400
 8000bdc:	0800975c 	.word	0x0800975c
 8000be0:	24000078 	.word	0x24000078
 8000be4:	24000074 	.word	0x24000074

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000bf0:	4b15      	ldr	r3, [pc, #84]	; (8000c48 <HAL_InitTick+0x60>)
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d101      	bne.n	8000bfc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e021      	b.n	8000c40 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000bfc:	4b13      	ldr	r3, [pc, #76]	; (8000c4c <HAL_InitTick+0x64>)
 8000bfe:	681a      	ldr	r2, [r3, #0]
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <HAL_InitTick+0x60>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	4619      	mov	r1, r3
 8000c06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 f971 	bl	8000efa <HAL_SYSTICK_Config>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e00e      	b.n	8000c40 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	2b0f      	cmp	r3, #15
 8000c26:	d80a      	bhi.n	8000c3e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c28:	2200      	movs	r2, #0
 8000c2a:	6879      	ldr	r1, [r7, #4]
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	f000 f93b 	bl	8000eaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c34:	4a06      	ldr	r2, [pc, #24]	; (8000c50 <HAL_InitTick+0x68>)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	e000      	b.n	8000c40 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000c3e:	2301      	movs	r3, #1
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3708      	adds	r7, #8
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	24000004 	.word	0x24000004
 8000c4c:	24000074 	.word	0x24000074
 8000c50:	24000000 	.word	0x24000000

08000c54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_IncTick+0x20>)
 8000c5a:	781b      	ldrb	r3, [r3, #0]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <HAL_IncTick+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4413      	add	r3, r2
 8000c64:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <HAL_IncTick+0x24>)
 8000c66:	6013      	str	r3, [r2, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	24000004 	.word	0x24000004
 8000c78:	2400009c 	.word	0x2400009c

08000c7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c80:	4b03      	ldr	r3, [pc, #12]	; (8000c90 <HAL_GetTick+0x14>)
 8000c82:	681b      	ldr	r3, [r3, #0]
}
 8000c84:	4618      	mov	r0, r3
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	2400009c 	.word	0x2400009c

08000c94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c9c:	f7ff ffee 	bl	8000c7c <HAL_GetTick>
 8000ca0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cac:	d005      	beq.n	8000cba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cae:	4b0a      	ldr	r3, [pc, #40]	; (8000cd8 <HAL_Delay+0x44>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	461a      	mov	r2, r3
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000cba:	bf00      	nop
 8000cbc:	f7ff ffde 	bl	8000c7c <HAL_GetTick>
 8000cc0:	4602      	mov	r2, r0
 8000cc2:	68bb      	ldr	r3, [r7, #8]
 8000cc4:	1ad3      	subs	r3, r2, r3
 8000cc6:	68fa      	ldr	r2, [r7, #12]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d8f7      	bhi.n	8000cbc <HAL_Delay+0x28>
  {
  }
}
 8000ccc:	bf00      	nop
 8000cce:	bf00      	nop
 8000cd0:	3710      	adds	r7, #16
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	24000004 	.word	0x24000004

08000cdc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetREVID+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	0c1b      	lsrs	r3, r3, #16
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	5c001000 	.word	0x5c001000

08000cf4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b085      	sub	sp, #20
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	f003 0307 	and.w	r3, r3, #7
 8000d02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d04:	4b0b      	ldr	r3, [pc, #44]	; (8000d34 <__NVIC_SetPriorityGrouping+0x40>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0a:	68ba      	ldr	r2, [r7, #8]
 8000d0c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d10:	4013      	ands	r3, r2
 8000d12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000d1c:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <__NVIC_SetPriorityGrouping+0x44>)
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d22:	4a04      	ldr	r2, [pc, #16]	; (8000d34 <__NVIC_SetPriorityGrouping+0x40>)
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	60d3      	str	r3, [r2, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00
 8000d38:	05fa0000 	.word	0x05fa0000

08000d3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d40:	4b04      	ldr	r3, [pc, #16]	; (8000d54 <__NVIC_GetPriorityGrouping+0x18>)
 8000d42:	68db      	ldr	r3, [r3, #12]
 8000d44:	0a1b      	lsrs	r3, r3, #8
 8000d46:	f003 0307 	and.w	r3, r3, #7
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr
 8000d54:	e000ed00 	.word	0xe000ed00

08000d58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	db0b      	blt.n	8000d82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	f003 021f 	and.w	r2, r3, #31
 8000d70:	4907      	ldr	r1, [pc, #28]	; (8000d90 <__NVIC_EnableIRQ+0x38>)
 8000d72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d76:	095b      	lsrs	r3, r3, #5
 8000d78:	2001      	movs	r0, #1
 8000d7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr
 8000d8e:	bf00      	nop
 8000d90:	e000e100 	.word	0xe000e100

08000d94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	6039      	str	r1, [r7, #0]
 8000d9e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000da0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	db0a      	blt.n	8000dbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	b2da      	uxtb	r2, r3
 8000dac:	490c      	ldr	r1, [pc, #48]	; (8000de0 <__NVIC_SetPriority+0x4c>)
 8000dae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	b2d2      	uxtb	r2, r2
 8000db6:	440b      	add	r3, r1
 8000db8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dbc:	e00a      	b.n	8000dd4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	b2da      	uxtb	r2, r3
 8000dc2:	4908      	ldr	r1, [pc, #32]	; (8000de4 <__NVIC_SetPriority+0x50>)
 8000dc4:	88fb      	ldrh	r3, [r7, #6]
 8000dc6:	f003 030f 	and.w	r3, r3, #15
 8000dca:	3b04      	subs	r3, #4
 8000dcc:	0112      	lsls	r2, r2, #4
 8000dce:	b2d2      	uxtb	r2, r2
 8000dd0:	440b      	add	r3, r1
 8000dd2:	761a      	strb	r2, [r3, #24]
}
 8000dd4:	bf00      	nop
 8000dd6:	370c      	adds	r7, #12
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000e100 	.word	0xe000e100
 8000de4:	e000ed00 	.word	0xe000ed00

08000de8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b089      	sub	sp, #36	; 0x24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	60f8      	str	r0, [r7, #12]
 8000df0:	60b9      	str	r1, [r7, #8]
 8000df2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f003 0307 	and.w	r3, r3, #7
 8000dfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	f1c3 0307 	rsb	r3, r3, #7
 8000e02:	2b04      	cmp	r3, #4
 8000e04:	bf28      	it	cs
 8000e06:	2304      	movcs	r3, #4
 8000e08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	3304      	adds	r3, #4
 8000e0e:	2b06      	cmp	r3, #6
 8000e10:	d902      	bls.n	8000e18 <NVIC_EncodePriority+0x30>
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	3b03      	subs	r3, #3
 8000e16:	e000      	b.n	8000e1a <NVIC_EncodePriority+0x32>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e20:	69bb      	ldr	r3, [r7, #24]
 8000e22:	fa02 f303 	lsl.w	r3, r2, r3
 8000e26:	43da      	mvns	r2, r3
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	401a      	ands	r2, r3
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e30:	f04f 31ff 	mov.w	r1, #4294967295
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3a:	43d9      	mvns	r1, r3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e40:	4313      	orrs	r3, r2
         );
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3724      	adds	r7, #36	; 0x24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
	...

08000e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e60:	d301      	bcc.n	8000e66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e62:	2301      	movs	r3, #1
 8000e64:	e00f      	b.n	8000e86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e66:	4a0a      	ldr	r2, [pc, #40]	; (8000e90 <SysTick_Config+0x40>)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3b01      	subs	r3, #1
 8000e6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e6e:	210f      	movs	r1, #15
 8000e70:	f04f 30ff 	mov.w	r0, #4294967295
 8000e74:	f7ff ff8e 	bl	8000d94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e78:	4b05      	ldr	r3, [pc, #20]	; (8000e90 <SysTick_Config+0x40>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e7e:	4b04      	ldr	r3, [pc, #16]	; (8000e90 <SysTick_Config+0x40>)
 8000e80:	2207      	movs	r2, #7
 8000e82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	e000e010 	.word	0xe000e010

08000e94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff29 	bl	8000cf4 <__NVIC_SetPriorityGrouping>
}
 8000ea2:	bf00      	nop
 8000ea4:	3708      	adds	r7, #8
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}

08000eaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000eaa:	b580      	push	{r7, lr}
 8000eac:	b086      	sub	sp, #24
 8000eae:	af00      	add	r7, sp, #0
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	60b9      	str	r1, [r7, #8]
 8000eb4:	607a      	str	r2, [r7, #4]
 8000eb6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000eb8:	f7ff ff40 	bl	8000d3c <__NVIC_GetPriorityGrouping>
 8000ebc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	68b9      	ldr	r1, [r7, #8]
 8000ec2:	6978      	ldr	r0, [r7, #20]
 8000ec4:	f7ff ff90 	bl	8000de8 <NVIC_EncodePriority>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ece:	4611      	mov	r1, r2
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff5f 	bl	8000d94 <__NVIC_SetPriority>
}
 8000ed6:	bf00      	nop
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ee8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000eec:	4618      	mov	r0, r3
 8000eee:	f7ff ff33 	bl	8000d58 <__NVIC_EnableIRQ>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b082      	sub	sp, #8
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffa4 	bl	8000e50 <SysTick_Config>
 8000f08:	4603      	mov	r3, r0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3708      	adds	r7, #8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
	...

08000f14 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8000f18:	f3bf 8f5f 	dmb	sy
}
 8000f1c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8000f1e:	4b07      	ldr	r3, [pc, #28]	; (8000f3c <HAL_MPU_Disable+0x28>)
 8000f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f22:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_MPU_Disable+0x28>)
 8000f24:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f28:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_MPU_Disable+0x2c>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	e000ed00 	.word	0xe000ed00
 8000f40:	e000ed90 	.word	0xe000ed90

08000f44 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8000f4c:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <HAL_MPU_Enable+0x38>)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_MPU_Enable+0x3c>)
 8000f58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5a:	4a09      	ldr	r2, [pc, #36]	; (8000f80 <HAL_MPU_Enable+0x3c>)
 8000f5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f60:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8000f62:	f3bf 8f4f 	dsb	sy
}
 8000f66:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000f68:	f3bf 8f6f 	isb	sy
}
 8000f6c:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed90 	.word	0xe000ed90
 8000f80:	e000ed00 	.word	0xe000ed00

08000f84 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	785a      	ldrb	r2, [r3, #1]
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <HAL_MPU_ConfigRegion+0x84>)
 8000f92:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	781b      	ldrb	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d029      	beq.n	8000ff0 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8000f9c:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <HAL_MPU_ConfigRegion+0x84>)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	7b1b      	ldrb	r3, [r3, #12]
 8000fa8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7adb      	ldrb	r3, [r3, #11]
 8000fae:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fb0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	7a9b      	ldrb	r3, [r3, #10]
 8000fb6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8000fb8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	7b5b      	ldrb	r3, [r3, #13]
 8000fbe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8000fc0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	7b9b      	ldrb	r3, [r3, #14]
 8000fc6:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8000fc8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	7bdb      	ldrb	r3, [r3, #15]
 8000fce:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8000fd0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	7a5b      	ldrb	r3, [r3, #9]
 8000fd6:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8000fd8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	7a1b      	ldrb	r3, [r3, #8]
 8000fde:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8000fe0:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8000fe2:	687a      	ldr	r2, [r7, #4]
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8000fea:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8000fec:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8000fee:	e005      	b.n	8000ffc <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <HAL_MPU_ConfigRegion+0x84>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <HAL_MPU_ConfigRegion+0x84>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
}
 8000ffc:	bf00      	nop
 8000ffe:	370c      	adds	r7, #12
 8001000:	46bd      	mov	sp, r7
 8001002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001006:	4770      	bx	lr
 8001008:	e000ed90 	.word	0xe000ed90

0800100c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b098      	sub	sp, #96	; 0x60
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8001014:	4a84      	ldr	r2, [pc, #528]	; (8001228 <HAL_FDCAN_Init+0x21c>)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	4611      	mov	r1, r2
 800101c:	224c      	movs	r2, #76	; 0x4c
 800101e:	4618      	mov	r0, r3
 8001020:	f007 fd3e 	bl	8008aa0 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d101      	bne.n	800102e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e1c6      	b.n	80013bc <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a7e      	ldr	r2, [pc, #504]	; (800122c <HAL_FDCAN_Init+0x220>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d106      	bne.n	8001046 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8001040:	461a      	mov	r2, r3
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800104c:	b2db      	uxtb	r3, r3
 800104e:	2b00      	cmp	r3, #0
 8001050:	d106      	bne.n	8001060 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	2200      	movs	r2, #0
 8001056:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f007 fa22 	bl	80084a4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	699a      	ldr	r2, [r3, #24]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f022 0210 	bic.w	r2, r2, #16
 800106e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001070:	f7ff fe04 	bl	8000c7c <HAL_GetTick>
 8001074:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8001076:	e014      	b.n	80010a2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8001078:	f7ff fe00 	bl	8000c7c <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b0a      	cmp	r3, #10
 8001084:	d90d      	bls.n	80010a2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800108c:	f043 0201 	orr.w	r2, r3, #1
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	2203      	movs	r2, #3
 800109a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e18c      	b.n	80013bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699b      	ldr	r3, [r3, #24]
 80010a8:	f003 0308 	and.w	r3, r3, #8
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d0e3      	beq.n	8001078 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	699a      	ldr	r2, [r3, #24]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f042 0201 	orr.w	r2, r2, #1
 80010be:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010c0:	f7ff fddc 	bl	8000c7c <HAL_GetTick>
 80010c4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010c6:	e014      	b.n	80010f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010c8:	f7ff fdd8 	bl	8000c7c <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	2b0a      	cmp	r3, #10
 80010d4:	d90d      	bls.n	80010f2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80010dc:	f043 0201 	orr.w	r2, r3, #1
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2203      	movs	r2, #3
 80010ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e164      	b.n	80013bc <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0e3      	beq.n	80010c8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	699a      	ldr	r2, [r3, #24]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	f042 0202 	orr.w	r2, r2, #2
 800110e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	7c1b      	ldrb	r3, [r3, #16]
 8001114:	2b01      	cmp	r3, #1
 8001116:	d108      	bne.n	800112a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	699a      	ldr	r2, [r3, #24]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001126:	619a      	str	r2, [r3, #24]
 8001128:	e007      	b.n	800113a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	699a      	ldr	r2, [r3, #24]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001138:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	7c5b      	ldrb	r3, [r3, #17]
 800113e:	2b01      	cmp	r3, #1
 8001140:	d108      	bne.n	8001154 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	699a      	ldr	r2, [r3, #24]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001150:	619a      	str	r2, [r3, #24]
 8001152:	e007      	b.n	8001164 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	699a      	ldr	r2, [r3, #24]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001162:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7c9b      	ldrb	r3, [r3, #18]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d108      	bne.n	800117e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	699a      	ldr	r2, [r3, #24]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800117a:	619a      	str	r2, [r3, #24]
 800117c:	e007      	b.n	800118e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	699a      	ldr	r2, [r3, #24]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800118c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	689a      	ldr	r2, [r3, #8]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	699a      	ldr	r2, [r3, #24]
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80011b2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	691a      	ldr	r2, [r3, #16]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0210 	bic.w	r2, r2, #16
 80011c2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b01      	cmp	r3, #1
 80011ca:	d108      	bne.n	80011de <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	699a      	ldr	r2, [r3, #24]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f042 0204 	orr.w	r2, r2, #4
 80011da:	619a      	str	r2, [r3, #24]
 80011dc:	e030      	b.n	8001240 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d02c      	beq.n	8001240 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	68db      	ldr	r3, [r3, #12]
 80011ea:	2b02      	cmp	r3, #2
 80011ec:	d020      	beq.n	8001230 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	699a      	ldr	r2, [r3, #24]
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80011fc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	691a      	ldr	r2, [r3, #16]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f042 0210 	orr.w	r2, r2, #16
 800120c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68db      	ldr	r3, [r3, #12]
 8001212:	2b03      	cmp	r3, #3
 8001214:	d114      	bne.n	8001240 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	699a      	ldr	r2, [r3, #24]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f042 0220 	orr.w	r2, r2, #32
 8001224:	619a      	str	r2, [r3, #24]
 8001226:	e00b      	b.n	8001240 <HAL_FDCAN_Init+0x234>
 8001228:	080096d8 	.word	0x080096d8
 800122c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	699a      	ldr	r2, [r3, #24]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f042 0220 	orr.w	r2, r2, #32
 800123e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	699b      	ldr	r3, [r3, #24]
 8001244:	3b01      	subs	r3, #1
 8001246:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	69db      	ldr	r3, [r3, #28]
 800124c:	3b01      	subs	r3, #1
 800124e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001250:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a1b      	ldr	r3, [r3, #32]
 8001256:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001258:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	695b      	ldr	r3, [r3, #20]
 8001260:	3b01      	subs	r3, #1
 8001262:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001268:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800126a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	689b      	ldr	r3, [r3, #8]
 8001270:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001274:	d115      	bne.n	80012a2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800127a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001280:	3b01      	subs	r3, #1
 8001282:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001284:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	3b01      	subs	r3, #1
 800128c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800128e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001296:	3b01      	subs	r3, #1
 8001298:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800129e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80012a0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00a      	beq.n	80012c0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012c8:	4413      	add	r3, r2
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d011      	beq.n	80012f2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80012d6:	f023 0107 	bic.w	r1, r3, #7
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	3360      	adds	r3, #96	; 0x60
 80012e2:	443b      	add	r3, r7
 80012e4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d011      	beq.n	800131e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001302:	f023 0107 	bic.w	r1, r3, #7
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	3360      	adds	r3, #96	; 0x60
 800130e:	443b      	add	r3, r7
 8001310:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	430a      	orrs	r2, r1
 800131a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001322:	2b00      	cmp	r3, #0
 8001324:	d012      	beq.n	800134c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800132e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	3360      	adds	r3, #96	; 0x60
 800133a:	443b      	add	r3, r7
 800133c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001340:	011a      	lsls	r2, r3, #4
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	430a      	orrs	r2, r1
 8001348:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001350:	2b00      	cmp	r3, #0
 8001352:	d012      	beq.n	800137a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800135c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	3360      	adds	r3, #96	; 0x60
 8001368:	443b      	add	r3, r7
 800136a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800136e:	021a      	lsls	r2, r3, #8
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	430a      	orrs	r2, r1
 8001376:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	4a11      	ldr	r2, [pc, #68]	; (80013c4 <HAL_FDCAN_Init+0x3b8>)
 8001380:	4293      	cmp	r3, r2
 8001382:	d107      	bne.n	8001394 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	689a      	ldr	r2, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	f022 0203 	bic.w	r2, r2, #3
 8001392:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	2200      	movs	r2, #0
 80013a0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2201      	movs	r2, #1
 80013a8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80013ac:	6878      	ldr	r0, [r7, #4]
 80013ae:	f000 fa25 	bl	80017fc <FDCAN_CalcultateRamBlockAddresses>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80013b8:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3760      	adds	r7, #96	; 0x60
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	4000a000 	.word	0x4000a000

080013c8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d111      	bne.n	8001400 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	2202      	movs	r2, #2
 80013e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	699a      	ldr	r2, [r3, #24]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f022 0201 	bic.w	r2, r2, #1
 80013f2:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80013fc:	2300      	movs	r3, #0
 80013fe:	e008      	b.n	8001412 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001406:	f043 0204 	orr.w	r2, r3, #4
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001410:	2301      	movs	r3, #1
  }
}
 8001412:	4618      	mov	r0, r3
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr

0800141e <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b086      	sub	sp, #24
 8001422:	af00      	add	r7, sp, #0
 8001424:	60f8      	str	r0, [r7, #12]
 8001426:	60b9      	str	r1, [r7, #8]
 8001428:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b02      	cmp	r3, #2
 8001434:	d141      	bne.n	80014ba <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800143e:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8001442:	2b00      	cmp	r3, #0
 8001444:	d109      	bne.n	800145a <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800144c:	f043 0220 	orr.w	r2, r3, #32
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001456:	2301      	movs	r3, #1
 8001458:	e038      	b.n	80014cc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001462:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d009      	beq.n	800147e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001470:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800147a:	2301      	movs	r3, #1
 800147c:	e026      	b.n	80014cc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001486:	0c1b      	lsrs	r3, r3, #16
 8001488:	f003 031f 	and.w	r3, r3, #31
 800148c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	68b9      	ldr	r1, [r7, #8]
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f000 fb37 	bl	8001b08 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	2101      	movs	r1, #1
 80014a0:	697a      	ldr	r2, [r7, #20]
 80014a2:	fa01 f202 	lsl.w	r2, r1, r2
 80014a6:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80014aa:	2201      	movs	r2, #1
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e008      	b.n	80014cc <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014c0:	f043 0208 	orr.w	r2, r3, #8
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
  }
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3718      	adds	r7, #24
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b08b      	sub	sp, #44	; 0x2c
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80014ec:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80014ee:	7efb      	ldrb	r3, [r7, #27]
 80014f0:	2b02      	cmp	r3, #2
 80014f2:	f040 814b 	bne.w	800178c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	2b40      	cmp	r3, #64	; 0x40
 80014fa:	d14d      	bne.n	8001598 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001504:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001508:	2b00      	cmp	r3, #0
 800150a:	d109      	bne.n	8001520 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001512:	f043 0220 	orr.w	r2, r3, #32
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800151c:	2301      	movs	r3, #1
 800151e:	e13e      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001528:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800152c:	2b00      	cmp	r3, #0
 800152e:	d109      	bne.n	8001544 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001536:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001540:	2301      	movs	r3, #1
 8001542:	e12c      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800154c:	0e1b      	lsrs	r3, r3, #24
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	2b01      	cmp	r3, #1
 8001554:	d10b      	bne.n	800156e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800155e:	0fdb      	lsrs	r3, r3, #31
 8001560:	f003 0301 	and.w	r3, r3, #1
 8001564:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001568:	d101      	bne.n	800156e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800156a:	2301      	movs	r3, #1
 800156c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800157c:	69fa      	ldr	r2, [r7, #28]
 800157e:	4413      	add	r3, r2
 8001580:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158a:	69f9      	ldr	r1, [r7, #28]
 800158c:	fb01 f303 	mul.w	r3, r1, r3
 8001590:	009b      	lsls	r3, r3, #2
 8001592:	4413      	add	r3, r2
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
 8001596:	e069      	b.n	800166c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b41      	cmp	r3, #65	; 0x41
 800159c:	d14d      	bne.n	800163a <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d109      	bne.n	80015c2 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015b4:	f043 0220 	orr.w	r2, r3, #32
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	e0ed      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d109      	bne.n	80015e6 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e0db      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015ee:	0e1b      	lsrs	r3, r3, #24
 80015f0:	f003 0301 	and.w	r3, r3, #1
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d10b      	bne.n	8001610 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001600:	0fdb      	lsrs	r3, r3, #31
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800160a:	d101      	bne.n	8001610 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800160c:	2301      	movs	r3, #1
 800160e:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001618:	0a1b      	lsrs	r3, r3, #8
 800161a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800161e:	69fa      	ldr	r2, [r7, #28]
 8001620:	4413      	add	r3, r2
 8001622:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	69f9      	ldr	r1, [r7, #28]
 800162e:	fb01 f303 	mul.w	r3, r1, r3
 8001632:	009b      	lsls	r3, r3, #2
 8001634:	4413      	add	r3, r2
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
 8001638:	e018      	b.n	800166c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800163e:	68ba      	ldr	r2, [r7, #8]
 8001640:	429a      	cmp	r2, r3
 8001642:	d309      	bcc.n	8001658 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800164a:	f043 0220 	orr.w	r2, r3, #32
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e0a2      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001660:	68b9      	ldr	r1, [r7, #8]
 8001662:	fb01 f303 	mul.w	r3, r1, r3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	4413      	add	r3, r2
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800166c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d107      	bne.n	8001690 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	0c9b      	lsrs	r3, r3, #18
 8001686:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	601a      	str	r2, [r3, #0]
 800168e:	e005      	b.n	800169c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800169c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80016a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80016b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b6:	3304      	adds	r3, #4
 80016b8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	b29a      	uxth	r2, r3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80016c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80016d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80016dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80016e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	0e1b      	lsrs	r3, r3, #24
 80016ee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	0fda      	lsrs	r2, r3, #31
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	3304      	adds	r3, #4
 8001704:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001708:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800170a:	2300      	movs	r3, #0
 800170c:	623b      	str	r3, [r7, #32]
 800170e:	e00a      	b.n	8001726 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	6a3b      	ldr	r3, [r7, #32]
 8001714:	441a      	add	r2, r3
 8001716:	6839      	ldr	r1, [r7, #0]
 8001718:	6a3b      	ldr	r3, [r7, #32]
 800171a:	440b      	add	r3, r1
 800171c:	7812      	ldrb	r2, [r2, #0]
 800171e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001720:	6a3b      	ldr	r3, [r7, #32]
 8001722:	3301      	adds	r3, #1
 8001724:	623b      	str	r3, [r7, #32]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	68db      	ldr	r3, [r3, #12]
 800172a:	0c1b      	lsrs	r3, r3, #16
 800172c:	4a1f      	ldr	r2, [pc, #124]	; (80017ac <HAL_FDCAN_GetRxMessage+0x2d8>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	461a      	mov	r2, r3
 8001732:	6a3b      	ldr	r3, [r7, #32]
 8001734:	4293      	cmp	r3, r2
 8001736:	d3eb      	bcc.n	8001710 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001738:	68bb      	ldr	r3, [r7, #8]
 800173a:	2b40      	cmp	r3, #64	; 0x40
 800173c:	d105      	bne.n	800174a <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001748:	e01e      	b.n	8001788 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	2b41      	cmp	r3, #65	; 0x41
 800174e:	d105      	bne.n	800175c <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 800175a:	e015      	b.n	8001788 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 800175c:	68bb      	ldr	r3, [r7, #8]
 800175e:	2b1f      	cmp	r3, #31
 8001760:	d808      	bhi.n	8001774 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2101      	movs	r1, #1
 8001768:	68ba      	ldr	r2, [r7, #8]
 800176a:	fa01 f202 	lsl.w	r2, r1, r2
 800176e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001772:	e009      	b.n	8001788 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	f003 021f 	and.w	r2, r3, #31
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2101      	movs	r1, #1
 8001780:	fa01 f202 	lsl.w	r2, r1, r2
 8001784:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001788:	2300      	movs	r3, #0
 800178a:	e008      	b.n	800179e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001792:	f043 0208 	orr.w	r2, r3, #8
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
  }
}
 800179e:	4618      	mov	r0, r3
 80017a0:	372c      	adds	r7, #44	; 0x2c
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	08009724 	.word	0x08009724

080017b0 <HAL_FDCAN_GetErrorCounters>:
  *         the configuration information for the specified FDCAN.
  * @param  ErrorCounters pointer to an FDCAN_ErrorCountersTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetErrorCounters(FDCAN_HandleTypeDef *hfdcan, FDCAN_ErrorCountersTypeDef *ErrorCounters)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
 80017b8:	6039      	str	r1, [r7, #0]
  uint32_t CountersReg;

  /* Read the error counters register */
  CountersReg = READ_REG(hfdcan->Instance->ECR);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	60fb      	str	r3, [r7, #12]

  /* Fill the error counters structure */
  ErrorCounters->TxErrorCnt = ((CountersReg & FDCAN_ECR_TEC) >> FDCAN_ECR_TEC_Pos);
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	b2da      	uxtb	r2, r3
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	601a      	str	r2, [r3, #0]
  ErrorCounters->RxErrorCnt = ((CountersReg & FDCAN_ECR_REC) >> FDCAN_ECR_REC_Pos);
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	0a1b      	lsrs	r3, r3, #8
 80017ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	605a      	str	r2, [r3, #4]
  ErrorCounters->RxErrorPassive = ((CountersReg & FDCAN_ECR_RP) >> FDCAN_ECR_RP_Pos);
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	0bdb      	lsrs	r3, r3, #15
 80017da:	f003 0201 	and.w	r2, r3, #1
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	609a      	str	r2, [r3, #8]
  ErrorCounters->ErrorLogging = ((CountersReg & FDCAN_ECR_CEL) >> FDCAN_ECR_CEL_Pos);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	0c1b      	lsrs	r3, r3, #16
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 80017ec:	2300      	movs	r3, #0
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3714      	adds	r7, #20
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr
	...

080017fc <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001808:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001812:	4ba7      	ldr	r3, [pc, #668]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001814:	4013      	ands	r3, r2
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	0091      	lsls	r1, r2, #2
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	6812      	ldr	r2, [r2, #0]
 800181e:	430b      	orrs	r3, r1
 8001820:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800182c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001834:	041a      	lsls	r2, r3, #16
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	430a      	orrs	r2, r1
 800183c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4413      	add	r3, r2
 8001848:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001852:	4b97      	ldr	r3, [pc, #604]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001854:	4013      	ands	r3, r2
 8001856:	68ba      	ldr	r2, [r7, #8]
 8001858:	0091      	lsls	r1, r2, #2
 800185a:	687a      	ldr	r2, [r7, #4]
 800185c:	6812      	ldr	r2, [r2, #0]
 800185e:	430b      	orrs	r3, r1
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001874:	041a      	lsls	r2, r3, #16
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	68ba      	ldr	r2, [r7, #8]
 8001888:	4413      	add	r3, r2
 800188a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001894:	4b86      	ldr	r3, [pc, #536]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001896:	4013      	ands	r3, r2
 8001898:	68ba      	ldr	r2, [r7, #8]
 800189a:	0091      	lsls	r1, r2, #2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6812      	ldr	r2, [r2, #0]
 80018a0:	430b      	orrs	r3, r1
 80018a2:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80018ae:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b6:	041a      	lsls	r2, r3, #16
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	4413      	add	r3, r2
 80018d2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80018dc:	4b74      	ldr	r3, [pc, #464]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80018de:	4013      	ands	r3, r2
 80018e0:	68ba      	ldr	r2, [r7, #8]
 80018e2:	0091      	lsls	r1, r2, #2
 80018e4:	687a      	ldr	r2, [r7, #4]
 80018e6:	6812      	ldr	r2, [r2, #0]
 80018e8:	430b      	orrs	r3, r1
 80018ea:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80018f6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018fe:	041a      	lsls	r2, r3, #16
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	430a      	orrs	r2, r1
 8001906:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001912:	fb02 f303 	mul.w	r3, r2, r3
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	4413      	add	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001924:	4b62      	ldr	r3, [pc, #392]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001926:	4013      	ands	r3, r2
 8001928:	68ba      	ldr	r2, [r7, #8]
 800192a:	0091      	lsls	r1, r2, #2
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	430b      	orrs	r3, r1
 8001932:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800193a:	687a      	ldr	r2, [r7, #4]
 800193c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	4413      	add	r3, r2
 8001946:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001950:	4b57      	ldr	r3, [pc, #348]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001952:	4013      	ands	r3, r2
 8001954:	68ba      	ldr	r2, [r7, #8]
 8001956:	0091      	lsls	r1, r2, #2
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	6812      	ldr	r2, [r2, #0]
 800195c:	430b      	orrs	r3, r1
 800195e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800196a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001972:	041a      	lsls	r2, r3, #16
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001982:	005b      	lsls	r3, r3, #1
 8001984:	68ba      	ldr	r2, [r7, #8]
 8001986:	4413      	add	r3, r2
 8001988:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001992:	4b47      	ldr	r3, [pc, #284]	; (8001ab0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001994:	4013      	ands	r3, r2
 8001996:	68ba      	ldr	r2, [r7, #8]
 8001998:	0091      	lsls	r1, r2, #2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6812      	ldr	r2, [r2, #0]
 800199e:	430b      	orrs	r3, r1
 80019a0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019ac:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b4:	041a      	lsls	r2, r3, #16
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	430a      	orrs	r2, r1
 80019bc:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019c8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019d0:	061a      	lsls	r2, r3, #24
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	430a      	orrs	r2, r1
 80019d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e0:	4b34      	ldr	r3, [pc, #208]	; (8001ab4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80019e2:	4413      	add	r3, r2
 80019e4:	009a      	lsls	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	441a      	add	r2, r3
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a02:	00db      	lsls	r3, r3, #3
 8001a04:	441a      	add	r2, r3
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a12:	6879      	ldr	r1, [r7, #4]
 8001a14:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001a16:	fb01 f303 	mul.w	r3, r1, r3
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	441a      	add	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001a2e:	fb01 f303 	mul.w	r3, r1, r3
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	441a      	add	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001a42:	6879      	ldr	r1, [r7, #4]
 8001a44:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	441a      	add	r2, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5e:	00db      	lsls	r3, r3, #3
 8001a60:	441a      	add	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	441a      	add	r2, r3
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a8e:	6879      	ldr	r1, [r7, #4]
 8001a90:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001a92:	fb01 f303 	mul.w	r3, r1, r3
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	441a      	add	r2, r3
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d915      	bls.n	8001ad8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001aac:	e006      	b.n	8001abc <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001aae:	bf00      	nop
 8001ab0:	ffff0003 	.word	0xffff0003
 8001ab4:	10002b00 	.word	0x10002b00
 8001ab8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ac2:	f043 0220 	orr.w	r2, r3, #32
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2203      	movs	r2, #3
 8001ad0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e010      	b.n	8001afa <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	e005      	b.n	8001aec <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	3304      	adds	r3, #4
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d3f3      	bcc.n	8001ae0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop

08001b08 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	; 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
 8001b14:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8001b26:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b2e:	4313      	orrs	r3, r2
 8001b30:	61fb      	str	r3, [r7, #28]
 8001b32:	e00a      	b.n	8001b4a <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b34:	68bb      	ldr	r3, [r7, #8]
 8001b36:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8001b3c:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 8001b42:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8001b44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b48:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001b4a:	68bb      	ldr	r3, [r7, #8]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001b54:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8001b5a:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8001b60:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8001b66:	4313      	orrs	r3, r2
 8001b68:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001b74:	6839      	ldr	r1, [r7, #0]
 8001b76:	fb01 f303 	mul.w	r3, r1, r3
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	4413      	add	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	69fa      	ldr	r2, [r7, #28]
 8001b84:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	3304      	adds	r3, #4
 8001b8a:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	601a      	str	r2, [r3, #0]
  TxAddress++;
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	3304      	adds	r3, #4
 8001b96:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	e020      	b.n	8001be0 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	3303      	adds	r3, #3
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	3302      	adds	r3, #2
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	440b      	add	r3, r1
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001bb6:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001bb8:	697b      	ldr	r3, [r7, #20]
 8001bba:	3301      	adds	r3, #1
 8001bbc:	6879      	ldr	r1, [r7, #4]
 8001bbe:	440b      	add	r3, r1
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8001bc4:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	440a      	add	r2, r1
 8001bcc:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8001bce:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8001bd4:	69bb      	ldr	r3, [r7, #24]
 8001bd6:	3304      	adds	r3, #4
 8001bd8:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	3304      	adds	r3, #4
 8001bde:	617b      	str	r3, [r7, #20]
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0c1b      	lsrs	r3, r3, #16
 8001be6:	4a06      	ldr	r2, [pc, #24]	; (8001c00 <FDCAN_CopyMessageToRAM+0xf8>)
 8001be8:	5cd3      	ldrb	r3, [r2, r3]
 8001bea:	461a      	mov	r2, r3
 8001bec:	697b      	ldr	r3, [r7, #20]
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d3d5      	bcc.n	8001b9e <FDCAN_CopyMessageToRAM+0x96>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	bf00      	nop
 8001bf6:	3724      	adds	r7, #36	; 0x24
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	08009724 	.word	0x08009724

08001c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b089      	sub	sp, #36	; 0x24
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001c12:	4b89      	ldr	r3, [pc, #548]	; (8001e38 <HAL_GPIO_Init+0x234>)
 8001c14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c16:	e194      	b.n	8001f42 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	2101      	movs	r1, #1
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	fa01 f303 	lsl.w	r3, r1, r3
 8001c24:	4013      	ands	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001c28:	693b      	ldr	r3, [r7, #16]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 8186 	beq.w	8001f3c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d005      	beq.n	8001c48 <HAL_GPIO_Init+0x44>
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d130      	bne.n	8001caa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	2203      	movs	r2, #3
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	68da      	ldr	r2, [r3, #12]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c7e:	2201      	movs	r2, #1
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	fa02 f303 	lsl.w	r3, r2, r3
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 0201 	and.w	r2, r3, #1
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b03      	cmp	r3, #3
 8001cb4:	d017      	beq.n	8001ce6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	68db      	ldr	r3, [r3, #12]
 8001cba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	2203      	movs	r2, #3
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43db      	mvns	r3, r3
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	4013      	ands	r3, r2
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	689a      	ldr	r2, [r3, #8]
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	005b      	lsls	r3, r3, #1
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f003 0303 	and.w	r3, r3, #3
 8001cee:	2b02      	cmp	r3, #2
 8001cf0:	d123      	bne.n	8001d3a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	08da      	lsrs	r2, r3, #3
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3208      	adds	r2, #8
 8001cfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d00:	69fb      	ldr	r3, [r7, #28]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	220f      	movs	r2, #15
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4013      	ands	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	691a      	ldr	r2, [r3, #16]
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f003 0307 	and.w	r3, r3, #7
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	69ba      	ldr	r2, [r7, #24]
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	08da      	lsrs	r2, r3, #3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3208      	adds	r2, #8
 8001d34:	69b9      	ldr	r1, [r7, #24]
 8001d36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	2203      	movs	r2, #3
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0203 	and.w	r2, r3, #3
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	f000 80e0 	beq.w	8001f3c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7c:	4b2f      	ldr	r3, [pc, #188]	; (8001e3c <HAL_GPIO_Init+0x238>)
 8001d7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d82:	4a2e      	ldr	r2, [pc, #184]	; (8001e3c <HAL_GPIO_Init+0x238>)
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001d8c:	4b2b      	ldr	r3, [pc, #172]	; (8001e3c <HAL_GPIO_Init+0x238>)
 8001d8e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9a:	4a29      	ldr	r2, [pc, #164]	; (8001e40 <HAL_GPIO_Init+0x23c>)
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	089b      	lsrs	r3, r3, #2
 8001da0:	3302      	adds	r3, #2
 8001da2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001da6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	f003 0303 	and.w	r3, r3, #3
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	220f      	movs	r2, #15
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	69ba      	ldr	r2, [r7, #24]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a20      	ldr	r2, [pc, #128]	; (8001e44 <HAL_GPIO_Init+0x240>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d052      	beq.n	8001e6c <HAL_GPIO_Init+0x268>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a1f      	ldr	r2, [pc, #124]	; (8001e48 <HAL_GPIO_Init+0x244>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d031      	beq.n	8001e32 <HAL_GPIO_Init+0x22e>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1e      	ldr	r2, [pc, #120]	; (8001e4c <HAL_GPIO_Init+0x248>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d02b      	beq.n	8001e2e <HAL_GPIO_Init+0x22a>
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4a1d      	ldr	r2, [pc, #116]	; (8001e50 <HAL_GPIO_Init+0x24c>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d025      	beq.n	8001e2a <HAL_GPIO_Init+0x226>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a1c      	ldr	r2, [pc, #112]	; (8001e54 <HAL_GPIO_Init+0x250>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01f      	beq.n	8001e26 <HAL_GPIO_Init+0x222>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a1b      	ldr	r2, [pc, #108]	; (8001e58 <HAL_GPIO_Init+0x254>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d019      	beq.n	8001e22 <HAL_GPIO_Init+0x21e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a1a      	ldr	r2, [pc, #104]	; (8001e5c <HAL_GPIO_Init+0x258>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d013      	beq.n	8001e1e <HAL_GPIO_Init+0x21a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a19      	ldr	r2, [pc, #100]	; (8001e60 <HAL_GPIO_Init+0x25c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d00d      	beq.n	8001e1a <HAL_GPIO_Init+0x216>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a18      	ldr	r2, [pc, #96]	; (8001e64 <HAL_GPIO_Init+0x260>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d007      	beq.n	8001e16 <HAL_GPIO_Init+0x212>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a17      	ldr	r2, [pc, #92]	; (8001e68 <HAL_GPIO_Init+0x264>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d101      	bne.n	8001e12 <HAL_GPIO_Init+0x20e>
 8001e0e:	2309      	movs	r3, #9
 8001e10:	e02d      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e12:	230a      	movs	r3, #10
 8001e14:	e02b      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e16:	2308      	movs	r3, #8
 8001e18:	e029      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e1a:	2307      	movs	r3, #7
 8001e1c:	e027      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e025      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e023      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e021      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e01f      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e01d      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e01b      	b.n	8001e6e <HAL_GPIO_Init+0x26a>
 8001e36:	bf00      	nop
 8001e38:	58000080 	.word	0x58000080
 8001e3c:	58024400 	.word	0x58024400
 8001e40:	58000400 	.word	0x58000400
 8001e44:	58020000 	.word	0x58020000
 8001e48:	58020400 	.word	0x58020400
 8001e4c:	58020800 	.word	0x58020800
 8001e50:	58020c00 	.word	0x58020c00
 8001e54:	58021000 	.word	0x58021000
 8001e58:	58021400 	.word	0x58021400
 8001e5c:	58021800 	.word	0x58021800
 8001e60:	58021c00 	.word	0x58021c00
 8001e64:	58022000 	.word	0x58022000
 8001e68:	58022400 	.word	0x58022400
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	69fa      	ldr	r2, [r7, #28]
 8001e70:	f002 0203 	and.w	r2, r2, #3
 8001e74:	0092      	lsls	r2, r2, #2
 8001e76:	4093      	lsls	r3, r2
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e7e:	4938      	ldr	r1, [pc, #224]	; (8001f60 <HAL_GPIO_Init+0x35c>)
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	089b      	lsrs	r3, r3, #2
 8001e84:	3302      	adds	r3, #2
 8001e86:	69ba      	ldr	r2, [r7, #24]
 8001e88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001eb2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001eba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4013      	ands	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d003      	beq.n	8001ee0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4313      	orrs	r3, r2
 8001ede:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ee0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001ee4:	69bb      	ldr	r3, [r7, #24]
 8001ee6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d003      	beq.n	8001f0c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	69fb      	ldr	r3, [r7, #28]
 8001f48:	fa22 f303 	lsr.w	r3, r2, r3
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	f47f ae63 	bne.w	8001c18 <HAL_GPIO_Init+0x14>
  }
}
 8001f52:	bf00      	nop
 8001f54:	bf00      	nop
 8001f56:	3724      	adds	r7, #36	; 0x24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	58000400 	.word	0x58000400

08001f64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	460b      	mov	r3, r1
 8001f6e:	807b      	strh	r3, [r7, #2]
 8001f70:	4613      	mov	r3, r2
 8001f72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f74:	787b      	ldrb	r3, [r7, #1]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d003      	beq.n	8001f82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f7a:	887a      	ldrh	r2, [r7, #2]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001f80:	e003      	b.n	8001f8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001f82:	887b      	ldrh	r3, [r7, #2]
 8001f84:	041a      	lsls	r2, r3, #16
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	619a      	str	r2, [r3, #24]
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8001fa0:	4b19      	ldr	r3, [pc, #100]	; (8002008 <HAL_PWREx_ConfigSupply+0x70>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b04      	cmp	r3, #4
 8001faa:	d00a      	beq.n	8001fc2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001fac:	4b16      	ldr	r3, [pc, #88]	; (8002008 <HAL_PWREx_ConfigSupply+0x70>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d001      	beq.n	8001fbe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e01f      	b.n	8001ffe <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	e01d      	b.n	8001ffe <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_PWREx_ConfigSupply+0x70>)
 8001fc4:	68db      	ldr	r3, [r3, #12]
 8001fc6:	f023 0207 	bic.w	r2, r3, #7
 8001fca:	490f      	ldr	r1, [pc, #60]	; (8002008 <HAL_PWREx_ConfigSupply+0x70>)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001fd2:	f7fe fe53 	bl	8000c7c <HAL_GetTick>
 8001fd6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fd8:	e009      	b.n	8001fee <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001fda:	f7fe fe4f 	bl	8000c7c <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001fe8:	d901      	bls.n	8001fee <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e007      	b.n	8001ffe <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001fee:	4b06      	ldr	r3, [pc, #24]	; (8002008 <HAL_PWREx_ConfigSupply+0x70>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ff6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ffa:	d1ee      	bne.n	8001fda <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	58024800 	.word	0x58024800

0800200c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08c      	sub	sp, #48	; 0x30
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d102      	bne.n	8002020 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f000 bc48 	b.w	80028b0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b00      	cmp	r3, #0
 800202a:	f000 8088 	beq.w	800213e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800202e:	4b99      	ldr	r3, [pc, #612]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002036:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002038:	4b96      	ldr	r3, [pc, #600]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 800203a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800203c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800203e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002040:	2b10      	cmp	r3, #16
 8002042:	d007      	beq.n	8002054 <HAL_RCC_OscConfig+0x48>
 8002044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002046:	2b18      	cmp	r3, #24
 8002048:	d111      	bne.n	800206e <HAL_RCC_OscConfig+0x62>
 800204a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d10c      	bne.n	800206e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002054:	4b8f      	ldr	r3, [pc, #572]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d06d      	beq.n	800213c <HAL_RCC_OscConfig+0x130>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d169      	bne.n	800213c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002068:	2301      	movs	r3, #1
 800206a:	f000 bc21 	b.w	80028b0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002076:	d106      	bne.n	8002086 <HAL_RCC_OscConfig+0x7a>
 8002078:	4b86      	ldr	r3, [pc, #536]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a85      	ldr	r2, [pc, #532]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 800207e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002082:	6013      	str	r3, [r2, #0]
 8002084:	e02e      	b.n	80020e4 <HAL_RCC_OscConfig+0xd8>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d10c      	bne.n	80020a8 <HAL_RCC_OscConfig+0x9c>
 800208e:	4b81      	ldr	r3, [pc, #516]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a80      	ldr	r2, [pc, #512]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	4b7e      	ldr	r3, [pc, #504]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7d      	ldr	r2, [pc, #500]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80020a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	e01d      	b.n	80020e4 <HAL_RCC_OscConfig+0xd8>
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020b0:	d10c      	bne.n	80020cc <HAL_RCC_OscConfig+0xc0>
 80020b2:	4b78      	ldr	r3, [pc, #480]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a77      	ldr	r2, [pc, #476]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80020b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	4b75      	ldr	r3, [pc, #468]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a74      	ldr	r2, [pc, #464]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80020c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e00b      	b.n	80020e4 <HAL_RCC_OscConfig+0xd8>
 80020cc:	4b71      	ldr	r3, [pc, #452]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a70      	ldr	r2, [pc, #448]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80020d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d6:	6013      	str	r3, [r2, #0]
 80020d8:	4b6e      	ldr	r3, [pc, #440]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a6d      	ldr	r2, [pc, #436]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80020de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d013      	beq.n	8002114 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7fe fdc6 	bl	8000c7c <HAL_GetTick>
 80020f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020f2:	e008      	b.n	8002106 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020f4:	f7fe fdc2 	bl	8000c7c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b64      	cmp	r3, #100	; 0x64
 8002100:	d901      	bls.n	8002106 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	e3d4      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002106:	4b63      	ldr	r3, [pc, #396]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d0f0      	beq.n	80020f4 <HAL_RCC_OscConfig+0xe8>
 8002112:	e014      	b.n	800213e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002114:	f7fe fdb2 	bl	8000c7c <HAL_GetTick>
 8002118:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800211a:	e008      	b.n	800212e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800211c:	f7fe fdae 	bl	8000c7c <HAL_GetTick>
 8002120:	4602      	mov	r2, r0
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	2b64      	cmp	r3, #100	; 0x64
 8002128:	d901      	bls.n	800212e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e3c0      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800212e:	4b59      	ldr	r3, [pc, #356]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f0      	bne.n	800211c <HAL_RCC_OscConfig+0x110>
 800213a:	e000      	b.n	800213e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800213c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0302 	and.w	r3, r3, #2
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 80ca 	beq.w	80022e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800214c:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002154:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002156:	4b4f      	ldr	r3, [pc, #316]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800215c:	6a3b      	ldr	r3, [r7, #32]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <HAL_RCC_OscConfig+0x166>
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	2b18      	cmp	r3, #24
 8002166:	d156      	bne.n	8002216 <HAL_RCC_OscConfig+0x20a>
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d151      	bne.n	8002216 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002172:	4b48      	ldr	r3, [pc, #288]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	d005      	beq.n	800218a <HAL_RCC_OscConfig+0x17e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d101      	bne.n	800218a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e392      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800218a:	4b42      	ldr	r3, [pc, #264]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 0219 	bic.w	r2, r3, #25
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	493f      	ldr	r1, [pc, #252]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002198:	4313      	orrs	r3, r2
 800219a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219c:	f7fe fd6e 	bl	8000c7c <HAL_GetTick>
 80021a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021a4:	f7fe fd6a 	bl	8000c7c <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e37c      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0304 	and.w	r3, r3, #4
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0f0      	beq.n	80021a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021c2:	f7fe fd8b 	bl	8000cdc <HAL_GetREVID>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f241 0203 	movw	r2, #4099	; 0x1003
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d817      	bhi.n	8002200 <HAL_RCC_OscConfig+0x1f4>
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b40      	cmp	r3, #64	; 0x40
 80021d6:	d108      	bne.n	80021ea <HAL_RCC_OscConfig+0x1de>
 80021d8:	4b2e      	ldr	r3, [pc, #184]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80021e0:	4a2c      	ldr	r2, [pc, #176]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80021e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e8:	e07a      	b.n	80022e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021ea:	4b2a      	ldr	r3, [pc, #168]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	691b      	ldr	r3, [r3, #16]
 80021f6:	031b      	lsls	r3, r3, #12
 80021f8:	4926      	ldr	r1, [pc, #152]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 80021fa:	4313      	orrs	r3, r2
 80021fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021fe:	e06f      	b.n	80022e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002200:	4b24      	ldr	r3, [pc, #144]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	061b      	lsls	r3, r3, #24
 800220e:	4921      	ldr	r1, [pc, #132]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002210:	4313      	orrs	r3, r2
 8002212:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002214:	e064      	b.n	80022e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d047      	beq.n	80022ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800221e:	4b1d      	ldr	r3, [pc, #116]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f023 0219 	bic.w	r2, r3, #25
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	491a      	ldr	r1, [pc, #104]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 800222c:	4313      	orrs	r3, r2
 800222e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002230:	f7fe fd24 	bl	8000c7c <HAL_GetTick>
 8002234:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002238:	f7fe fd20 	bl	8000c7c <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b02      	cmp	r3, #2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e332      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0304 	and.w	r3, r3, #4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d0f0      	beq.n	8002238 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002256:	f7fe fd41 	bl	8000cdc <HAL_GetREVID>
 800225a:	4603      	mov	r3, r0
 800225c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002260:	4293      	cmp	r3, r2
 8002262:	d819      	bhi.n	8002298 <HAL_RCC_OscConfig+0x28c>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	691b      	ldr	r3, [r3, #16]
 8002268:	2b40      	cmp	r3, #64	; 0x40
 800226a:	d108      	bne.n	800227e <HAL_RCC_OscConfig+0x272>
 800226c:	4b09      	ldr	r3, [pc, #36]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002274:	4a07      	ldr	r2, [pc, #28]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002276:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800227a:	6053      	str	r3, [r2, #4]
 800227c:	e030      	b.n	80022e0 <HAL_RCC_OscConfig+0x2d4>
 800227e:	4b05      	ldr	r3, [pc, #20]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	031b      	lsls	r3, r3, #12
 800228c:	4901      	ldr	r1, [pc, #4]	; (8002294 <HAL_RCC_OscConfig+0x288>)
 800228e:	4313      	orrs	r3, r2
 8002290:	604b      	str	r3, [r1, #4]
 8002292:	e025      	b.n	80022e0 <HAL_RCC_OscConfig+0x2d4>
 8002294:	58024400 	.word	0x58024400
 8002298:	4b9a      	ldr	r3, [pc, #616]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	691b      	ldr	r3, [r3, #16]
 80022a4:	061b      	lsls	r3, r3, #24
 80022a6:	4997      	ldr	r1, [pc, #604]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022a8:	4313      	orrs	r3, r2
 80022aa:	604b      	str	r3, [r1, #4]
 80022ac:	e018      	b.n	80022e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022ae:	4b95      	ldr	r3, [pc, #596]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a94      	ldr	r2, [pc, #592]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022b4:	f023 0301 	bic.w	r3, r3, #1
 80022b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ba:	f7fe fcdf 	bl	8000c7c <HAL_GetTick>
 80022be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022c0:	e008      	b.n	80022d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022c2:	f7fe fcdb 	bl	8000c7c <HAL_GetTick>
 80022c6:	4602      	mov	r2, r0
 80022c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ca:	1ad3      	subs	r3, r2, r3
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e2ed      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80022d4:	4b8b      	ldr	r3, [pc, #556]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0304 	and.w	r3, r3, #4
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1f0      	bne.n	80022c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0310 	and.w	r3, r3, #16
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 80a9 	beq.w	8002440 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ee:	4b85      	ldr	r3, [pc, #532]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80022f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80022f8:	4b82      	ldr	r3, [pc, #520]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80022fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	2b08      	cmp	r3, #8
 8002302:	d007      	beq.n	8002314 <HAL_RCC_OscConfig+0x308>
 8002304:	69bb      	ldr	r3, [r7, #24]
 8002306:	2b18      	cmp	r3, #24
 8002308:	d13a      	bne.n	8002380 <HAL_RCC_OscConfig+0x374>
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	f003 0303 	and.w	r3, r3, #3
 8002310:	2b01      	cmp	r3, #1
 8002312:	d135      	bne.n	8002380 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002314:	4b7b      	ldr	r3, [pc, #492]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800231c:	2b00      	cmp	r3, #0
 800231e:	d005      	beq.n	800232c <HAL_RCC_OscConfig+0x320>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	69db      	ldr	r3, [r3, #28]
 8002324:	2b80      	cmp	r3, #128	; 0x80
 8002326:	d001      	beq.n	800232c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e2c1      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800232c:	f7fe fcd6 	bl	8000cdc <HAL_GetREVID>
 8002330:	4603      	mov	r3, r0
 8002332:	f241 0203 	movw	r2, #4099	; 0x1003
 8002336:	4293      	cmp	r3, r2
 8002338:	d817      	bhi.n	800236a <HAL_RCC_OscConfig+0x35e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
 800233e:	2b20      	cmp	r3, #32
 8002340:	d108      	bne.n	8002354 <HAL_RCC_OscConfig+0x348>
 8002342:	4b70      	ldr	r3, [pc, #448]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800234a:	4a6e      	ldr	r2, [pc, #440]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 800234c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002350:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002352:	e075      	b.n	8002440 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002354:	4b6b      	ldr	r3, [pc, #428]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	069b      	lsls	r3, r3, #26
 8002362:	4968      	ldr	r1, [pc, #416]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 8002364:	4313      	orrs	r3, r2
 8002366:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002368:	e06a      	b.n	8002440 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800236a:	4b66      	ldr	r3, [pc, #408]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 800236c:	68db      	ldr	r3, [r3, #12]
 800236e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	061b      	lsls	r3, r3, #24
 8002378:	4962      	ldr	r1, [pc, #392]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 800237a:	4313      	orrs	r3, r2
 800237c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800237e:	e05f      	b.n	8002440 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d042      	beq.n	800240e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002388:	4b5e      	ldr	r3, [pc, #376]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a5d      	ldr	r2, [pc, #372]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 800238e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002394:	f7fe fc72 	bl	8000c7c <HAL_GetTick>
 8002398:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800239c:	f7fe fc6e 	bl	8000c7c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e280      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80023ae:	4b55      	ldr	r3, [pc, #340]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d0f0      	beq.n	800239c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80023ba:	f7fe fc8f 	bl	8000cdc <HAL_GetREVID>
 80023be:	4603      	mov	r3, r0
 80023c0:	f241 0203 	movw	r2, #4099	; 0x1003
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d817      	bhi.n	80023f8 <HAL_RCC_OscConfig+0x3ec>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a1b      	ldr	r3, [r3, #32]
 80023cc:	2b20      	cmp	r3, #32
 80023ce:	d108      	bne.n	80023e2 <HAL_RCC_OscConfig+0x3d6>
 80023d0:	4b4c      	ldr	r3, [pc, #304]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80023d8:	4a4a      	ldr	r2, [pc, #296]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80023da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80023de:	6053      	str	r3, [r2, #4]
 80023e0:	e02e      	b.n	8002440 <HAL_RCC_OscConfig+0x434>
 80023e2:	4b48      	ldr	r3, [pc, #288]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80023e4:	685b      	ldr	r3, [r3, #4]
 80023e6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	069b      	lsls	r3, r3, #26
 80023f0:	4944      	ldr	r1, [pc, #272]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	604b      	str	r3, [r1, #4]
 80023f6:	e023      	b.n	8002440 <HAL_RCC_OscConfig+0x434>
 80023f8:	4b42      	ldr	r3, [pc, #264]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a1b      	ldr	r3, [r3, #32]
 8002404:	061b      	lsls	r3, r3, #24
 8002406:	493f      	ldr	r1, [pc, #252]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 8002408:	4313      	orrs	r3, r2
 800240a:	60cb      	str	r3, [r1, #12]
 800240c:	e018      	b.n	8002440 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800240e:	4b3d      	ldr	r3, [pc, #244]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3c      	ldr	r2, [pc, #240]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 8002414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800241a:	f7fe fc2f 	bl	8000c7c <HAL_GetTick>
 800241e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002422:	f7fe fc2b 	bl	8000c7c <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e23d      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002434:	4b33      	ldr	r3, [pc, #204]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1f0      	bne.n	8002422 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0308 	and.w	r3, r3, #8
 8002448:	2b00      	cmp	r3, #0
 800244a:	d036      	beq.n	80024ba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d019      	beq.n	8002488 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002454:	4b2b      	ldr	r3, [pc, #172]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 8002456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002458:	4a2a      	ldr	r2, [pc, #168]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 800245a:	f043 0301 	orr.w	r3, r3, #1
 800245e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002460:	f7fe fc0c 	bl	8000c7c <HAL_GetTick>
 8002464:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002466:	e008      	b.n	800247a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002468:	f7fe fc08 	bl	8000c7c <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	2b02      	cmp	r3, #2
 8002474:	d901      	bls.n	800247a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002476:	2303      	movs	r3, #3
 8002478:	e21a      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800247a:	4b22      	ldr	r3, [pc, #136]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 800247c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b00      	cmp	r3, #0
 8002484:	d0f0      	beq.n	8002468 <HAL_RCC_OscConfig+0x45c>
 8002486:	e018      	b.n	80024ba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 800248a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800248c:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 800248e:	f023 0301 	bic.w	r3, r3, #1
 8002492:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7fe fbf2 	bl	8000c7c <HAL_GetTick>
 8002498:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800249c:	f7fe fbee 	bl	8000c7c <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e200      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80024ae:	4b15      	ldr	r3, [pc, #84]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80024b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0320 	and.w	r3, r3, #32
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d039      	beq.n	800253a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d01c      	beq.n	8002508 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024ce:	4b0d      	ldr	r3, [pc, #52]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a0c      	ldr	r2, [pc, #48]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80024d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80024d8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80024da:	f7fe fbcf 	bl	8000c7c <HAL_GetTick>
 80024de:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024e0:	e008      	b.n	80024f4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024e2:	f7fe fbcb 	bl	8000c7c <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d901      	bls.n	80024f4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80024f0:	2303      	movs	r3, #3
 80024f2:	e1dd      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80024f4:	4b03      	ldr	r3, [pc, #12]	; (8002504 <HAL_RCC_OscConfig+0x4f8>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d0f0      	beq.n	80024e2 <HAL_RCC_OscConfig+0x4d6>
 8002500:	e01b      	b.n	800253a <HAL_RCC_OscConfig+0x52e>
 8002502:	bf00      	nop
 8002504:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002508:	4b9b      	ldr	r3, [pc, #620]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a9a      	ldr	r2, [pc, #616]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 800250e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002512:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002514:	f7fe fbb2 	bl	8000c7c <HAL_GetTick>
 8002518:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800251c:	f7fe fbae 	bl	8000c7c <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e1c0      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800252e:	4b92      	ldr	r3, [pc, #584]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	f000 8081 	beq.w	800264a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002548:	4b8c      	ldr	r3, [pc, #560]	; (800277c <HAL_RCC_OscConfig+0x770>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a8b      	ldr	r2, [pc, #556]	; (800277c <HAL_RCC_OscConfig+0x770>)
 800254e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002552:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002554:	f7fe fb92 	bl	8000c7c <HAL_GetTick>
 8002558:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800255c:	f7fe fb8e 	bl	8000c7c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1a0      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800256e:	4b83      	ldr	r3, [pc, #524]	; (800277c <HAL_RCC_OscConfig+0x770>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002576:	2b00      	cmp	r3, #0
 8002578:	d0f0      	beq.n	800255c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x584>
 8002582:	4b7d      	ldr	r3, [pc, #500]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002584:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002586:	4a7c      	ldr	r2, [pc, #496]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6713      	str	r3, [r2, #112]	; 0x70
 800258e:	e02d      	b.n	80025ec <HAL_RCC_OscConfig+0x5e0>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d10c      	bne.n	80025b2 <HAL_RCC_OscConfig+0x5a6>
 8002598:	4b77      	ldr	r3, [pc, #476]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 800259a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259c:	4a76      	ldr	r2, [pc, #472]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 800259e:	f023 0301 	bic.w	r3, r3, #1
 80025a2:	6713      	str	r3, [r2, #112]	; 0x70
 80025a4:	4b74      	ldr	r3, [pc, #464]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	4a73      	ldr	r2, [pc, #460]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80025aa:	f023 0304 	bic.w	r3, r3, #4
 80025ae:	6713      	str	r3, [r2, #112]	; 0x70
 80025b0:	e01c      	b.n	80025ec <HAL_RCC_OscConfig+0x5e0>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b05      	cmp	r3, #5
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x5c8>
 80025ba:	4b6f      	ldr	r3, [pc, #444]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a6e      	ldr	r2, [pc, #440]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80025c0:	f043 0304 	orr.w	r3, r3, #4
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
 80025c6:	4b6c      	ldr	r3, [pc, #432]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a6b      	ldr	r2, [pc, #428]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80025cc:	f043 0301 	orr.w	r3, r3, #1
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0x5e0>
 80025d4:	4b68      	ldr	r3, [pc, #416]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	4a67      	ldr	r2, [pc, #412]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80025da:	f023 0301 	bic.w	r3, r3, #1
 80025de:	6713      	str	r3, [r2, #112]	; 0x70
 80025e0:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80025e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e4:	4a64      	ldr	r2, [pc, #400]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80025e6:	f023 0304 	bic.w	r3, r3, #4
 80025ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d015      	beq.n	8002620 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe fb42 	bl	8000c7c <HAL_GetTick>
 80025f8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80025fa:	e00a      	b.n	8002612 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fc:	f7fe fb3e 	bl	8000c7c <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	f241 3288 	movw	r2, #5000	; 0x1388
 800260a:	4293      	cmp	r3, r2
 800260c:	d901      	bls.n	8002612 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800260e:	2303      	movs	r3, #3
 8002610:	e14e      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002612:	4b59      	ldr	r3, [pc, #356]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002616:	f003 0302 	and.w	r3, r3, #2
 800261a:	2b00      	cmp	r3, #0
 800261c:	d0ee      	beq.n	80025fc <HAL_RCC_OscConfig+0x5f0>
 800261e:	e014      	b.n	800264a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002620:	f7fe fb2c 	bl	8000c7c <HAL_GetTick>
 8002624:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002626:	e00a      	b.n	800263e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002628:	f7fe fb28 	bl	8000c7c <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e138      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800263e:	4b4e      	ldr	r3, [pc, #312]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002642:	f003 0302 	and.w	r3, r3, #2
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1ee      	bne.n	8002628 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800264e:	2b00      	cmp	r3, #0
 8002650:	f000 812d 	beq.w	80028ae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002654:	4b48      	ldr	r3, [pc, #288]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002656:	691b      	ldr	r3, [r3, #16]
 8002658:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800265c:	2b18      	cmp	r3, #24
 800265e:	f000 80bd 	beq.w	80027dc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002666:	2b02      	cmp	r3, #2
 8002668:	f040 809e 	bne.w	80027a8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800266c:	4b42      	ldr	r3, [pc, #264]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	4a41      	ldr	r2, [pc, #260]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002672:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7fe fb00 	bl	8000c7c <HAL_GetTick>
 800267c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002680:	f7fe fafc 	bl	8000c7c <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b02      	cmp	r3, #2
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e10e      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002692:	4b39      	ldr	r3, [pc, #228]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800269e:	4b36      	ldr	r3, [pc, #216]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80026a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026a2:	4b37      	ldr	r3, [pc, #220]	; (8002780 <HAL_RCC_OscConfig+0x774>)
 80026a4:	4013      	ands	r3, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026ae:	0112      	lsls	r2, r2, #4
 80026b0:	430a      	orrs	r2, r1
 80026b2:	4931      	ldr	r1, [pc, #196]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	628b      	str	r3, [r1, #40]	; 0x28
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026bc:	3b01      	subs	r3, #1
 80026be:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026c6:	3b01      	subs	r3, #1
 80026c8:	025b      	lsls	r3, r3, #9
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	431a      	orrs	r2, r3
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026d2:	3b01      	subs	r3, #1
 80026d4:	041b      	lsls	r3, r3, #16
 80026d6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026e0:	3b01      	subs	r3, #1
 80026e2:	061b      	lsls	r3, r3, #24
 80026e4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80026e8:	4923      	ldr	r1, [pc, #140]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80026ea:	4313      	orrs	r3, r2
 80026ec:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	4a21      	ldr	r2, [pc, #132]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80026f4:	f023 0301 	bic.w	r3, r3, #1
 80026f8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 80026fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80026fe:	4b21      	ldr	r3, [pc, #132]	; (8002784 <HAL_RCC_OscConfig+0x778>)
 8002700:	4013      	ands	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002706:	00d2      	lsls	r2, r2, #3
 8002708:	491b      	ldr	r1, [pc, #108]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 800270a:	4313      	orrs	r3, r2
 800270c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800270e:	4b1a      	ldr	r3, [pc, #104]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002712:	f023 020c 	bic.w	r2, r3, #12
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	4917      	ldr	r1, [pc, #92]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 800271c:	4313      	orrs	r3, r2
 800271e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002724:	f023 0202 	bic.w	r2, r3, #2
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272c:	4912      	ldr	r1, [pc, #72]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 800272e:	4313      	orrs	r3, r2
 8002730:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002732:	4b11      	ldr	r3, [pc, #68]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	4a10      	ldr	r2, [pc, #64]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002738:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800273c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800273e:	4b0e      	ldr	r3, [pc, #56]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002742:	4a0d      	ldr	r2, [pc, #52]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002748:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800274a:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 800274c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274e:	4a0a      	ldr	r2, [pc, #40]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002750:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002754:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002756:	4b08      	ldr	r3, [pc, #32]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275a:	4a07      	ldr	r2, [pc, #28]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002762:	4b05      	ldr	r3, [pc, #20]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a04      	ldr	r2, [pc, #16]	; (8002778 <HAL_RCC_OscConfig+0x76c>)
 8002768:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800276c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800276e:	f7fe fa85 	bl	8000c7c <HAL_GetTick>
 8002772:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002774:	e011      	b.n	800279a <HAL_RCC_OscConfig+0x78e>
 8002776:	bf00      	nop
 8002778:	58024400 	.word	0x58024400
 800277c:	58024800 	.word	0x58024800
 8002780:	fffffc0c 	.word	0xfffffc0c
 8002784:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002788:	f7fe fa78 	bl	8000c7c <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b02      	cmp	r3, #2
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e08a      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0x77c>
 80027a6:	e082      	b.n	80028ae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027a8:	4b43      	ldr	r3, [pc, #268]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a42      	ldr	r2, [pc, #264]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 80027ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027b4:	f7fe fa62 	bl	8000c7c <HAL_GetTick>
 80027b8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe fa5e 	bl	8000c7c <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e070      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80027ce:	4b3a      	ldr	r3, [pc, #232]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x7b0>
 80027da:	e068      	b.n	80028ae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80027dc:	4b36      	ldr	r3, [pc, #216]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 80027de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80027e2:	4b35      	ldr	r3, [pc, #212]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d031      	beq.n	8002854 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	f003 0203 	and.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d12a      	bne.n	8002854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	091b      	lsrs	r3, r3, #4
 8002802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d122      	bne.n	8002854 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002818:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800281a:	429a      	cmp	r2, r3
 800281c:	d11a      	bne.n	8002854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	0a5b      	lsrs	r3, r3, #9
 8002822:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800282a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d111      	bne.n	8002854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	0c1b      	lsrs	r3, r3, #16
 8002834:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800283c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800283e:	429a      	cmp	r2, r3
 8002840:	d108      	bne.n	8002854 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	0e1b      	lsrs	r3, r3, #24
 8002846:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800284e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e02b      	b.n	80028b0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002858:	4b17      	ldr	r3, [pc, #92]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 800285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800285c:	08db      	lsrs	r3, r3, #3
 800285e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002862:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	429a      	cmp	r2, r3
 800286c:	d01f      	beq.n	80028ae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800286e:	4b12      	ldr	r3, [pc, #72]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 8002870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002872:	4a11      	ldr	r2, [pc, #68]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 8002874:	f023 0301 	bic.w	r3, r3, #1
 8002878:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800287a:	f7fe f9ff 	bl	8000c7c <HAL_GetTick>
 800287e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002880:	bf00      	nop
 8002882:	f7fe f9fb 	bl	8000c7c <HAL_GetTick>
 8002886:	4602      	mov	r2, r0
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	4293      	cmp	r3, r2
 800288c:	d0f9      	beq.n	8002882 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800288e:	4b0a      	ldr	r3, [pc, #40]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 8002890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002892:	4b0a      	ldr	r3, [pc, #40]	; (80028bc <HAL_RCC_OscConfig+0x8b0>)
 8002894:	4013      	ands	r3, r2
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800289a:	00d2      	lsls	r2, r2, #3
 800289c:	4906      	ldr	r1, [pc, #24]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 800289e:	4313      	orrs	r3, r2
 80028a0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80028a2:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 80028a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a6:	4a04      	ldr	r2, [pc, #16]	; (80028b8 <HAL_RCC_OscConfig+0x8ac>)
 80028a8:	f043 0301 	orr.w	r3, r3, #1
 80028ac:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3730      	adds	r7, #48	; 0x30
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	58024400 	.word	0x58024400
 80028bc:	ffff0007 	.word	0xffff0007

080028c0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d101      	bne.n	80028d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e19c      	b.n	8002c0e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028d4:	4b8a      	ldr	r3, [pc, #552]	; (8002b00 <HAL_RCC_ClockConfig+0x240>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 030f 	and.w	r3, r3, #15
 80028dc:	683a      	ldr	r2, [r7, #0]
 80028de:	429a      	cmp	r2, r3
 80028e0:	d910      	bls.n	8002904 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e2:	4b87      	ldr	r3, [pc, #540]	; (8002b00 <HAL_RCC_ClockConfig+0x240>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f023 020f 	bic.w	r2, r3, #15
 80028ea:	4985      	ldr	r1, [pc, #532]	; (8002b00 <HAL_RCC_ClockConfig+0x240>)
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	4313      	orrs	r3, r2
 80028f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028f2:	4b83      	ldr	r3, [pc, #524]	; (8002b00 <HAL_RCC_ClockConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	683a      	ldr	r2, [r7, #0]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d001      	beq.n	8002904 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e184      	b.n	8002c0e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f003 0304 	and.w	r3, r3, #4
 800290c:	2b00      	cmp	r3, #0
 800290e:	d010      	beq.n	8002932 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	691a      	ldr	r2, [r3, #16]
 8002914:	4b7b      	ldr	r3, [pc, #492]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800291c:	429a      	cmp	r2, r3
 800291e:	d908      	bls.n	8002932 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002920:	4b78      	ldr	r3, [pc, #480]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	691b      	ldr	r3, [r3, #16]
 800292c:	4975      	ldr	r1, [pc, #468]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 800292e:	4313      	orrs	r3, r2
 8002930:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 0308 	and.w	r3, r3, #8
 800293a:	2b00      	cmp	r3, #0
 800293c:	d010      	beq.n	8002960 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	695a      	ldr	r2, [r3, #20]
 8002942:	4b70      	ldr	r3, [pc, #448]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800294a:	429a      	cmp	r2, r3
 800294c:	d908      	bls.n	8002960 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800294e:	4b6d      	ldr	r3, [pc, #436]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002950:	69db      	ldr	r3, [r3, #28]
 8002952:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	695b      	ldr	r3, [r3, #20]
 800295a:	496a      	ldr	r1, [pc, #424]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 800295c:	4313      	orrs	r3, r2
 800295e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0310 	and.w	r3, r3, #16
 8002968:	2b00      	cmp	r3, #0
 800296a:	d010      	beq.n	800298e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	699a      	ldr	r2, [r3, #24]
 8002970:	4b64      	ldr	r3, [pc, #400]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002978:	429a      	cmp	r2, r3
 800297a:	d908      	bls.n	800298e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800297c:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 800297e:	69db      	ldr	r3, [r3, #28]
 8002980:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	699b      	ldr	r3, [r3, #24]
 8002988:	495e      	ldr	r1, [pc, #376]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 800298a:	4313      	orrs	r3, r2
 800298c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0320 	and.w	r3, r3, #32
 8002996:	2b00      	cmp	r3, #0
 8002998:	d010      	beq.n	80029bc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	69da      	ldr	r2, [r3, #28]
 800299e:	4b59      	ldr	r3, [pc, #356]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d908      	bls.n	80029bc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80029aa:	4b56      	ldr	r3, [pc, #344]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 80029ac:	6a1b      	ldr	r3, [r3, #32]
 80029ae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	4953      	ldr	r1, [pc, #332]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d010      	beq.n	80029ea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	4b4d      	ldr	r3, [pc, #308]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	f003 030f 	and.w	r3, r3, #15
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d908      	bls.n	80029ea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029d8:	4b4a      	ldr	r3, [pc, #296]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 80029da:	699b      	ldr	r3, [r3, #24]
 80029dc:	f023 020f 	bic.w	r2, r3, #15
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	4947      	ldr	r1, [pc, #284]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d055      	beq.n	8002aa2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80029f6:	4b43      	ldr	r3, [pc, #268]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	4940      	ldr	r1, [pc, #256]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002a04:	4313      	orrs	r3, r2
 8002a06:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	2b02      	cmp	r3, #2
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a10:	4b3c      	ldr	r3, [pc, #240]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d121      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e0f6      	b.n	8002c0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	2b03      	cmp	r3, #3
 8002a26:	d107      	bne.n	8002a38 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a28:	4b36      	ldr	r3, [pc, #216]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d115      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e0ea      	b.n	8002c0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d107      	bne.n	8002a50 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a40:	4b30      	ldr	r3, [pc, #192]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d109      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0de      	b.n	8002c0e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002a50:	4b2c      	ldr	r3, [pc, #176]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 0304 	and.w	r3, r3, #4
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d101      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0d6      	b.n	8002c0e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a60:	4b28      	ldr	r3, [pc, #160]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002a62:	691b      	ldr	r3, [r3, #16]
 8002a64:	f023 0207 	bic.w	r2, r3, #7
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4925      	ldr	r1, [pc, #148]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a72:	f7fe f903 	bl	8000c7c <HAL_GetTick>
 8002a76:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a78:	e00a      	b.n	8002a90 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a7a:	f7fe f8ff 	bl	8000c7c <HAL_GetTick>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	1ad3      	subs	r3, r2, r3
 8002a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d901      	bls.n	8002a90 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e0be      	b.n	8002c0e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a90:	4b1c      	ldr	r3, [pc, #112]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	00db      	lsls	r3, r3, #3
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d1eb      	bne.n	8002a7a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0302 	and.w	r3, r3, #2
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d010      	beq.n	8002ad0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	68da      	ldr	r2, [r3, #12]
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	f003 030f 	and.w	r3, r3, #15
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d208      	bcs.n	8002ad0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002abe:	4b11      	ldr	r3, [pc, #68]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002ac0:	699b      	ldr	r3, [r3, #24]
 8002ac2:	f023 020f 	bic.w	r2, r3, #15
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	490e      	ldr	r1, [pc, #56]	; (8002b04 <HAL_RCC_ClockConfig+0x244>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	; (8002b00 <HAL_RCC_ClockConfig+0x240>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 030f 	and.w	r3, r3, #15
 8002ad8:	683a      	ldr	r2, [r7, #0]
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d214      	bcs.n	8002b08 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ade:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <HAL_RCC_ClockConfig+0x240>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 020f 	bic.w	r2, r3, #15
 8002ae6:	4906      	ldr	r1, [pc, #24]	; (8002b00 <HAL_RCC_ClockConfig+0x240>)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aee:	4b04      	ldr	r3, [pc, #16]	; (8002b00 <HAL_RCC_ClockConfig+0x240>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 030f 	and.w	r3, r3, #15
 8002af6:	683a      	ldr	r2, [r7, #0]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d005      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e086      	b.n	8002c0e <HAL_RCC_ClockConfig+0x34e>
 8002b00:	52002000 	.word	0x52002000
 8002b04:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d010      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	691a      	ldr	r2, [r3, #16]
 8002b18:	4b3f      	ldr	r3, [pc, #252]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d208      	bcs.n	8002b36 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b24:	4b3c      	ldr	r3, [pc, #240]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	4939      	ldr	r1, [pc, #228]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0308 	and.w	r3, r3, #8
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d010      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	695a      	ldr	r2, [r3, #20]
 8002b46:	4b34      	ldr	r3, [pc, #208]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002b48:	69db      	ldr	r3, [r3, #28]
 8002b4a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d208      	bcs.n	8002b64 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	695b      	ldr	r3, [r3, #20]
 8002b5e:	492e      	ldr	r1, [pc, #184]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d010      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	699a      	ldr	r2, [r3, #24]
 8002b74:	4b28      	ldr	r3, [pc, #160]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002b76:	69db      	ldr	r3, [r3, #28]
 8002b78:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d208      	bcs.n	8002b92 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b80:	4b25      	ldr	r3, [pc, #148]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	699b      	ldr	r3, [r3, #24]
 8002b8c:	4922      	ldr	r1, [pc, #136]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002b8e:	4313      	orrs	r3, r2
 8002b90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d010      	beq.n	8002bc0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	69da      	ldr	r2, [r3, #28]
 8002ba2:	4b1d      	ldr	r3, [pc, #116]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002ba4:	6a1b      	ldr	r3, [r3, #32]
 8002ba6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d208      	bcs.n	8002bc0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bae:	4b1a      	ldr	r3, [pc, #104]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69db      	ldr	r3, [r3, #28]
 8002bba:	4917      	ldr	r1, [pc, #92]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002bc0:	f000 f834 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	4b14      	ldr	r3, [pc, #80]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002bc8:	699b      	ldr	r3, [r3, #24]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	f003 030f 	and.w	r3, r3, #15
 8002bd0:	4912      	ldr	r1, [pc, #72]	; (8002c1c <HAL_RCC_ClockConfig+0x35c>)
 8002bd2:	5ccb      	ldrb	r3, [r1, r3]
 8002bd4:	f003 031f 	and.w	r3, r3, #31
 8002bd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bdc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCC_ClockConfig+0x358>)
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	f003 030f 	and.w	r3, r3, #15
 8002be6:	4a0d      	ldr	r2, [pc, #52]	; (8002c1c <HAL_RCC_ClockConfig+0x35c>)
 8002be8:	5cd3      	ldrb	r3, [r2, r3]
 8002bea:	f003 031f 	and.w	r3, r3, #31
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf4:	4a0a      	ldr	r2, [pc, #40]	; (8002c20 <HAL_RCC_ClockConfig+0x360>)
 8002bf6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002bf8:	4a0a      	ldr	r2, [pc, #40]	; (8002c24 <HAL_RCC_ClockConfig+0x364>)
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002bfe:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <HAL_RCC_ClockConfig+0x368>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fd fff0 	bl	8000be8 <HAL_InitTick>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3718      	adds	r7, #24
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	0800975c 	.word	0x0800975c
 8002c20:	24000078 	.word	0x24000078
 8002c24:	24000074 	.word	0x24000074
 8002c28:	24000000 	.word	0x24000000

08002c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c32:	4bb3      	ldr	r3, [pc, #716]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c3a:	2b18      	cmp	r3, #24
 8002c3c:	f200 8155 	bhi.w	8002eea <HAL_RCC_GetSysClockFreq+0x2be>
 8002c40:	a201      	add	r2, pc, #4	; (adr r2, 8002c48 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c46:	bf00      	nop
 8002c48:	08002cad 	.word	0x08002cad
 8002c4c:	08002eeb 	.word	0x08002eeb
 8002c50:	08002eeb 	.word	0x08002eeb
 8002c54:	08002eeb 	.word	0x08002eeb
 8002c58:	08002eeb 	.word	0x08002eeb
 8002c5c:	08002eeb 	.word	0x08002eeb
 8002c60:	08002eeb 	.word	0x08002eeb
 8002c64:	08002eeb 	.word	0x08002eeb
 8002c68:	08002cd3 	.word	0x08002cd3
 8002c6c:	08002eeb 	.word	0x08002eeb
 8002c70:	08002eeb 	.word	0x08002eeb
 8002c74:	08002eeb 	.word	0x08002eeb
 8002c78:	08002eeb 	.word	0x08002eeb
 8002c7c:	08002eeb 	.word	0x08002eeb
 8002c80:	08002eeb 	.word	0x08002eeb
 8002c84:	08002eeb 	.word	0x08002eeb
 8002c88:	08002cd9 	.word	0x08002cd9
 8002c8c:	08002eeb 	.word	0x08002eeb
 8002c90:	08002eeb 	.word	0x08002eeb
 8002c94:	08002eeb 	.word	0x08002eeb
 8002c98:	08002eeb 	.word	0x08002eeb
 8002c9c:	08002eeb 	.word	0x08002eeb
 8002ca0:	08002eeb 	.word	0x08002eeb
 8002ca4:	08002eeb 	.word	0x08002eeb
 8002ca8:	08002cdf 	.word	0x08002cdf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cac:	4b94      	ldr	r3, [pc, #592]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0320 	and.w	r3, r3, #32
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d009      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002cb8:	4b91      	ldr	r3, [pc, #580]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	08db      	lsrs	r3, r3, #3
 8002cbe:	f003 0303 	and.w	r3, r3, #3
 8002cc2:	4a90      	ldr	r2, [pc, #576]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002cca:	e111      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002ccc:	4b8d      	ldr	r3, [pc, #564]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002cce:	61bb      	str	r3, [r7, #24]
      break;
 8002cd0:	e10e      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002cd2:	4b8d      	ldr	r3, [pc, #564]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cd4:	61bb      	str	r3, [r7, #24]
      break;
 8002cd6:	e10b      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002cd8:	4b8c      	ldr	r3, [pc, #560]	; (8002f0c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002cda:	61bb      	str	r3, [r7, #24]
      break;
 8002cdc:	e108      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cde:	4b88      	ldr	r3, [pc, #544]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	f003 0303 	and.w	r3, r3, #3
 8002ce6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ce8:	4b85      	ldr	r3, [pc, #532]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	091b      	lsrs	r3, r3, #4
 8002cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002cf2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002cf4:	4b82      	ldr	r3, [pc, #520]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002cfe:	4b80      	ldr	r3, [pc, #512]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d02:	08db      	lsrs	r3, r3, #3
 8002d04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	fb02 f303 	mul.w	r3, r2, r3
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d16:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80e1 	beq.w	8002ee4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	f000 8083 	beq.w	8002e30 <HAL_RCC_GetSysClockFreq+0x204>
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2b02      	cmp	r3, #2
 8002d2e:	f200 80a1 	bhi.w	8002e74 <HAL_RCC_GetSysClockFreq+0x248>
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d003      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x114>
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d056      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x1c0>
 8002d3e:	e099      	b.n	8002e74 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d40:	4b6f      	ldr	r3, [pc, #444]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0320 	and.w	r3, r3, #32
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d02d      	beq.n	8002da8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d4c:	4b6c      	ldr	r3, [pc, #432]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	08db      	lsrs	r3, r3, #3
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	4a6b      	ldr	r2, [pc, #428]	; (8002f04 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002d58:	fa22 f303 	lsr.w	r3, r2, r3
 8002d5c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	ee07 3a90 	vmov	s15, r3
 8002d64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	ee07 3a90 	vmov	s15, r3
 8002d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d76:	4b62      	ldr	r3, [pc, #392]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7e:	ee07 3a90 	vmov	s15, r3
 8002d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002d8a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8002f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002da2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002da6:	e087      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	ee07 3a90 	vmov	s15, r3
 8002dae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002db2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002f14 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002db6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dba:	4b51      	ldr	r3, [pc, #324]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dc2:	ee07 3a90 	vmov	s15, r3
 8002dc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dca:	ed97 6a02 	vldr	s12, [r7, #8]
 8002dce:	eddf 5a50 	vldr	s11, [pc, #320]	; 8002f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002dd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002dde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002dea:	e065      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	ee07 3a90 	vmov	s15, r3
 8002df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002f18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002dfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dfe:	4b40      	ldr	r3, [pc, #256]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e06:	ee07 3a90 	vmov	s15, r3
 8002e0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e12:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8002f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e2e:	e043      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	ee07 3a90 	vmov	s15, r3
 8002e36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e3a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002f1c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002e3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e42:	4b2f      	ldr	r3, [pc, #188]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e4a:	ee07 3a90 	vmov	s15, r3
 8002e4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e52:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e56:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8002f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002e66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002e72:	e021      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e7e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002f18 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002e82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e86:	4b1e      	ldr	r3, [pc, #120]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e8e:	ee07 3a90 	vmov	s15, r3
 8002e92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002e9a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8002f10 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002e9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ea2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ea6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002eaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002eb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002eb6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002eb8:	4b11      	ldr	r3, [pc, #68]	; (8002f00 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ebc:	0a5b      	lsrs	r3, r3, #9
 8002ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002ed0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ed4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ed8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002edc:	ee17 3a90 	vmov	r3, s15
 8002ee0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002ee2:	e005      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	61bb      	str	r3, [r7, #24]
      break;
 8002ee8:	e002      	b.n	8002ef0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002eea:	4b07      	ldr	r3, [pc, #28]	; (8002f08 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002eec:	61bb      	str	r3, [r7, #24]
      break;
 8002eee:	bf00      	nop
  }

  return sysclockfreq;
 8002ef0:	69bb      	ldr	r3, [r7, #24]
}
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	3724      	adds	r7, #36	; 0x24
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr
 8002efe:	bf00      	nop
 8002f00:	58024400 	.word	0x58024400
 8002f04:	03d09000 	.word	0x03d09000
 8002f08:	003d0900 	.word	0x003d0900
 8002f0c:	00b71b00 	.word	0x00b71b00
 8002f10:	46000000 	.word	0x46000000
 8002f14:	4c742400 	.word	0x4c742400
 8002f18:	4a742400 	.word	0x4a742400
 8002f1c:	4b371b00 	.word	0x4b371b00

08002f20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b082      	sub	sp, #8
 8002f24:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002f26:	f7ff fe81 	bl	8002c2c <HAL_RCC_GetSysClockFreq>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	4b10      	ldr	r3, [pc, #64]	; (8002f70 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	0a1b      	lsrs	r3, r3, #8
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	490f      	ldr	r1, [pc, #60]	; (8002f74 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f38:	5ccb      	ldrb	r3, [r1, r3]
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8002f42:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f44:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_RCC_GetHCLKFreq+0x50>)
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	f003 030f 	and.w	r3, r3, #15
 8002f4c:	4a09      	ldr	r2, [pc, #36]	; (8002f74 <HAL_RCC_GetHCLKFreq+0x54>)
 8002f4e:	5cd3      	ldrb	r3, [r2, r3]
 8002f50:	f003 031f 	and.w	r3, r3, #31
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	fa22 f303 	lsr.w	r3, r2, r3
 8002f5a:	4a07      	ldr	r2, [pc, #28]	; (8002f78 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f5c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002f5e:	4a07      	ldr	r2, [pc, #28]	; (8002f7c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002f64:	4b04      	ldr	r3, [pc, #16]	; (8002f78 <HAL_RCC_GetHCLKFreq+0x58>)
 8002f66:	681b      	ldr	r3, [r3, #0]
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	58024400 	.word	0x58024400
 8002f74:	0800975c 	.word	0x0800975c
 8002f78:	24000078 	.word	0x24000078
 8002f7c:	24000074 	.word	0x24000074

08002f80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002f84:	f7ff ffcc 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	4b06      	ldr	r3, [pc, #24]	; (8002fa4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f8c:	69db      	ldr	r3, [r3, #28]
 8002f8e:	091b      	lsrs	r3, r3, #4
 8002f90:	f003 0307 	and.w	r3, r3, #7
 8002f94:	4904      	ldr	r1, [pc, #16]	; (8002fa8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f96:	5ccb      	ldrb	r3, [r1, r3]
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	58024400 	.word	0x58024400
 8002fa8:	0800975c 	.word	0x0800975c

08002fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002fb0:	f7ff ffb6 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	4b06      	ldr	r3, [pc, #24]	; (8002fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fb8:	69db      	ldr	r3, [r3, #28]
 8002fba:	0a1b      	lsrs	r3, r3, #8
 8002fbc:	f003 0307 	and.w	r3, r3, #7
 8002fc0:	4904      	ldr	r1, [pc, #16]	; (8002fd4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002fc2:	5ccb      	ldrb	r3, [r1, r3]
 8002fc4:	f003 031f 	and.w	r3, r3, #31
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	58024400 	.word	0x58024400
 8002fd4:	0800975c 	.word	0x0800975c

08002fd8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002fd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fdc:	b0ca      	sub	sp, #296	; 0x128
 8002fde:	af00      	add	r7, sp, #0
 8002fe0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fea:	2300      	movs	r3, #0
 8002fec:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002ffc:	2500      	movs	r5, #0
 8002ffe:	ea54 0305 	orrs.w	r3, r4, r5
 8003002:	d049      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003008:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800300a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800300e:	d02f      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003010:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003014:	d828      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003016:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800301a:	d01a      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800301c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003020:	d822      	bhi.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800302a:	d007      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800302c:	e01c      	b.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302e:	4bb8      	ldr	r3, [pc, #736]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003030:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003032:	4ab7      	ldr	r2, [pc, #732]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003038:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800303a:	e01a      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800303c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003040:	3308      	adds	r3, #8
 8003042:	2102      	movs	r1, #2
 8003044:	4618      	mov	r0, r3
 8003046:	f001 fc8f 	bl	8004968 <RCCEx_PLL2_Config>
 800304a:	4603      	mov	r3, r0
 800304c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003050:	e00f      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003056:	3328      	adds	r3, #40	; 0x28
 8003058:	2102      	movs	r1, #2
 800305a:	4618      	mov	r0, r3
 800305c:	f001 fd36 	bl	8004acc <RCCEx_PLL3_Config>
 8003060:	4603      	mov	r3, r0
 8003062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003066:	e004      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003068:	2301      	movs	r3, #1
 800306a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800306e:	e000      	b.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003070:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003072:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003076:	2b00      	cmp	r3, #0
 8003078:	d10a      	bne.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800307a:	4ba5      	ldr	r3, [pc, #660]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800307c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800307e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003082:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003086:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003088:	4aa1      	ldr	r2, [pc, #644]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800308a:	430b      	orrs	r3, r1
 800308c:	6513      	str	r3, [r2, #80]	; 0x50
 800308e:	e003      	b.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003090:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003094:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003098:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800309c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80030a4:	f04f 0900 	mov.w	r9, #0
 80030a8:	ea58 0309 	orrs.w	r3, r8, r9
 80030ac:	d047      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80030ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b4:	2b04      	cmp	r3, #4
 80030b6:	d82a      	bhi.n	800310e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80030b8:	a201      	add	r2, pc, #4	; (adr r2, 80030c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030d5 	.word	0x080030d5
 80030c4:	080030e3 	.word	0x080030e3
 80030c8:	080030f9 	.word	0x080030f9
 80030cc:	08003117 	.word	0x08003117
 80030d0:	08003117 	.word	0x08003117
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030d4:	4b8e      	ldr	r3, [pc, #568]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d8:	4a8d      	ldr	r2, [pc, #564]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80030da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030de:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030e0:	e01a      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030e6:	3308      	adds	r3, #8
 80030e8:	2100      	movs	r1, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	f001 fc3c 	bl	8004968 <RCCEx_PLL2_Config>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80030f6:	e00f      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80030f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80030fc:	3328      	adds	r3, #40	; 0x28
 80030fe:	2100      	movs	r1, #0
 8003100:	4618      	mov	r0, r3
 8003102:	f001 fce3 	bl	8004acc <RCCEx_PLL3_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800310c:	e004      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003114:	e000      	b.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003116:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800311c:	2b00      	cmp	r3, #0
 800311e:	d10a      	bne.n	8003136 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003120:	4b7b      	ldr	r3, [pc, #492]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003122:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003124:	f023 0107 	bic.w	r1, r3, #7
 8003128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800312c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800312e:	4a78      	ldr	r2, [pc, #480]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003130:	430b      	orrs	r3, r1
 8003132:	6513      	str	r3, [r2, #80]	; 0x50
 8003134:	e003      	b.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800313a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800313e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003146:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800314a:	f04f 0b00 	mov.w	fp, #0
 800314e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003152:	d04c      	beq.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003154:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800315a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800315e:	d030      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003160:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003164:	d829      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003166:	2bc0      	cmp	r3, #192	; 0xc0
 8003168:	d02d      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800316a:	2bc0      	cmp	r3, #192	; 0xc0
 800316c:	d825      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d018      	beq.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003172:	2b80      	cmp	r3, #128	; 0x80
 8003174:	d821      	bhi.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800317a:	2b40      	cmp	r3, #64	; 0x40
 800317c:	d007      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800317e:	e01c      	b.n	80031ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003180:	4b63      	ldr	r3, [pc, #396]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	4a62      	ldr	r2, [pc, #392]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800318c:	e01c      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800318e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003192:	3308      	adds	r3, #8
 8003194:	2100      	movs	r1, #0
 8003196:	4618      	mov	r0, r3
 8003198:	f001 fbe6 	bl	8004968 <RCCEx_PLL2_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031a2:	e011      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a8:	3328      	adds	r3, #40	; 0x28
 80031aa:	2100      	movs	r1, #0
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 fc8d 	bl	8004acc <RCCEx_PLL3_Config>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80031b8:	e006      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031c0:	e002      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031c2:	bf00      	nop
 80031c4:	e000      	b.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80031c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10a      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80031d0:	4b4f      	ldr	r3, [pc, #316]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031d4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031de:	4a4c      	ldr	r2, [pc, #304]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80031e0:	430b      	orrs	r3, r1
 80031e2:	6513      	str	r3, [r2, #80]	; 0x50
 80031e4:	e003      	b.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80031ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80031fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80031fe:	2300      	movs	r3, #0
 8003200:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003204:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003208:	460b      	mov	r3, r1
 800320a:	4313      	orrs	r3, r2
 800320c:	d053      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800320e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003212:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003216:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800321a:	d035      	beq.n	8003288 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800321c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003220:	d82e      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003222:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003226:	d031      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003228:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800322c:	d828      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800322e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003232:	d01a      	beq.n	800326a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003238:	d822      	bhi.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800323e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003242:	d007      	beq.n	8003254 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003244:	e01c      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003246:	4b32      	ldr	r3, [pc, #200]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324a:	4a31      	ldr	r2, [pc, #196]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800324c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003250:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003252:	e01c      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003254:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003258:	3308      	adds	r3, #8
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f001 fb83 	bl	8004968 <RCCEx_PLL2_Config>
 8003262:	4603      	mov	r3, r0
 8003264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003268:	e011      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800326a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800326e:	3328      	adds	r3, #40	; 0x28
 8003270:	2100      	movs	r1, #0
 8003272:	4618      	mov	r0, r3
 8003274:	f001 fc2a 	bl	8004acc <RCCEx_PLL3_Config>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800327e:	e006      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003286:	e002      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003288:	bf00      	nop
 800328a:	e000      	b.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800328c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800328e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003292:	2b00      	cmp	r3, #0
 8003294:	d10b      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003296:	4b1e      	ldr	r3, [pc, #120]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003298:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800329a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800329e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032a2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80032a6:	4a1a      	ldr	r2, [pc, #104]	; (8003310 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032a8:	430b      	orrs	r3, r1
 80032aa:	6593      	str	r3, [r2, #88]	; 0x58
 80032ac:	e003      	b.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032b2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80032b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032be:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80032c2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80032c6:	2300      	movs	r3, #0
 80032c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80032cc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80032d0:	460b      	mov	r3, r1
 80032d2:	4313      	orrs	r3, r2
 80032d4:	d056      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80032d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032da:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80032de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032e2:	d038      	beq.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80032e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032e8:	d831      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80032ea:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032ee:	d034      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80032f0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80032f4:	d82b      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80032f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80032fa:	d01d      	beq.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80032fc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003300:	d825      	bhi.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003302:	2b00      	cmp	r3, #0
 8003304:	d006      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003306:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800330a:	d00a      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800330c:	e01f      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800330e:	bf00      	nop
 8003310:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003314:	4ba2      	ldr	r3, [pc, #648]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003318:	4aa1      	ldr	r2, [pc, #644]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800331a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800331e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003320:	e01c      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003326:	3308      	adds	r3, #8
 8003328:	2100      	movs	r1, #0
 800332a:	4618      	mov	r0, r3
 800332c:	f001 fb1c 	bl	8004968 <RCCEx_PLL2_Config>
 8003330:	4603      	mov	r3, r0
 8003332:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003336:	e011      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333c:	3328      	adds	r3, #40	; 0x28
 800333e:	2100      	movs	r1, #0
 8003340:	4618      	mov	r0, r3
 8003342:	f001 fbc3 	bl	8004acc <RCCEx_PLL3_Config>
 8003346:	4603      	mov	r3, r0
 8003348:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800334c:	e006      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003354:	e002      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003356:	bf00      	nop
 8003358:	e000      	b.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800335a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800335c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003360:	2b00      	cmp	r3, #0
 8003362:	d10b      	bne.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003364:	4b8e      	ldr	r3, [pc, #568]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003368:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800336c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003370:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003374:	4a8a      	ldr	r2, [pc, #552]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003376:	430b      	orrs	r3, r1
 8003378:	6593      	str	r3, [r2, #88]	; 0x58
 800337a:	e003      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800337c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003380:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003388:	e9d3 2300 	ldrd	r2, r3, [r3]
 800338c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003390:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8003394:	2300      	movs	r3, #0
 8003396:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800339a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800339e:	460b      	mov	r3, r1
 80033a0:	4313      	orrs	r3, r2
 80033a2:	d03a      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80033a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033aa:	2b30      	cmp	r3, #48	; 0x30
 80033ac:	d01f      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80033ae:	2b30      	cmp	r3, #48	; 0x30
 80033b0:	d819      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d00c      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80033b6:	2b20      	cmp	r3, #32
 80033b8:	d815      	bhi.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d019      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80033be:	2b10      	cmp	r3, #16
 80033c0:	d111      	bne.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033c2:	4b77      	ldr	r3, [pc, #476]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c6:	4a76      	ldr	r2, [pc, #472]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80033ce:	e011      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033d4:	3308      	adds	r3, #8
 80033d6:	2102      	movs	r1, #2
 80033d8:	4618      	mov	r0, r3
 80033da:	f001 fac5 	bl	8004968 <RCCEx_PLL2_Config>
 80033de:	4603      	mov	r3, r0
 80033e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80033e4:	e006      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033ec:	e002      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80033ee:	bf00      	nop
 80033f0:	e000      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80033f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d10a      	bne.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80033fc:	4b68      	ldr	r3, [pc, #416]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80033fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003400:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800340a:	4a65      	ldr	r2, [pc, #404]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800340c:	430b      	orrs	r3, r1
 800340e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003410:	e003      	b.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003416:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800341a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800341e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003422:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003426:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800342a:	2300      	movs	r3, #0
 800342c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003430:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003434:	460b      	mov	r3, r1
 8003436:	4313      	orrs	r3, r2
 8003438:	d051      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800343a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800343e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003440:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003444:	d035      	beq.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003446:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344a:	d82e      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800344c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003450:	d031      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003452:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003456:	d828      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003458:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800345c:	d01a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800345e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003462:	d822      	bhi.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346c:	d007      	beq.n	800347e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800346e:	e01c      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003470:	4b4b      	ldr	r3, [pc, #300]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003474:	4a4a      	ldr	r2, [pc, #296]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003476:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800347a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800347c:	e01c      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800347e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003482:	3308      	adds	r3, #8
 8003484:	2100      	movs	r1, #0
 8003486:	4618      	mov	r0, r3
 8003488:	f001 fa6e 	bl	8004968 <RCCEx_PLL2_Config>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003492:	e011      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003494:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003498:	3328      	adds	r3, #40	; 0x28
 800349a:	2100      	movs	r1, #0
 800349c:	4618      	mov	r0, r3
 800349e:	f001 fb15 	bl	8004acc <RCCEx_PLL3_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80034a8:	e006      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034b0:	e002      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034b2:	bf00      	nop
 80034b4:	e000      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80034b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d10a      	bne.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80034c0:	4b37      	ldr	r3, [pc, #220]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80034c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034ce:	4a34      	ldr	r2, [pc, #208]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80034d0:	430b      	orrs	r3, r1
 80034d2:	6513      	str	r3, [r2, #80]	; 0x50
 80034d4:	e003      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80034de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80034ea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034ee:	2300      	movs	r3, #0
 80034f0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80034f4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80034f8:	460b      	mov	r3, r1
 80034fa:	4313      	orrs	r3, r2
 80034fc:	d056      	beq.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80034fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003502:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003504:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003508:	d033      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800350a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800350e:	d82c      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003510:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003514:	d02f      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003516:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800351a:	d826      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800351c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003520:	d02b      	beq.n	800357a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003522:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003526:	d820      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003528:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800352c:	d012      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800352e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003532:	d81a      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003534:	2b00      	cmp	r3, #0
 8003536:	d022      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800353c:	d115      	bne.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800353e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003542:	3308      	adds	r3, #8
 8003544:	2101      	movs	r1, #1
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fa0e 	bl	8004968 <RCCEx_PLL2_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003552:	e015      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003558:	3328      	adds	r3, #40	; 0x28
 800355a:	2101      	movs	r1, #1
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fab5 	bl	8004acc <RCCEx_PLL3_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003568:	e00a      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003570:	e006      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003572:	bf00      	nop
 8003574:	e004      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003576:	bf00      	nop
 8003578:	e002      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800357a:	bf00      	nop
 800357c:	e000      	b.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800357e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003580:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003584:	2b00      	cmp	r3, #0
 8003586:	d10d      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003588:	4b05      	ldr	r3, [pc, #20]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800358a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800358c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003590:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003594:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003596:	4a02      	ldr	r2, [pc, #8]	; (80035a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003598:	430b      	orrs	r3, r1
 800359a:	6513      	str	r3, [r2, #80]	; 0x50
 800359c:	e006      	b.n	80035ac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800359e:	bf00      	nop
 80035a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80035a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80035ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035b4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80035b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80035bc:	2300      	movs	r3, #0
 80035be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80035c2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80035c6:	460b      	mov	r3, r1
 80035c8:	4313      	orrs	r3, r2
 80035ca:	d055      	beq.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80035cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035d0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035d8:	d033      	beq.n	8003642 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80035da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80035de:	d82c      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80035e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035e4:	d02f      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80035e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ea:	d826      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80035ec:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035f0:	d02b      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80035f2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80035f6:	d820      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80035f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035fc:	d012      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80035fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003602:	d81a      	bhi.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d022      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003608:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800360c:	d115      	bne.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800360e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003612:	3308      	adds	r3, #8
 8003614:	2101      	movs	r1, #1
 8003616:	4618      	mov	r0, r3
 8003618:	f001 f9a6 	bl	8004968 <RCCEx_PLL2_Config>
 800361c:	4603      	mov	r3, r0
 800361e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003622:	e015      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003628:	3328      	adds	r3, #40	; 0x28
 800362a:	2101      	movs	r1, #1
 800362c:	4618      	mov	r0, r3
 800362e:	f001 fa4d 	bl	8004acc <RCCEx_PLL3_Config>
 8003632:	4603      	mov	r3, r0
 8003634:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003638:	e00a      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003640:	e006      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003642:	bf00      	nop
 8003644:	e004      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003646:	bf00      	nop
 8003648:	e002      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800364a:	bf00      	nop
 800364c:	e000      	b.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800364e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003650:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10b      	bne.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003658:	4ba3      	ldr	r3, [pc, #652]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800365a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800365c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003664:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003668:	4a9f      	ldr	r2, [pc, #636]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800366a:	430b      	orrs	r3, r1
 800366c:	6593      	str	r3, [r2, #88]	; 0x58
 800366e:	e003      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003670:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003674:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003680:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003684:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003688:	2300      	movs	r3, #0
 800368a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800368e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003692:	460b      	mov	r3, r1
 8003694:	4313      	orrs	r3, r2
 8003696:	d037      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800369c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800369e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a2:	d00e      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80036a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a8:	d816      	bhi.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d018      	beq.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80036ae:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80036b2:	d111      	bne.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036b4:	4b8c      	ldr	r3, [pc, #560]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b8:	4a8b      	ldr	r2, [pc, #556]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036be:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036c0:	e00f      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036c6:	3308      	adds	r3, #8
 80036c8:	2101      	movs	r1, #1
 80036ca:	4618      	mov	r0, r3
 80036cc:	f001 f94c 	bl	8004968 <RCCEx_PLL2_Config>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80036d6:	e004      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036d8:	2301      	movs	r3, #1
 80036da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036de:	e000      	b.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80036e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036e2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d10a      	bne.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80036ea:	4b7f      	ldr	r3, [pc, #508]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80036f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f8:	4a7b      	ldr	r2, [pc, #492]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80036fa:	430b      	orrs	r3, r1
 80036fc:	6513      	str	r3, [r2, #80]	; 0x50
 80036fe:	e003      	b.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003700:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003704:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003708:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003710:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003718:	2300      	movs	r3, #0
 800371a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800371e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003722:	460b      	mov	r3, r1
 8003724:	4313      	orrs	r3, r2
 8003726:	d039      	beq.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800372c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800372e:	2b03      	cmp	r3, #3
 8003730:	d81c      	bhi.n	800376c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003732:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003738:	08003775 	.word	0x08003775
 800373c:	08003749 	.word	0x08003749
 8003740:	08003757 	.word	0x08003757
 8003744:	08003775 	.word	0x08003775
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003748:	4b67      	ldr	r3, [pc, #412]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800374a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800374c:	4a66      	ldr	r2, [pc, #408]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800374e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003752:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003754:	e00f      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003756:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800375a:	3308      	adds	r3, #8
 800375c:	2102      	movs	r1, #2
 800375e:	4618      	mov	r0, r3
 8003760:	f001 f902 	bl	8004968 <RCCEx_PLL2_Config>
 8003764:	4603      	mov	r3, r0
 8003766:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800376a:	e004      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003772:	e000      	b.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003774:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003776:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800377a:	2b00      	cmp	r3, #0
 800377c:	d10a      	bne.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800377e:	4b5a      	ldr	r3, [pc, #360]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003782:	f023 0103 	bic.w	r1, r3, #3
 8003786:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800378a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800378c:	4a56      	ldr	r2, [pc, #344]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800378e:	430b      	orrs	r3, r1
 8003790:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003792:	e003      	b.n	800379c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800379c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80037a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80037ac:	2300      	movs	r3, #0
 80037ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80037b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80037b6:	460b      	mov	r3, r1
 80037b8:	4313      	orrs	r3, r2
 80037ba:	f000 809f 	beq.w	80038fc <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037be:	4b4b      	ldr	r3, [pc, #300]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a4a      	ldr	r2, [pc, #296]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80037ca:	f7fd fa57 	bl	8000c7c <HAL_GetTick>
 80037ce:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037d2:	e00b      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037d4:	f7fd fa52 	bl	8000c7c <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037de:	1ad3      	subs	r3, r2, r3
 80037e0:	2b64      	cmp	r3, #100	; 0x64
 80037e2:	d903      	bls.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80037e4:	2303      	movs	r3, #3
 80037e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80037ea:	e005      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80037ec:	4b3f      	ldr	r3, [pc, #252]	; (80038ec <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0ed      	beq.n	80037d4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80037f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d179      	bne.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003800:	4b39      	ldr	r3, [pc, #228]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003802:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003808:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800380c:	4053      	eors	r3, r2
 800380e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003812:	2b00      	cmp	r3, #0
 8003814:	d015      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003816:	4b34      	ldr	r3, [pc, #208]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800381e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003822:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003826:	4a30      	ldr	r2, [pc, #192]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003828:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800382c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800382e:	4b2e      	ldr	r3, [pc, #184]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003832:	4a2d      	ldr	r2, [pc, #180]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003834:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003838:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800383a:	4a2b      	ldr	r2, [pc, #172]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800383c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003840:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003842:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003846:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800384a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800384e:	d118      	bne.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003850:	f7fd fa14 	bl	8000c7c <HAL_GetTick>
 8003854:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003858:	e00d      	b.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385a:	f7fd fa0f 	bl	8000c7c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003864:	1ad2      	subs	r2, r2, r3
 8003866:	f241 3388 	movw	r3, #5000	; 0x1388
 800386a:	429a      	cmp	r2, r3
 800386c:	d903      	bls.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003874:	e005      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0eb      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003886:	2b00      	cmp	r3, #0
 8003888:	d129      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800388a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003892:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003896:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800389a:	d10e      	bne.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800389c:	4b12      	ldr	r3, [pc, #72]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800389e:	691b      	ldr	r3, [r3, #16]
 80038a0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 80038a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038ac:	091a      	lsrs	r2, r3, #4
 80038ae:	4b10      	ldr	r3, [pc, #64]	; (80038f0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	4a0d      	ldr	r2, [pc, #52]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038b4:	430b      	orrs	r3, r1
 80038b6:	6113      	str	r3, [r2, #16]
 80038b8:	e005      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038bc:	691b      	ldr	r3, [r3, #16]
 80038be:	4a0a      	ldr	r2, [pc, #40]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80038c4:	6113      	str	r3, [r2, #16]
 80038c6:	4b08      	ldr	r3, [pc, #32]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80038ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80038d2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d6:	4a04      	ldr	r2, [pc, #16]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038d8:	430b      	orrs	r3, r1
 80038da:	6713      	str	r3, [r2, #112]	; 0x70
 80038dc:	e00e      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80038de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80038e6:	e009      	b.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0x924>
 80038e8:	58024400 	.word	0x58024400
 80038ec:	58024800 	.word	0x58024800
 80038f0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038f4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038f8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80038fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003904:	f002 0301 	and.w	r3, r2, #1
 8003908:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800390c:	2300      	movs	r3, #0
 800390e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003912:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003916:	460b      	mov	r3, r1
 8003918:	4313      	orrs	r3, r2
 800391a:	f000 8089 	beq.w	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800391e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003924:	2b28      	cmp	r3, #40	; 0x28
 8003926:	d86b      	bhi.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003928:	a201      	add	r2, pc, #4	; (adr r2, 8003930 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800392a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800392e:	bf00      	nop
 8003930:	08003a09 	.word	0x08003a09
 8003934:	08003a01 	.word	0x08003a01
 8003938:	08003a01 	.word	0x08003a01
 800393c:	08003a01 	.word	0x08003a01
 8003940:	08003a01 	.word	0x08003a01
 8003944:	08003a01 	.word	0x08003a01
 8003948:	08003a01 	.word	0x08003a01
 800394c:	08003a01 	.word	0x08003a01
 8003950:	080039d5 	.word	0x080039d5
 8003954:	08003a01 	.word	0x08003a01
 8003958:	08003a01 	.word	0x08003a01
 800395c:	08003a01 	.word	0x08003a01
 8003960:	08003a01 	.word	0x08003a01
 8003964:	08003a01 	.word	0x08003a01
 8003968:	08003a01 	.word	0x08003a01
 800396c:	08003a01 	.word	0x08003a01
 8003970:	080039eb 	.word	0x080039eb
 8003974:	08003a01 	.word	0x08003a01
 8003978:	08003a01 	.word	0x08003a01
 800397c:	08003a01 	.word	0x08003a01
 8003980:	08003a01 	.word	0x08003a01
 8003984:	08003a01 	.word	0x08003a01
 8003988:	08003a01 	.word	0x08003a01
 800398c:	08003a01 	.word	0x08003a01
 8003990:	08003a09 	.word	0x08003a09
 8003994:	08003a01 	.word	0x08003a01
 8003998:	08003a01 	.word	0x08003a01
 800399c:	08003a01 	.word	0x08003a01
 80039a0:	08003a01 	.word	0x08003a01
 80039a4:	08003a01 	.word	0x08003a01
 80039a8:	08003a01 	.word	0x08003a01
 80039ac:	08003a01 	.word	0x08003a01
 80039b0:	08003a09 	.word	0x08003a09
 80039b4:	08003a01 	.word	0x08003a01
 80039b8:	08003a01 	.word	0x08003a01
 80039bc:	08003a01 	.word	0x08003a01
 80039c0:	08003a01 	.word	0x08003a01
 80039c4:	08003a01 	.word	0x08003a01
 80039c8:	08003a01 	.word	0x08003a01
 80039cc:	08003a01 	.word	0x08003a01
 80039d0:	08003a09 	.word	0x08003a09
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039d8:	3308      	adds	r3, #8
 80039da:	2101      	movs	r1, #1
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 ffc3 	bl	8004968 <RCCEx_PLL2_Config>
 80039e2:	4603      	mov	r3, r0
 80039e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039e8:	e00f      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ee:	3328      	adds	r3, #40	; 0x28
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f001 f86a 	bl	8004acc <RCCEx_PLL3_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80039fe:	e004      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10a      	bne.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003a12:	4bbf      	ldr	r3, [pc, #764]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a16:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a20:	4abb      	ldr	r2, [pc, #748]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a22:	430b      	orrs	r3, r1
 8003a24:	6553      	str	r3, [r2, #84]	; 0x54
 8003a26:	e003      	b.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003a30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a38:	f002 0302 	and.w	r3, r2, #2
 8003a3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003a40:	2300      	movs	r3, #0
 8003a42:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003a46:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	d041      	beq.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003a56:	2b05      	cmp	r3, #5
 8003a58:	d824      	bhi.n	8003aa4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003a5a:	a201      	add	r2, pc, #4	; (adr r2, 8003a60 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003a5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a60:	08003aad 	.word	0x08003aad
 8003a64:	08003a79 	.word	0x08003a79
 8003a68:	08003a8f 	.word	0x08003a8f
 8003a6c:	08003aad 	.word	0x08003aad
 8003a70:	08003aad 	.word	0x08003aad
 8003a74:	08003aad 	.word	0x08003aad
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7c:	3308      	adds	r3, #8
 8003a7e:	2101      	movs	r1, #1
 8003a80:	4618      	mov	r0, r3
 8003a82:	f000 ff71 	bl	8004968 <RCCEx_PLL2_Config>
 8003a86:	4603      	mov	r3, r0
 8003a88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003a8c:	e00f      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a92:	3328      	adds	r3, #40	; 0x28
 8003a94:	2101      	movs	r1, #1
 8003a96:	4618      	mov	r0, r3
 8003a98:	f001 f818 	bl	8004acc <RCCEx_PLL3_Config>
 8003a9c:	4603      	mov	r3, r0
 8003a9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003aa2:	e004      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003aaa:	e000      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003aac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10a      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003ab6:	4b96      	ldr	r3, [pc, #600]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aba:	f023 0107 	bic.w	r1, r3, #7
 8003abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ac2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac4:	4a92      	ldr	r2, [pc, #584]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ac6:	430b      	orrs	r3, r1
 8003ac8:	6553      	str	r3, [r2, #84]	; 0x54
 8003aca:	e003      	b.n	8003ad4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003adc:	f002 0304 	and.w	r3, r2, #4
 8003ae0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003aea:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003aee:	460b      	mov	r3, r1
 8003af0:	4313      	orrs	r3, r2
 8003af2:	d044      	beq.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003af4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003afc:	2b05      	cmp	r3, #5
 8003afe:	d825      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003b00:	a201      	add	r2, pc, #4	; (adr r2, 8003b08 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003b02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b06:	bf00      	nop
 8003b08:	08003b55 	.word	0x08003b55
 8003b0c:	08003b21 	.word	0x08003b21
 8003b10:	08003b37 	.word	0x08003b37
 8003b14:	08003b55 	.word	0x08003b55
 8003b18:	08003b55 	.word	0x08003b55
 8003b1c:	08003b55 	.word	0x08003b55
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b24:	3308      	adds	r3, #8
 8003b26:	2101      	movs	r1, #1
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 ff1d 	bl	8004968 <RCCEx_PLL2_Config>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b34:	e00f      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b3a:	3328      	adds	r3, #40	; 0x28
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 ffc4 	bl	8004acc <RCCEx_PLL3_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003b4a:	e004      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003b52:	e000      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b56:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10b      	bne.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b5e:	4b6c      	ldr	r3, [pc, #432]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b62:	f023 0107 	bic.w	r1, r3, #7
 8003b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b6a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b6e:	4a68      	ldr	r2, [pc, #416]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6593      	str	r3, [r2, #88]	; 0x58
 8003b74:	e003      	b.n	8003b7e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b76:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b86:	f002 0320 	and.w	r3, r2, #32
 8003b8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003b8e:	2300      	movs	r3, #0
 8003b90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003b94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003b98:	460b      	mov	r3, r1
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	d055      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003b9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ba2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ba6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003baa:	d033      	beq.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb0:	d82c      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bb6:	d02f      	beq.n	8003c18 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d826      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bc2:	d02b      	beq.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bc8:	d820      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bce:	d012      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd4:	d81a      	bhi.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d022      	beq.n	8003c20 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003bda:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003bde:	d115      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be4:	3308      	adds	r3, #8
 8003be6:	2100      	movs	r1, #0
 8003be8:	4618      	mov	r0, r3
 8003bea:	f000 febd 	bl	8004968 <RCCEx_PLL2_Config>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003bf4:	e015      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfa:	3328      	adds	r3, #40	; 0x28
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f000 ff64 	bl	8004acc <RCCEx_PLL3_Config>
 8003c04:	4603      	mov	r3, r0
 8003c06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003c0a:	e00a      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c12:	e006      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c14:	bf00      	nop
 8003c16:	e004      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c18:	bf00      	nop
 8003c1a:	e002      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c1c:	bf00      	nop
 8003c1e:	e000      	b.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003c20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d10b      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003c2a:	4b39      	ldr	r3, [pc, #228]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c3a:	4a35      	ldr	r2, [pc, #212]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c3c:	430b      	orrs	r3, r1
 8003c3e:	6553      	str	r3, [r2, #84]	; 0x54
 8003c40:	e003      	b.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003c56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003c60:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4313      	orrs	r3, r2
 8003c68:	d058      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003c72:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c76:	d033      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003c78:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003c7c:	d82c      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c82:	d02f      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003c84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c88:	d826      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c8e:	d02b      	beq.n	8003ce8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003c90:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c94:	d820      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9a:	d012      	beq.n	8003cc2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003c9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ca0:	d81a      	bhi.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d022      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003caa:	d115      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003cac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb0:	3308      	adds	r3, #8
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	f000 fe57 	bl	8004968 <RCCEx_PLL2_Config>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cc0:	e015      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cc6:	3328      	adds	r3, #40	; 0x28
 8003cc8:	2102      	movs	r1, #2
 8003cca:	4618      	mov	r0, r3
 8003ccc:	f000 fefe 	bl	8004acc <RCCEx_PLL3_Config>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003cd6:	e00a      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cd8:	2301      	movs	r3, #1
 8003cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cde:	e006      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ce0:	bf00      	nop
 8003ce2:	e004      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ce4:	bf00      	nop
 8003ce6:	e002      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ce8:	bf00      	nop
 8003cea:	e000      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003cec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d10e      	bne.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfa:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003cfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003d06:	4a02      	ldr	r2, [pc, #8]	; (8003d10 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d08:	430b      	orrs	r3, r1
 8003d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d0c:	e006      	b.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003d0e:	bf00      	nop
 8003d10:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d18:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d24:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003d28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d2c:	2300      	movs	r3, #0
 8003d2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d32:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003d36:	460b      	mov	r3, r1
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	d055      	beq.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003d3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003d44:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d48:	d033      	beq.n	8003db2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003d4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003d4e:	d82c      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d54:	d02f      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003d56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d5a:	d826      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d5c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d60:	d02b      	beq.n	8003dba <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003d62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003d66:	d820      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d68:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d6c:	d012      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003d6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003d72:	d81a      	bhi.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d022      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003d78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d7c:	d115      	bne.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d82:	3308      	adds	r3, #8
 8003d84:	2100      	movs	r1, #0
 8003d86:	4618      	mov	r0, r3
 8003d88:	f000 fdee 	bl	8004968 <RCCEx_PLL2_Config>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003d92:	e015      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003d94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d98:	3328      	adds	r3, #40	; 0x28
 8003d9a:	2102      	movs	r1, #2
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 fe95 	bl	8004acc <RCCEx_PLL3_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003da8:	e00a      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003db0:	e006      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003db2:	bf00      	nop
 8003db4:	e004      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003db6:	bf00      	nop
 8003db8:	e002      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dba:	bf00      	nop
 8003dbc:	e000      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003dbe:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10b      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003dc8:	4ba1      	ldr	r3, [pc, #644]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003dcc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003dd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dd4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003dd8:	4a9d      	ldr	r2, [pc, #628]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8003dde:	e003      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003de4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003de8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003dec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df0:	f002 0308 	and.w	r3, r2, #8
 8003df4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003df8:	2300      	movs	r3, #0
 8003dfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003dfe:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8003e02:	460b      	mov	r3, r1
 8003e04:	4313      	orrs	r3, r2
 8003e06:	d01e      	beq.n	8003e46 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003e08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e14:	d10c      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e16:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e1a:	3328      	adds	r3, #40	; 0x28
 8003e1c:	2102      	movs	r1, #2
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f000 fe54 	bl	8004acc <RCCEx_PLL3_Config>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d002      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003e30:	4b87      	ldr	r3, [pc, #540]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e34:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e40:	4a83      	ldr	r2, [pc, #524]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e42:	430b      	orrs	r3, r1
 8003e44:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003e46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e4e:	f002 0310 	and.w	r3, r2, #16
 8003e52:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003e56:	2300      	movs	r3, #0
 8003e58:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003e5c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8003e60:	460b      	mov	r3, r1
 8003e62:	4313      	orrs	r3, r2
 8003e64:	d01e      	beq.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003e66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e6e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e72:	d10c      	bne.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e78:	3328      	adds	r3, #40	; 0x28
 8003e7a:	2102      	movs	r1, #2
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f000 fe25 	bl	8004acc <RCCEx_PLL3_Config>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d002      	beq.n	8003e8e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003e8e:	4b70      	ldr	r3, [pc, #448]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e92:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003e96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003e9e:	4a6c      	ldr	r2, [pc, #432]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ea0:	430b      	orrs	r3, r1
 8003ea2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003ea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8003eb0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003eba:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	d03e      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003ecc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ed0:	d022      	beq.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003ed2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ed6:	d81b      	bhi.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003ee2:	e015      	b.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ee8:	3308      	adds	r3, #8
 8003eea:	2100      	movs	r1, #0
 8003eec:	4618      	mov	r0, r3
 8003eee:	f000 fd3b 	bl	8004968 <RCCEx_PLL2_Config>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003ef8:	e00f      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003efe:	3328      	adds	r3, #40	; 0x28
 8003f00:	2102      	movs	r1, #2
 8003f02:	4618      	mov	r0, r3
 8003f04:	f000 fde2 	bl	8004acc <RCCEx_PLL3_Config>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003f0e:	e004      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f10:	2301      	movs	r3, #1
 8003f12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f16:	e000      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003f18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003f22:	4b4b      	ldr	r3, [pc, #300]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f26:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003f2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003f32:	4a47      	ldr	r2, [pc, #284]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f34:	430b      	orrs	r3, r1
 8003f36:	6593      	str	r3, [r2, #88]	; 0x58
 8003f38:	e003      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8003f4e:	67bb      	str	r3, [r7, #120]	; 0x78
 8003f50:	2300      	movs	r3, #0
 8003f52:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003f54:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	d03b      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f66:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f6a:	d01f      	beq.n	8003fac <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003f6c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003f70:	d818      	bhi.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003f72:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f76:	d003      	beq.n	8003f80 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003f78:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f7c:	d007      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003f7e:	e011      	b.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f80:	4b33      	ldr	r3, [pc, #204]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f84:	4a32      	ldr	r2, [pc, #200]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003f86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f8a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003f8c:	e00f      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f92:	3328      	adds	r3, #40	; 0x28
 8003f94:	2101      	movs	r1, #1
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fd98 	bl	8004acc <RCCEx_PLL3_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003fa2:	e004      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003faa:	e000      	b.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003fac:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d10b      	bne.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003fb6:	4b26      	ldr	r3, [pc, #152]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fba:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003fbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc6:	4a22      	ldr	r2, [pc, #136]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fc8:	430b      	orrs	r3, r1
 8003fca:	6553      	str	r3, [r2, #84]	; 0x54
 8003fcc:	e003      	b.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fd2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fde:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8003fe2:	673b      	str	r3, [r7, #112]	; 0x70
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	677b      	str	r3, [r7, #116]	; 0x74
 8003fe8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003fec:	460b      	mov	r3, r1
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	d034      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003ff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003ffc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004000:	d007      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004002:	e011      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004004:	4b12      	ldr	r3, [pc, #72]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004008:	4a11      	ldr	r2, [pc, #68]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800400a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800400e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004010:	e00e      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004016:	3308      	adds	r3, #8
 8004018:	2102      	movs	r1, #2
 800401a:	4618      	mov	r0, r3
 800401c:	f000 fca4 	bl	8004968 <RCCEx_PLL2_Config>
 8004020:	4603      	mov	r3, r0
 8004022:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004026:	e003      	b.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800402e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004030:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004034:	2b00      	cmp	r3, #0
 8004036:	d10d      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004038:	4b05      	ldr	r3, [pc, #20]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800403a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800403c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004044:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004046:	4a02      	ldr	r2, [pc, #8]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004048:	430b      	orrs	r3, r1
 800404a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800404c:	e006      	b.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800404e:	bf00      	nop
 8004050:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004054:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004058:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800405c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004064:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004068:	66bb      	str	r3, [r7, #104]	; 0x68
 800406a:	2300      	movs	r3, #0
 800406c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800406e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004072:	460b      	mov	r3, r1
 8004074:	4313      	orrs	r3, r2
 8004076:	d00c      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004078:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407c:	3328      	adds	r3, #40	; 0x28
 800407e:	2102      	movs	r1, #2
 8004080:	4618      	mov	r0, r3
 8004082:	f000 fd23 	bl	8004acc <RCCEx_PLL3_Config>
 8004086:	4603      	mov	r3, r0
 8004088:	2b00      	cmp	r3, #0
 800408a:	d002      	beq.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800408c:	2301      	movs	r3, #1
 800408e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004092:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800409a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800409e:	663b      	str	r3, [r7, #96]	; 0x60
 80040a0:	2300      	movs	r3, #0
 80040a2:	667b      	str	r3, [r7, #100]	; 0x64
 80040a4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80040a8:	460b      	mov	r3, r1
 80040aa:	4313      	orrs	r3, r2
 80040ac:	d038      	beq.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040ba:	d018      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80040bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040c0:	d811      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c6:	d014      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80040c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040cc:	d80b      	bhi.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d011      	beq.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80040d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80040d6:	d106      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040d8:	4bc3      	ldr	r3, [pc, #780]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040dc:	4ac2      	ldr	r2, [pc, #776]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80040de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80040e4:	e008      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040e6:	2301      	movs	r3, #1
 80040e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80040ec:	e004      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80040ee:	bf00      	nop
 80040f0:	e002      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80040f2:	bf00      	nop
 80040f4:	e000      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80040f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004100:	4bb9      	ldr	r3, [pc, #740]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004104:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004108:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004110:	4ab5      	ldr	r2, [pc, #724]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004112:	430b      	orrs	r3, r1
 8004114:	6553      	str	r3, [r2, #84]	; 0x54
 8004116:	e003      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004118:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800411c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004128:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800412c:	65bb      	str	r3, [r7, #88]	; 0x58
 800412e:	2300      	movs	r3, #0
 8004130:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004132:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004136:	460b      	mov	r3, r1
 8004138:	4313      	orrs	r3, r2
 800413a:	d009      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800413c:	4baa      	ldr	r3, [pc, #680]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800413e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004140:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004144:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004148:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800414a:	4aa7      	ldr	r2, [pc, #668]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800414c:	430b      	orrs	r3, r1
 800414e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004158:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800415c:	653b      	str	r3, [r7, #80]	; 0x50
 800415e:	2300      	movs	r3, #0
 8004160:	657b      	str	r3, [r7, #84]	; 0x54
 8004162:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004166:	460b      	mov	r3, r1
 8004168:	4313      	orrs	r3, r2
 800416a:	d00a      	beq.n	8004182 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800416c:	4b9e      	ldr	r3, [pc, #632]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004178:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800417c:	4a9a      	ldr	r2, [pc, #616]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800417e:	430b      	orrs	r3, r1
 8004180:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004182:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800418a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800418e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004190:	2300      	movs	r3, #0
 8004192:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004194:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004198:	460b      	mov	r3, r1
 800419a:	4313      	orrs	r3, r2
 800419c:	d009      	beq.n	80041b2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800419e:	4b92      	ldr	r3, [pc, #584]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80041a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041ac:	4a8e      	ldr	r2, [pc, #568]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041ae:	430b      	orrs	r3, r1
 80041b0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80041b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80041be:	643b      	str	r3, [r7, #64]	; 0x40
 80041c0:	2300      	movs	r3, #0
 80041c2:	647b      	str	r3, [r7, #68]	; 0x44
 80041c4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80041c8:	460b      	mov	r3, r1
 80041ca:	4313      	orrs	r3, r2
 80041cc:	d00e      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80041ce:	4b86      	ldr	r3, [pc, #536]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041d0:	691b      	ldr	r3, [r3, #16]
 80041d2:	4a85      	ldr	r2, [pc, #532]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041d4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80041d8:	6113      	str	r3, [r2, #16]
 80041da:	4b83      	ldr	r3, [pc, #524]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041dc:	6919      	ldr	r1, [r3, #16]
 80041de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041e2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80041e6:	4a80      	ldr	r2, [pc, #512]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80041e8:	430b      	orrs	r3, r1
 80041ea:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80041ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041f4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 80041f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041fa:	2300      	movs	r3, #0
 80041fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041fe:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004202:	460b      	mov	r3, r1
 8004204:	4313      	orrs	r3, r2
 8004206:	d009      	beq.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004208:	4b77      	ldr	r3, [pc, #476]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800420a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004214:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004216:	4a74      	ldr	r2, [pc, #464]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004218:	430b      	orrs	r3, r1
 800421a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800421c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004220:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004224:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004228:	633b      	str	r3, [r7, #48]	; 0x30
 800422a:	2300      	movs	r3, #0
 800422c:	637b      	str	r3, [r7, #52]	; 0x34
 800422e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004232:	460b      	mov	r3, r1
 8004234:	4313      	orrs	r3, r2
 8004236:	d00a      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004238:	4b6b      	ldr	r3, [pc, #428]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800423a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800423c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004244:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004248:	4a67      	ldr	r2, [pc, #412]	; (80043e8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800424a:	430b      	orrs	r3, r1
 800424c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800424e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004256:	2100      	movs	r1, #0
 8004258:	62b9      	str	r1, [r7, #40]	; 0x28
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004260:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004264:	460b      	mov	r3, r1
 8004266:	4313      	orrs	r3, r2
 8004268:	d011      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800426a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800426e:	3308      	adds	r3, #8
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f000 fb78 	bl	8004968 <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800427e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004282:	2b00      	cmp	r3, #0
 8004284:	d003      	beq.n	800428e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004286:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800428a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800428e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004296:	2100      	movs	r1, #0
 8004298:	6239      	str	r1, [r7, #32]
 800429a:	f003 0302 	and.w	r3, r3, #2
 800429e:	627b      	str	r3, [r7, #36]	; 0x24
 80042a0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80042a4:	460b      	mov	r3, r1
 80042a6:	4313      	orrs	r3, r2
 80042a8:	d011      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80042aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ae:	3308      	adds	r3, #8
 80042b0:	2101      	movs	r1, #1
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fb58 	bl	8004968 <RCCEx_PLL2_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80042be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	2100      	movs	r1, #0
 80042d8:	61b9      	str	r1, [r7, #24]
 80042da:	f003 0304 	and.w	r3, r3, #4
 80042de:	61fb      	str	r3, [r7, #28]
 80042e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80042e4:	460b      	mov	r3, r1
 80042e6:	4313      	orrs	r3, r2
 80042e8:	d011      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80042ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042ee:	3308      	adds	r3, #8
 80042f0:	2102      	movs	r1, #2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f000 fb38 	bl	8004968 <RCCEx_PLL2_Config>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80042fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004302:	2b00      	cmp	r3, #0
 8004304:	d003      	beq.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004306:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800430a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800430e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004316:	2100      	movs	r1, #0
 8004318:	6139      	str	r1, [r7, #16]
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004324:	460b      	mov	r3, r1
 8004326:	4313      	orrs	r3, r2
 8004328:	d011      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800432a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800432e:	3328      	adds	r3, #40	; 0x28
 8004330:	2100      	movs	r1, #0
 8004332:	4618      	mov	r0, r3
 8004334:	f000 fbca 	bl	8004acc <RCCEx_PLL3_Config>
 8004338:	4603      	mov	r3, r0
 800433a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800433e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800434a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800434e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004356:	2100      	movs	r1, #0
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	f003 0310 	and.w	r3, r3, #16
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004364:	460b      	mov	r3, r1
 8004366:	4313      	orrs	r3, r2
 8004368:	d011      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800436a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800436e:	3328      	adds	r3, #40	; 0x28
 8004370:	2101      	movs	r1, #1
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fbaa 	bl	8004acc <RCCEx_PLL3_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800437e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004382:	2b00      	cmp	r3, #0
 8004384:	d003      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004386:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800438a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800438e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004396:	2100      	movs	r1, #0
 8004398:	6039      	str	r1, [r7, #0]
 800439a:	f003 0320 	and.w	r3, r3, #32
 800439e:	607b      	str	r3, [r7, #4]
 80043a0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80043a4:	460b      	mov	r3, r1
 80043a6:	4313      	orrs	r3, r2
 80043a8:	d011      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80043aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ae:	3328      	adds	r3, #40	; 0x28
 80043b0:	2102      	movs	r1, #2
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fb8a 	bl	8004acc <RCCEx_PLL3_Config>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80043be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80043ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80043ce:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80043d6:	2300      	movs	r3, #0
 80043d8:	e000      	b.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
}
 80043dc:	4618      	mov	r0, r3
 80043de:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80043e2:	46bd      	mov	sp, r7
 80043e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043e8:	58024400 	.word	0x58024400

080043ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80043f0:	f7fe fd96 	bl	8002f20 <HAL_RCC_GetHCLKFreq>
 80043f4:	4602      	mov	r2, r0
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	f003 0307 	and.w	r3, r3, #7
 8004400:	4904      	ldr	r1, [pc, #16]	; (8004414 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004402:	5ccb      	ldrb	r3, [r1, r3]
 8004404:	f003 031f 	and.w	r3, r3, #31
 8004408:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800440c:	4618      	mov	r0, r3
 800440e:	bd80      	pop	{r7, pc}
 8004410:	58024400 	.word	0x58024400
 8004414:	0800975c 	.word	0x0800975c

08004418 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004418:	b480      	push	{r7}
 800441a:	b089      	sub	sp, #36	; 0x24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004420:	4ba1      	ldr	r3, [pc, #644]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	f003 0303 	and.w	r3, r3, #3
 8004428:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800442a:	4b9f      	ldr	r3, [pc, #636]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	0b1b      	lsrs	r3, r3, #12
 8004430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004434:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004436:	4b9c      	ldr	r3, [pc, #624]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443a:	091b      	lsrs	r3, r3, #4
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004442:	4b99      	ldr	r3, [pc, #612]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004444:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004446:	08db      	lsrs	r3, r3, #3
 8004448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800444c:	693a      	ldr	r2, [r7, #16]
 800444e:	fb02 f303 	mul.w	r3, r2, r3
 8004452:	ee07 3a90 	vmov	s15, r3
 8004456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800445a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	f000 8111 	beq.w	8004688 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	2b02      	cmp	r3, #2
 800446a:	f000 8083 	beq.w	8004574 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	2b02      	cmp	r3, #2
 8004472:	f200 80a1 	bhi.w	80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004476:	69bb      	ldr	r3, [r7, #24]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d003      	beq.n	8004484 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b01      	cmp	r3, #1
 8004480:	d056      	beq.n	8004530 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004482:	e099      	b.n	80045b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004484:	4b88      	ldr	r3, [pc, #544]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0320 	and.w	r3, r3, #32
 800448c:	2b00      	cmp	r3, #0
 800448e:	d02d      	beq.n	80044ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004490:	4b85      	ldr	r3, [pc, #532]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	08db      	lsrs	r3, r3, #3
 8004496:	f003 0303 	and.w	r3, r3, #3
 800449a:	4a84      	ldr	r2, [pc, #528]	; (80046ac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800449c:	fa22 f303 	lsr.w	r3, r2, r3
 80044a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	ee07 3a90 	vmov	s15, r3
 80044a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044ba:	4b7b      	ldr	r3, [pc, #492]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c2:	ee07 3a90 	vmov	s15, r3
 80044c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80044ce:	eddf 5a78 	vldr	s11, [pc, #480]	; 80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80044d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80044de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80044ea:	e087      	b.n	80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	ee07 3a90 	vmov	s15, r3
 80044f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044f6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80046b4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80044fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044fe:	4b6a      	ldr	r3, [pc, #424]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004500:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004506:	ee07 3a90 	vmov	s15, r3
 800450a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800450e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004512:	eddf 5a67 	vldr	s11, [pc, #412]	; 80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800451e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800452e:	e065      	b.n	80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004530:	697b      	ldr	r3, [r7, #20]
 8004532:	ee07 3a90 	vmov	s15, r3
 8004536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80046b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800453e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004542:	4b59      	ldr	r3, [pc, #356]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454a:	ee07 3a90 	vmov	s15, r3
 800454e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004552:	ed97 6a03 	vldr	s12, [r7, #12]
 8004556:	eddf 5a56 	vldr	s11, [pc, #344]	; 80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800455a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800455e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800456e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004572:	e043      	b.n	80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	ee07 3a90 	vmov	s15, r3
 800457a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800457e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80046bc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004586:	4b48      	ldr	r3, [pc, #288]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800458a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800458e:	ee07 3a90 	vmov	s15, r3
 8004592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004596:	ed97 6a03 	vldr	s12, [r7, #12]
 800459a:	eddf 5a45 	vldr	s11, [pc, #276]	; 80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800459e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045b6:	e021      	b.n	80045fc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	ee07 3a90 	vmov	s15, r3
 80045be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045c2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80046b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80045c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80045ca:	4b37      	ldr	r3, [pc, #220]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d2:	ee07 3a90 	vmov	s15, r3
 80045d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80045da:	ed97 6a03 	vldr	s12, [r7, #12]
 80045de:	eddf 5a34 	vldr	s11, [pc, #208]	; 80046b0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80045e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80045ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045fa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80045fc:	4b2a      	ldr	r3, [pc, #168]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	0a5b      	lsrs	r3, r3, #9
 8004602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004606:	ee07 3a90 	vmov	s15, r3
 800460a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800460e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004612:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004616:	edd7 6a07 	vldr	s13, [r7, #28]
 800461a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800461e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004622:	ee17 2a90 	vmov	r2, s15
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800462a:	4b1f      	ldr	r3, [pc, #124]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800462c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800462e:	0c1b      	lsrs	r3, r3, #16
 8004630:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004634:	ee07 3a90 	vmov	s15, r3
 8004638:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800463c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004640:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004644:	edd7 6a07 	vldr	s13, [r7, #28]
 8004648:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800464c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004650:	ee17 2a90 	vmov	r2, s15
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004658:	4b13      	ldr	r3, [pc, #76]	; (80046a8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800465a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800465c:	0e1b      	lsrs	r3, r3, #24
 800465e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800466e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004672:	edd7 6a07 	vldr	s13, [r7, #28]
 8004676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800467a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467e:	ee17 2a90 	vmov	r2, s15
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004686:	e008      	b.n	800469a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	609a      	str	r2, [r3, #8]
}
 800469a:	bf00      	nop
 800469c:	3724      	adds	r7, #36	; 0x24
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	58024400 	.word	0x58024400
 80046ac:	03d09000 	.word	0x03d09000
 80046b0:	46000000 	.word	0x46000000
 80046b4:	4c742400 	.word	0x4c742400
 80046b8:	4a742400 	.word	0x4a742400
 80046bc:	4b371b00 	.word	0x4b371b00

080046c0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b089      	sub	sp, #36	; 0x24
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80046c8:	4ba1      	ldr	r3, [pc, #644]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80046d2:	4b9f      	ldr	r3, [pc, #636]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	0d1b      	lsrs	r3, r3, #20
 80046d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046dc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80046de:	4b9c      	ldr	r3, [pc, #624]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	0a1b      	lsrs	r3, r3, #8
 80046e4:	f003 0301 	and.w	r3, r3, #1
 80046e8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80046ea:	4b99      	ldr	r3, [pc, #612]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80046ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ee:	08db      	lsrs	r3, r3, #3
 80046f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	fb02 f303 	mul.w	r3, r2, r3
 80046fa:	ee07 3a90 	vmov	s15, r3
 80046fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004702:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	f000 8111 	beq.w	8004930 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800470e:	69bb      	ldr	r3, [r7, #24]
 8004710:	2b02      	cmp	r3, #2
 8004712:	f000 8083 	beq.w	800481c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	2b02      	cmp	r3, #2
 800471a:	f200 80a1 	bhi.w	8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d003      	beq.n	800472c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d056      	beq.n	80047d8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800472a:	e099      	b.n	8004860 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800472c:	4b88      	ldr	r3, [pc, #544]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	2b00      	cmp	r3, #0
 8004736:	d02d      	beq.n	8004794 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004738:	4b85      	ldr	r3, [pc, #532]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	08db      	lsrs	r3, r3, #3
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	4a84      	ldr	r2, [pc, #528]	; (8004954 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	ee07 3a90 	vmov	s15, r3
 8004750:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	ee07 3a90 	vmov	s15, r3
 800475a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800475e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004762:	4b7b      	ldr	r3, [pc, #492]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800476a:	ee07 3a90 	vmov	s15, r3
 800476e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004772:	ed97 6a03 	vldr	s12, [r7, #12]
 8004776:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800477a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800477e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004782:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800478a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800478e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004792:	e087      	b.n	80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800495c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80047a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a6:	4b6a      	ldr	r3, [pc, #424]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ae:	ee07 3a90 	vmov	s15, r3
 80047b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ba:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80047be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047d6:	e065      	b.n	80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80047e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047ea:	4b59      	ldr	r3, [pc, #356]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80047ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047f2:	ee07 3a90 	vmov	s15, r3
 80047f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fe:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800480a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800480e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004812:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004816:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800481a:	e043      	b.n	80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	ee07 3a90 	vmov	s15, r3
 8004822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004826:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004964 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800482a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482e:	4b48      	ldr	r3, [pc, #288]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004842:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800484a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800485a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485e:	e021      	b.n	80048a4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	ee07 3a90 	vmov	s15, r3
 8004866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800486a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004960 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800486e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004872:	4b37      	ldr	r3, [pc, #220]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800487a:	ee07 3a90 	vmov	s15, r3
 800487e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004882:	ed97 6a03 	vldr	s12, [r7, #12]
 8004886:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004958 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800488a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004892:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800489a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048a2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80048a4:	4b2a      	ldr	r3, [pc, #168]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a8:	0a5b      	lsrs	r3, r3, #9
 80048aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048ae:	ee07 3a90 	vmov	s15, r3
 80048b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048be:	edd7 6a07 	vldr	s13, [r7, #28]
 80048c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ca:	ee17 2a90 	vmov	r2, s15
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80048d2:	4b1f      	ldr	r3, [pc, #124]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	0c1b      	lsrs	r3, r3, #16
 80048d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048dc:	ee07 3a90 	vmov	s15, r3
 80048e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048e8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048ec:	edd7 6a07 	vldr	s13, [r7, #28]
 80048f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80048f4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048f8:	ee17 2a90 	vmov	r2, s15
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004900:	4b13      	ldr	r3, [pc, #76]	; (8004950 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004904:	0e1b      	lsrs	r3, r3, #24
 8004906:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004912:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004916:	ee37 7a87 	vadd.f32	s14, s15, s14
 800491a:	edd7 6a07 	vldr	s13, [r7, #28]
 800491e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004922:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004926:	ee17 2a90 	vmov	r2, s15
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800492e:	e008      	b.n	8004942 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2200      	movs	r2, #0
 800493a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	609a      	str	r2, [r3, #8]
}
 8004942:	bf00      	nop
 8004944:	3724      	adds	r7, #36	; 0x24
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr
 800494e:	bf00      	nop
 8004950:	58024400 	.word	0x58024400
 8004954:	03d09000 	.word	0x03d09000
 8004958:	46000000 	.word	0x46000000
 800495c:	4c742400 	.word	0x4c742400
 8004960:	4a742400 	.word	0x4a742400
 8004964:	4b371b00 	.word	0x4b371b00

08004968 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b084      	sub	sp, #16
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004972:	2300      	movs	r3, #0
 8004974:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004976:	4b53      	ldr	r3, [pc, #332]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b03      	cmp	r3, #3
 8004980:	d101      	bne.n	8004986 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e099      	b.n	8004aba <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004986:	4b4f      	ldr	r3, [pc, #316]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a4e      	ldr	r2, [pc, #312]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 800498c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004990:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004992:	f7fc f973 	bl	8000c7c <HAL_GetTick>
 8004996:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004998:	e008      	b.n	80049ac <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800499a:	f7fc f96f 	bl	8000c7c <HAL_GetTick>
 800499e:	4602      	mov	r2, r0
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	2b02      	cmp	r3, #2
 80049a6:	d901      	bls.n	80049ac <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e086      	b.n	8004aba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049ac:	4b45      	ldr	r3, [pc, #276]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d1f0      	bne.n	800499a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049b8:	4b42      	ldr	r3, [pc, #264]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 80049ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	031b      	lsls	r3, r3, #12
 80049c6:	493f      	ldr	r1, [pc, #252]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 80049c8:	4313      	orrs	r3, r2
 80049ca:	628b      	str	r3, [r1, #40]	; 0x28
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	3b01      	subs	r3, #1
 80049d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	3b01      	subs	r3, #1
 80049dc:	025b      	lsls	r3, r3, #9
 80049de:	b29b      	uxth	r3, r3
 80049e0:	431a      	orrs	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	68db      	ldr	r3, [r3, #12]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	041b      	lsls	r3, r3, #16
 80049ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	061b      	lsls	r3, r3, #24
 80049f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80049fc:	4931      	ldr	r1, [pc, #196]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a02:	4b30      	ldr	r3, [pc, #192]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a06:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	492d      	ldr	r1, [pc, #180]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a14:	4b2b      	ldr	r3, [pc, #172]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a18:	f023 0220 	bic.w	r2, r3, #32
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	699b      	ldr	r3, [r3, #24]
 8004a20:	4928      	ldr	r1, [pc, #160]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a26:	4b27      	ldr	r3, [pc, #156]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	4a26      	ldr	r2, [pc, #152]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a2c:	f023 0310 	bic.w	r3, r3, #16
 8004a30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a32:	4b24      	ldr	r3, [pc, #144]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a34:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a36:	4b24      	ldr	r3, [pc, #144]	; (8004ac8 <RCCEx_PLL2_Config+0x160>)
 8004a38:	4013      	ands	r3, r2
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	69d2      	ldr	r2, [r2, #28]
 8004a3e:	00d2      	lsls	r2, r2, #3
 8004a40:	4920      	ldr	r1, [pc, #128]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a46:	4b1f      	ldr	r3, [pc, #124]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4a:	4a1e      	ldr	r2, [pc, #120]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	f043 0310 	orr.w	r3, r3, #16
 8004a50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d106      	bne.n	8004a66 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a58:	4b1a      	ldr	r3, [pc, #104]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	4a19      	ldr	r2, [pc, #100]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a62:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a64:	e00f      	b.n	8004a86 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d106      	bne.n	8004a7a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a6c:	4b15      	ldr	r3, [pc, #84]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a70:	4a14      	ldr	r2, [pc, #80]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a76:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a78:	e005      	b.n	8004a86 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a7a:	4b12      	ldr	r3, [pc, #72]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a7e:	4a11      	ldr	r2, [pc, #68]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a84:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004a86:	4b0f      	ldr	r3, [pc, #60]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a0e      	ldr	r2, [pc, #56]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004a8c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a92:	f7fc f8f3 	bl	8000c7c <HAL_GetTick>
 8004a96:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004a98:	e008      	b.n	8004aac <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004a9a:	f7fc f8ef 	bl	8000c7c <HAL_GetTick>
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	68bb      	ldr	r3, [r7, #8]
 8004aa2:	1ad3      	subs	r3, r2, r3
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d901      	bls.n	8004aac <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e006      	b.n	8004aba <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <RCCEx_PLL2_Config+0x15c>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d0f0      	beq.n	8004a9a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3710      	adds	r7, #16
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	58024400 	.word	0x58024400
 8004ac8:	ffff0007 	.word	0xffff0007

08004acc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004ada:	4b53      	ldr	r3, [pc, #332]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ade:	f003 0303 	and.w	r3, r3, #3
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d101      	bne.n	8004aea <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e099      	b.n	8004c1e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004aea:	4b4f      	ldr	r3, [pc, #316]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a4e      	ldr	r2, [pc, #312]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004af0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004af4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004af6:	f7fc f8c1 	bl	8000c7c <HAL_GetTick>
 8004afa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004afc:	e008      	b.n	8004b10 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004afe:	f7fc f8bd 	bl	8000c7c <HAL_GetTick>
 8004b02:	4602      	mov	r2, r0
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d901      	bls.n	8004b10 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b0c:	2303      	movs	r3, #3
 8004b0e:	e086      	b.n	8004c1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b10:	4b45      	ldr	r3, [pc, #276]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1f0      	bne.n	8004afe <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b1c:	4b42      	ldr	r3, [pc, #264]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b20:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	051b      	lsls	r3, r3, #20
 8004b2a:	493f      	ldr	r1, [pc, #252]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	628b      	str	r3, [r1, #40]	; 0x28
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	3b01      	subs	r3, #1
 8004b40:	025b      	lsls	r3, r3, #9
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	431a      	orrs	r2, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	041b      	lsls	r3, r3, #16
 8004b4e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b52:	431a      	orrs	r2, r3
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	691b      	ldr	r3, [r3, #16]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	061b      	lsls	r3, r3, #24
 8004b5c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b60:	4931      	ldr	r1, [pc, #196]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b66:	4b30      	ldr	r3, [pc, #192]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b6a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	492d      	ldr	r1, [pc, #180]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b74:	4313      	orrs	r3, r2
 8004b76:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b78:	4b2b      	ldr	r3, [pc, #172]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b7c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	699b      	ldr	r3, [r3, #24]
 8004b84:	4928      	ldr	r1, [pc, #160]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004b8a:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	4a26      	ldr	r2, [pc, #152]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004b96:	4b24      	ldr	r3, [pc, #144]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004b98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004b9a:	4b24      	ldr	r3, [pc, #144]	; (8004c2c <RCCEx_PLL3_Config+0x160>)
 8004b9c:	4013      	ands	r3, r2
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	69d2      	ldr	r2, [r2, #28]
 8004ba2:	00d2      	lsls	r2, r2, #3
 8004ba4:	4920      	ldr	r1, [pc, #128]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004baa:	4b1f      	ldr	r3, [pc, #124]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bae:	4a1e      	ldr	r2, [pc, #120]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d106      	bne.n	8004bca <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004bbc:	4b1a      	ldr	r3, [pc, #104]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bc0:	4a19      	ldr	r2, [pc, #100]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004bc2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bc6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bc8:	e00f      	b.n	8004bea <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d106      	bne.n	8004bde <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004bd0:	4b15      	ldr	r3, [pc, #84]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd4:	4a14      	ldr	r2, [pc, #80]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004bd6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bdc:	e005      	b.n	8004bea <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004bde:	4b12      	ldr	r3, [pc, #72]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be2:	4a11      	ldr	r2, [pc, #68]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004be4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004be8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004bea:	4b0f      	ldr	r3, [pc, #60]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a0e      	ldr	r2, [pc, #56]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bf4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf6:	f7fc f841 	bl	8000c7c <HAL_GetTick>
 8004bfa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004bfc:	e008      	b.n	8004c10 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004bfe:	f7fc f83d 	bl	8000c7c <HAL_GetTick>
 8004c02:	4602      	mov	r2, r0
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d901      	bls.n	8004c10 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e006      	b.n	8004c1e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c10:	4b05      	ldr	r3, [pc, #20]	; (8004c28 <RCCEx_PLL3_Config+0x15c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0f0      	beq.n	8004bfe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3710      	adds	r7, #16
 8004c22:	46bd      	mov	sp, r7
 8004c24:	bd80      	pop	{r7, pc}
 8004c26:	bf00      	nop
 8004c28:	58024400 	.word	0x58024400
 8004c2c:	ffff0007 	.word	0xffff0007

08004c30 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d101      	bne.n	8004c42 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e10f      	b.n	8004e62 <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4a87      	ldr	r2, [pc, #540]	; (8004e6c <HAL_SPI_Init+0x23c>)
 8004c4e:	4293      	cmp	r3, r2
 8004c50:	d00f      	beq.n	8004c72 <HAL_SPI_Init+0x42>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a86      	ldr	r2, [pc, #536]	; (8004e70 <HAL_SPI_Init+0x240>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d00a      	beq.n	8004c72 <HAL_SPI_Init+0x42>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a84      	ldr	r2, [pc, #528]	; (8004e74 <HAL_SPI_Init+0x244>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d005      	beq.n	8004c72 <HAL_SPI_Init+0x42>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2b0f      	cmp	r3, #15
 8004c6c:	d901      	bls.n	8004c72 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e0f7      	b.n	8004e62 <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f900 	bl	8004e78 <SPI_GetPacketSize>
 8004c78:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	4a7b      	ldr	r2, [pc, #492]	; (8004e6c <HAL_SPI_Init+0x23c>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d00c      	beq.n	8004c9e <HAL_SPI_Init+0x6e>
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	4a79      	ldr	r2, [pc, #484]	; (8004e70 <HAL_SPI_Init+0x240>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d007      	beq.n	8004c9e <HAL_SPI_Init+0x6e>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4a78      	ldr	r2, [pc, #480]	; (8004e74 <HAL_SPI_Init+0x244>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d002      	beq.n	8004c9e <HAL_SPI_Init+0x6e>
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2b08      	cmp	r3, #8
 8004c9c:	d811      	bhi.n	8004cc2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8004ca2:	4a72      	ldr	r2, [pc, #456]	; (8004e6c <HAL_SPI_Init+0x23c>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d009      	beq.n	8004cbc <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a70      	ldr	r2, [pc, #448]	; (8004e70 <HAL_SPI_Init+0x240>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_SPI_Init+0x8c>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a6f      	ldr	r2, [pc, #444]	; (8004e74 <HAL_SPI_Init+0x244>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d104      	bne.n	8004cc6 <HAL_SPI_Init+0x96>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2b10      	cmp	r3, #16
 8004cc0:	d901      	bls.n	8004cc6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e0cd      	b.n	8004e62 <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f003 fcb2 	bl	8008644 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	681a      	ldr	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f022 0201 	bic.w	r2, r2, #1
 8004cf6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	689b      	ldr	r3, [r3, #8]
 8004cfe:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8004d02:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004d0c:	d119      	bne.n	8004d42 <HAL_SPI_Init+0x112>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d16:	d103      	bne.n	8004d20 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10c      	bne.n	8004d42 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8004d2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004d30:	d107      	bne.n	8004d42 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	681a      	ldr	r2, [r3, #0]
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004d40:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00f      	beq.n	8004d6e <HAL_SPI_Init+0x13e>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2b06      	cmp	r3, #6
 8004d54:	d90b      	bls.n	8004d6e <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	430a      	orrs	r2, r1
 8004d6a:	601a      	str	r2, [r3, #0]
 8004d6c:	e007      	b.n	8004d7e <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d7c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	69da      	ldr	r2, [r3, #28]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d86:	431a      	orrs	r2, r3
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d90:	ea42 0103 	orr.w	r1, r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	430a      	orrs	r2, r1
 8004d9e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	431a      	orrs	r2, r3
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	431a      	orrs	r2, r3
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	695b      	ldr	r3, [r3, #20]
 8004dc0:	431a      	orrs	r2, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	431a      	orrs	r2, r3
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	431a      	orrs	r2, r3
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004dd2:	431a      	orrs	r2, r3
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dde:	ea42 0103 	orr.w	r1, r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	430a      	orrs	r2, r1
 8004dec:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d113      	bne.n	8004e1e <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e08:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e1c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	f022 0201 	bic.w	r2, r2, #1
 8004e2c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8004e60:	2300      	movs	r3, #0
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	40013000 	.word	0x40013000
 8004e70:	40003800 	.word	0x40003800
 8004e74:	40003c00 	.word	0x40003c00

08004e78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b085      	sub	sp, #20
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	095b      	lsrs	r3, r3, #5
 8004e86:	3301      	adds	r3, #1
 8004e88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68db      	ldr	r3, [r3, #12]
 8004e8e:	3301      	adds	r3, #1
 8004e90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8004e92:	68bb      	ldr	r3, [r7, #8]
 8004e94:	3307      	adds	r3, #7
 8004e96:	08db      	lsrs	r3, r3, #3
 8004e98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	fb02 f303 	mul.w	r3, r2, r3
}
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	3714      	adds	r7, #20
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eac:	4770      	bx	lr

08004eae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b082      	sub	sp, #8
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d101      	bne.n	8004ec0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e049      	b.n	8004f54 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d106      	bne.n	8004eda <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f003 fc1d 	bl	8008714 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681a      	ldr	r2, [r3, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	3304      	adds	r3, #4
 8004eea:	4619      	mov	r1, r3
 8004eec:	4610      	mov	r0, r2
 8004eee:	f000 fb5d 	bl	80055ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2201      	movs	r2, #1
 8004f1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2201      	movs	r2, #1
 8004f3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2201      	movs	r2, #1
 8004f46:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2201      	movs	r2, #1
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f52:	2300      	movs	r3, #0
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3708      	adds	r7, #8
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd80      	pop	{r7, pc}

08004f5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b085      	sub	sp, #20
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f6a:	b2db      	uxtb	r3, r3
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d001      	beq.n	8004f74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e04c      	b.n	800500e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a26      	ldr	r2, [pc, #152]	; (800501c <HAL_TIM_Base_Start+0xc0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d022      	beq.n	8004fcc <HAL_TIM_Base_Start+0x70>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f8e:	d01d      	beq.n	8004fcc <HAL_TIM_Base_Start+0x70>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a22      	ldr	r2, [pc, #136]	; (8005020 <HAL_TIM_Base_Start+0xc4>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d018      	beq.n	8004fcc <HAL_TIM_Base_Start+0x70>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a21      	ldr	r2, [pc, #132]	; (8005024 <HAL_TIM_Base_Start+0xc8>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d013      	beq.n	8004fcc <HAL_TIM_Base_Start+0x70>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	; (8005028 <HAL_TIM_Base_Start+0xcc>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00e      	beq.n	8004fcc <HAL_TIM_Base_Start+0x70>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a1e      	ldr	r2, [pc, #120]	; (800502c <HAL_TIM_Base_Start+0xd0>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d009      	beq.n	8004fcc <HAL_TIM_Base_Start+0x70>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <HAL_TIM_Base_Start+0xd4>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d004      	beq.n	8004fcc <HAL_TIM_Base_Start+0x70>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a1b      	ldr	r2, [pc, #108]	; (8005034 <HAL_TIM_Base_Start+0xd8>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d115      	bne.n	8004ff8 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	4b19      	ldr	r3, [pc, #100]	; (8005038 <HAL_TIM_Base_Start+0xdc>)
 8004fd4:	4013      	ands	r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2b06      	cmp	r3, #6
 8004fdc:	d015      	beq.n	800500a <HAL_TIM_Base_Start+0xae>
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fe4:	d011      	beq.n	800500a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	681a      	ldr	r2, [r3, #0]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f042 0201 	orr.w	r2, r2, #1
 8004ff4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ff6:	e008      	b.n	800500a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f042 0201 	orr.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	e000      	b.n	800500c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800500a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3714      	adds	r7, #20
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40010000 	.word	0x40010000
 8005020:	40000400 	.word	0x40000400
 8005024:	40000800 	.word	0x40000800
 8005028:	40000c00 	.word	0x40000c00
 800502c:	40010400 	.word	0x40010400
 8005030:	40001800 	.word	0x40001800
 8005034:	40014000 	.word	0x40014000
 8005038:	00010007 	.word	0x00010007

0800503c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800504a:	b2db      	uxtb	r3, r3
 800504c:	2b01      	cmp	r3, #1
 800504e:	d001      	beq.n	8005054 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e054      	b.n	80050fe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2202      	movs	r2, #2
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	68da      	ldr	r2, [r3, #12]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f042 0201 	orr.w	r2, r2, #1
 800506a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	4a26      	ldr	r2, [pc, #152]	; (800510c <HAL_TIM_Base_Start_IT+0xd0>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d022      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x80>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800507e:	d01d      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x80>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	4a22      	ldr	r2, [pc, #136]	; (8005110 <HAL_TIM_Base_Start_IT+0xd4>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d018      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x80>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4a21      	ldr	r2, [pc, #132]	; (8005114 <HAL_TIM_Base_Start_IT+0xd8>)
 8005090:	4293      	cmp	r3, r2
 8005092:	d013      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x80>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1f      	ldr	r2, [pc, #124]	; (8005118 <HAL_TIM_Base_Start_IT+0xdc>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d00e      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x80>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a1e      	ldr	r2, [pc, #120]	; (800511c <HAL_TIM_Base_Start_IT+0xe0>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x80>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a1c      	ldr	r2, [pc, #112]	; (8005120 <HAL_TIM_Base_Start_IT+0xe4>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	d004      	beq.n	80050bc <HAL_TIM_Base_Start_IT+0x80>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <HAL_TIM_Base_Start_IT+0xe8>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d115      	bne.n	80050e8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	689a      	ldr	r2, [r3, #8]
 80050c2:	4b19      	ldr	r3, [pc, #100]	; (8005128 <HAL_TIM_Base_Start_IT+0xec>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2b06      	cmp	r3, #6
 80050cc:	d015      	beq.n	80050fa <HAL_TIM_Base_Start_IT+0xbe>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050d4:	d011      	beq.n	80050fa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f042 0201 	orr.w	r2, r2, #1
 80050e4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050e6:	e008      	b.n	80050fa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 0201 	orr.w	r2, r2, #1
 80050f6:	601a      	str	r2, [r3, #0]
 80050f8:	e000      	b.n	80050fc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050fa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3714      	adds	r7, #20
 8005102:	46bd      	mov	sp, r7
 8005104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005108:	4770      	bx	lr
 800510a:	bf00      	nop
 800510c:	40010000 	.word	0x40010000
 8005110:	40000400 	.word	0x40000400
 8005114:	40000800 	.word	0x40000800
 8005118:	40000c00 	.word	0x40000c00
 800511c:	40010400 	.word	0x40010400
 8005120:	40001800 	.word	0x40001800
 8005124:	40014000 	.word	0x40014000
 8005128:	00010007 	.word	0x00010007

0800512c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b02      	cmp	r3, #2
 8005140:	d122      	bne.n	8005188 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b02      	cmp	r3, #2
 800514e:	d11b      	bne.n	8005188 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f06f 0202 	mvn.w	r2, #2
 8005158:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2201      	movs	r2, #1
 800515e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	f003 0303 	and.w	r3, r3, #3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 f9fe 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 8005174:	e005      	b.n	8005182 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005176:	6878      	ldr	r0, [r7, #4]
 8005178:	f000 f9f0 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f000 fa01 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2200      	movs	r2, #0
 8005186:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f003 0304 	and.w	r3, r3, #4
 8005192:	2b04      	cmp	r3, #4
 8005194:	d122      	bne.n	80051dc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
 800519c:	f003 0304 	and.w	r3, r3, #4
 80051a0:	2b04      	cmp	r3, #4
 80051a2:	d11b      	bne.n	80051dc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f06f 0204 	mvn.w	r2, #4
 80051ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d003      	beq.n	80051ca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f000 f9d4 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 80051c8:	e005      	b.n	80051d6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f9c6 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f9d7 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2200      	movs	r2, #0
 80051da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b08      	cmp	r3, #8
 80051e8:	d122      	bne.n	8005230 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68db      	ldr	r3, [r3, #12]
 80051f0:	f003 0308 	and.w	r3, r3, #8
 80051f4:	2b08      	cmp	r3, #8
 80051f6:	d11b      	bne.n	8005230 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f06f 0208 	mvn.w	r2, #8
 8005200:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2204      	movs	r2, #4
 8005206:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	69db      	ldr	r3, [r3, #28]
 800520e:	f003 0303 	and.w	r3, r3, #3
 8005212:	2b00      	cmp	r3, #0
 8005214:	d003      	beq.n	800521e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f9aa 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 800521c:	e005      	b.n	800522a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 f99c 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f9ad 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2200      	movs	r2, #0
 800522e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	f003 0310 	and.w	r3, r3, #16
 800523a:	2b10      	cmp	r3, #16
 800523c:	d122      	bne.n	8005284 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	68db      	ldr	r3, [r3, #12]
 8005244:	f003 0310 	and.w	r3, r3, #16
 8005248:	2b10      	cmp	r3, #16
 800524a:	d11b      	bne.n	8005284 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f06f 0210 	mvn.w	r2, #16
 8005254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2208      	movs	r2, #8
 800525a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f980 	bl	8005570 <HAL_TIM_IC_CaptureCallback>
 8005270:	e005      	b.n	800527e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f000 f972 	bl	800555c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 f983 	bl	8005584 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2200      	movs	r2, #0
 8005282:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b01      	cmp	r3, #1
 8005290:	d10e      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b01      	cmp	r3, #1
 800529e:	d107      	bne.n	80052b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f06f 0201 	mvn.w	r2, #1
 80052a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f002 ffe8 	bl	8008280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052ba:	2b80      	cmp	r3, #128	; 0x80
 80052bc:	d10e      	bne.n	80052dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c8:	2b80      	cmp	r3, #128	; 0x80
 80052ca:	d107      	bne.n	80052dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052d6:	6878      	ldr	r0, [r7, #4]
 80052d8:	f000 fb38 	bl	800594c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052ea:	d10e      	bne.n	800530a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b80      	cmp	r3, #128	; 0x80
 80052f8:	d107      	bne.n	800530a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 fb2b 	bl	8005960 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	691b      	ldr	r3, [r3, #16]
 8005310:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005314:	2b40      	cmp	r3, #64	; 0x40
 8005316:	d10e      	bne.n	8005336 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005322:	2b40      	cmp	r3, #64	; 0x40
 8005324:	d107      	bne.n	8005336 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800532e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f000 f931 	bl	8005598 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	691b      	ldr	r3, [r3, #16]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b20      	cmp	r3, #32
 8005342:	d10e      	bne.n	8005362 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0320 	and.w	r3, r3, #32
 800534e:	2b20      	cmp	r3, #32
 8005350:	d107      	bne.n	8005362 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f06f 0220 	mvn.w	r2, #32
 800535a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 faeb 	bl	8005938 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005362:	bf00      	nop
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005380:	2b01      	cmp	r3, #1
 8005382:	d101      	bne.n	8005388 <HAL_TIM_ConfigClockSource+0x1c>
 8005384:	2302      	movs	r3, #2
 8005386:	e0dc      	b.n	8005542 <HAL_TIM_ConfigClockSource+0x1d6>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	4b6a      	ldr	r3, [pc, #424]	; (800554c <HAL_TIM_ConfigClockSource+0x1e0>)
 80053a4:	4013      	ands	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053ae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68ba      	ldr	r2, [r7, #8]
 80053b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4a64      	ldr	r2, [pc, #400]	; (8005550 <HAL_TIM_ConfigClockSource+0x1e4>)
 80053be:	4293      	cmp	r3, r2
 80053c0:	f000 80a9 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1aa>
 80053c4:	4a62      	ldr	r2, [pc, #392]	; (8005550 <HAL_TIM_ConfigClockSource+0x1e4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	f200 80ae 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 80053cc:	4a61      	ldr	r2, [pc, #388]	; (8005554 <HAL_TIM_ConfigClockSource+0x1e8>)
 80053ce:	4293      	cmp	r3, r2
 80053d0:	f000 80a1 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1aa>
 80053d4:	4a5f      	ldr	r2, [pc, #380]	; (8005554 <HAL_TIM_ConfigClockSource+0x1e8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	f200 80a6 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 80053dc:	4a5e      	ldr	r2, [pc, #376]	; (8005558 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	f000 8099 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1aa>
 80053e4:	4a5c      	ldr	r2, [pc, #368]	; (8005558 <HAL_TIM_ConfigClockSource+0x1ec>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	f200 809e 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 80053ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053f0:	f000 8091 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1aa>
 80053f4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80053f8:	f200 8096 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 80053fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005400:	f000 8089 	beq.w	8005516 <HAL_TIM_ConfigClockSource+0x1aa>
 8005404:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005408:	f200 808e 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 800540c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005410:	d03e      	beq.n	8005490 <HAL_TIM_ConfigClockSource+0x124>
 8005412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005416:	f200 8087 	bhi.w	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 800541a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800541e:	f000 8086 	beq.w	800552e <HAL_TIM_ConfigClockSource+0x1c2>
 8005422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005426:	d87f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 8005428:	2b70      	cmp	r3, #112	; 0x70
 800542a:	d01a      	beq.n	8005462 <HAL_TIM_ConfigClockSource+0xf6>
 800542c:	2b70      	cmp	r3, #112	; 0x70
 800542e:	d87b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 8005430:	2b60      	cmp	r3, #96	; 0x60
 8005432:	d050      	beq.n	80054d6 <HAL_TIM_ConfigClockSource+0x16a>
 8005434:	2b60      	cmp	r3, #96	; 0x60
 8005436:	d877      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 8005438:	2b50      	cmp	r3, #80	; 0x50
 800543a:	d03c      	beq.n	80054b6 <HAL_TIM_ConfigClockSource+0x14a>
 800543c:	2b50      	cmp	r3, #80	; 0x50
 800543e:	d873      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 8005440:	2b40      	cmp	r3, #64	; 0x40
 8005442:	d058      	beq.n	80054f6 <HAL_TIM_ConfigClockSource+0x18a>
 8005444:	2b40      	cmp	r3, #64	; 0x40
 8005446:	d86f      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 8005448:	2b30      	cmp	r3, #48	; 0x30
 800544a:	d064      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x1aa>
 800544c:	2b30      	cmp	r3, #48	; 0x30
 800544e:	d86b      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 8005450:	2b20      	cmp	r3, #32
 8005452:	d060      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x1aa>
 8005454:	2b20      	cmp	r3, #32
 8005456:	d867      	bhi.n	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
 8005458:	2b00      	cmp	r3, #0
 800545a:	d05c      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x1aa>
 800545c:	2b10      	cmp	r3, #16
 800545e:	d05a      	beq.n	8005516 <HAL_TIM_ConfigClockSource+0x1aa>
 8005460:	e062      	b.n	8005528 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6818      	ldr	r0, [r3, #0]
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	6899      	ldr	r1, [r3, #8]
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	68db      	ldr	r3, [r3, #12]
 8005472:	f000 f9b3 	bl	80057dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68ba      	ldr	r2, [r7, #8]
 800548c:	609a      	str	r2, [r3, #8]
      break;
 800548e:	e04f      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6818      	ldr	r0, [r3, #0]
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	6899      	ldr	r1, [r3, #8]
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	685a      	ldr	r2, [r3, #4]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	f000 f99c 	bl	80057dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80054b2:	609a      	str	r2, [r3, #8]
      break;
 80054b4:	e03c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6818      	ldr	r0, [r3, #0]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	6859      	ldr	r1, [r3, #4]
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f000 f90c 	bl	80056e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	2150      	movs	r1, #80	; 0x50
 80054ce:	4618      	mov	r0, r3
 80054d0:	f000 f966 	bl	80057a0 <TIM_ITRx_SetConfig>
      break;
 80054d4:	e02c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6818      	ldr	r0, [r3, #0]
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	6859      	ldr	r1, [r3, #4]
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	461a      	mov	r2, r3
 80054e4:	f000 f92b 	bl	800573e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	2160      	movs	r1, #96	; 0x60
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 f956 	bl	80057a0 <TIM_ITRx_SetConfig>
      break;
 80054f4:	e01c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	6859      	ldr	r1, [r3, #4]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	68db      	ldr	r3, [r3, #12]
 8005502:	461a      	mov	r2, r3
 8005504:	f000 f8ec 	bl	80056e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	2140      	movs	r1, #64	; 0x40
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f946 	bl	80057a0 <TIM_ITRx_SetConfig>
      break;
 8005514:	e00c      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f000 f93d 	bl	80057a0 <TIM_ITRx_SetConfig>
      break;
 8005526:	e003      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
      break;
 800552c:	e000      	b.n	8005530 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800552e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005540:	7bfb      	ldrb	r3, [r7, #15]
}
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	ffceff88 	.word	0xffceff88
 8005550:	00100040 	.word	0x00100040
 8005554:	00100030 	.word	0x00100030
 8005558:	00100020 	.word	0x00100020

0800555c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005564:	bf00      	nop
 8005566:	370c      	adds	r7, #12
 8005568:	46bd      	mov	sp, r7
 800556a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556e:	4770      	bx	lr

08005570 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005570:	b480      	push	{r7}
 8005572:	b083      	sub	sp, #12
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80055a0:	bf00      	nop
 80055a2:	370c      	adds	r7, #12
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	4a40      	ldr	r2, [pc, #256]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d013      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ca:	d00f      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	4a3d      	ldr	r2, [pc, #244]	; (80056c4 <TIM_Base_SetConfig+0x118>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d00b      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a3c      	ldr	r2, [pc, #240]	; (80056c8 <TIM_Base_SetConfig+0x11c>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d007      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	4a3b      	ldr	r2, [pc, #236]	; (80056cc <TIM_Base_SetConfig+0x120>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d003      	beq.n	80055ec <TIM_Base_SetConfig+0x40>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	4a3a      	ldr	r2, [pc, #232]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d108      	bne.n	80055fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	68fa      	ldr	r2, [r7, #12]
 80055fa:	4313      	orrs	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a2f      	ldr	r2, [pc, #188]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d01f      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800560c:	d01b      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a2c      	ldr	r2, [pc, #176]	; (80056c4 <TIM_Base_SetConfig+0x118>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d017      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a2b      	ldr	r2, [pc, #172]	; (80056c8 <TIM_Base_SetConfig+0x11c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d013      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a2a      	ldr	r2, [pc, #168]	; (80056cc <TIM_Base_SetConfig+0x120>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d00f      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a29      	ldr	r2, [pc, #164]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d00b      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a28      	ldr	r2, [pc, #160]	; (80056d4 <TIM_Base_SetConfig+0x128>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d007      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a27      	ldr	r2, [pc, #156]	; (80056d8 <TIM_Base_SetConfig+0x12c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d003      	beq.n	8005646 <TIM_Base_SetConfig+0x9a>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a26      	ldr	r2, [pc, #152]	; (80056dc <TIM_Base_SetConfig+0x130>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d108      	bne.n	8005658 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800564c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	68db      	ldr	r3, [r3, #12]
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	4313      	orrs	r3, r2
 8005656:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689a      	ldr	r2, [r3, #8]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	4a10      	ldr	r2, [pc, #64]	; (80056c0 <TIM_Base_SetConfig+0x114>)
 8005680:	4293      	cmp	r3, r2
 8005682:	d00f      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a12      	ldr	r2, [pc, #72]	; (80056d0 <TIM_Base_SetConfig+0x124>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d00b      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	4a11      	ldr	r2, [pc, #68]	; (80056d4 <TIM_Base_SetConfig+0x128>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d007      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a10      	ldr	r2, [pc, #64]	; (80056d8 <TIM_Base_SetConfig+0x12c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d003      	beq.n	80056a4 <TIM_Base_SetConfig+0xf8>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a0f      	ldr	r2, [pc, #60]	; (80056dc <TIM_Base_SetConfig+0x130>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d103      	bne.n	80056ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056a4:	683b      	ldr	r3, [r7, #0]
 80056a6:	691a      	ldr	r2, [r3, #16]
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	615a      	str	r2, [r3, #20]
}
 80056b2:	bf00      	nop
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	40010000 	.word	0x40010000
 80056c4:	40000400 	.word	0x40000400
 80056c8:	40000800 	.word	0x40000800
 80056cc:	40000c00 	.word	0x40000c00
 80056d0:	40010400 	.word	0x40010400
 80056d4:	40014000 	.word	0x40014000
 80056d8:	40014400 	.word	0x40014400
 80056dc:	40014800 	.word	0x40014800

080056e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b087      	sub	sp, #28
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	60f8      	str	r0, [r7, #12]
 80056e8:	60b9      	str	r1, [r7, #8]
 80056ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6a1b      	ldr	r3, [r3, #32]
 80056f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	6a1b      	ldr	r3, [r3, #32]
 80056f6:	f023 0201 	bic.w	r2, r3, #1
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800570a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	011b      	lsls	r3, r3, #4
 8005710:	693a      	ldr	r2, [r7, #16]
 8005712:	4313      	orrs	r3, r2
 8005714:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	f023 030a 	bic.w	r3, r3, #10
 800571c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800571e:	697a      	ldr	r2, [r7, #20]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4313      	orrs	r3, r2
 8005724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	621a      	str	r2, [r3, #32]
}
 8005732:	bf00      	nop
 8005734:	371c      	adds	r7, #28
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800573e:	b480      	push	{r7}
 8005740:	b087      	sub	sp, #28
 8005742:	af00      	add	r7, sp, #0
 8005744:	60f8      	str	r0, [r7, #12]
 8005746:	60b9      	str	r1, [r7, #8]
 8005748:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6a1b      	ldr	r3, [r3, #32]
 800574e:	f023 0210 	bic.w	r2, r3, #16
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	699b      	ldr	r3, [r3, #24]
 800575a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6a1b      	ldr	r3, [r3, #32]
 8005760:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005768:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	031b      	lsls	r3, r3, #12
 800576e:	697a      	ldr	r2, [r7, #20]
 8005770:	4313      	orrs	r3, r2
 8005772:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800577a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	011b      	lsls	r3, r3, #4
 8005780:	693a      	ldr	r2, [r7, #16]
 8005782:	4313      	orrs	r3, r2
 8005784:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	621a      	str	r2, [r3, #32]
}
 8005792:	bf00      	nop
 8005794:	371c      	adds	r7, #28
 8005796:	46bd      	mov	sp, r7
 8005798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579c:	4770      	bx	lr
	...

080057a0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
 80057a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	689b      	ldr	r3, [r3, #8]
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <TIM_ITRx_SetConfig+0x38>)
 80057b4:	4013      	ands	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4313      	orrs	r3, r2
 80057be:	f043 0307 	orr.w	r3, r3, #7
 80057c2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	609a      	str	r2, [r3, #8]
}
 80057ca:	bf00      	nop
 80057cc:	3714      	adds	r7, #20
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr
 80057d6:	bf00      	nop
 80057d8:	ffcfff8f 	.word	0xffcfff8f

080057dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	60f8      	str	r0, [r7, #12]
 80057e4:	60b9      	str	r1, [r7, #8]
 80057e6:	607a      	str	r2, [r7, #4]
 80057e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	021a      	lsls	r2, r3, #8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	431a      	orrs	r2, r3
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	4313      	orrs	r3, r2
 8005804:	697a      	ldr	r2, [r7, #20]
 8005806:	4313      	orrs	r3, r2
 8005808:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	697a      	ldr	r2, [r7, #20]
 800580e:	609a      	str	r2, [r3, #8]
}
 8005810:	bf00      	nop
 8005812:	371c      	adds	r7, #28
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005830:	2302      	movs	r3, #2
 8005832:	e06d      	b.n	8005910 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a30      	ldr	r2, [pc, #192]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d004      	beq.n	8005868 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a2f      	ldr	r2, [pc, #188]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d108      	bne.n	800587a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800586e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	4313      	orrs	r3, r2
 8005878:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005880:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	68fa      	ldr	r2, [r7, #12]
 8005888:	4313      	orrs	r3, r2
 800588a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a20      	ldr	r2, [pc, #128]	; (800591c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d022      	beq.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058a6:	d01d      	beq.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d018      	beq.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1c      	ldr	r2, [pc, #112]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d013      	beq.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1a      	ldr	r2, [pc, #104]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d00e      	beq.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a15      	ldr	r2, [pc, #84]	; (8005920 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d009      	beq.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a16      	ldr	r2, [pc, #88]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d004      	beq.n	80058e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a15      	ldr	r2, [pc, #84]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d10c      	bne.n	80058fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	68ba      	ldr	r2, [r7, #8]
 80058f2:	4313      	orrs	r3, r2
 80058f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800590e:	2300      	movs	r3, #0
}
 8005910:	4618      	mov	r0, r3
 8005912:	3714      	adds	r7, #20
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr
 800591c:	40010000 	.word	0x40010000
 8005920:	40010400 	.word	0x40010400
 8005924:	40000400 	.word	0x40000400
 8005928:	40000800 	.word	0x40000800
 800592c:	40000c00 	.word	0x40000c00
 8005930:	40001800 	.word	0x40001800
 8005934:	40014000 	.word	0x40014000

08005938 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005954:	bf00      	nop
 8005956:	370c      	adds	r7, #12
 8005958:	46bd      	mov	sp, r7
 800595a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595e:	4770      	bx	lr

08005960 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005982:	2301      	movs	r3, #1
 8005984:	e042      	b.n	8005a0c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800598c:	2b00      	cmp	r3, #0
 800598e:	d106      	bne.n	800599e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2200      	movs	r2, #0
 8005994:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f002 ff0f 	bl	80087bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2224      	movs	r2, #36	; 0x24
 80059a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 f82c 	bl	8005a14 <UART_SetConfig>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e022      	b.n	8005a0c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d002      	beq.n	80059d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80059ce:	6878      	ldr	r0, [r7, #4]
 80059d0:	f000 fd88 	bl	80064e4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	685a      	ldr	r2, [r3, #4]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	689a      	ldr	r2, [r3, #8]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0201 	orr.w	r2, r2, #1
 8005a02:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 fe0f 	bl	8006628 <UART_CheckIdleState>
 8005a0a:	4603      	mov	r3, r0
}
 8005a0c:	4618      	mov	r0, r3
 8005a0e:	3708      	adds	r7, #8
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}

08005a14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a18:	b092      	sub	sp, #72	; 0x48
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	689a      	ldr	r2, [r3, #8]
 8005a28:	697b      	ldr	r3, [r7, #20]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	431a      	orrs	r2, r3
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	695b      	ldr	r3, [r3, #20]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	69db      	ldr	r3, [r3, #28]
 8005a38:	4313      	orrs	r3, r2
 8005a3a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	4bbe      	ldr	r3, [pc, #760]	; (8005d3c <UART_SetConfig+0x328>)
 8005a44:	4013      	ands	r3, r2
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	6812      	ldr	r2, [r2, #0]
 8005a4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a4c:	430b      	orrs	r3, r1
 8005a4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	68da      	ldr	r2, [r3, #12]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a6c:	697b      	ldr	r3, [r7, #20]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4ab3      	ldr	r2, [pc, #716]	; (8005d40 <UART_SetConfig+0x32c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	689a      	ldr	r2, [r3, #8]
 8005a86:	4baf      	ldr	r3, [pc, #700]	; (8005d44 <UART_SetConfig+0x330>)
 8005a88:	4013      	ands	r3, r2
 8005a8a:	697a      	ldr	r2, [r7, #20]
 8005a8c:	6812      	ldr	r2, [r2, #0]
 8005a8e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a90:	430b      	orrs	r3, r1
 8005a92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9a:	f023 010f 	bic.w	r1, r3, #15
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	430a      	orrs	r2, r1
 8005aa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4aa6      	ldr	r2, [pc, #664]	; (8005d48 <UART_SetConfig+0x334>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d177      	bne.n	8005ba4 <UART_SetConfig+0x190>
 8005ab4:	4ba5      	ldr	r3, [pc, #660]	; (8005d4c <UART_SetConfig+0x338>)
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005abc:	2b28      	cmp	r3, #40	; 0x28
 8005abe:	d86d      	bhi.n	8005b9c <UART_SetConfig+0x188>
 8005ac0:	a201      	add	r2, pc, #4	; (adr r2, 8005ac8 <UART_SetConfig+0xb4>)
 8005ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ac6:	bf00      	nop
 8005ac8:	08005b6d 	.word	0x08005b6d
 8005acc:	08005b9d 	.word	0x08005b9d
 8005ad0:	08005b9d 	.word	0x08005b9d
 8005ad4:	08005b9d 	.word	0x08005b9d
 8005ad8:	08005b9d 	.word	0x08005b9d
 8005adc:	08005b9d 	.word	0x08005b9d
 8005ae0:	08005b9d 	.word	0x08005b9d
 8005ae4:	08005b9d 	.word	0x08005b9d
 8005ae8:	08005b75 	.word	0x08005b75
 8005aec:	08005b9d 	.word	0x08005b9d
 8005af0:	08005b9d 	.word	0x08005b9d
 8005af4:	08005b9d 	.word	0x08005b9d
 8005af8:	08005b9d 	.word	0x08005b9d
 8005afc:	08005b9d 	.word	0x08005b9d
 8005b00:	08005b9d 	.word	0x08005b9d
 8005b04:	08005b9d 	.word	0x08005b9d
 8005b08:	08005b7d 	.word	0x08005b7d
 8005b0c:	08005b9d 	.word	0x08005b9d
 8005b10:	08005b9d 	.word	0x08005b9d
 8005b14:	08005b9d 	.word	0x08005b9d
 8005b18:	08005b9d 	.word	0x08005b9d
 8005b1c:	08005b9d 	.word	0x08005b9d
 8005b20:	08005b9d 	.word	0x08005b9d
 8005b24:	08005b9d 	.word	0x08005b9d
 8005b28:	08005b85 	.word	0x08005b85
 8005b2c:	08005b9d 	.word	0x08005b9d
 8005b30:	08005b9d 	.word	0x08005b9d
 8005b34:	08005b9d 	.word	0x08005b9d
 8005b38:	08005b9d 	.word	0x08005b9d
 8005b3c:	08005b9d 	.word	0x08005b9d
 8005b40:	08005b9d 	.word	0x08005b9d
 8005b44:	08005b9d 	.word	0x08005b9d
 8005b48:	08005b8d 	.word	0x08005b8d
 8005b4c:	08005b9d 	.word	0x08005b9d
 8005b50:	08005b9d 	.word	0x08005b9d
 8005b54:	08005b9d 	.word	0x08005b9d
 8005b58:	08005b9d 	.word	0x08005b9d
 8005b5c:	08005b9d 	.word	0x08005b9d
 8005b60:	08005b9d 	.word	0x08005b9d
 8005b64:	08005b9d 	.word	0x08005b9d
 8005b68:	08005b95 	.word	0x08005b95
 8005b6c:	2301      	movs	r3, #1
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b72:	e222      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005b74:	2304      	movs	r3, #4
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b7a:	e21e      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005b7c:	2308      	movs	r3, #8
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b82:	e21a      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005b84:	2310      	movs	r3, #16
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b8a:	e216      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b92:	e212      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005b94:	2340      	movs	r3, #64	; 0x40
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005b9a:	e20e      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005b9c:	2380      	movs	r3, #128	; 0x80
 8005b9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ba2:	e20a      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4a69      	ldr	r2, [pc, #420]	; (8005d50 <UART_SetConfig+0x33c>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d130      	bne.n	8005c10 <UART_SetConfig+0x1fc>
 8005bae:	4b67      	ldr	r3, [pc, #412]	; (8005d4c <UART_SetConfig+0x338>)
 8005bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb2:	f003 0307 	and.w	r3, r3, #7
 8005bb6:	2b05      	cmp	r3, #5
 8005bb8:	d826      	bhi.n	8005c08 <UART_SetConfig+0x1f4>
 8005bba:	a201      	add	r2, pc, #4	; (adr r2, 8005bc0 <UART_SetConfig+0x1ac>)
 8005bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc0:	08005bd9 	.word	0x08005bd9
 8005bc4:	08005be1 	.word	0x08005be1
 8005bc8:	08005be9 	.word	0x08005be9
 8005bcc:	08005bf1 	.word	0x08005bf1
 8005bd0:	08005bf9 	.word	0x08005bf9
 8005bd4:	08005c01 	.word	0x08005c01
 8005bd8:	2300      	movs	r3, #0
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bde:	e1ec      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005be0:	2304      	movs	r3, #4
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005be6:	e1e8      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005be8:	2308      	movs	r3, #8
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bee:	e1e4      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005bf0:	2310      	movs	r3, #16
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bf6:	e1e0      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005bf8:	2320      	movs	r3, #32
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005bfe:	e1dc      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005c00:	2340      	movs	r3, #64	; 0x40
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c06:	e1d8      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005c08:	2380      	movs	r3, #128	; 0x80
 8005c0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c0e:	e1d4      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a4f      	ldr	r2, [pc, #316]	; (8005d54 <UART_SetConfig+0x340>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d130      	bne.n	8005c7c <UART_SetConfig+0x268>
 8005c1a:	4b4c      	ldr	r3, [pc, #304]	; (8005d4c <UART_SetConfig+0x338>)
 8005c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c1e:	f003 0307 	and.w	r3, r3, #7
 8005c22:	2b05      	cmp	r3, #5
 8005c24:	d826      	bhi.n	8005c74 <UART_SetConfig+0x260>
 8005c26:	a201      	add	r2, pc, #4	; (adr r2, 8005c2c <UART_SetConfig+0x218>)
 8005c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c2c:	08005c45 	.word	0x08005c45
 8005c30:	08005c4d 	.word	0x08005c4d
 8005c34:	08005c55 	.word	0x08005c55
 8005c38:	08005c5d 	.word	0x08005c5d
 8005c3c:	08005c65 	.word	0x08005c65
 8005c40:	08005c6d 	.word	0x08005c6d
 8005c44:	2300      	movs	r3, #0
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c4a:	e1b6      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005c4c:	2304      	movs	r3, #4
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c52:	e1b2      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005c54:	2308      	movs	r3, #8
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c5a:	e1ae      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005c5c:	2310      	movs	r3, #16
 8005c5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c62:	e1aa      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005c64:	2320      	movs	r3, #32
 8005c66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c6a:	e1a6      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005c6c:	2340      	movs	r3, #64	; 0x40
 8005c6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c72:	e1a2      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005c74:	2380      	movs	r3, #128	; 0x80
 8005c76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005c7a:	e19e      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a35      	ldr	r2, [pc, #212]	; (8005d58 <UART_SetConfig+0x344>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d130      	bne.n	8005ce8 <UART_SetConfig+0x2d4>
 8005c86:	4b31      	ldr	r3, [pc, #196]	; (8005d4c <UART_SetConfig+0x338>)
 8005c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c8a:	f003 0307 	and.w	r3, r3, #7
 8005c8e:	2b05      	cmp	r3, #5
 8005c90:	d826      	bhi.n	8005ce0 <UART_SetConfig+0x2cc>
 8005c92:	a201      	add	r2, pc, #4	; (adr r2, 8005c98 <UART_SetConfig+0x284>)
 8005c94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c98:	08005cb1 	.word	0x08005cb1
 8005c9c:	08005cb9 	.word	0x08005cb9
 8005ca0:	08005cc1 	.word	0x08005cc1
 8005ca4:	08005cc9 	.word	0x08005cc9
 8005ca8:	08005cd1 	.word	0x08005cd1
 8005cac:	08005cd9 	.word	0x08005cd9
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cb6:	e180      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005cb8:	2304      	movs	r3, #4
 8005cba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cbe:	e17c      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005cc0:	2308      	movs	r3, #8
 8005cc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cc6:	e178      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005cc8:	2310      	movs	r3, #16
 8005cca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cce:	e174      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005cd0:	2320      	movs	r3, #32
 8005cd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cd6:	e170      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005cd8:	2340      	movs	r3, #64	; 0x40
 8005cda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005cde:	e16c      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005ce0:	2380      	movs	r3, #128	; 0x80
 8005ce2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ce6:	e168      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005ce8:	697b      	ldr	r3, [r7, #20]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	4a1b      	ldr	r2, [pc, #108]	; (8005d5c <UART_SetConfig+0x348>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d142      	bne.n	8005d78 <UART_SetConfig+0x364>
 8005cf2:	4b16      	ldr	r3, [pc, #88]	; (8005d4c <UART_SetConfig+0x338>)
 8005cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cf6:	f003 0307 	and.w	r3, r3, #7
 8005cfa:	2b05      	cmp	r3, #5
 8005cfc:	d838      	bhi.n	8005d70 <UART_SetConfig+0x35c>
 8005cfe:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <UART_SetConfig+0x2f0>)
 8005d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d04:	08005d1d 	.word	0x08005d1d
 8005d08:	08005d25 	.word	0x08005d25
 8005d0c:	08005d2d 	.word	0x08005d2d
 8005d10:	08005d35 	.word	0x08005d35
 8005d14:	08005d61 	.word	0x08005d61
 8005d18:	08005d69 	.word	0x08005d69
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d22:	e14a      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005d24:	2304      	movs	r3, #4
 8005d26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d2a:	e146      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005d2c:	2308      	movs	r3, #8
 8005d2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d32:	e142      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005d34:	2310      	movs	r3, #16
 8005d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d3a:	e13e      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005d3c:	cfff69f3 	.word	0xcfff69f3
 8005d40:	58000c00 	.word	0x58000c00
 8005d44:	11fff4ff 	.word	0x11fff4ff
 8005d48:	40011000 	.word	0x40011000
 8005d4c:	58024400 	.word	0x58024400
 8005d50:	40004400 	.word	0x40004400
 8005d54:	40004800 	.word	0x40004800
 8005d58:	40004c00 	.word	0x40004c00
 8005d5c:	40005000 	.word	0x40005000
 8005d60:	2320      	movs	r3, #32
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d66:	e128      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005d68:	2340      	movs	r3, #64	; 0x40
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d6e:	e124      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005d70:	2380      	movs	r3, #128	; 0x80
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005d76:	e120      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4acb      	ldr	r2, [pc, #812]	; (80060ac <UART_SetConfig+0x698>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d176      	bne.n	8005e70 <UART_SetConfig+0x45c>
 8005d82:	4bcb      	ldr	r3, [pc, #812]	; (80060b0 <UART_SetConfig+0x69c>)
 8005d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d86:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d8a:	2b28      	cmp	r3, #40	; 0x28
 8005d8c:	d86c      	bhi.n	8005e68 <UART_SetConfig+0x454>
 8005d8e:	a201      	add	r2, pc, #4	; (adr r2, 8005d94 <UART_SetConfig+0x380>)
 8005d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d94:	08005e39 	.word	0x08005e39
 8005d98:	08005e69 	.word	0x08005e69
 8005d9c:	08005e69 	.word	0x08005e69
 8005da0:	08005e69 	.word	0x08005e69
 8005da4:	08005e69 	.word	0x08005e69
 8005da8:	08005e69 	.word	0x08005e69
 8005dac:	08005e69 	.word	0x08005e69
 8005db0:	08005e69 	.word	0x08005e69
 8005db4:	08005e41 	.word	0x08005e41
 8005db8:	08005e69 	.word	0x08005e69
 8005dbc:	08005e69 	.word	0x08005e69
 8005dc0:	08005e69 	.word	0x08005e69
 8005dc4:	08005e69 	.word	0x08005e69
 8005dc8:	08005e69 	.word	0x08005e69
 8005dcc:	08005e69 	.word	0x08005e69
 8005dd0:	08005e69 	.word	0x08005e69
 8005dd4:	08005e49 	.word	0x08005e49
 8005dd8:	08005e69 	.word	0x08005e69
 8005ddc:	08005e69 	.word	0x08005e69
 8005de0:	08005e69 	.word	0x08005e69
 8005de4:	08005e69 	.word	0x08005e69
 8005de8:	08005e69 	.word	0x08005e69
 8005dec:	08005e69 	.word	0x08005e69
 8005df0:	08005e69 	.word	0x08005e69
 8005df4:	08005e51 	.word	0x08005e51
 8005df8:	08005e69 	.word	0x08005e69
 8005dfc:	08005e69 	.word	0x08005e69
 8005e00:	08005e69 	.word	0x08005e69
 8005e04:	08005e69 	.word	0x08005e69
 8005e08:	08005e69 	.word	0x08005e69
 8005e0c:	08005e69 	.word	0x08005e69
 8005e10:	08005e69 	.word	0x08005e69
 8005e14:	08005e59 	.word	0x08005e59
 8005e18:	08005e69 	.word	0x08005e69
 8005e1c:	08005e69 	.word	0x08005e69
 8005e20:	08005e69 	.word	0x08005e69
 8005e24:	08005e69 	.word	0x08005e69
 8005e28:	08005e69 	.word	0x08005e69
 8005e2c:	08005e69 	.word	0x08005e69
 8005e30:	08005e69 	.word	0x08005e69
 8005e34:	08005e61 	.word	0x08005e61
 8005e38:	2301      	movs	r3, #1
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e3e:	e0bc      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e46:	e0b8      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005e48:	2308      	movs	r3, #8
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e4e:	e0b4      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e56:	e0b0      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005e58:	2320      	movs	r3, #32
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e5e:	e0ac      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005e60:	2340      	movs	r3, #64	; 0x40
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e66:	e0a8      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005e68:	2380      	movs	r3, #128	; 0x80
 8005e6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005e6e:	e0a4      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a8f      	ldr	r2, [pc, #572]	; (80060b4 <UART_SetConfig+0x6a0>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d130      	bne.n	8005edc <UART_SetConfig+0x4c8>
 8005e7a:	4b8d      	ldr	r3, [pc, #564]	; (80060b0 <UART_SetConfig+0x69c>)
 8005e7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e7e:	f003 0307 	and.w	r3, r3, #7
 8005e82:	2b05      	cmp	r3, #5
 8005e84:	d826      	bhi.n	8005ed4 <UART_SetConfig+0x4c0>
 8005e86:	a201      	add	r2, pc, #4	; (adr r2, 8005e8c <UART_SetConfig+0x478>)
 8005e88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e8c:	08005ea5 	.word	0x08005ea5
 8005e90:	08005ead 	.word	0x08005ead
 8005e94:	08005eb5 	.word	0x08005eb5
 8005e98:	08005ebd 	.word	0x08005ebd
 8005e9c:	08005ec5 	.word	0x08005ec5
 8005ea0:	08005ecd 	.word	0x08005ecd
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eaa:	e086      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005eac:	2304      	movs	r3, #4
 8005eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eb2:	e082      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005eb4:	2308      	movs	r3, #8
 8005eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eba:	e07e      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005ebc:	2310      	movs	r3, #16
 8005ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ec2:	e07a      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005ec4:	2320      	movs	r3, #32
 8005ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eca:	e076      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005ecc:	2340      	movs	r3, #64	; 0x40
 8005ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005ed2:	e072      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005ed4:	2380      	movs	r3, #128	; 0x80
 8005ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005eda:	e06e      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a75      	ldr	r2, [pc, #468]	; (80060b8 <UART_SetConfig+0x6a4>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d130      	bne.n	8005f48 <UART_SetConfig+0x534>
 8005ee6:	4b72      	ldr	r3, [pc, #456]	; (80060b0 <UART_SetConfig+0x69c>)
 8005ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eea:	f003 0307 	and.w	r3, r3, #7
 8005eee:	2b05      	cmp	r3, #5
 8005ef0:	d826      	bhi.n	8005f40 <UART_SetConfig+0x52c>
 8005ef2:	a201      	add	r2, pc, #4	; (adr r2, 8005ef8 <UART_SetConfig+0x4e4>)
 8005ef4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ef8:	08005f11 	.word	0x08005f11
 8005efc:	08005f19 	.word	0x08005f19
 8005f00:	08005f21 	.word	0x08005f21
 8005f04:	08005f29 	.word	0x08005f29
 8005f08:	08005f31 	.word	0x08005f31
 8005f0c:	08005f39 	.word	0x08005f39
 8005f10:	2300      	movs	r3, #0
 8005f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f16:	e050      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f18:	2304      	movs	r3, #4
 8005f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f1e:	e04c      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f20:	2308      	movs	r3, #8
 8005f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f26:	e048      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f28:	2310      	movs	r3, #16
 8005f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f2e:	e044      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f30:	2320      	movs	r3, #32
 8005f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f36:	e040      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f38:	2340      	movs	r3, #64	; 0x40
 8005f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f3e:	e03c      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f40:	2380      	movs	r3, #128	; 0x80
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f46:	e038      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a5b      	ldr	r2, [pc, #364]	; (80060bc <UART_SetConfig+0x6a8>)
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	d130      	bne.n	8005fb4 <UART_SetConfig+0x5a0>
 8005f52:	4b57      	ldr	r3, [pc, #348]	; (80060b0 <UART_SetConfig+0x69c>)
 8005f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	2b05      	cmp	r3, #5
 8005f5c:	d826      	bhi.n	8005fac <UART_SetConfig+0x598>
 8005f5e:	a201      	add	r2, pc, #4	; (adr r2, 8005f64 <UART_SetConfig+0x550>)
 8005f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f64:	08005f7d 	.word	0x08005f7d
 8005f68:	08005f85 	.word	0x08005f85
 8005f6c:	08005f8d 	.word	0x08005f8d
 8005f70:	08005f95 	.word	0x08005f95
 8005f74:	08005f9d 	.word	0x08005f9d
 8005f78:	08005fa5 	.word	0x08005fa5
 8005f7c:	2302      	movs	r3, #2
 8005f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f82:	e01a      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f84:	2304      	movs	r3, #4
 8005f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f8a:	e016      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f8c:	2308      	movs	r3, #8
 8005f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f92:	e012      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f94:	2310      	movs	r3, #16
 8005f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005f9a:	e00e      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005f9c:	2320      	movs	r3, #32
 8005f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fa2:	e00a      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005fa4:	2340      	movs	r3, #64	; 0x40
 8005fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005faa:	e006      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005fac:	2380      	movs	r3, #128	; 0x80
 8005fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005fb2:	e002      	b.n	8005fba <UART_SetConfig+0x5a6>
 8005fb4:	2380      	movs	r3, #128	; 0x80
 8005fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a3f      	ldr	r2, [pc, #252]	; (80060bc <UART_SetConfig+0x6a8>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	f040 80f8 	bne.w	80061b6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fc6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005fca:	2b20      	cmp	r3, #32
 8005fcc:	dc46      	bgt.n	800605c <UART_SetConfig+0x648>
 8005fce:	2b02      	cmp	r3, #2
 8005fd0:	f2c0 8082 	blt.w	80060d8 <UART_SetConfig+0x6c4>
 8005fd4:	3b02      	subs	r3, #2
 8005fd6:	2b1e      	cmp	r3, #30
 8005fd8:	d87e      	bhi.n	80060d8 <UART_SetConfig+0x6c4>
 8005fda:	a201      	add	r2, pc, #4	; (adr r2, 8005fe0 <UART_SetConfig+0x5cc>)
 8005fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fe0:	08006063 	.word	0x08006063
 8005fe4:	080060d9 	.word	0x080060d9
 8005fe8:	0800606b 	.word	0x0800606b
 8005fec:	080060d9 	.word	0x080060d9
 8005ff0:	080060d9 	.word	0x080060d9
 8005ff4:	080060d9 	.word	0x080060d9
 8005ff8:	0800607b 	.word	0x0800607b
 8005ffc:	080060d9 	.word	0x080060d9
 8006000:	080060d9 	.word	0x080060d9
 8006004:	080060d9 	.word	0x080060d9
 8006008:	080060d9 	.word	0x080060d9
 800600c:	080060d9 	.word	0x080060d9
 8006010:	080060d9 	.word	0x080060d9
 8006014:	080060d9 	.word	0x080060d9
 8006018:	0800608b 	.word	0x0800608b
 800601c:	080060d9 	.word	0x080060d9
 8006020:	080060d9 	.word	0x080060d9
 8006024:	080060d9 	.word	0x080060d9
 8006028:	080060d9 	.word	0x080060d9
 800602c:	080060d9 	.word	0x080060d9
 8006030:	080060d9 	.word	0x080060d9
 8006034:	080060d9 	.word	0x080060d9
 8006038:	080060d9 	.word	0x080060d9
 800603c:	080060d9 	.word	0x080060d9
 8006040:	080060d9 	.word	0x080060d9
 8006044:	080060d9 	.word	0x080060d9
 8006048:	080060d9 	.word	0x080060d9
 800604c:	080060d9 	.word	0x080060d9
 8006050:	080060d9 	.word	0x080060d9
 8006054:	080060d9 	.word	0x080060d9
 8006058:	080060cb 	.word	0x080060cb
 800605c:	2b40      	cmp	r3, #64	; 0x40
 800605e:	d037      	beq.n	80060d0 <UART_SetConfig+0x6bc>
 8006060:	e03a      	b.n	80060d8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8006062:	f7fe f9c3 	bl	80043ec <HAL_RCCEx_GetD3PCLK1Freq>
 8006066:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006068:	e03c      	b.n	80060e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800606a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800606e:	4618      	mov	r0, r3
 8006070:	f7fe f9d2 	bl	8004418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006076:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006078:	e034      	b.n	80060e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800607a:	f107 0318 	add.w	r3, r7, #24
 800607e:	4618      	mov	r0, r3
 8006080:	f7fe fb1e 	bl	80046c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006088:	e02c      	b.n	80060e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800608a:	4b09      	ldr	r3, [pc, #36]	; (80060b0 <UART_SetConfig+0x69c>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0320 	and.w	r3, r3, #32
 8006092:	2b00      	cmp	r3, #0
 8006094:	d016      	beq.n	80060c4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006096:	4b06      	ldr	r3, [pc, #24]	; (80060b0 <UART_SetConfig+0x69c>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	08db      	lsrs	r3, r3, #3
 800609c:	f003 0303 	and.w	r3, r3, #3
 80060a0:	4a07      	ldr	r2, [pc, #28]	; (80060c0 <UART_SetConfig+0x6ac>)
 80060a2:	fa22 f303 	lsr.w	r3, r2, r3
 80060a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80060a8:	e01c      	b.n	80060e4 <UART_SetConfig+0x6d0>
 80060aa:	bf00      	nop
 80060ac:	40011400 	.word	0x40011400
 80060b0:	58024400 	.word	0x58024400
 80060b4:	40007800 	.word	0x40007800
 80060b8:	40007c00 	.word	0x40007c00
 80060bc:	58000c00 	.word	0x58000c00
 80060c0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80060c4:	4b9d      	ldr	r3, [pc, #628]	; (800633c <UART_SetConfig+0x928>)
 80060c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060c8:	e00c      	b.n	80060e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80060ca:	4b9d      	ldr	r3, [pc, #628]	; (8006340 <UART_SetConfig+0x92c>)
 80060cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060ce:	e009      	b.n	80060e4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060d0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060d6:	e005      	b.n	80060e4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80060d8:	2300      	movs	r3, #0
 80060da:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80060dc:	2301      	movs	r3, #1
 80060de:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80060e2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f000 81de 	beq.w	80064a8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060f0:	4a94      	ldr	r2, [pc, #592]	; (8006344 <UART_SetConfig+0x930>)
 80060f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f6:	461a      	mov	r2, r3
 80060f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060fa:	fbb3 f3f2 	udiv	r3, r3, r2
 80060fe:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006100:	697b      	ldr	r3, [r7, #20]
 8006102:	685a      	ldr	r2, [r3, #4]
 8006104:	4613      	mov	r3, r2
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	4413      	add	r3, r2
 800610a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800610c:	429a      	cmp	r2, r3
 800610e:	d305      	bcc.n	800611c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006116:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006118:	429a      	cmp	r2, r3
 800611a:	d903      	bls.n	8006124 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8006122:	e1c1      	b.n	80064a8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006126:	2200      	movs	r2, #0
 8006128:	60bb      	str	r3, [r7, #8]
 800612a:	60fa      	str	r2, [r7, #12]
 800612c:	697b      	ldr	r3, [r7, #20]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	4a84      	ldr	r2, [pc, #528]	; (8006344 <UART_SetConfig+0x930>)
 8006132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006136:	b29b      	uxth	r3, r3
 8006138:	2200      	movs	r2, #0
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	607a      	str	r2, [r7, #4]
 800613e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006146:	f7fa fb91 	bl	800086c <__aeabi_uldivmod>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4610      	mov	r0, r2
 8006150:	4619      	mov	r1, r3
 8006152:	f04f 0200 	mov.w	r2, #0
 8006156:	f04f 0300 	mov.w	r3, #0
 800615a:	020b      	lsls	r3, r1, #8
 800615c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006160:	0202      	lsls	r2, r0, #8
 8006162:	6979      	ldr	r1, [r7, #20]
 8006164:	6849      	ldr	r1, [r1, #4]
 8006166:	0849      	lsrs	r1, r1, #1
 8006168:	2000      	movs	r0, #0
 800616a:	460c      	mov	r4, r1
 800616c:	4605      	mov	r5, r0
 800616e:	eb12 0804 	adds.w	r8, r2, r4
 8006172:	eb43 0905 	adc.w	r9, r3, r5
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	2200      	movs	r2, #0
 800617c:	469a      	mov	sl, r3
 800617e:	4693      	mov	fp, r2
 8006180:	4652      	mov	r2, sl
 8006182:	465b      	mov	r3, fp
 8006184:	4640      	mov	r0, r8
 8006186:	4649      	mov	r1, r9
 8006188:	f7fa fb70 	bl	800086c <__aeabi_uldivmod>
 800618c:	4602      	mov	r2, r0
 800618e:	460b      	mov	r3, r1
 8006190:	4613      	mov	r3, r2
 8006192:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006194:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006196:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800619a:	d308      	bcc.n	80061ae <UART_SetConfig+0x79a>
 800619c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800619e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80061a2:	d204      	bcs.n	80061ae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80061aa:	60da      	str	r2, [r3, #12]
 80061ac:	e17c      	b.n	80064a8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80061ae:	2301      	movs	r3, #1
 80061b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80061b4:	e178      	b.n	80064a8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	69db      	ldr	r3, [r3, #28]
 80061ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80061be:	f040 80c5 	bne.w	800634c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80061c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	dc48      	bgt.n	800625c <UART_SetConfig+0x848>
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	db7b      	blt.n	80062c6 <UART_SetConfig+0x8b2>
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	d879      	bhi.n	80062c6 <UART_SetConfig+0x8b2>
 80061d2:	a201      	add	r2, pc, #4	; (adr r2, 80061d8 <UART_SetConfig+0x7c4>)
 80061d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d8:	08006263 	.word	0x08006263
 80061dc:	0800626b 	.word	0x0800626b
 80061e0:	080062c7 	.word	0x080062c7
 80061e4:	080062c7 	.word	0x080062c7
 80061e8:	08006273 	.word	0x08006273
 80061ec:	080062c7 	.word	0x080062c7
 80061f0:	080062c7 	.word	0x080062c7
 80061f4:	080062c7 	.word	0x080062c7
 80061f8:	08006283 	.word	0x08006283
 80061fc:	080062c7 	.word	0x080062c7
 8006200:	080062c7 	.word	0x080062c7
 8006204:	080062c7 	.word	0x080062c7
 8006208:	080062c7 	.word	0x080062c7
 800620c:	080062c7 	.word	0x080062c7
 8006210:	080062c7 	.word	0x080062c7
 8006214:	080062c7 	.word	0x080062c7
 8006218:	08006293 	.word	0x08006293
 800621c:	080062c7 	.word	0x080062c7
 8006220:	080062c7 	.word	0x080062c7
 8006224:	080062c7 	.word	0x080062c7
 8006228:	080062c7 	.word	0x080062c7
 800622c:	080062c7 	.word	0x080062c7
 8006230:	080062c7 	.word	0x080062c7
 8006234:	080062c7 	.word	0x080062c7
 8006238:	080062c7 	.word	0x080062c7
 800623c:	080062c7 	.word	0x080062c7
 8006240:	080062c7 	.word	0x080062c7
 8006244:	080062c7 	.word	0x080062c7
 8006248:	080062c7 	.word	0x080062c7
 800624c:	080062c7 	.word	0x080062c7
 8006250:	080062c7 	.word	0x080062c7
 8006254:	080062c7 	.word	0x080062c7
 8006258:	080062b9 	.word	0x080062b9
 800625c:	2b40      	cmp	r3, #64	; 0x40
 800625e:	d02e      	beq.n	80062be <UART_SetConfig+0x8aa>
 8006260:	e031      	b.n	80062c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006262:	f7fc fe8d 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 8006266:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006268:	e033      	b.n	80062d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800626a:	f7fc fe9f 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 800626e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8006270:	e02f      	b.n	80062d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006272:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006276:	4618      	mov	r0, r3
 8006278:	f7fe f8ce 	bl	8004418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800627c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800627e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006280:	e027      	b.n	80062d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006282:	f107 0318 	add.w	r3, r7, #24
 8006286:	4618      	mov	r0, r3
 8006288:	f7fe fa1a 	bl	80046c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800628c:	69fb      	ldr	r3, [r7, #28]
 800628e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006290:	e01f      	b.n	80062d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006292:	4b2d      	ldr	r3, [pc, #180]	; (8006348 <UART_SetConfig+0x934>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0320 	and.w	r3, r3, #32
 800629a:	2b00      	cmp	r3, #0
 800629c:	d009      	beq.n	80062b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800629e:	4b2a      	ldr	r3, [pc, #168]	; (8006348 <UART_SetConfig+0x934>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	08db      	lsrs	r3, r3, #3
 80062a4:	f003 0303 	and.w	r3, r3, #3
 80062a8:	4a24      	ldr	r2, [pc, #144]	; (800633c <UART_SetConfig+0x928>)
 80062aa:	fa22 f303 	lsr.w	r3, r2, r3
 80062ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80062b0:	e00f      	b.n	80062d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80062b2:	4b22      	ldr	r3, [pc, #136]	; (800633c <UART_SetConfig+0x928>)
 80062b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062b6:	e00c      	b.n	80062d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80062b8:	4b21      	ldr	r3, [pc, #132]	; (8006340 <UART_SetConfig+0x92c>)
 80062ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062bc:	e009      	b.n	80062d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80062be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80062c4:	e005      	b.n	80062d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80062c6:	2300      	movs	r3, #0
 80062c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80062d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80062d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	f000 80e7 	beq.w	80064a8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062de:	4a19      	ldr	r2, [pc, #100]	; (8006344 <UART_SetConfig+0x930>)
 80062e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062e4:	461a      	mov	r2, r3
 80062e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ec:	005a      	lsls	r2, r3, #1
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	085b      	lsrs	r3, r3, #1
 80062f4:	441a      	add	r2, r3
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	685b      	ldr	r3, [r3, #4]
 80062fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80062fe:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006302:	2b0f      	cmp	r3, #15
 8006304:	d916      	bls.n	8006334 <UART_SetConfig+0x920>
 8006306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800630c:	d212      	bcs.n	8006334 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800630e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006310:	b29b      	uxth	r3, r3
 8006312:	f023 030f 	bic.w	r3, r3, #15
 8006316:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800631a:	085b      	lsrs	r3, r3, #1
 800631c:	b29b      	uxth	r3, r3
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	b29a      	uxth	r2, r3
 8006324:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006326:	4313      	orrs	r3, r2
 8006328:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	e0b9      	b.n	80064a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8006334:	2301      	movs	r3, #1
 8006336:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800633a:	e0b5      	b.n	80064a8 <UART_SetConfig+0xa94>
 800633c:	03d09000 	.word	0x03d09000
 8006340:	003d0900 	.word	0x003d0900
 8006344:	08009734 	.word	0x08009734
 8006348:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800634c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8006350:	2b20      	cmp	r3, #32
 8006352:	dc49      	bgt.n	80063e8 <UART_SetConfig+0x9d4>
 8006354:	2b00      	cmp	r3, #0
 8006356:	db7c      	blt.n	8006452 <UART_SetConfig+0xa3e>
 8006358:	2b20      	cmp	r3, #32
 800635a:	d87a      	bhi.n	8006452 <UART_SetConfig+0xa3e>
 800635c:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0x950>)
 800635e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006362:	bf00      	nop
 8006364:	080063ef 	.word	0x080063ef
 8006368:	080063f7 	.word	0x080063f7
 800636c:	08006453 	.word	0x08006453
 8006370:	08006453 	.word	0x08006453
 8006374:	080063ff 	.word	0x080063ff
 8006378:	08006453 	.word	0x08006453
 800637c:	08006453 	.word	0x08006453
 8006380:	08006453 	.word	0x08006453
 8006384:	0800640f 	.word	0x0800640f
 8006388:	08006453 	.word	0x08006453
 800638c:	08006453 	.word	0x08006453
 8006390:	08006453 	.word	0x08006453
 8006394:	08006453 	.word	0x08006453
 8006398:	08006453 	.word	0x08006453
 800639c:	08006453 	.word	0x08006453
 80063a0:	08006453 	.word	0x08006453
 80063a4:	0800641f 	.word	0x0800641f
 80063a8:	08006453 	.word	0x08006453
 80063ac:	08006453 	.word	0x08006453
 80063b0:	08006453 	.word	0x08006453
 80063b4:	08006453 	.word	0x08006453
 80063b8:	08006453 	.word	0x08006453
 80063bc:	08006453 	.word	0x08006453
 80063c0:	08006453 	.word	0x08006453
 80063c4:	08006453 	.word	0x08006453
 80063c8:	08006453 	.word	0x08006453
 80063cc:	08006453 	.word	0x08006453
 80063d0:	08006453 	.word	0x08006453
 80063d4:	08006453 	.word	0x08006453
 80063d8:	08006453 	.word	0x08006453
 80063dc:	08006453 	.word	0x08006453
 80063e0:	08006453 	.word	0x08006453
 80063e4:	08006445 	.word	0x08006445
 80063e8:	2b40      	cmp	r3, #64	; 0x40
 80063ea:	d02e      	beq.n	800644a <UART_SetConfig+0xa36>
 80063ec:	e031      	b.n	8006452 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063ee:	f7fc fdc7 	bl	8002f80 <HAL_RCC_GetPCLK1Freq>
 80063f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063f4:	e033      	b.n	800645e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063f6:	f7fc fdd9 	bl	8002fac <HAL_RCC_GetPCLK2Freq>
 80063fa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80063fc:	e02f      	b.n	800645e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe f808 	bl	8004418 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800640c:	e027      	b.n	800645e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800640e:	f107 0318 	add.w	r3, r7, #24
 8006412:	4618      	mov	r0, r3
 8006414:	f7fe f954 	bl	80046c0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006418:	69fb      	ldr	r3, [r7, #28]
 800641a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800641c:	e01f      	b.n	800645e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800641e:	4b2d      	ldr	r3, [pc, #180]	; (80064d4 <UART_SetConfig+0xac0>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f003 0320 	and.w	r3, r3, #32
 8006426:	2b00      	cmp	r3, #0
 8006428:	d009      	beq.n	800643e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800642a:	4b2a      	ldr	r3, [pc, #168]	; (80064d4 <UART_SetConfig+0xac0>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	08db      	lsrs	r3, r3, #3
 8006430:	f003 0303 	and.w	r3, r3, #3
 8006434:	4a28      	ldr	r2, [pc, #160]	; (80064d8 <UART_SetConfig+0xac4>)
 8006436:	fa22 f303 	lsr.w	r3, r2, r3
 800643a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800643c:	e00f      	b.n	800645e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800643e:	4b26      	ldr	r3, [pc, #152]	; (80064d8 <UART_SetConfig+0xac4>)
 8006440:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006442:	e00c      	b.n	800645e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006444:	4b25      	ldr	r3, [pc, #148]	; (80064dc <UART_SetConfig+0xac8>)
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006448:	e009      	b.n	800645e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800644e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006450:	e005      	b.n	800645e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8006452:	2300      	movs	r3, #0
 8006454:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8006456:	2301      	movs	r3, #1
 8006458:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800645c:	bf00      	nop
    }

    if (pclk != 0U)
 800645e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006460:	2b00      	cmp	r3, #0
 8006462:	d021      	beq.n	80064a8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006464:	697b      	ldr	r3, [r7, #20]
 8006466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006468:	4a1d      	ldr	r2, [pc, #116]	; (80064e0 <UART_SetConfig+0xacc>)
 800646a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800646e:	461a      	mov	r2, r3
 8006470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006472:	fbb3 f2f2 	udiv	r2, r3, r2
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	085b      	lsrs	r3, r3, #1
 800647c:	441a      	add	r2, r3
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	fbb2 f3f3 	udiv	r3, r2, r3
 8006486:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800648a:	2b0f      	cmp	r3, #15
 800648c:	d909      	bls.n	80064a2 <UART_SetConfig+0xa8e>
 800648e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006490:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006494:	d205      	bcs.n	80064a2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006498:	b29a      	uxth	r2, r3
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	60da      	str	r2, [r3, #12]
 80064a0:	e002      	b.n	80064a8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80064a2:	2301      	movs	r3, #1
 80064a4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064a8:	697b      	ldr	r3, [r7, #20]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064b0:	697b      	ldr	r3, [r7, #20]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064b8:	697b      	ldr	r3, [r7, #20]
 80064ba:	2200      	movs	r2, #0
 80064bc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	2200      	movs	r2, #0
 80064c2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80064c4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3748      	adds	r7, #72	; 0x48
 80064cc:	46bd      	mov	sp, r7
 80064ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064d2:	bf00      	nop
 80064d4:	58024400 	.word	0x58024400
 80064d8:	03d09000 	.word	0x03d09000
 80064dc:	003d0900 	.word	0x003d0900
 80064e0:	08009734 	.word	0x08009734

080064e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f0:	f003 0301 	and.w	r3, r3, #1
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d00a      	beq.n	800650e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	430a      	orrs	r2, r1
 800650c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006512:	f003 0302 	and.w	r3, r3, #2
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	430a      	orrs	r2, r1
 800652e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00a      	beq.n	8006552 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006556:	f003 0308 	and.w	r3, r3, #8
 800655a:	2b00      	cmp	r3, #0
 800655c:	d00a      	beq.n	8006574 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	430a      	orrs	r2, r1
 8006572:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006578:	f003 0310 	and.w	r3, r3, #16
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	430a      	orrs	r2, r1
 8006594:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	f003 0320 	and.w	r3, r3, #32
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d00a      	beq.n	80065b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	430a      	orrs	r2, r1
 80065b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d01a      	beq.n	80065fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	685b      	ldr	r3, [r3, #4]
 80065ca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	430a      	orrs	r2, r1
 80065d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80065e2:	d10a      	bne.n	80065fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00a      	beq.n	800661c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	430a      	orrs	r2, r1
 800661a:	605a      	str	r2, [r3, #4]
  }
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b098      	sub	sp, #96	; 0x60
 800662c:	af02      	add	r7, sp, #8
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006638:	f7fa fb20 	bl	8000c7c <HAL_GetTick>
 800663c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 0308 	and.w	r3, r3, #8
 8006648:	2b08      	cmp	r3, #8
 800664a:	d12f      	bne.n	80066ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800664c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006650:	9300      	str	r3, [sp, #0]
 8006652:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006654:	2200      	movs	r2, #0
 8006656:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 f88e 	bl	800677c <UART_WaitOnFlagUntilTimeout>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d022      	beq.n	80066ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800666e:	e853 3f00 	ldrex	r3, [r3]
 8006672:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800667a:	653b      	str	r3, [r7, #80]	; 0x50
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	461a      	mov	r2, r3
 8006682:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006684:	647b      	str	r3, [r7, #68]	; 0x44
 8006686:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006688:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800668a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800668c:	e841 2300 	strex	r3, r2, [r1]
 8006690:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006694:	2b00      	cmp	r3, #0
 8006696:	d1e6      	bne.n	8006666 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2220      	movs	r2, #32
 800669c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066a8:	2303      	movs	r3, #3
 80066aa:	e063      	b.n	8006774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f003 0304 	and.w	r3, r3, #4
 80066b6:	2b04      	cmp	r3, #4
 80066b8:	d149      	bne.n	800674e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066ba:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066be:	9300      	str	r3, [sp, #0]
 80066c0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80066c2:	2200      	movs	r2, #0
 80066c4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f857 	bl	800677c <UART_WaitOnFlagUntilTimeout>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d03c      	beq.n	800674e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	e853 3f00 	ldrex	r3, [r3]
 80066e0:	623b      	str	r3, [r7, #32]
   return(result);
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	461a      	mov	r2, r3
 80066f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066f2:	633b      	str	r3, [r7, #48]	; 0x30
 80066f4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066fa:	e841 2300 	strex	r3, r2, [r1]
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006700:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1e6      	bne.n	80066d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3308      	adds	r3, #8
 800670c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	e853 3f00 	ldrex	r3, [r3]
 8006714:	60fb      	str	r3, [r7, #12]
   return(result);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f023 0301 	bic.w	r3, r3, #1
 800671c:	64bb      	str	r3, [r7, #72]	; 0x48
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	3308      	adds	r3, #8
 8006724:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006726:	61fa      	str	r2, [r7, #28]
 8006728:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	69b9      	ldr	r1, [r7, #24]
 800672c:	69fa      	ldr	r2, [r7, #28]
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	617b      	str	r3, [r7, #20]
   return(result);
 8006734:	697b      	ldr	r3, [r7, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e5      	bne.n	8006706 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800674a:	2303      	movs	r3, #3
 800674c:	e012      	b.n	8006774 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2220      	movs	r2, #32
 8006752:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2220      	movs	r2, #32
 800675a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006772:	2300      	movs	r3, #0
}
 8006774:	4618      	mov	r0, r3
 8006776:	3758      	adds	r7, #88	; 0x58
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b084      	sub	sp, #16
 8006780:	af00      	add	r7, sp, #0
 8006782:	60f8      	str	r0, [r7, #12]
 8006784:	60b9      	str	r1, [r7, #8]
 8006786:	603b      	str	r3, [r7, #0]
 8006788:	4613      	mov	r3, r2
 800678a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800678c:	e049      	b.n	8006822 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800678e:	69bb      	ldr	r3, [r7, #24]
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d045      	beq.n	8006822 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006796:	f7fa fa71 	bl	8000c7c <HAL_GetTick>
 800679a:	4602      	mov	r2, r0
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	1ad3      	subs	r3, r2, r3
 80067a0:	69ba      	ldr	r2, [r7, #24]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d302      	bcc.n	80067ac <UART_WaitOnFlagUntilTimeout+0x30>
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d101      	bne.n	80067b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e048      	b.n	8006842 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f003 0304 	and.w	r3, r3, #4
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d031      	beq.n	8006822 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	f003 0308 	and.w	r3, r3, #8
 80067c8:	2b08      	cmp	r3, #8
 80067ca:	d110      	bne.n	80067ee <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	2208      	movs	r2, #8
 80067d2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f000 f839 	bl	800684c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2208      	movs	r2, #8
 80067de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 80067ea:	2301      	movs	r3, #1
 80067ec:	e029      	b.n	8006842 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	69db      	ldr	r3, [r3, #28]
 80067f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067fc:	d111      	bne.n	8006822 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006806:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006808:	68f8      	ldr	r0, [r7, #12]
 800680a:	f000 f81f 	bl	800684c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2220      	movs	r2, #32
 8006812:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	2200      	movs	r2, #0
 800681a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e00f      	b.n	8006842 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	69da      	ldr	r2, [r3, #28]
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4013      	ands	r3, r2
 800682c:	68ba      	ldr	r2, [r7, #8]
 800682e:	429a      	cmp	r2, r3
 8006830:	bf0c      	ite	eq
 8006832:	2301      	moveq	r3, #1
 8006834:	2300      	movne	r3, #0
 8006836:	b2db      	uxtb	r3, r3
 8006838:	461a      	mov	r2, r3
 800683a:	79fb      	ldrb	r3, [r7, #7]
 800683c:	429a      	cmp	r2, r3
 800683e:	d0a6      	beq.n	800678e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
	...

0800684c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800684c:	b480      	push	{r7}
 800684e:	b095      	sub	sp, #84	; 0x54
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800685a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800685c:	e853 3f00 	ldrex	r3, [r3]
 8006860:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006864:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006868:	64fb      	str	r3, [r7, #76]	; 0x4c
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	461a      	mov	r2, r3
 8006870:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006872:	643b      	str	r3, [r7, #64]	; 0x40
 8006874:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006876:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006878:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800687a:	e841 2300 	strex	r3, r2, [r1]
 800687e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1e6      	bne.n	8006854 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3308      	adds	r3, #8
 800688c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6a3b      	ldr	r3, [r7, #32]
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	61fb      	str	r3, [r7, #28]
   return(result);
 8006896:	69fa      	ldr	r2, [r7, #28]
 8006898:	4b1e      	ldr	r3, [pc, #120]	; (8006914 <UART_EndRxTransfer+0xc8>)
 800689a:	4013      	ands	r3, r2
 800689c:	64bb      	str	r3, [r7, #72]	; 0x48
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	3308      	adds	r3, #8
 80068a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068ae:	e841 2300 	strex	r3, r2, [r1]
 80068b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1e5      	bne.n	8006886 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d118      	bne.n	80068f4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	f023 0310 	bic.w	r3, r3, #16
 80068d6:	647b      	str	r3, [r7, #68]	; 0x44
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	461a      	mov	r2, r3
 80068de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068e0:	61bb      	str	r3, [r7, #24]
 80068e2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6979      	ldr	r1, [r7, #20]
 80068e6:	69ba      	ldr	r2, [r7, #24]
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	613b      	str	r3, [r7, #16]
   return(result);
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e6      	bne.n	80068c2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2220      	movs	r2, #32
 80068f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2200      	movs	r2, #0
 8006900:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006908:	bf00      	nop
 800690a:	3754      	adds	r7, #84	; 0x54
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	effffffe 	.word	0xeffffffe

08006918 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b085      	sub	sp, #20
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_UARTEx_DisableFifoMode+0x16>
 800692a:	2302      	movs	r3, #2
 800692c:	e027      	b.n	800697e <HAL_UARTEx_DisableFifoMode+0x66>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2224      	movs	r2, #36	; 0x24
 800693a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800695c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2200      	movs	r2, #0
 8006962:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2220      	movs	r2, #32
 8006970:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800697c:	2300      	movs	r3, #0
}
 800697e:	4618      	mov	r0, r3
 8006980:	3714      	adds	r7, #20
 8006982:	46bd      	mov	sp, r7
 8006984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006988:	4770      	bx	lr

0800698a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800698a:	b580      	push	{r7, lr}
 800698c:	b084      	sub	sp, #16
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
 8006992:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800699a:	2b01      	cmp	r3, #1
 800699c:	d101      	bne.n	80069a2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800699e:	2302      	movs	r3, #2
 80069a0:	e02d      	b.n	80069fe <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2224      	movs	r2, #36	; 0x24
 80069ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f022 0201 	bic.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	683a      	ldr	r2, [r7, #0]
 80069da:	430a      	orrs	r2, r1
 80069dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 f850 	bl	8006a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2220      	movs	r2, #32
 80069f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80069fc:	2300      	movs	r3, #0
}
 80069fe:	4618      	mov	r0, r3
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b084      	sub	sp, #16
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d101      	bne.n	8006a1e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006a1a:	2302      	movs	r3, #2
 8006a1c:	e02d      	b.n	8006a7a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2201      	movs	r2, #1
 8006a22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2224      	movs	r2, #36	; 0x24
 8006a2a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0201 	bic.w	r2, r2, #1
 8006a44:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	689b      	ldr	r3, [r3, #8]
 8006a4c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	683a      	ldr	r2, [r7, #0]
 8006a56:	430a      	orrs	r2, r1
 8006a58:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 f812 	bl	8006a84 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	68fa      	ldr	r2, [r7, #12]
 8006a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2220      	movs	r2, #32
 8006a6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2200      	movs	r2, #0
 8006a74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b085      	sub	sp, #20
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d108      	bne.n	8006aa6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006aa4:	e031      	b.n	8006b0a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006aa6:	2310      	movs	r3, #16
 8006aa8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006aaa:	2310      	movs	r3, #16
 8006aac:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	0e5b      	lsrs	r3, r3, #25
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	0f5b      	lsrs	r3, r3, #29
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	f003 0307 	and.w	r3, r3, #7
 8006acc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	7b3a      	ldrb	r2, [r7, #12]
 8006ad2:	4911      	ldr	r1, [pc, #68]	; (8006b18 <UARTEx_SetNbDataToProcess+0x94>)
 8006ad4:	5c8a      	ldrb	r2, [r1, r2]
 8006ad6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006ada:	7b3a      	ldrb	r2, [r7, #12]
 8006adc:	490f      	ldr	r1, [pc, #60]	; (8006b1c <UARTEx_SetNbDataToProcess+0x98>)
 8006ade:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ae0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006ae4:	b29a      	uxth	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006aec:	7bfb      	ldrb	r3, [r7, #15]
 8006aee:	7b7a      	ldrb	r2, [r7, #13]
 8006af0:	4909      	ldr	r1, [pc, #36]	; (8006b18 <UARTEx_SetNbDataToProcess+0x94>)
 8006af2:	5c8a      	ldrb	r2, [r1, r2]
 8006af4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006af8:	7b7a      	ldrb	r2, [r7, #13]
 8006afa:	4908      	ldr	r1, [pc, #32]	; (8006b1c <UARTEx_SetNbDataToProcess+0x98>)
 8006afc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006afe:	fb93 f3f2 	sdiv	r3, r3, r2
 8006b02:	b29a      	uxth	r2, r3
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006b0a:	bf00      	nop
 8006b0c:	3714      	adds	r7, #20
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b14:	4770      	bx	lr
 8006b16:	bf00      	nop
 8006b18:	0800974c 	.word	0x0800974c
 8006b1c:	08009754 	.word	0x08009754

08006b20 <motor_pd_v2>:
	data_buffer[6] = 0x00;
	data_buffer[7] = 0x00;
}

void motor_pd_v2(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, int16_t kp, int16_t kd, uint32_t Id)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b085      	sub	sp, #20
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	460b      	mov	r3, r1
 8006b30:	80fb      	strh	r3, [r7, #6]
 8006b32:	4613      	mov	r3, r2
 8006b34:	80bb      	strh	r3, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006b3c:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006b3e:	69bb      	ldr	r3, [r7, #24]
 8006b40:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	601a      	str	r2, [r3, #0]
	byte_2_reply.udata=kp;
 8006b48:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <motor_pd_v2+0x88>)
 8006b4a:	88fb      	ldrh	r3, [r7, #6]
 8006b4c:	8013      	strh	r3, [r2, #0]

	data_buffer[0] = 0xaf;
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	22af      	movs	r2, #175	; 0xaf
 8006b52:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x01;
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3301      	adds	r3, #1
 8006b58:	2201      	movs	r2, #1
 8006b5a:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = byte_2_reply.buffer[0];
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	3302      	adds	r3, #2
 8006b60:	4a11      	ldr	r2, [pc, #68]	; (8006ba8 <motor_pd_v2+0x88>)
 8006b62:	7812      	ldrb	r2, [r2, #0]
 8006b64:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = byte_2_reply.buffer[1];
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	3303      	adds	r3, #3
 8006b6a:	4a0f      	ldr	r2, [pc, #60]	; (8006ba8 <motor_pd_v2+0x88>)
 8006b6c:	7852      	ldrb	r2, [r2, #1]
 8006b6e:	701a      	strb	r2, [r3, #0]

	byte_2_reply.udata=kd;
 8006b70:	4a0d      	ldr	r2, [pc, #52]	; (8006ba8 <motor_pd_v2+0x88>)
 8006b72:	88bb      	ldrh	r3, [r7, #4]
 8006b74:	8013      	strh	r3, [r2, #0]
	data_buffer[4] = byte_2_reply.buffer[0];
 8006b76:	68bb      	ldr	r3, [r7, #8]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	4a0b      	ldr	r2, [pc, #44]	; (8006ba8 <motor_pd_v2+0x88>)
 8006b7c:	7812      	ldrb	r2, [r2, #0]
 8006b7e:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = byte_2_reply.buffer[1];
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	3305      	adds	r3, #5
 8006b84:	4a08      	ldr	r2, [pc, #32]	; (8006ba8 <motor_pd_v2+0x88>)
 8006b86:	7852      	ldrb	r2, [r2, #1]
 8006b88:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	3306      	adds	r3, #6
 8006b8e:	2200      	movs	r2, #0
 8006b90:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	3307      	adds	r3, #7
 8006b96:	2200      	movs	r2, #0
 8006b98:	701a      	strb	r2, [r3, #0]
}
 8006b9a:	bf00      	nop
 8006b9c:	3714      	adds	r7, #20
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	240000a8 	.word	0x240000a8

08006bac <motor_pvt_v2>:
	data_buffer[6] = byte_8.buffer[4];
	data_buffer[7] = byte_8.buffer[5];
}

void motor_pvt_v2(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, float_t desP, float_t desV, int16_t desT, uint32_t Id)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6178      	str	r0, [r7, #20]
 8006bb4:	6139      	str	r1, [r7, #16]
 8006bb6:	ed87 0a03 	vstr	s0, [r7, #12]
 8006bba:	edc7 0a02 	vstr	s1, [r7, #8]
 8006bbe:	603b      	str	r3, [r7, #0]
 8006bc0:	4613      	mov	r3, r2
 8006bc2:	80fb      	strh	r3, [r7, #6]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006bca:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	601a      	str	r2, [r3, #0]

	data_buffer[0] = 0xae;
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	22ae      	movs	r2, #174	; 0xae
 8006bda:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	3301      	adds	r3, #1
 8006be0:	2200      	movs	r2, #0
 8006be2:	701a      	strb	r2, [r3, #0]
	byte_2_reply.udata=(int16_t)(desP*100+0.5);
 8006be4:	edd7 7a03 	vldr	s15, [r7, #12]
 8006be8:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006c78 <motor_pvt_v2+0xcc>
 8006bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006bf0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006bf4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006bf8:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006bfc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006c00:	ee17 3a90 	vmov	r3, s15
 8006c04:	b21a      	sxth	r2, r3
 8006c06:	4b1d      	ldr	r3, [pc, #116]	; (8006c7c <motor_pvt_v2+0xd0>)
 8006c08:	801a      	strh	r2, [r3, #0]
	data_buffer[2] = byte_2_reply.buffer[0];
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	3302      	adds	r3, #2
 8006c0e:	4a1b      	ldr	r2, [pc, #108]	; (8006c7c <motor_pvt_v2+0xd0>)
 8006c10:	7812      	ldrb	r2, [r2, #0]
 8006c12:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = byte_2_reply.buffer[1];
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	3303      	adds	r3, #3
 8006c18:	4a18      	ldr	r2, [pc, #96]	; (8006c7c <motor_pvt_v2+0xd0>)
 8006c1a:	7852      	ldrb	r2, [r2, #1]
 8006c1c:	701a      	strb	r2, [r3, #0]
	byte_2_reply.udata=(int16_t)(desV+0.5);
 8006c1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8006c22:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006c26:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8006c2a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8006c2e:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006c32:	ee17 3a90 	vmov	r3, s15
 8006c36:	b21a      	sxth	r2, r3
 8006c38:	4b10      	ldr	r3, [pc, #64]	; (8006c7c <motor_pvt_v2+0xd0>)
 8006c3a:	801a      	strh	r2, [r3, #0]
	data_buffer[4] = byte_2_reply.buffer[0];
 8006c3c:	693b      	ldr	r3, [r7, #16]
 8006c3e:	3304      	adds	r3, #4
 8006c40:	4a0e      	ldr	r2, [pc, #56]	; (8006c7c <motor_pvt_v2+0xd0>)
 8006c42:	7812      	ldrb	r2, [r2, #0]
 8006c44:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = byte_2_reply.buffer[1];
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	3305      	adds	r3, #5
 8006c4a:	4a0c      	ldr	r2, [pc, #48]	; (8006c7c <motor_pvt_v2+0xd0>)
 8006c4c:	7852      	ldrb	r2, [r2, #1]
 8006c4e:	701a      	strb	r2, [r3, #0]
	byte_2_reply.udata=desT;
 8006c50:	4a0a      	ldr	r2, [pc, #40]	; (8006c7c <motor_pvt_v2+0xd0>)
 8006c52:	88fb      	ldrh	r3, [r7, #6]
 8006c54:	8013      	strh	r3, [r2, #0]
	data_buffer[6] = byte_2_reply.buffer[0];
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	3306      	adds	r3, #6
 8006c5a:	4a08      	ldr	r2, [pc, #32]	; (8006c7c <motor_pvt_v2+0xd0>)
 8006c5c:	7812      	ldrb	r2, [r2, #0]
 8006c5e:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = byte_2_reply.buffer[1];
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	3307      	adds	r3, #7
 8006c64:	4a05      	ldr	r2, [pc, #20]	; (8006c7c <motor_pvt_v2+0xd0>)
 8006c66:	7852      	ldrb	r2, [r2, #1]
 8006c68:	701a      	strb	r2, [r3, #0]
}
 8006c6a:	bf00      	nop
 8006c6c:	371c      	adds	r7, #28
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	42c80000 	.word	0x42c80000
 8006c7c:	240000a8 	.word	0x240000a8

08006c80 <motor_es>:

void motor_es(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 8006c80:	b480      	push	{r7}
 8006c82:	b085      	sub	sp, #20
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	60f8      	str	r0, [r7, #12]
 8006c88:	60b9      	str	r1, [r7, #8]
 8006c8a:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006c92:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	601a      	str	r2, [r3, #0]

	data_buffer[0] = 0x08;
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	2208      	movs	r2, #8
 8006ca2:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	2200      	movs	r2, #0
 8006caa:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 8006cac:	68bb      	ldr	r3, [r7, #8]
 8006cae:	3302      	adds	r3, #2
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	3303      	adds	r3, #3
 8006cb8:	2200      	movs	r2, #0
 8006cba:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	3304      	adds	r3, #4
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	3305      	adds	r3, #5
 8006cc8:	2200      	movs	r2, #0
 8006cca:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8006ccc:	68bb      	ldr	r3, [r7, #8]
 8006cce:	3306      	adds	r3, #6
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	3307      	adds	r3, #7
 8006cd8:	2200      	movs	r2, #0
 8006cda:	701a      	strb	r2, [r3, #0]
}
 8006cdc:	bf00      	nop
 8006cde:	3714      	adds	r7, #20
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <motor_null>:
	data_buffer[6] = 0x00;
	data_buffer[7] = 0x00;
}

void motor_null(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006cfa:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	601a      	str	r2, [r3, #0]

	data_buffer[0] = 0x00;
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	3301      	adds	r3, #1
 8006d10:	2200      	movs	r2, #0
 8006d12:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	3302      	adds	r3, #2
 8006d18:	2200      	movs	r2, #0
 8006d1a:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	3303      	adds	r3, #3
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	3304      	adds	r3, #4
 8006d28:	2200      	movs	r2, #0
 8006d2a:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	3305      	adds	r3, #5
 8006d30:	2200      	movs	r2, #0
 8006d32:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	3306      	adds	r3, #6
 8006d38:	2200      	movs	r2, #0
 8006d3a:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	3307      	adds	r3, #7
 8006d40:	2200      	movs	r2, #0
 8006d42:	701a      	strb	r2, [r3, #0]
}
 8006d44:	bf00      	nop
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <motor_get_sglPos>:
	data_buffer[6] = byte_8.buffer[4];
	data_buffer[7] = byte_8.buffer[5];
}

void motor_get_sglPos(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, uint32_t Id)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006d62:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	601a      	str	r2, [r3, #0]

	data_buffer[0] = 0x94;
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	2294      	movs	r2, #148	; 0x94
 8006d72:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	3301      	adds	r3, #1
 8006d78:	2200      	movs	r2, #0
 8006d7a:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = 0x00;
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	3302      	adds	r3, #2
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = 0x00;
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	3303      	adds	r3, #3
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = 0x00;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	2200      	movs	r2, #0
 8006d92:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = 0x00;
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	3305      	adds	r3, #5
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = 0x00;
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	3306      	adds	r3, #6
 8006da0:	2200      	movs	r2, #0
 8006da2:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = 0x00;
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	3307      	adds	r3, #7
 8006da8:	2200      	movs	r2, #0
 8006daa:	701a      	strb	r2, [r3, #0]
}
 8006dac:	bf00      	nop
 8006dae:	3714      	adds	r7, #20
 8006db0:	46bd      	mov	sp, r7
 8006db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db6:	4770      	bx	lr

08006db8 <motor_decode_pvt>:
	data_buffer[6] = 0x00;
	data_buffer[7] = 0x00;
}

void motor_decode_pvt(uint8_t* data, float_t* pos, float_t* vel, float_t* tor)
{
 8006db8:	b480      	push	{r7}
 8006dba:	b085      	sub	sp, #20
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
 8006dc4:	603b      	str	r3, [r7, #0]
	byte_2_reply.buffer[0] = data[2];
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	789a      	ldrb	r2, [r3, #2]
 8006dca:	4b2d      	ldr	r3, [pc, #180]	; (8006e80 <motor_decode_pvt+0xc8>)
 8006dcc:	701a      	strb	r2, [r3, #0]
	byte_2_reply.buffer[1] = data[3];
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	78da      	ldrb	r2, [r3, #3]
 8006dd2:	4b2b      	ldr	r3, [pc, #172]	; (8006e80 <motor_decode_pvt+0xc8>)
 8006dd4:	705a      	strb	r2, [r3, #1]
	*pos = (float_t)byte_2_reply.udata * 0.01;
 8006dd6:	4b2a      	ldr	r3, [pc, #168]	; (8006e80 <motor_decode_pvt+0xc8>)
 8006dd8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ddc:	ee07 3a90 	vmov	s15, r3
 8006de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006de4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006de8:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8006e68 <motor_decode_pvt+0xb0>
 8006dec:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006df0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	edc3 7a00 	vstr	s15, [r3]
	byte_2_reply.buffer[0] = data[4];
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	791a      	ldrb	r2, [r3, #4]
 8006dfe:	4b20      	ldr	r3, [pc, #128]	; (8006e80 <motor_decode_pvt+0xc8>)
 8006e00:	701a      	strb	r2, [r3, #0]
	byte_2_reply.buffer[1] = data[5];
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	795a      	ldrb	r2, [r3, #5]
 8006e06:	4b1e      	ldr	r3, [pc, #120]	; (8006e80 <motor_decode_pvt+0xc8>)
 8006e08:	705a      	strb	r2, [r3, #1]
	*vel = (float_t)byte_2_reply.udata;
 8006e0a:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <motor_decode_pvt+0xc8>)
 8006e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e10:	ee07 3a90 	vmov	s15, r3
 8006e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	edc3 7a00 	vstr	s15, [r3]
	byte_2_reply.buffer[0] = data[6];
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	799a      	ldrb	r2, [r3, #6]
 8006e22:	4b17      	ldr	r3, [pc, #92]	; (8006e80 <motor_decode_pvt+0xc8>)
 8006e24:	701a      	strb	r2, [r3, #0]
	byte_2_reply.buffer[1] = data[7];
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	79da      	ldrb	r2, [r3, #7]
 8006e2a:	4b15      	ldr	r3, [pc, #84]	; (8006e80 <motor_decode_pvt+0xc8>)
 8006e2c:	705a      	strb	r2, [r3, #1]
	*tor = (float_t)byte_2_reply.udata * 66.0 / 4096;
 8006e2e:	4b14      	ldr	r3, [pc, #80]	; (8006e80 <motor_decode_pvt+0xc8>)
 8006e30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006e34:	ee07 3a90 	vmov	s15, r3
 8006e38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e3c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006e40:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8006e70 <motor_decode_pvt+0xb8>
 8006e44:	ee27 6b06 	vmul.f64	d6, d7, d6
 8006e48:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8006e78 <motor_decode_pvt+0xc0>
 8006e4c:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006e50:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	edc3 7a00 	vstr	s15, [r3]
}
 8006e5a:	bf00      	nop
 8006e5c:	3714      	adds	r7, #20
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e64:	4770      	bx	lr
 8006e66:	bf00      	nop
 8006e68:	47ae147b 	.word	0x47ae147b
 8006e6c:	3f847ae1 	.word	0x3f847ae1
 8006e70:	00000000 	.word	0x00000000
 8006e74:	40508000 	.word	0x40508000
 8006e78:	00000000 	.word	0x00000000
 8006e7c:	40b00000 	.word	0x40b00000
 8006e80:	240000a8 	.word	0x240000a8
 8006e84:	00000000 	.word	0x00000000

08006e88 <motor_decode_sglPos>:

void motor_decode_sglPos(uint8_t* data, float_t * sglPos)
{
 8006e88:	b480      	push	{r7}
 8006e8a:	b083      	sub	sp, #12
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
	byte_4_int32.buffer[0]=data[4];
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	791a      	ldrb	r2, [r3, #4]
 8006e96:	4b14      	ldr	r3, [pc, #80]	; (8006ee8 <motor_decode_sglPos+0x60>)
 8006e98:	701a      	strb	r2, [r3, #0]
	byte_4_int32.buffer[1]=data[5];
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	795a      	ldrb	r2, [r3, #5]
 8006e9e:	4b12      	ldr	r3, [pc, #72]	; (8006ee8 <motor_decode_sglPos+0x60>)
 8006ea0:	705a      	strb	r2, [r3, #1]
	byte_4_int32.buffer[2]=data[6];
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	799a      	ldrb	r2, [r3, #6]
 8006ea6:	4b10      	ldr	r3, [pc, #64]	; (8006ee8 <motor_decode_sglPos+0x60>)
 8006ea8:	709a      	strb	r2, [r3, #2]
	byte_4_int32.buffer[3]=data[7];
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	79da      	ldrb	r2, [r3, #7]
 8006eae:	4b0e      	ldr	r3, [pc, #56]	; (8006ee8 <motor_decode_sglPos+0x60>)
 8006eb0:	70da      	strb	r2, [r3, #3]

	*sglPos=(float_t)byte_4_int32.udata*0.01;
 8006eb2:	4b0d      	ldr	r3, [pc, #52]	; (8006ee8 <motor_decode_sglPos+0x60>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	ee07 3a90 	vmov	s15, r3
 8006eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ebe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006ec2:	ed9f 6b07 	vldr	d6, [pc, #28]	; 8006ee0 <motor_decode_sglPos+0x58>
 8006ec6:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006eca:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006ece:	683b      	ldr	r3, [r7, #0]
 8006ed0:	edc3 7a00 	vstr	s15, [r3]
}
 8006ed4:	bf00      	nop
 8006ed6:	370c      	adds	r7, #12
 8006ed8:	46bd      	mov	sp, r7
 8006eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ede:	4770      	bx	lr
 8006ee0:	47ae147b 	.word	0x47ae147b
 8006ee4:	3f847ae1 	.word	0x3f847ae1
 8006ee8:	240000c0 	.word	0x240000c0
 8006eec:	00000000 	.word	0x00000000

08006ef0 <motor_decode_mulPos>:

void motor_decode_mulPos(uint8_t* data, float_t * mulPos)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b082      	sub	sp, #8
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
	byte_8_int64.buffer[3]=data[3];
	byte_8_int64.buffer[4]=data[4];
	byte_8_int64.buffer[5]=data[5];
	byte_8_int64.buffer[6]=data[6];
	byte_8_int64.buffer[7]=data[7];*/
	byte_8_int64.buffer[0]=data[1];
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	785a      	ldrb	r2, [r3, #1]
 8006efe:	4b1c      	ldr	r3, [pc, #112]	; (8006f70 <motor_decode_mulPos+0x80>)
 8006f00:	701a      	strb	r2, [r3, #0]
	byte_8_int64.buffer[1]=data[2];
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	789a      	ldrb	r2, [r3, #2]
 8006f06:	4b1a      	ldr	r3, [pc, #104]	; (8006f70 <motor_decode_mulPos+0x80>)
 8006f08:	705a      	strb	r2, [r3, #1]
	byte_8_int64.buffer[2]=data[3];
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	78da      	ldrb	r2, [r3, #3]
 8006f0e:	4b18      	ldr	r3, [pc, #96]	; (8006f70 <motor_decode_mulPos+0x80>)
 8006f10:	709a      	strb	r2, [r3, #2]
	byte_8_int64.buffer[3]=data[4];
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	791a      	ldrb	r2, [r3, #4]
 8006f16:	4b16      	ldr	r3, [pc, #88]	; (8006f70 <motor_decode_mulPos+0x80>)
 8006f18:	70da      	strb	r2, [r3, #3]
	byte_8_int64.buffer[4]=data[5];
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	795a      	ldrb	r2, [r3, #5]
 8006f1e:	4b14      	ldr	r3, [pc, #80]	; (8006f70 <motor_decode_mulPos+0x80>)
 8006f20:	711a      	strb	r2, [r3, #4]
	byte_8_int64.buffer[5]=data[6];
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	799a      	ldrb	r2, [r3, #6]
 8006f26:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <motor_decode_mulPos+0x80>)
 8006f28:	715a      	strb	r2, [r3, #5]
	byte_8_int64.buffer[6]=data[7];
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	79da      	ldrb	r2, [r3, #7]
 8006f2e:	4b10      	ldr	r3, [pc, #64]	; (8006f70 <motor_decode_mulPos+0x80>)
 8006f30:	719a      	strb	r2, [r3, #6]
	byte_8_int64.buffer[7]=0;
 8006f32:	4b0f      	ldr	r3, [pc, #60]	; (8006f70 <motor_decode_mulPos+0x80>)
 8006f34:	2200      	movs	r2, #0
 8006f36:	71da      	strb	r2, [r3, #7]
	*mulPos=(float_t)byte_8_int64.udata*0.01;
 8006f38:	4b0d      	ldr	r3, [pc, #52]	; (8006f70 <motor_decode_mulPos+0x80>)
 8006f3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f3e:	4610      	mov	r0, r2
 8006f40:	4619      	mov	r1, r3
 8006f42:	f7f9 fc55 	bl	80007f0 <__aeabi_l2f>
 8006f46:	ee07 0a90 	vmov	s15, r0
 8006f4a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006f4e:	ed9f 6b06 	vldr	d6, [pc, #24]	; 8006f68 <motor_decode_mulPos+0x78>
 8006f52:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006f56:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	edc3 7a00 	vstr	s15, [r3]
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	47ae147b 	.word	0x47ae147b
 8006f6c:	3f847ae1 	.word	0x3f847ae1
 8006f70:	240000b8 	.word	0x240000b8
 8006f74:	00000000 	.word	0x00000000

08006f78 <motor_decode_cur>:

void motor_decode_cur(uint8_t* data, float_t* pos, float_t* vel, float_t* tor)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	60f8      	str	r0, [r7, #12]
 8006f80:	60b9      	str	r1, [r7, #8]
 8006f82:	607a      	str	r2, [r7, #4]
 8006f84:	603b      	str	r3, [r7, #0]
	byte_2u_reply.buffer[0] = data[6];
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	799a      	ldrb	r2, [r3, #6]
 8006f8a:	4b2f      	ldr	r3, [pc, #188]	; (8007048 <motor_decode_cur+0xd0>)
 8006f8c:	701a      	strb	r2, [r3, #0]
	byte_2u_reply.buffer[1] = data[7];
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	79da      	ldrb	r2, [r3, #7]
 8006f92:	4b2d      	ldr	r3, [pc, #180]	; (8007048 <motor_decode_cur+0xd0>)
 8006f94:	705a      	strb	r2, [r3, #1]
	*pos = (double_t)byte_2u_reply.udata /65535.0*360.0;
 8006f96:	4b2c      	ldr	r3, [pc, #176]	; (8007048 <motor_decode_cur+0xd0>)
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	ee07 3a90 	vmov	s15, r3
 8006f9e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8006fa2:	ed9f 5b21 	vldr	d5, [pc, #132]	; 8007028 <motor_decode_cur+0xb0>
 8006fa6:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006faa:	ed9f 6b21 	vldr	d6, [pc, #132]	; 8007030 <motor_decode_cur+0xb8>
 8006fae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006fb2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	edc3 7a00 	vstr	s15, [r3]
	byte_2_reply.buffer[0] = data[4];
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	791a      	ldrb	r2, [r3, #4]
 8006fc0:	4b22      	ldr	r3, [pc, #136]	; (800704c <motor_decode_cur+0xd4>)
 8006fc2:	701a      	strb	r2, [r3, #0]
	byte_2_reply.buffer[1] = data[5];
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	795a      	ldrb	r2, [r3, #5]
 8006fc8:	4b20      	ldr	r3, [pc, #128]	; (800704c <motor_decode_cur+0xd4>)
 8006fca:	705a      	strb	r2, [r3, #1]
	*vel = (float_t)byte_2_reply.udata;
 8006fcc:	4b1f      	ldr	r3, [pc, #124]	; (800704c <motor_decode_cur+0xd4>)
 8006fce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006fd2:	ee07 3a90 	vmov	s15, r3
 8006fd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	edc3 7a00 	vstr	s15, [r3]
	byte_2_reply.buffer[0] = data[2];
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	789a      	ldrb	r2, [r3, #2]
 8006fe4:	4b19      	ldr	r3, [pc, #100]	; (800704c <motor_decode_cur+0xd4>)
 8006fe6:	701a      	strb	r2, [r3, #0]
	byte_2_reply.buffer[1] = data[3];
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	78da      	ldrb	r2, [r3, #3]
 8006fec:	4b17      	ldr	r3, [pc, #92]	; (800704c <motor_decode_cur+0xd4>)
 8006fee:	705a      	strb	r2, [r3, #1]
	*tor = (float_t)byte_2_reply.udata * 66.0 / 4096;
 8006ff0:	4b16      	ldr	r3, [pc, #88]	; (800704c <motor_decode_cur+0xd4>)
 8006ff2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006ff6:	ee07 3a90 	vmov	s15, r3
 8006ffa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006ffe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007002:	ed9f 6b0d 	vldr	d6, [pc, #52]	; 8007038 <motor_decode_cur+0xc0>
 8007006:	ee27 6b06 	vmul.f64	d6, d7, d6
 800700a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 8007040 <motor_decode_cur+0xc8>
 800700e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007012:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	edc3 7a00 	vstr	s15, [r3]
}
 800701c:	bf00      	nop
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr
 8007028:	00000000 	.word	0x00000000
 800702c:	40efffe0 	.word	0x40efffe0
 8007030:	00000000 	.word	0x00000000
 8007034:	40768000 	.word	0x40768000
 8007038:	00000000 	.word	0x00000000
 800703c:	40508000 	.word	0x40508000
 8007040:	00000000 	.word	0x00000000
 8007044:	40b00000 	.word	0x40b00000
 8007048:	240000ac 	.word	0x240000ac
 800704c:	240000a8 	.word	0x240000a8

08007050 <motor_pos>:
	data_buffer[6] = byte_4_int32.buffer[2];
	data_buffer[7] = byte_4_int32.buffer[3];
}

void motor_pos(FDCAN_TxHeaderTypeDef* joint_tx, uint8_t* data_buffer, int32_t pos_in, uint16_t maxSpeed, uint32_t Id)
{
 8007050:	b480      	push	{r7}
 8007052:	b085      	sub	sp, #20
 8007054:	af00      	add	r7, sp, #0
 8007056:	60f8      	str	r0, [r7, #12]
 8007058:	60b9      	str	r1, [r7, #8]
 800705a:	607a      	str	r2, [r7, #4]
 800705c:	807b      	strh	r3, [r7, #2]
	joint_tx->DataLength = FDCAN_DLC_BYTES_8;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007064:	60da      	str	r2, [r3, #12]
	joint_tx->Identifier = Id + 0x140;
 8007066:	69bb      	ldr	r3, [r7, #24]
 8007068:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	601a      	str	r2, [r3, #0]

	byte_4_int32.udata=pos_in;
 8007070:	4a18      	ldr	r2, [pc, #96]	; (80070d4 <motor_pos+0x84>)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6013      	str	r3, [r2, #0]

	byte_2u_reply.udata=maxSpeed;
 8007076:	4a18      	ldr	r2, [pc, #96]	; (80070d8 <motor_pos+0x88>)
 8007078:	887b      	ldrh	r3, [r7, #2]
 800707a:	8013      	strh	r3, [r2, #0]

	data_buffer[0] = 0xa4;
 800707c:	68bb      	ldr	r3, [r7, #8]
 800707e:	22a4      	movs	r2, #164	; 0xa4
 8007080:	701a      	strb	r2, [r3, #0]
	data_buffer[1] = 0x00;
 8007082:	68bb      	ldr	r3, [r7, #8]
 8007084:	3301      	adds	r3, #1
 8007086:	2200      	movs	r2, #0
 8007088:	701a      	strb	r2, [r3, #0]
	data_buffer[2] = byte_2u_reply.buffer[0];
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	3302      	adds	r3, #2
 800708e:	4a12      	ldr	r2, [pc, #72]	; (80070d8 <motor_pos+0x88>)
 8007090:	7812      	ldrb	r2, [r2, #0]
 8007092:	701a      	strb	r2, [r3, #0]
	data_buffer[3] = byte_2u_reply.buffer[1];
 8007094:	68bb      	ldr	r3, [r7, #8]
 8007096:	3303      	adds	r3, #3
 8007098:	4a0f      	ldr	r2, [pc, #60]	; (80070d8 <motor_pos+0x88>)
 800709a:	7852      	ldrb	r2, [r2, #1]
 800709c:	701a      	strb	r2, [r3, #0]
	data_buffer[4] = byte_4_int32.buffer[0];
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	3304      	adds	r3, #4
 80070a2:	4a0c      	ldr	r2, [pc, #48]	; (80070d4 <motor_pos+0x84>)
 80070a4:	7812      	ldrb	r2, [r2, #0]
 80070a6:	701a      	strb	r2, [r3, #0]
	data_buffer[5] = byte_4_int32.buffer[1];
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	3305      	adds	r3, #5
 80070ac:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <motor_pos+0x84>)
 80070ae:	7852      	ldrb	r2, [r2, #1]
 80070b0:	701a      	strb	r2, [r3, #0]
	data_buffer[6] = byte_4_int32.buffer[2];
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	3306      	adds	r3, #6
 80070b6:	4a07      	ldr	r2, [pc, #28]	; (80070d4 <motor_pos+0x84>)
 80070b8:	7892      	ldrb	r2, [r2, #2]
 80070ba:	701a      	strb	r2, [r3, #0]
	data_buffer[7] = byte_4_int32.buffer[3];
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3307      	adds	r3, #7
 80070c0:	4a04      	ldr	r2, [pc, #16]	; (80070d4 <motor_pos+0x84>)
 80070c2:	78d2      	ldrb	r2, [r2, #3]
 80070c4:	701a      	strb	r2, [r3, #0]
}
 80070c6:	bf00      	nop
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	240000c0 	.word	0x240000c0
 80070d8:	240000ac 	.word	0x240000ac

080070dc <delay_us>:
void send_to_all_slave_sgl();
void send_to_all_slave_mul();
void send_to_all_slave_cur0();

void delay_us(uint16_t us)
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4, 0); 
 80070e6:	4b09      	ldr	r3, [pc, #36]	; (800710c <delay_us+0x30>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2200      	movs	r2, #0
 80070ec:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us) ;
 80070ee:	bf00      	nop
 80070f0:	4b06      	ldr	r3, [pc, #24]	; (800710c <delay_us+0x30>)
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80070f6:	88fb      	ldrh	r3, [r7, #6]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d3f9      	bcc.n	80070f0 <delay_us+0x14>
}
 80070fc:	bf00      	nop
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	240003bc 	.word	0x240003bc

08007110 <control>:

void control()
{
 8007110:	b5b0      	push	{r4, r5, r7, lr}
 8007112:	b084      	sub	sp, #16
 8007114:	af02      	add	r7, sp, #8
	loop_1ms_count++;
 8007116:	4b86      	ldr	r3, [pc, #536]	; (8007330 <control+0x220>)
 8007118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800711c:	1c50      	adds	r0, r2, #1
 800711e:	f143 0100 	adc.w	r1, r3, #0
 8007122:	4b83      	ldr	r3, [pc, #524]	; (8007330 <control+0x220>)
 8007124:	e9c3 0100 	strd	r0, r1, [r3]
	if (loop_1ms_count==6)
 8007128:	4b81      	ldr	r3, [pc, #516]	; (8007330 <control+0x220>)
 800712a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800712e:	1f91      	subs	r1, r2, #6
 8007130:	430b      	orrs	r3, r1
 8007132:	d106      	bne.n	8007142 <control+0x32>
		loop_1ms_count=0;
 8007134:	497e      	ldr	r1, [pc, #504]	; (8007330 <control+0x220>)
 8007136:	f04f 0200 	mov.w	r2, #0
 800713a:	f04f 0300 	mov.w	r3, #0
 800713e:	e9c1 2300 	strd	r2, r3, [r1]

	if (control_word==0)
 8007142:	4b7c      	ldr	r3, [pc, #496]	; (8007334 <control+0x224>)
 8007144:	881b      	ldrh	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d102      	bne.n	8007150 <control+0x40>
			control_word=1;
 800714a:	4b7a      	ldr	r3, [pc, #488]	; (8007334 <control+0x224>)
 800714c:	2201      	movs	r2, #1
 800714e:	801a      	strh	r2, [r3, #0]

	if (control_word == 1)
 8007150:	4b78      	ldr	r3, [pc, #480]	; (8007334 <control+0x224>)
 8007152:	881b      	ldrh	r3, [r3, #0]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d130      	bne.n	80071ba <control+0xaa>
	{
		if (is_init == 0)   // init
 8007158:	4b77      	ldr	r3, [pc, #476]	; (8007338 <control+0x228>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d11b      	bne.n	8007198 <control+0x88>
		{
			if (init_counter < 2)
 8007160:	4b76      	ldr	r3, [pc, #472]	; (800733c <control+0x22c>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	2b01      	cmp	r3, #1
 8007166:	d805      	bhi.n	8007174 <control+0x64>
			{
				init_counter++;
 8007168:	4b74      	ldr	r3, [pc, #464]	; (800733c <control+0x22c>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3301      	adds	r3, #1
 800716e:	4a73      	ldr	r2, [pc, #460]	; (800733c <control+0x22c>)
 8007170:	6013      	str	r3, [r2, #0]
 8007172:	e005      	b.n	8007180 <control+0x70>
			}
			else
			{
				init_counter = 0;
 8007174:	4b71      	ldr	r3, [pc, #452]	; (800733c <control+0x22c>)
 8007176:	2200      	movs	r2, #0
 8007178:	601a      	str	r2, [r3, #0]
				is_init = 1;
 800717a:	4b6f      	ldr	r3, [pc, #444]	; (8007338 <control+0x228>)
 800717c:	2201      	movs	r2, #1
 800717e:	601a      	str	r2, [r3, #0]
			}
			motor_pos(&joint_1, joint_1_data, 0, (uint16_t)(60*10), 1);
 8007180:	2301      	movs	r3, #1
 8007182:	9300      	str	r3, [sp, #0]
 8007184:	f44f 7316 	mov.w	r3, #600	; 0x258
 8007188:	2200      	movs	r2, #0
 800718a:	496d      	ldr	r1, [pc, #436]	; (8007340 <control+0x230>)
 800718c:	486d      	ldr	r0, [pc, #436]	; (8007344 <control+0x234>)
 800718e:	f7ff ff5f 	bl	8007050 <motor_pos>
			send_to_all_slave();
 8007192:	f001 f85b 	bl	800824c <send_to_all_slave>
 8007196:	e00c      	b.n	80071b2 <control+0xa2>
		}
		else  // get data
		{
			motor_pd_v2(&joint_1, joint_1_data, 50, 250, 1); // min: 50, 200
 8007198:	2301      	movs	r3, #1
 800719a:	9300      	str	r3, [sp, #0]
 800719c:	23fa      	movs	r3, #250	; 0xfa
 800719e:	2232      	movs	r2, #50	; 0x32
 80071a0:	4967      	ldr	r1, [pc, #412]	; (8007340 <control+0x230>)
 80071a2:	4868      	ldr	r0, [pc, #416]	; (8007344 <control+0x234>)
 80071a4:	f7ff fcbc 	bl	8006b20 <motor_pd_v2>
			send_to_all_slave();
 80071a8:	f001 f850 	bl	800824c <send_to_all_slave>
			control_word=2;
 80071ac:	4b61      	ldr	r3, [pc, #388]	; (8007334 <control+0x224>)
 80071ae:	2202      	movs	r2, #2
 80071b0:	801a      	strh	r2, [r3, #0]
		}

		is_run = 0;
 80071b2:	4b65      	ldr	r3, [pc, #404]	; (8007348 <control+0x238>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	601a      	str	r2, [r3, #0]
	}
	else  // stop
	{
		//HAL_GPIO_WritePin(GPIOA, ES_Pin, GPIO_PIN_SET);
	}
}
 80071b8:	e0ae      	b.n	8007318 <control+0x208>
	else if (control_word == 2)  // parameter
 80071ba:	4b5e      	ldr	r3, [pc, #376]	; (8007334 <control+0x224>)
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	2b02      	cmp	r3, #2
 80071c0:	f040 8088 	bne.w	80072d4 <control+0x1c4>
		if (is_run == 0)
 80071c4:	4b60      	ldr	r3, [pc, #384]	; (8007348 <control+0x238>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d103      	bne.n	80071d4 <control+0xc4>
			is_run = 1;
 80071cc:	4b5e      	ldr	r3, [pc, #376]	; (8007348 <control+0x238>)
 80071ce:	2201      	movs	r2, #1
 80071d0:	601a      	str	r2, [r3, #0]
 80071d2:	e07b      	b.n	80072cc <control+0x1bc>
		else if (is_run == 1)
 80071d4:	4b5c      	ldr	r3, [pc, #368]	; (8007348 <control+0x238>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d103      	bne.n	80071e4 <control+0xd4>
			is_run = 2;
 80071dc:	4b5a      	ldr	r3, [pc, #360]	; (8007348 <control+0x238>)
 80071de:	2202      	movs	r2, #2
 80071e0:	601a      	str	r2, [r3, #0]
 80071e2:	e073      	b.n	80072cc <control+0x1bc>
			if (fabs(MF_1.out_Pos)<0.2 && (MF_1.out_Pos)!=0)
 80071e4:	4b59      	ldr	r3, [pc, #356]	; (800734c <control+0x23c>)
 80071e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80071ea:	eef0 7ae7 	vabs.f32	s15, s15
 80071ee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80071f2:	ed9f 6b4b 	vldr	d6, [pc, #300]	; 8007320 <control+0x210>
 80071f6:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80071fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fe:	d50b      	bpl.n	8007218 <control+0x108>
 8007200:	4b52      	ldr	r3, [pc, #328]	; (800734c <control+0x23c>)
 8007202:	edd3 7a06 	vldr	s15, [r3, #24]
 8007206:	eef5 7a40 	vcmp.f32	s15, #0.0
 800720a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800720e:	d003      	beq.n	8007218 <control+0x108>
				MF_1.iniReady=1;
 8007210:	4b4e      	ldr	r3, [pc, #312]	; (800734c <control+0x23c>)
 8007212:	2201      	movs	r2, #1
 8007214:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			phi=2.0*3.14159265*pos_cnt[0]/ we[0];
 8007218:	4b4d      	ldr	r3, [pc, #308]	; (8007350 <control+0x240>)
 800721a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800721e:	4610      	mov	r0, r2
 8007220:	4619      	mov	r1, r3
 8007222:	f7f9 f9df 	bl	80005e4 <__aeabi_ul2d>
 8007226:	ec41 0b16 	vmov	d6, r0, r1
 800722a:	ed9f 7b3f 	vldr	d7, [pc, #252]	; 8007328 <control+0x218>
 800722e:	ee26 5b07 	vmul.f64	d5, d6, d7
 8007232:	4b48      	ldr	r3, [pc, #288]	; (8007354 <control+0x244>)
 8007234:	ed93 6b00 	vldr	d6, [r3]
 8007238:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800723c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007240:	edc7 7a01 	vstr	s15, [r7, #4]
			if (phi>=2*3.14159265)
 8007244:	edd7 7a01 	vldr	s15, [r7, #4]
 8007248:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800724c:	ed9f 6b36 	vldr	d6, [pc, #216]	; 8007328 <control+0x218>
 8007250:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007258:	db06      	blt.n	8007268 <control+0x158>
				pos_cnt[0]=0;
 800725a:	493d      	ldr	r1, [pc, #244]	; (8007350 <control+0x240>)
 800725c:	f04f 0200 	mov.w	r2, #0
 8007260:	f04f 0300 	mov.w	r3, #0
 8007264:	e9c1 2300 	strd	r2, r3, [r1]
			pos_des=20.0*sin(phi);
 8007268:	edd7 7a01 	vldr	s15, [r7, #4]
 800726c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007270:	eeb0 0b47 	vmov.f64	d0, d7
 8007274:	f001 fc2c 	bl	8008ad0 <sin>
 8007278:	eeb0 7b40 	vmov.f64	d7, d0
 800727c:	eeb3 6b04 	vmov.f64	d6, #52	; 0x41a00000  20.0
 8007280:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007284:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007288:	edc7 7a00 	vstr	s15, [r7]
			if (MF_1.iniReady==1)
 800728c:	4b2f      	ldr	r3, [pc, #188]	; (800734c <control+0x23c>)
 800728e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007292:	2b01      	cmp	r3, #1
 8007294:	d113      	bne.n	80072be <control+0x1ae>
				{motor_pvt_v2(&joint_1, joint_1_data, pos_des, 0, 0, 1);pos_cnt[0]++;}
 8007296:	2301      	movs	r3, #1
 8007298:	2200      	movs	r2, #0
 800729a:	eddf 0a2f 	vldr	s1, [pc, #188]	; 8007358 <control+0x248>
 800729e:	ed97 0a00 	vldr	s0, [r7]
 80072a2:	4927      	ldr	r1, [pc, #156]	; (8007340 <control+0x230>)
 80072a4:	4827      	ldr	r0, [pc, #156]	; (8007344 <control+0x234>)
 80072a6:	f7ff fc81 	bl	8006bac <motor_pvt_v2>
 80072aa:	4b29      	ldr	r3, [pc, #164]	; (8007350 <control+0x240>)
 80072ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072b0:	1c54      	adds	r4, r2, #1
 80072b2:	f143 0500 	adc.w	r5, r3, #0
 80072b6:	4b26      	ldr	r3, [pc, #152]	; (8007350 <control+0x240>)
 80072b8:	e9c3 4500 	strd	r4, r5, [r3]
 80072bc:	e004      	b.n	80072c8 <control+0x1b8>
				motor_get_sglPos(&joint_1, joint_1_data, 1);
 80072be:	2201      	movs	r2, #1
 80072c0:	491f      	ldr	r1, [pc, #124]	; (8007340 <control+0x230>)
 80072c2:	4820      	ldr	r0, [pc, #128]	; (8007344 <control+0x234>)
 80072c4:	f7ff fd44 	bl	8006d50 <motor_get_sglPos>
			send_to_all_slave();
 80072c8:	f000 ffc0 	bl	800824c <send_to_all_slave>
		is_init = 0;
 80072cc:	4b1a      	ldr	r3, [pc, #104]	; (8007338 <control+0x228>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
}
 80072d2:	e021      	b.n	8007318 <control+0x208>
	else if(control_word == 3)  // stop
 80072d4:	4b17      	ldr	r3, [pc, #92]	; (8007334 <control+0x224>)
 80072d6:	881b      	ldrh	r3, [r3, #0]
 80072d8:	2b03      	cmp	r3, #3
 80072da:	d11d      	bne.n	8007318 <control+0x208>
		motor_es(&joint_1, joint_1_data, 1);
 80072dc:	2201      	movs	r2, #1
 80072de:	4918      	ldr	r1, [pc, #96]	; (8007340 <control+0x230>)
 80072e0:	4818      	ldr	r0, [pc, #96]	; (8007344 <control+0x234>)
 80072e2:	f7ff fccd 	bl	8006c80 <motor_es>
		motor_es(&joint_2, joint_2_data, 2);
 80072e6:	2202      	movs	r2, #2
 80072e8:	491c      	ldr	r1, [pc, #112]	; (800735c <control+0x24c>)
 80072ea:	481d      	ldr	r0, [pc, #116]	; (8007360 <control+0x250>)
 80072ec:	f7ff fcc8 	bl	8006c80 <motor_es>
		motor_es(&joint_3, joint_3_data, 3);
 80072f0:	2203      	movs	r2, #3
 80072f2:	491c      	ldr	r1, [pc, #112]	; (8007364 <control+0x254>)
 80072f4:	481c      	ldr	r0, [pc, #112]	; (8007368 <control+0x258>)
 80072f6:	f7ff fcc3 	bl	8006c80 <motor_es>
		motor_es(&joint_4, joint_4_data, 4);
 80072fa:	2204      	movs	r2, #4
 80072fc:	491b      	ldr	r1, [pc, #108]	; (800736c <control+0x25c>)
 80072fe:	481c      	ldr	r0, [pc, #112]	; (8007370 <control+0x260>)
 8007300:	f7ff fcbe 	bl	8006c80 <motor_es>
		motor_null(&joint_5, joint_5_data, 5);
 8007304:	2205      	movs	r2, #5
 8007306:	491b      	ldr	r1, [pc, #108]	; (8007374 <control+0x264>)
 8007308:	481b      	ldr	r0, [pc, #108]	; (8007378 <control+0x268>)
 800730a:	f7ff fced 	bl	8006ce8 <motor_null>
		is_run = 0;
 800730e:	4b0e      	ldr	r3, [pc, #56]	; (8007348 <control+0x238>)
 8007310:	2200      	movs	r2, #0
 8007312:	601a      	str	r2, [r3, #0]
		send_to_all_slave();
 8007314:	f000 ff9a 	bl	800824c <send_to_all_slave>
}
 8007318:	bf00      	nop
 800731a:	3708      	adds	r7, #8
 800731c:	46bd      	mov	sp, r7
 800731e:	bdb0      	pop	{r4, r5, r7, pc}
 8007320:	9999999a 	.word	0x9999999a
 8007324:	3fc99999 	.word	0x3fc99999
 8007328:	53c8d4f1 	.word	0x53c8d4f1
 800732c:	401921fb 	.word	0x401921fb
 8007330:	24000748 	.word	0x24000748
 8007334:	24000660 	.word	0x24000660
 8007338:	24000664 	.word	0x24000664
 800733c:	2400066c 	.word	0x2400066c
 8007340:	240005c0 	.word	0x240005c0
 8007344:	240004e8 	.word	0x240004e8
 8007348:	24000668 	.word	0x24000668
 800734c:	24000008 	.word	0x24000008
 8007350:	24000680 	.word	0x24000680
 8007354:	24000040 	.word	0x24000040
 8007358:	00000000 	.word	0x00000000
 800735c:	240005c8 	.word	0x240005c8
 8007360:	2400050c 	.word	0x2400050c
 8007364:	240005d0 	.word	0x240005d0
 8007368:	24000530 	.word	0x24000530
 800736c:	240005d8 	.word	0x240005d8
 8007370:	24000554 	.word	0x24000554
 8007374:	240005e0 	.word	0x240005e0
 8007378:	24000578 	.word	0x24000578
 800737c:	00000000 	.word	0x00000000

08007380 <unpack_reply>:

void unpack_reply(FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *data)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b08a      	sub	sp, #40	; 0x28
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	6039      	str	r1, [r7, #0]
	//TODO 
	if (pRxHeader->DataLength == FDCAN_DLC_BYTES_8)
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007392:	f040 8292 	bne.w	80078ba <unpack_reply+0x53a>
	{
		int id = pRxHeader->Identifier - 0x140;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800739e:	61fb      	str	r3, [r7, #28]
		if (id > 0 && id < 7)
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	f340 8289 	ble.w	80078ba <unpack_reply+0x53a>
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	2b06      	cmp	r3, #6
 80073ac:	f300 8285 	bgt.w	80078ba <unpack_reply+0x53a>
		{
			if (id > 0 && id < 5)
 80073b0:	69fb      	ldr	r3, [r7, #28]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	dd20      	ble.n	80073f8 <unpack_reply+0x78>
 80073b6:	69fb      	ldr	r3, [r7, #28]
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	dc1d      	bgt.n	80073f8 <unpack_reply+0x78>
			{
				if (data[0] == 0xae)
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2bae      	cmp	r3, #174	; 0xae
 80073c2:	d130      	bne.n	8007426 <unpack_reply+0xa6>
				{
					for (size_t i = 0; i < 6; i++)
 80073c4:	2300      	movs	r3, #0
 80073c6:	627b      	str	r3, [r7, #36]	; 0x24
 80073c8:	e00c      	b.n	80073e4 <unpack_reply+0x64>
						byte_8_reply.buffer[i] = data[i + 2];
 80073ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073cc:	3302      	adds	r3, #2
 80073ce:	683a      	ldr	r2, [r7, #0]
 80073d0:	4413      	add	r3, r2
 80073d2:	7819      	ldrb	r1, [r3, #0]
 80073d4:	4a0b      	ldr	r2, [pc, #44]	; (8007404 <unpack_reply+0x84>)
 80073d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d8:	4413      	add	r3, r2
 80073da:	460a      	mov	r2, r1
 80073dc:	701a      	strb	r2, [r3, #0]
					for (size_t i = 0; i < 6; i++)
 80073de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e0:	3301      	adds	r3, #1
 80073e2:	627b      	str	r3, [r7, #36]	; 0x24
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	2b05      	cmp	r3, #5
 80073e8:	d9ef      	bls.n	80073ca <unpack_reply+0x4a>
					byte_8_reply.buffer[6] = 0x00;
 80073ea:	4b06      	ldr	r3, [pc, #24]	; (8007404 <unpack_reply+0x84>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	719a      	strb	r2, [r3, #6]
					byte_8_reply.buffer[7] = 0x00;
 80073f0:	4b04      	ldr	r3, [pc, #16]	; (8007404 <unpack_reply+0x84>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	71da      	strb	r2, [r3, #7]
				if (data[0] == 0xae)
 80073f6:	e016      	b.n	8007426 <unpack_reply+0xa6>
				}
			}
			else if (id == 5)
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	2b05      	cmp	r3, #5
 80073fc:	d113      	bne.n	8007426 <unpack_reply+0xa6>
			{
				for (size_t i = 0; i < 8; i++)
 80073fe:	2300      	movs	r3, #0
 8007400:	623b      	str	r3, [r7, #32]
 8007402:	e00d      	b.n	8007420 <unpack_reply+0xa0>
 8007404:	240000a0 	.word	0x240000a0
					byte_8_reply.buffer[i] = data[i];
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	4413      	add	r3, r2
 800740e:	7819      	ldrb	r1, [r3, #0]
 8007410:	4abf      	ldr	r2, [pc, #764]	; (8007710 <unpack_reply+0x390>)
 8007412:	6a3b      	ldr	r3, [r7, #32]
 8007414:	4413      	add	r3, r2
 8007416:	460a      	mov	r2, r1
 8007418:	701a      	strb	r2, [r3, #0]
				for (size_t i = 0; i < 8; i++)
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	3301      	adds	r3, #1
 800741e:	623b      	str	r3, [r7, #32]
 8007420:	6a3b      	ldr	r3, [r7, #32]
 8007422:	2b07      	cmp	r3, #7
 8007424:	d9f0      	bls.n	8007408 <unpack_reply+0x88>
			}		
			joint_r_data[id - 1] = byte_8_reply.udata;
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	1e59      	subs	r1, r3, #1
 800742a:	4bb9      	ldr	r3, [pc, #740]	; (8007710 <unpack_reply+0x390>)
 800742c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007430:	48b8      	ldr	r0, [pc, #736]	; (8007714 <unpack_reply+0x394>)
 8007432:	00c9      	lsls	r1, r1, #3
 8007434:	4401      	add	r1, r0
 8007436:	e9c1 2300 	strd	r2, r3, [r1]
			reply_hs[id - 1] = hs_;
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	1e59      	subs	r1, r3, #1
 800743e:	4bb6      	ldr	r3, [pc, #728]	; (8007718 <unpack_reply+0x398>)
 8007440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007444:	48b5      	ldr	r0, [pc, #724]	; (800771c <unpack_reply+0x39c>)
 8007446:	00c9      	lsls	r1, r1, #3
 8007448:	4401      	add	r1, r0
 800744a:	e9c1 2300 	strd	r2, r3, [r1]

			if (id == 1)
 800744e:	69fb      	ldr	r3, [r7, #28]
 8007450:	2b01      	cmp	r3, #1
 8007452:	f040 81bb 	bne.w	80077cc <unpack_reply+0x44c>
			{
				if (data[0]==0xAE)
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2bae      	cmp	r3, #174	; 0xae
 800745c:	d128      	bne.n	80074b0 <unpack_reply+0x130>
				{
				motor_decode_pvt(data, &pos1, &vel1, &tor1);
 800745e:	4bb0      	ldr	r3, [pc, #704]	; (8007720 <unpack_reply+0x3a0>)
 8007460:	4ab0      	ldr	r2, [pc, #704]	; (8007724 <unpack_reply+0x3a4>)
 8007462:	49b1      	ldr	r1, [pc, #708]	; (8007728 <unpack_reply+0x3a8>)
 8007464:	6838      	ldr	r0, [r7, #0]
 8007466:	f7ff fca7 	bl	8006db8 <motor_decode_pvt>

				MF_1.out_Pos_Old=MF_1.out_Pos;
 800746a:	4bb0      	ldr	r3, [pc, #704]	; (800772c <unpack_reply+0x3ac>)
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	4aaf      	ldr	r2, [pc, #700]	; (800772c <unpack_reply+0x3ac>)
 8007470:	61d3      	str	r3, [r2, #28]
				MF_1.out_Pos=pos1;
 8007472:	4bad      	ldr	r3, [pc, #692]	; (8007728 <unpack_reply+0x3a8>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4aad      	ldr	r2, [pc, #692]	; (800772c <unpack_reply+0x3ac>)
 8007478:	6193      	str	r3, [r2, #24]
				MF_1.out_Vel=vel1;
 800747a:	4baa      	ldr	r3, [pc, #680]	; (8007724 <unpack_reply+0x3a4>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4aab      	ldr	r2, [pc, #684]	; (800772c <unpack_reply+0x3ac>)
 8007480:	6213      	str	r3, [r2, #32]
				MF_1.tor=tor1;
 8007482:	4ba7      	ldr	r3, [pc, #668]	; (8007720 <unpack_reply+0x3a0>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4aa9      	ldr	r2, [pc, #676]	; (800772c <unpack_reply+0x3ac>)
 8007488:	6113      	str	r3, [r2, #16]
				vel_cal= (MF_1.out_Pos-MF_1.out_Pos_Old)/0.001;
 800748a:	4ba8      	ldr	r3, [pc, #672]	; (800772c <unpack_reply+0x3ac>)
 800748c:	ed93 7a06 	vldr	s14, [r3, #24]
 8007490:	4ba6      	ldr	r3, [pc, #664]	; (800772c <unpack_reply+0x3ac>)
 8007492:	edd3 7a07 	vldr	s15, [r3, #28]
 8007496:	ee77 7a67 	vsub.f32	s15, s14, s15
 800749a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800749e:	ed9f 5b98 	vldr	d5, [pc, #608]	; 8007700 <unpack_reply+0x380>
 80074a2:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80074a6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80074aa:	4ba1      	ldr	r3, [pc, #644]	; (8007730 <unpack_reply+0x3b0>)
 80074ac:	edc3 7a00 	vstr	s15, [r3]
				}

				if (data[0]==0x94)
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b94      	cmp	r3, #148	; 0x94
 80074b6:	d10e      	bne.n	80074d6 <unpack_reply+0x156>
				{

					float_t pos_tmp;
					motor_decode_sglPos(data, &pos_tmp);
 80074b8:	f107 0318 	add.w	r3, r7, #24
 80074bc:	4619      	mov	r1, r3
 80074be:	6838      	ldr	r0, [r7, #0]
 80074c0:	f7ff fce2 	bl	8006e88 <motor_decode_sglPos>
					MF_1.out_Pos=pos_tmp/10;
 80074c4:	ed97 7a06 	vldr	s14, [r7, #24]
 80074c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80074cc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80074d0:	4b96      	ldr	r3, [pc, #600]	; (800772c <unpack_reply+0x3ac>)
 80074d2:	edc3 7a06 	vstr	s15, [r3, #24]

				}
				if (data[0]==0x92)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	2b92      	cmp	r3, #146	; 0x92
 80074dc:	d13a      	bne.n	8007554 <unpack_reply+0x1d4>
				{
					float_t pos_tmp;
					motor_decode_mulPos(data, &pos_tmp);
 80074de:	f107 0314 	add.w	r3, r7, #20
 80074e2:	4619      	mov	r1, r3
 80074e4:	6838      	ldr	r0, [r7, #0]
 80074e6:	f7ff fd03 	bl	8006ef0 <motor_decode_mulPos>
					//pos_tmp=pos_tmp-floor(pos_tmp/360)*360; // round to 0-360
					MF_1.mul_pos=pos_tmp;
 80074ea:	697b      	ldr	r3, [r7, #20]
 80074ec:	4a8f      	ldr	r2, [pc, #572]	; (800772c <unpack_reply+0x3ac>)
 80074ee:	6053      	str	r3, [r2, #4]
					if (MF_1.sgl_pos_old!=0 && MF_1.sgl_pos!=0 && MF_1.iniReady==0)
 80074f0:	4b8e      	ldr	r3, [pc, #568]	; (800772c <unpack_reply+0x3ac>)
 80074f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80074f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80074fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074fe:	d01f      	beq.n	8007540 <unpack_reply+0x1c0>
 8007500:	4b8a      	ldr	r3, [pc, #552]	; (800772c <unpack_reply+0x3ac>)
 8007502:	edd3 7a00 	vldr	s15, [r3]
 8007506:	eef5 7a40 	vcmp.f32	s15, #0.0
 800750a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800750e:	d017      	beq.n	8007540 <unpack_reply+0x1c0>
 8007510:	4b86      	ldr	r3, [pc, #536]	; (800772c <unpack_reply+0x3ac>)
 8007512:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8007516:	2b00      	cmp	r3, #0
 8007518:	d112      	bne.n	8007540 <unpack_reply+0x1c0>
					{
						MF_1.pos_off=MF_1.mul_pos-MF_1.sgl_pos;
 800751a:	4b84      	ldr	r3, [pc, #528]	; (800772c <unpack_reply+0x3ac>)
 800751c:	ed93 7a01 	vldr	s14, [r3, #4]
 8007520:	4b82      	ldr	r3, [pc, #520]	; (800772c <unpack_reply+0x3ac>)
 8007522:	edd3 7a00 	vldr	s15, [r3]
 8007526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800752a:	4b80      	ldr	r3, [pc, #512]	; (800772c <unpack_reply+0x3ac>)
 800752c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
						MF_1.loopNum=0;
 8007530:	4b7e      	ldr	r3, [pc, #504]	; (800772c <unpack_reply+0x3ac>)
 8007532:	f04f 0200 	mov.w	r2, #0
 8007536:	609a      	str	r2, [r3, #8]
						MF_1.iniReady=1;
 8007538:	4b7c      	ldr	r3, [pc, #496]	; (800772c <unpack_reply+0x3ac>)
 800753a:	2201      	movs	r2, #1
 800753c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
					}

					mul_pos=MF_1.mul_pos/10.0;
 8007540:	4b7a      	ldr	r3, [pc, #488]	; (800772c <unpack_reply+0x3ac>)
 8007542:	ed93 7a01 	vldr	s14, [r3, #4]
 8007546:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800754a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800754e:	4b79      	ldr	r3, [pc, #484]	; (8007734 <unpack_reply+0x3b4>)
 8007550:	edc3 7a00 	vstr	s15, [r3]

				}
				if (data[0]==0xa1)
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2ba1      	cmp	r3, #161	; 0xa1
 800755a:	f040 8137 	bne.w	80077cc <unpack_reply+0x44c>
				{
					float_t pos_tmp, vel_tmp, tor_tmp;
					motor_decode_cur(data, &pos_tmp, &vel_tmp, &tor_tmp);
 800755e:	f107 0308 	add.w	r3, r7, #8
 8007562:	f107 020c 	add.w	r2, r7, #12
 8007566:	f107 0110 	add.w	r1, r7, #16
 800756a:	6838      	ldr	r0, [r7, #0]
 800756c:	f7ff fd04 	bl	8006f78 <motor_decode_cur>
					MF_1.sgl_pos_old=MF_1.sgl_pos;
 8007570:	4b6e      	ldr	r3, [pc, #440]	; (800772c <unpack_reply+0x3ac>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4a6d      	ldr	r2, [pc, #436]	; (800772c <unpack_reply+0x3ac>)
 8007576:	6153      	str	r3, [r2, #20]
					MF_1.sgl_pos=pos_tmp;
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	4a6c      	ldr	r2, [pc, #432]	; (800772c <unpack_reply+0x3ac>)
 800757c:	6013      	str	r3, [r2, #0]
					MF_1.vel=vel_tmp;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	4a6a      	ldr	r2, [pc, #424]	; (800772c <unpack_reply+0x3ac>)
 8007582:	60d3      	str	r3, [r2, #12]
					MF_1.tor=tor_tmp;
 8007584:	68bb      	ldr	r3, [r7, #8]
 8007586:	4a69      	ldr	r2, [pc, #420]	; (800772c <unpack_reply+0x3ac>)
 8007588:	6113      	str	r3, [r2, #16]
					MF_1.out_Vel=vel_tmp/10;
 800758a:	ed97 7a03 	vldr	s14, [r7, #12]
 800758e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8007592:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007596:	4b65      	ldr	r3, [pc, #404]	; (800772c <unpack_reply+0x3ac>)
 8007598:	edc3 7a08 	vstr	s15, [r3, #32]

					if (MF_1.iniReady>0)
 800759c:	4b63      	ldr	r3, [pc, #396]	; (800772c <unpack_reply+0x3ac>)
 800759e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d065      	beq.n	8007672 <unpack_reply+0x2f2>
					{
						if (MF_1.sgl_pos-MF_1.sgl_pos_old<-300)
 80075a6:	4b61      	ldr	r3, [pc, #388]	; (800772c <unpack_reply+0x3ac>)
 80075a8:	ed93 7a00 	vldr	s14, [r3]
 80075ac:	4b5f      	ldr	r3, [pc, #380]	; (800772c <unpack_reply+0x3ac>)
 80075ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80075b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075b6:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8007738 <unpack_reply+0x3b8>
 80075ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c2:	d509      	bpl.n	80075d8 <unpack_reply+0x258>
							MF_1.loopNum++;
 80075c4:	4b59      	ldr	r3, [pc, #356]	; (800772c <unpack_reply+0x3ac>)
 80075c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80075ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80075d2:	4b56      	ldr	r3, [pc, #344]	; (800772c <unpack_reply+0x3ac>)
 80075d4:	edc3 7a02 	vstr	s15, [r3, #8]
						if (MF_1.sgl_pos-MF_1.sgl_pos_old>300)
 80075d8:	4b54      	ldr	r3, [pc, #336]	; (800772c <unpack_reply+0x3ac>)
 80075da:	ed93 7a00 	vldr	s14, [r3]
 80075de:	4b53      	ldr	r3, [pc, #332]	; (800772c <unpack_reply+0x3ac>)
 80075e0:	edd3 7a05 	vldr	s15, [r3, #20]
 80075e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075e8:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800773c <unpack_reply+0x3bc>
 80075ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80075f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f4:	dd09      	ble.n	800760a <unpack_reply+0x28a>
							MF_1.loopNum--;
 80075f6:	4b4d      	ldr	r3, [pc, #308]	; (800772c <unpack_reply+0x3ac>)
 80075f8:	edd3 7a02 	vldr	s15, [r3, #8]
 80075fc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007600:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007604:	4b49      	ldr	r3, [pc, #292]	; (800772c <unpack_reply+0x3ac>)
 8007606:	edc3 7a02 	vstr	s15, [r3, #8]

						pos_tmp=(MF_1.sgl_pos+MF_1.pos_off+MF_1.loopNum*360.)/MF_1.ratio;
 800760a:	4b48      	ldr	r3, [pc, #288]	; (800772c <unpack_reply+0x3ac>)
 800760c:	ed93 7a00 	vldr	s14, [r3]
 8007610:	4b46      	ldr	r3, [pc, #280]	; (800772c <unpack_reply+0x3ac>)
 8007612:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8007616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800761a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800761e:	4b43      	ldr	r3, [pc, #268]	; (800772c <unpack_reply+0x3ac>)
 8007620:	edd3 7a02 	vldr	s15, [r3, #8]
 8007624:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8007628:	ed9f 5b37 	vldr	d5, [pc, #220]	; 8007708 <unpack_reply+0x388>
 800762c:	ee27 7b05 	vmul.f64	d7, d7, d5
 8007630:	ee36 5b07 	vadd.f64	d5, d6, d7
 8007634:	4b3d      	ldr	r3, [pc, #244]	; (800772c <unpack_reply+0x3ac>)
 8007636:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800763a:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800763e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8007642:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007646:	edc7 7a04 	vstr	s15, [r7, #16]
						if (pos_tmp>180)
 800764a:	edd7 7a04 	vldr	s15, [r7, #16]
 800764e:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8007740 <unpack_reply+0x3c0>
 8007652:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007656:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800765a:	dd07      	ble.n	800766c <unpack_reply+0x2ec>
							pos_tmp-=360;
 800765c:	edd7 7a04 	vldr	s15, [r7, #16]
 8007660:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8007744 <unpack_reply+0x3c4>
 8007664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007668:	edc7 7a04 	vstr	s15, [r7, #16]

						MF_1.out_Pos=pos_tmp;
 800766c:	693b      	ldr	r3, [r7, #16]
 800766e:	4a2f      	ldr	r2, [pc, #188]	; (800772c <unpack_reply+0x3ac>)
 8007670:	6193      	str	r3, [r2, #24]
					}

					if (TD_iniCount==0)
 8007672:	4b35      	ldr	r3, [pc, #212]	; (8007748 <unpack_reply+0x3c8>)
 8007674:	edd3 7a00 	vldr	s15, [r3]
 8007678:	eef5 7a40 	vcmp.f32	s15, #0.0
 800767c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007680:	d17a      	bne.n	8007778 <unpack_reply+0x3f8>
					{
						TD_x1=TD_x1_old+TD_h*TD_x2_old;
 8007682:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800774c <unpack_reply+0x3cc>
 8007686:	4b32      	ldr	r3, [pc, #200]	; (8007750 <unpack_reply+0x3d0>)
 8007688:	edd3 7a00 	vldr	s15, [r3]
 800768c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8007690:	4b30      	ldr	r3, [pc, #192]	; (8007754 <unpack_reply+0x3d4>)
 8007692:	edd3 7a00 	vldr	s15, [r3]
 8007696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800769a:	4b2f      	ldr	r3, [pc, #188]	; (8007758 <unpack_reply+0x3d8>)
 800769c:	edc3 7a00 	vstr	s15, [r3]
						TD_x2=TD_x2_old-TD_h*(TD_r*TD_r*TD_x1_old+2*TD_r*TD_x2_old-TD_r*TD_r*MF_1.out_Pos);
 80076a0:	4b2b      	ldr	r3, [pc, #172]	; (8007750 <unpack_reply+0x3d0>)
 80076a2:	ed93 7a00 	vldr	s14, [r3]
 80076a6:	eddf 6a2d 	vldr	s13, [pc, #180]	; 800775c <unpack_reply+0x3dc>
 80076aa:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800775c <unpack_reply+0x3dc>
 80076ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80076b2:	4b28      	ldr	r3, [pc, #160]	; (8007754 <unpack_reply+0x3d4>)
 80076b4:	edd3 7a00 	vldr	s15, [r3]
 80076b8:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80076bc:	eddf 7a27 	vldr	s15, [pc, #156]	; 800775c <unpack_reply+0x3dc>
 80076c0:	ee37 6aa7 	vadd.f32	s12, s15, s15
 80076c4:	4b22      	ldr	r3, [pc, #136]	; (8007750 <unpack_reply+0x3d0>)
 80076c6:	edd3 7a00 	vldr	s15, [r3]
 80076ca:	ee66 7a27 	vmul.f32	s15, s12, s15
 80076ce:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80076d2:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800775c <unpack_reply+0x3dc>
 80076d6:	eddf 7a21 	vldr	s15, [pc, #132]	; 800775c <unpack_reply+0x3dc>
 80076da:	ee26 6a27 	vmul.f32	s12, s12, s15
 80076de:	4b13      	ldr	r3, [pc, #76]	; (800772c <unpack_reply+0x3ac>)
 80076e0:	edd3 7a06 	vldr	s15, [r3, #24]
 80076e4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80076e8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80076ec:	eddf 6a17 	vldr	s13, [pc, #92]	; 800774c <unpack_reply+0x3cc>
 80076f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80076f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076f8:	e032      	b.n	8007760 <unpack_reply+0x3e0>
 80076fa:	bf00      	nop
 80076fc:	f3af 8000 	nop.w
 8007700:	d2f1a9fc 	.word	0xd2f1a9fc
 8007704:	3f50624d 	.word	0x3f50624d
 8007708:	00000000 	.word	0x00000000
 800770c:	40768000 	.word	0x40768000
 8007710:	240000a0 	.word	0x240000a0
 8007714:	240005f0 	.word	0x240005f0
 8007718:	24000670 	.word	0x24000670
 800771c:	240006f0 	.word	0x240006f0
 8007720:	240006b8 	.word	0x240006b8
 8007724:	240006b4 	.word	0x240006b4
 8007728:	240006b0 	.word	0x240006b0
 800772c:	24000008 	.word	0x24000008
 8007730:	24000740 	.word	0x24000740
 8007734:	24000730 	.word	0x24000730
 8007738:	c3960000 	.word	0xc3960000
 800773c:	43960000 	.word	0x43960000
 8007740:	43340000 	.word	0x43340000
 8007744:	43b40000 	.word	0x43b40000
 8007748:	24000070 	.word	0x24000070
 800774c:	3a83126f 	.word	0x3a83126f
 8007750:	24000728 	.word	0x24000728
 8007754:	24000720 	.word	0x24000720
 8007758:	24000724 	.word	0x24000724
 800775c:	442f0000 	.word	0x442f0000
 8007760:	4b5f      	ldr	r3, [pc, #380]	; (80078e0 <unpack_reply+0x560>)
 8007762:	edc3 7a00 	vstr	s15, [r3]
						TD_x1_old=TD_x1;
 8007766:	4b5f      	ldr	r3, [pc, #380]	; (80078e4 <unpack_reply+0x564>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a5f      	ldr	r2, [pc, #380]	; (80078e8 <unpack_reply+0x568>)
 800776c:	6013      	str	r3, [r2, #0]
						TD_x2_old=TD_x2;
 800776e:	4b5c      	ldr	r3, [pc, #368]	; (80078e0 <unpack_reply+0x560>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a5e      	ldr	r2, [pc, #376]	; (80078ec <unpack_reply+0x56c>)
 8007774:	6013      	str	r3, [r2, #0]
 8007776:	e019      	b.n	80077ac <unpack_reply+0x42c>
					}
					else
					{
						TD_iniCount--;
 8007778:	4b5d      	ldr	r3, [pc, #372]	; (80078f0 <unpack_reply+0x570>)
 800777a:	edd3 7a00 	vldr	s15, [r3]
 800777e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007782:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007786:	4b5a      	ldr	r3, [pc, #360]	; (80078f0 <unpack_reply+0x570>)
 8007788:	edc3 7a00 	vstr	s15, [r3]
						TD_x1_old=MF_1.out_Pos;
 800778c:	4b59      	ldr	r3, [pc, #356]	; (80078f4 <unpack_reply+0x574>)
 800778e:	699b      	ldr	r3, [r3, #24]
 8007790:	4a55      	ldr	r2, [pc, #340]	; (80078e8 <unpack_reply+0x568>)
 8007792:	6013      	str	r3, [r2, #0]
						TD_x2_old=MF_1.out_Vel;
 8007794:	4b57      	ldr	r3, [pc, #348]	; (80078f4 <unpack_reply+0x574>)
 8007796:	6a1b      	ldr	r3, [r3, #32]
 8007798:	4a54      	ldr	r2, [pc, #336]	; (80078ec <unpack_reply+0x56c>)
 800779a:	6013      	str	r3, [r2, #0]
						TD_x1=MF_1.out_Pos;
 800779c:	4b55      	ldr	r3, [pc, #340]	; (80078f4 <unpack_reply+0x574>)
 800779e:	699b      	ldr	r3, [r3, #24]
 80077a0:	4a50      	ldr	r2, [pc, #320]	; (80078e4 <unpack_reply+0x564>)
 80077a2:	6013      	str	r3, [r2, #0]
						TD_x2=MF_1.out_Vel;
 80077a4:	4b53      	ldr	r3, [pc, #332]	; (80078f4 <unpack_reply+0x574>)
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	4a4d      	ldr	r2, [pc, #308]	; (80078e0 <unpack_reply+0x560>)
 80077aa:	6013      	str	r3, [r2, #0]
					}

					MF_1.out_Vel_fil=TD_x2;
 80077ac:	4b4c      	ldr	r3, [pc, #304]	; (80078e0 <unpack_reply+0x560>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a50      	ldr	r2, [pc, #320]	; (80078f4 <unpack_reply+0x574>)
 80077b2:	6253      	str	r3, [r2, #36]	; 0x24

					tor_pos=MF_1.out_Pos;
 80077b4:	4b4f      	ldr	r3, [pc, #316]	; (80078f4 <unpack_reply+0x574>)
 80077b6:	699b      	ldr	r3, [r3, #24]
 80077b8:	4a4f      	ldr	r2, [pc, #316]	; (80078f8 <unpack_reply+0x578>)
 80077ba:	6013      	str	r3, [r2, #0]
					vel_cur=MF_1.out_Vel;
 80077bc:	4b4d      	ldr	r3, [pc, #308]	; (80078f4 <unpack_reply+0x574>)
 80077be:	6a1b      	ldr	r3, [r3, #32]
 80077c0:	4a4e      	ldr	r2, [pc, #312]	; (80078fc <unpack_reply+0x57c>)
 80077c2:	6013      	str	r3, [r2, #0]
					vel_cur_fil=MF_1.out_Vel_fil;
 80077c4:	4b4b      	ldr	r3, [pc, #300]	; (80078f4 <unpack_reply+0x574>)
 80077c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077c8:	4a4d      	ldr	r2, [pc, #308]	; (8007900 <unpack_reply+0x580>)
 80077ca:	6013      	str	r3, [r2, #0]
				}

			}			
			if (id == 2)
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	2b02      	cmp	r3, #2
 80077d0:	d105      	bne.n	80077de <unpack_reply+0x45e>
			{
				motor_decode_pvt(data, &pos2, &vel2, &tor2);
 80077d2:	4b4c      	ldr	r3, [pc, #304]	; (8007904 <unpack_reply+0x584>)
 80077d4:	4a4c      	ldr	r2, [pc, #304]	; (8007908 <unpack_reply+0x588>)
 80077d6:	494d      	ldr	r1, [pc, #308]	; (800790c <unpack_reply+0x58c>)
 80077d8:	6838      	ldr	r0, [r7, #0]
 80077da:	f7ff faed 	bl	8006db8 <motor_decode_pvt>
			}
			if (id == 3)
 80077de:	69fb      	ldr	r3, [r7, #28]
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d105      	bne.n	80077f0 <unpack_reply+0x470>
			{
				motor_decode_pvt(data, &pos3, &vel3, &tor3);
 80077e4:	4b4a      	ldr	r3, [pc, #296]	; (8007910 <unpack_reply+0x590>)
 80077e6:	4a4b      	ldr	r2, [pc, #300]	; (8007914 <unpack_reply+0x594>)
 80077e8:	494b      	ldr	r1, [pc, #300]	; (8007918 <unpack_reply+0x598>)
 80077ea:	6838      	ldr	r0, [r7, #0]
 80077ec:	f7ff fae4 	bl	8006db8 <motor_decode_pvt>
			}			
			
			if (id == 4)
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	2b04      	cmp	r3, #4
 80077f4:	d105      	bne.n	8007802 <unpack_reply+0x482>
			{
				motor_decode_pvt(data, &pos4, &vel4, &tor4);
 80077f6:	4b49      	ldr	r3, [pc, #292]	; (800791c <unpack_reply+0x59c>)
 80077f8:	4a49      	ldr	r2, [pc, #292]	; (8007920 <unpack_reply+0x5a0>)
 80077fa:	494a      	ldr	r1, [pc, #296]	; (8007924 <unpack_reply+0x5a4>)
 80077fc:	6838      	ldr	r0, [r7, #0]
 80077fe:	f7ff fadb 	bl	8006db8 <motor_decode_pvt>
			}
			if (id == 5)
 8007802:	69fb      	ldr	r3, [r7, #28]
 8007804:	2b05      	cmp	r3, #5
 8007806:	d158      	bne.n	80078ba <unpack_reply+0x53a>
			{
				byte_2u_reply.buffer[0] = data[0];
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	781a      	ldrb	r2, [r3, #0]
 800780c:	4b46      	ldr	r3, [pc, #280]	; (8007928 <unpack_reply+0x5a8>)
 800780e:	701a      	strb	r2, [r3, #0]
				byte_2u_reply.buffer[1] = data[1];
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	785a      	ldrb	r2, [r3, #1]
 8007814:	4b44      	ldr	r3, [pc, #272]	; (8007928 <unpack_reply+0x5a8>)
 8007816:	705a      	strb	r2, [r3, #1]
				pos_p1 = (double_t)byte_2u_reply.udata / 65536 * 360.0;
 8007818:	4b43      	ldr	r3, [pc, #268]	; (8007928 <unpack_reply+0x5a8>)
 800781a:	881b      	ldrh	r3, [r3, #0]
 800781c:	ee07 3a90 	vmov	s15, r3
 8007820:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8007824:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80078c8 <unpack_reply+0x548>
 8007828:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800782c:	ed9f 6b28 	vldr	d6, [pc, #160]	; 80078d0 <unpack_reply+0x550>
 8007830:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007834:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8007838:	4b3c      	ldr	r3, [pc, #240]	; (800792c <unpack_reply+0x5ac>)
 800783a:	edc3 7a00 	vstr	s15, [r3]
				byte_2u_reply.buffer[0] = data[2];
 800783e:	683b      	ldr	r3, [r7, #0]
 8007840:	789a      	ldrb	r2, [r3, #2]
 8007842:	4b39      	ldr	r3, [pc, #228]	; (8007928 <unpack_reply+0x5a8>)
 8007844:	701a      	strb	r2, [r3, #0]
				byte_2u_reply.buffer[1] = data[3];
 8007846:	683b      	ldr	r3, [r7, #0]
 8007848:	78da      	ldrb	r2, [r3, #3]
 800784a:	4b37      	ldr	r3, [pc, #220]	; (8007928 <unpack_reply+0x5a8>)
 800784c:	705a      	strb	r2, [r3, #1]
				pos_p2 = (double_t)byte_2u_reply.udata / 65536 * 360.0;
 800784e:	4b36      	ldr	r3, [pc, #216]	; (8007928 <unpack_reply+0x5a8>)
 8007850:	881b      	ldrh	r3, [r3, #0]
 8007852:	ee07 3a90 	vmov	s15, r3
 8007856:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800785a:	ed9f 5b1b 	vldr	d5, [pc, #108]	; 80078c8 <unpack_reply+0x548>
 800785e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8007862:	ed9f 6b1b 	vldr	d6, [pc, #108]	; 80078d0 <unpack_reply+0x550>
 8007866:	ee27 7b06 	vmul.f64	d7, d7, d6
 800786a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800786e:	4b30      	ldr	r3, [pc, #192]	; (8007930 <unpack_reply+0x5b0>)
 8007870:	edc3 7a00 	vstr	s15, [r3]
				byte_4_reply.buffer[0] = data[4];
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	791a      	ldrb	r2, [r3, #4]
 8007878:	4b2e      	ldr	r3, [pc, #184]	; (8007934 <unpack_reply+0x5b4>)
 800787a:	701a      	strb	r2, [r3, #0]
				byte_4_reply.buffer[1] = data[5];
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	795a      	ldrb	r2, [r3, #5]
 8007880:	4b2c      	ldr	r3, [pc, #176]	; (8007934 <unpack_reply+0x5b4>)
 8007882:	705a      	strb	r2, [r3, #1]
				byte_4_reply.buffer[2] = data[6];
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	799a      	ldrb	r2, [r3, #6]
 8007888:	4b2a      	ldr	r3, [pc, #168]	; (8007934 <unpack_reply+0x5b4>)
 800788a:	709a      	strb	r2, [r3, #2]
				byte_4_reply.buffer[3] = data[7];
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	79da      	ldrb	r2, [r3, #7]
 8007890:	4b28      	ldr	r3, [pc, #160]	; (8007934 <unpack_reply+0x5b4>)
 8007892:	70da      	strb	r2, [r3, #3]
				pos_s = (double_t)byte_4_reply.udata / 4096 * 360.0;				
 8007894:	4b27      	ldr	r3, [pc, #156]	; (8007934 <unpack_reply+0x5b4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	ee07 3a90 	vmov	s15, r3
 800789c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80078a0:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 80078d8 <unpack_reply+0x558>
 80078a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80078a8:	ed9f 6b09 	vldr	d6, [pc, #36]	; 80078d0 <unpack_reply+0x550>
 80078ac:	ee27 7b06 	vmul.f64	d7, d7, d6
 80078b0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80078b4:	4b20      	ldr	r3, [pc, #128]	; (8007938 <unpack_reply+0x5b8>)
 80078b6:	edc3 7a00 	vstr	s15, [r3]
			}		
		}
	}	
}
 80078ba:	bf00      	nop
 80078bc:	3728      	adds	r7, #40	; 0x28
 80078be:	46bd      	mov	sp, r7
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	f3af 8000 	nop.w
 80078c8:	00000000 	.word	0x00000000
 80078cc:	40f00000 	.word	0x40f00000
 80078d0:	00000000 	.word	0x00000000
 80078d4:	40768000 	.word	0x40768000
 80078d8:	00000000 	.word	0x00000000
 80078dc:	40b00000 	.word	0x40b00000
 80078e0:	2400072c 	.word	0x2400072c
 80078e4:	24000724 	.word	0x24000724
 80078e8:	24000720 	.word	0x24000720
 80078ec:	24000728 	.word	0x24000728
 80078f0:	24000070 	.word	0x24000070
 80078f4:	24000008 	.word	0x24000008
 80078f8:	24000734 	.word	0x24000734
 80078fc:	24000738 	.word	0x24000738
 8007900:	2400073c 	.word	0x2400073c
 8007904:	240006c4 	.word	0x240006c4
 8007908:	240006c0 	.word	0x240006c0
 800790c:	240006bc 	.word	0x240006bc
 8007910:	240006d0 	.word	0x240006d0
 8007914:	240006cc 	.word	0x240006cc
 8007918:	240006c8 	.word	0x240006c8
 800791c:	240006dc 	.word	0x240006dc
 8007920:	240006d8 	.word	0x240006d8
 8007924:	240006d4 	.word	0x240006d4
 8007928:	240000ac 	.word	0x240000ac
 800792c:	240006e4 	.word	0x240006e4
 8007930:	240006e8 	.word	0x240006e8
 8007934:	240000b0 	.word	0x240000b0
 8007938:	240006e0 	.word	0x240006e0

0800793c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8007940:	f000 fd64 	bl	800840c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007944:	f7f9 f914 	bl	8000b70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007948:	f000 f918 	bl	8007b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800794c:	f000 fc1c 	bl	8008188 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8007950:	f000 f9c2 	bl	8007cd8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8007954:	f000 fa24 	bl	8007da0 <MX_FDCAN2_Init>
  MX_SPI1_Init();
 8007958:	f000 fa88 	bl	8007e6c <MX_SPI1_Init>
  MX_TIM2_Init();
 800795c:	f000 fade 	bl	8007f1c <MX_TIM2_Init>
  MX_TIM4_Init();
 8007960:	f000 fb2a 	bl	8007fb8 <MX_TIM4_Init>
  MX_TIM5_Init();
 8007964:	f000 fb76 	bl	8008054 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8007968:	f000 fbc2 	bl	80080f0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
	
	//1. init tx msg
	joint_1.Identifier = 0x1;
 800796c:	4b71      	ldr	r3, [pc, #452]	; (8007b34 <main+0x1f8>)
 800796e:	2201      	movs	r2, #1
 8007970:	601a      	str	r2, [r3, #0]
	joint_1.IdType = FDCAN_STANDARD_ID;
 8007972:	4b70      	ldr	r3, [pc, #448]	; (8007b34 <main+0x1f8>)
 8007974:	2200      	movs	r2, #0
 8007976:	605a      	str	r2, [r3, #4]
	joint_1.TxFrameType = FDCAN_DATA_FRAME;
 8007978:	4b6e      	ldr	r3, [pc, #440]	; (8007b34 <main+0x1f8>)
 800797a:	2200      	movs	r2, #0
 800797c:	609a      	str	r2, [r3, #8]
	joint_1.DataLength = FDCAN_DLC_BYTES_8;
 800797e:	4b6d      	ldr	r3, [pc, #436]	; (8007b34 <main+0x1f8>)
 8007980:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007984:	60da      	str	r2, [r3, #12]
	joint_1.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007986:	4b6b      	ldr	r3, [pc, #428]	; (8007b34 <main+0x1f8>)
 8007988:	2200      	movs	r2, #0
 800798a:	611a      	str	r2, [r3, #16]
	joint_1.BitRateSwitch = FDCAN_BRS_OFF;
 800798c:	4b69      	ldr	r3, [pc, #420]	; (8007b34 <main+0x1f8>)
 800798e:	2200      	movs	r2, #0
 8007990:	615a      	str	r2, [r3, #20]
	joint_1.FDFormat = FDCAN_CLASSIC_CAN;
 8007992:	4b68      	ldr	r3, [pc, #416]	; (8007b34 <main+0x1f8>)
 8007994:	2200      	movs	r2, #0
 8007996:	619a      	str	r2, [r3, #24]
	joint_1.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007998:	4b66      	ldr	r3, [pc, #408]	; (8007b34 <main+0x1f8>)
 800799a:	2200      	movs	r2, #0
 800799c:	61da      	str	r2, [r3, #28]
	joint_1.MessageMarker = 0;
 800799e:	4b65      	ldr	r3, [pc, #404]	; (8007b34 <main+0x1f8>)
 80079a0:	2200      	movs	r2, #0
 80079a2:	621a      	str	r2, [r3, #32]
	
	joint_2.Identifier = 0x2;
 80079a4:	4b64      	ldr	r3, [pc, #400]	; (8007b38 <main+0x1fc>)
 80079a6:	2202      	movs	r2, #2
 80079a8:	601a      	str	r2, [r3, #0]
	joint_2.IdType = FDCAN_STANDARD_ID;
 80079aa:	4b63      	ldr	r3, [pc, #396]	; (8007b38 <main+0x1fc>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	605a      	str	r2, [r3, #4]
	joint_2.TxFrameType = FDCAN_DATA_FRAME;
 80079b0:	4b61      	ldr	r3, [pc, #388]	; (8007b38 <main+0x1fc>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	609a      	str	r2, [r3, #8]
	joint_2.DataLength = FDCAN_DLC_BYTES_8;
 80079b6:	4b60      	ldr	r3, [pc, #384]	; (8007b38 <main+0x1fc>)
 80079b8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80079bc:	60da      	str	r2, [r3, #12]
	joint_2.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80079be:	4b5e      	ldr	r3, [pc, #376]	; (8007b38 <main+0x1fc>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	611a      	str	r2, [r3, #16]
	joint_2.BitRateSwitch = FDCAN_BRS_OFF;
 80079c4:	4b5c      	ldr	r3, [pc, #368]	; (8007b38 <main+0x1fc>)
 80079c6:	2200      	movs	r2, #0
 80079c8:	615a      	str	r2, [r3, #20]
	joint_2.FDFormat = FDCAN_CLASSIC_CAN;
 80079ca:	4b5b      	ldr	r3, [pc, #364]	; (8007b38 <main+0x1fc>)
 80079cc:	2200      	movs	r2, #0
 80079ce:	619a      	str	r2, [r3, #24]
	joint_2.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80079d0:	4b59      	ldr	r3, [pc, #356]	; (8007b38 <main+0x1fc>)
 80079d2:	2200      	movs	r2, #0
 80079d4:	61da      	str	r2, [r3, #28]
	joint_2.MessageMarker = 0;
 80079d6:	4b58      	ldr	r3, [pc, #352]	; (8007b38 <main+0x1fc>)
 80079d8:	2200      	movs	r2, #0
 80079da:	621a      	str	r2, [r3, #32]
	
	joint_3.Identifier = 0x3;
 80079dc:	4b57      	ldr	r3, [pc, #348]	; (8007b3c <main+0x200>)
 80079de:	2203      	movs	r2, #3
 80079e0:	601a      	str	r2, [r3, #0]
	joint_3.IdType = FDCAN_STANDARD_ID;
 80079e2:	4b56      	ldr	r3, [pc, #344]	; (8007b3c <main+0x200>)
 80079e4:	2200      	movs	r2, #0
 80079e6:	605a      	str	r2, [r3, #4]
	joint_3.TxFrameType = FDCAN_DATA_FRAME;
 80079e8:	4b54      	ldr	r3, [pc, #336]	; (8007b3c <main+0x200>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	609a      	str	r2, [r3, #8]
	joint_3.DataLength = FDCAN_DLC_BYTES_8;
 80079ee:	4b53      	ldr	r3, [pc, #332]	; (8007b3c <main+0x200>)
 80079f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80079f4:	60da      	str	r2, [r3, #12]
	joint_3.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80079f6:	4b51      	ldr	r3, [pc, #324]	; (8007b3c <main+0x200>)
 80079f8:	2200      	movs	r2, #0
 80079fa:	611a      	str	r2, [r3, #16]
	joint_3.BitRateSwitch = FDCAN_BRS_OFF;
 80079fc:	4b4f      	ldr	r3, [pc, #316]	; (8007b3c <main+0x200>)
 80079fe:	2200      	movs	r2, #0
 8007a00:	615a      	str	r2, [r3, #20]
	joint_3.FDFormat = FDCAN_CLASSIC_CAN;
 8007a02:	4b4e      	ldr	r3, [pc, #312]	; (8007b3c <main+0x200>)
 8007a04:	2200      	movs	r2, #0
 8007a06:	619a      	str	r2, [r3, #24]
	joint_3.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007a08:	4b4c      	ldr	r3, [pc, #304]	; (8007b3c <main+0x200>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	61da      	str	r2, [r3, #28]
	joint_3.MessageMarker = 0;
 8007a0e:	4b4b      	ldr	r3, [pc, #300]	; (8007b3c <main+0x200>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	621a      	str	r2, [r3, #32]
	
	joint_4.Identifier = 0x4;
 8007a14:	4b4a      	ldr	r3, [pc, #296]	; (8007b40 <main+0x204>)
 8007a16:	2204      	movs	r2, #4
 8007a18:	601a      	str	r2, [r3, #0]
	joint_4.IdType = FDCAN_STANDARD_ID;
 8007a1a:	4b49      	ldr	r3, [pc, #292]	; (8007b40 <main+0x204>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	605a      	str	r2, [r3, #4]
	joint_4.TxFrameType = FDCAN_DATA_FRAME;
 8007a20:	4b47      	ldr	r3, [pc, #284]	; (8007b40 <main+0x204>)
 8007a22:	2200      	movs	r2, #0
 8007a24:	609a      	str	r2, [r3, #8]
	joint_4.DataLength = FDCAN_DLC_BYTES_8;
 8007a26:	4b46      	ldr	r3, [pc, #280]	; (8007b40 <main+0x204>)
 8007a28:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007a2c:	60da      	str	r2, [r3, #12]
	joint_4.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007a2e:	4b44      	ldr	r3, [pc, #272]	; (8007b40 <main+0x204>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	611a      	str	r2, [r3, #16]
	joint_4.BitRateSwitch = FDCAN_BRS_OFF;
 8007a34:	4b42      	ldr	r3, [pc, #264]	; (8007b40 <main+0x204>)
 8007a36:	2200      	movs	r2, #0
 8007a38:	615a      	str	r2, [r3, #20]
	joint_4.FDFormat = FDCAN_CLASSIC_CAN;
 8007a3a:	4b41      	ldr	r3, [pc, #260]	; (8007b40 <main+0x204>)
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	619a      	str	r2, [r3, #24]
	joint_4.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007a40:	4b3f      	ldr	r3, [pc, #252]	; (8007b40 <main+0x204>)
 8007a42:	2200      	movs	r2, #0
 8007a44:	61da      	str	r2, [r3, #28]
	joint_4.MessageMarker = 0;
 8007a46:	4b3e      	ldr	r3, [pc, #248]	; (8007b40 <main+0x204>)
 8007a48:	2200      	movs	r2, #0
 8007a4a:	621a      	str	r2, [r3, #32]
	
	joint_5.Identifier = 0x5;
 8007a4c:	4b3d      	ldr	r3, [pc, #244]	; (8007b44 <main+0x208>)
 8007a4e:	2205      	movs	r2, #5
 8007a50:	601a      	str	r2, [r3, #0]
	joint_5.IdType = FDCAN_STANDARD_ID;
 8007a52:	4b3c      	ldr	r3, [pc, #240]	; (8007b44 <main+0x208>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	605a      	str	r2, [r3, #4]
	joint_5.TxFrameType = FDCAN_DATA_FRAME;
 8007a58:	4b3a      	ldr	r3, [pc, #232]	; (8007b44 <main+0x208>)
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	609a      	str	r2, [r3, #8]
	joint_5.DataLength = FDCAN_DLC_BYTES_8;
 8007a5e:	4b39      	ldr	r3, [pc, #228]	; (8007b44 <main+0x208>)
 8007a60:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007a64:	60da      	str	r2, [r3, #12]
	joint_5.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007a66:	4b37      	ldr	r3, [pc, #220]	; (8007b44 <main+0x208>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	611a      	str	r2, [r3, #16]
	joint_5.BitRateSwitch = FDCAN_BRS_OFF;
 8007a6c:	4b35      	ldr	r3, [pc, #212]	; (8007b44 <main+0x208>)
 8007a6e:	2200      	movs	r2, #0
 8007a70:	615a      	str	r2, [r3, #20]
	joint_5.FDFormat = FDCAN_CLASSIC_CAN;
 8007a72:	4b34      	ldr	r3, [pc, #208]	; (8007b44 <main+0x208>)
 8007a74:	2200      	movs	r2, #0
 8007a76:	619a      	str	r2, [r3, #24]
	joint_5.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007a78:	4b32      	ldr	r3, [pc, #200]	; (8007b44 <main+0x208>)
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	61da      	str	r2, [r3, #28]
	joint_5.MessageMarker = 0;
 8007a7e:	4b31      	ldr	r3, [pc, #196]	; (8007b44 <main+0x208>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	621a      	str	r2, [r3, #32]

	joint_6.Identifier = 0x6;
 8007a84:	4b30      	ldr	r3, [pc, #192]	; (8007b48 <main+0x20c>)
 8007a86:	2206      	movs	r2, #6
 8007a88:	601a      	str	r2, [r3, #0]
	joint_6.IdType = FDCAN_STANDARD_ID;
 8007a8a:	4b2f      	ldr	r3, [pc, #188]	; (8007b48 <main+0x20c>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	605a      	str	r2, [r3, #4]
	joint_6.TxFrameType = FDCAN_DATA_FRAME;
 8007a90:	4b2d      	ldr	r3, [pc, #180]	; (8007b48 <main+0x20c>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	609a      	str	r2, [r3, #8]
	joint_6.DataLength = FDCAN_DLC_BYTES_8;
 8007a96:	4b2c      	ldr	r3, [pc, #176]	; (8007b48 <main+0x20c>)
 8007a98:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007a9c:	60da      	str	r2, [r3, #12]
	joint_6.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8007a9e:	4b2a      	ldr	r3, [pc, #168]	; (8007b48 <main+0x20c>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	611a      	str	r2, [r3, #16]
	joint_6.BitRateSwitch = FDCAN_BRS_OFF;
 8007aa4:	4b28      	ldr	r3, [pc, #160]	; (8007b48 <main+0x20c>)
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	615a      	str	r2, [r3, #20]
	joint_6.FDFormat = FDCAN_CLASSIC_CAN;
 8007aaa:	4b27      	ldr	r3, [pc, #156]	; (8007b48 <main+0x20c>)
 8007aac:	2200      	movs	r2, #0
 8007aae:	619a      	str	r2, [r3, #24]
	joint_6.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 8007ab0:	4b25      	ldr	r3, [pc, #148]	; (8007b48 <main+0x20c>)
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	61da      	str	r2, [r3, #28]
	joint_6.MessageMarker = 0;	
 8007ab6:	4b24      	ldr	r3, [pc, #144]	; (8007b48 <main+0x20c>)
 8007ab8:	2200      	movs	r2, #0
 8007aba:	621a      	str	r2, [r3, #32]
	
	
	HAL_FDCAN_Start(&hfdcan1);
 8007abc:	4823      	ldr	r0, [pc, #140]	; (8007b4c <main+0x210>)
 8007abe:	f7f9 fc83 	bl	80013c8 <HAL_FDCAN_Start>
	HAL_FDCAN_Start(&hfdcan2);
 8007ac2:	4823      	ldr	r0, [pc, #140]	; (8007b50 <main+0x214>)
 8007ac4:	f7f9 fc80 	bl	80013c8 <HAL_FDCAN_Start>
	
	HAL_Delay(10);
 8007ac8:	200a      	movs	r0, #10
 8007aca:	f7f9 f8e3 	bl	8000c94 <HAL_Delay>
	HAL_TIM_Base_Start(&htim2);
 8007ace:	4821      	ldr	r0, [pc, #132]	; (8007b54 <main+0x218>)
 8007ad0:	f7fd fa44 	bl	8004f5c <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim4);
 8007ad4:	4820      	ldr	r0, [pc, #128]	; (8007b58 <main+0x21c>)
 8007ad6:	f7fd fa41 	bl	8004f5c <HAL_TIM_Base_Start>
	
	HAL_Delay(10);
 8007ada:	200a      	movs	r0, #10
 8007adc:	f7f9 f8da 	bl	8000c94 <HAL_Delay>

	// 1. init lan9252
	ethercat_slave.spi = &hspi1;
 8007ae0:	4b1e      	ldr	r3, [pc, #120]	; (8007b5c <main+0x220>)
 8007ae2:	4a1f      	ldr	r2, [pc, #124]	; (8007b60 <main+0x224>)
 8007ae4:	605a      	str	r2, [r3, #4]
	ethercat_slave.uart = &huart2;
 8007ae6:	4b1d      	ldr	r3, [pc, #116]	; (8007b5c <main+0x220>)
 8007ae8:	4a1e      	ldr	r2, [pc, #120]	; (8007b64 <main+0x228>)
 8007aea:	601a      	str	r2, [r3, #0]
	ethercat_slave.bIn = &BufferIn;
 8007aec:	4b1b      	ldr	r3, [pc, #108]	; (8007b5c <main+0x220>)
 8007aee:	4a1e      	ldr	r2, [pc, #120]	; (8007b68 <main+0x22c>)
 8007af0:	609a      	str	r2, [r3, #8]
	ethercat_slave.bOut = &BufferOut;
 8007af2:	4b1a      	ldr	r3, [pc, #104]	; (8007b5c <main+0x220>)
 8007af4:	4a1d      	ldr	r2, [pc, #116]	; (8007b6c <main+0x230>)
 8007af6:	60da      	str	r2, [r3, #12]
	HAL_Delay(10);
 8007af8:	200a      	movs	r0, #10
 8007afa:	f7f9 f8cb 	bl	8000c94 <HAL_Delay>
	
	//init9252(&ethercat_slave); // change this !!!!!!!!!!!!!!
	
	HAL_Delay(100);
 8007afe:	2064      	movs	r0, #100	; 0x64
 8007b00:	f7f9 f8c8 	bl	8000c94 <HAL_Delay>
	
	HAL_TIM_Base_Start_IT(&htim5);
 8007b04:	481a      	ldr	r0, [pc, #104]	; (8007b70 <main+0x234>)
 8007b06:	f7fd fa99 	bl	800503c <HAL_TIM_Base_Start_IT>
	
	HAL_Delay(100);
 8007b0a:	2064      	movs	r0, #100	; 0x64
 8007b0c:	f7f9 f8c2 	bl	8000c94 <HAL_Delay>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //while (HAL_FDCAN_GetRxFifoFillLevel(&hfdcan1, FDCAN_RX_FIFO0) > 0)	
	  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 8007b10:	4b18      	ldr	r3, [pc, #96]	; (8007b74 <main+0x238>)
 8007b12:	4a19      	ldr	r2, [pc, #100]	; (8007b78 <main+0x23c>)
 8007b14:	2140      	movs	r1, #64	; 0x40
 8007b16:	480d      	ldr	r0, [pc, #52]	; (8007b4c <main+0x210>)
 8007b18:	f7f9 fcdc 	bl	80014d4 <HAL_FDCAN_GetRxMessage>
 8007b1c:	4603      	mov	r3, r0
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d103      	bne.n	8007b2a <main+0x1ee>
	  {
		  unpack_reply(&rx_header, rx_data);
 8007b22:	4914      	ldr	r1, [pc, #80]	; (8007b74 <main+0x238>)
 8007b24:	4814      	ldr	r0, [pc, #80]	; (8007b78 <main+0x23c>)
 8007b26:	f7ff fc2b 	bl	8007380 <unpack_reply>
	  /*
	  if (HAL_FDCAN_GetRxMessage(&hfdcan2, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
	  {
		  unpack_reply(&rx_header, rx_data);
	  }*/
	  delay_us(10);
 8007b2a:	200a      	movs	r0, #10
 8007b2c:	f7ff fad6 	bl	80070dc <delay_us>
	  if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
 8007b30:	e7ee      	b.n	8007b10 <main+0x1d4>
 8007b32:	bf00      	nop
 8007b34:	240004e8 	.word	0x240004e8
 8007b38:	2400050c 	.word	0x2400050c
 8007b3c:	24000530 	.word	0x24000530
 8007b40:	24000554 	.word	0x24000554
 8007b44:	24000578 	.word	0x24000578
 8007b48:	2400059c 	.word	0x2400059c
 8007b4c:	240001a8 	.word	0x240001a8
 8007b50:	24000248 	.word	0x24000248
 8007b54:	24000370 	.word	0x24000370
 8007b58:	240003bc 	.word	0x240003bc
 8007b5c:	24000190 	.word	0x24000190
 8007b60:	240002e8 	.word	0x240002e8
 8007b64:	24000454 	.word	0x24000454
 8007b68:	24000138 	.word	0x24000138
 8007b6c:	240000c8 	.word	0x240000c8
 8007b70:	24000408 	.word	0x24000408
 8007b74:	24000648 	.word	0x24000648
 8007b78:	24000620 	.word	0x24000620

08007b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007b7c:	b580      	push	{r7, lr}
 8007b7e:	b09e      	sub	sp, #120	; 0x78
 8007b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007b82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007b86:	224c      	movs	r2, #76	; 0x4c
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 ff96 	bl	8008abc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007b90:	f107 030c 	add.w	r3, r7, #12
 8007b94:	2220      	movs	r2, #32
 8007b96:	2100      	movs	r1, #0
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f000 ff8f 	bl	8008abc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8007b9e:	2002      	movs	r0, #2
 8007ba0:	f7fa f9fa 	bl	8001f98 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	60bb      	str	r3, [r7, #8]
 8007ba8:	4b48      	ldr	r3, [pc, #288]	; (8007ccc <SystemClock_Config+0x150>)
 8007baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bac:	4a47      	ldr	r2, [pc, #284]	; (8007ccc <SystemClock_Config+0x150>)
 8007bae:	f023 0301 	bic.w	r3, r3, #1
 8007bb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bb4:	4b45      	ldr	r3, [pc, #276]	; (8007ccc <SystemClock_Config+0x150>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	f003 0301 	and.w	r3, r3, #1
 8007bbc:	60bb      	str	r3, [r7, #8]
 8007bbe:	4b44      	ldr	r3, [pc, #272]	; (8007cd0 <SystemClock_Config+0x154>)
 8007bc0:	699b      	ldr	r3, [r3, #24]
 8007bc2:	4a43      	ldr	r2, [pc, #268]	; (8007cd0 <SystemClock_Config+0x154>)
 8007bc4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007bc8:	6193      	str	r3, [r2, #24]
 8007bca:	4b41      	ldr	r3, [pc, #260]	; (8007cd0 <SystemClock_Config+0x154>)
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007bd2:	60bb      	str	r3, [r7, #8]
 8007bd4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007bd6:	bf00      	nop
 8007bd8:	4b3d      	ldr	r3, [pc, #244]	; (8007cd0 <SystemClock_Config+0x154>)
 8007bda:	699b      	ldr	r3, [r3, #24]
 8007bdc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007be0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007be4:	d1f8      	bne.n	8007bd8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007be6:	4b3b      	ldr	r3, [pc, #236]	; (8007cd4 <SystemClock_Config+0x158>)
 8007be8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bec:	4a39      	ldr	r2, [pc, #228]	; (8007cd4 <SystemClock_Config+0x158>)
 8007bee:	f043 0302 	orr.w	r3, r3, #2
 8007bf2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007bf6:	4b37      	ldr	r3, [pc, #220]	; (8007cd4 <SystemClock_Config+0x158>)
 8007bf8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bfc:	f003 0302 	and.w	r3, r3, #2
 8007c00:	607b      	str	r3, [r7, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8007c04:	2300      	movs	r3, #0
 8007c06:	603b      	str	r3, [r7, #0]
 8007c08:	4b31      	ldr	r3, [pc, #196]	; (8007cd0 <SystemClock_Config+0x154>)
 8007c0a:	699b      	ldr	r3, [r3, #24]
 8007c0c:	4a30      	ldr	r2, [pc, #192]	; (8007cd0 <SystemClock_Config+0x154>)
 8007c0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007c12:	6193      	str	r3, [r2, #24]
 8007c14:	4b2e      	ldr	r3, [pc, #184]	; (8007cd0 <SystemClock_Config+0x154>)
 8007c16:	699b      	ldr	r3, [r3, #24]
 8007c18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c1c:	603b      	str	r3, [r7, #0]
 8007c1e:	4b2b      	ldr	r3, [pc, #172]	; (8007ccc <SystemClock_Config+0x150>)
 8007c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c22:	4a2a      	ldr	r2, [pc, #168]	; (8007ccc <SystemClock_Config+0x150>)
 8007c24:	f043 0301 	orr.w	r3, r3, #1
 8007c28:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007c2a:	4b28      	ldr	r3, [pc, #160]	; (8007ccc <SystemClock_Config+0x150>)
 8007c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2e:	f003 0301 	and.w	r3, r3, #1
 8007c32:	603b      	str	r3, [r7, #0]
 8007c34:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8007c36:	bf00      	nop
 8007c38:	4b25      	ldr	r3, [pc, #148]	; (8007cd0 <SystemClock_Config+0x154>)
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c44:	d1f8      	bne.n	8007c38 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007c46:	2301      	movs	r3, #1
 8007c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007c4a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007c4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007c50:	2302      	movs	r3, #2
 8007c52:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007c54:	2302      	movs	r3, #2
 8007c56:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 3;
 8007c58:	2303      	movs	r3, #3
 8007c5a:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 240;
 8007c5c:	23f0      	movs	r3, #240	; 0xf0
 8007c5e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8007c60:	2302      	movs	r3, #2
 8007c62:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8007c64:	2308      	movs	r3, #8
 8007c66:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8007c6c:	2308      	movs	r3, #8
 8007c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8007c70:	2300      	movs	r3, #0
 8007c72:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8007c74:	2300      	movs	r3, #0
 8007c76:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007c78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	f7fa f9c5 	bl	800200c <HAL_RCC_OscConfig>
 8007c82:	4603      	mov	r3, r0
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d001      	beq.n	8007c8c <SystemClock_Config+0x110>
  {
    Error_Handler();
 8007c88:	f000 fbec 	bl	8008464 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007c8c:	233f      	movs	r3, #63	; 0x3f
 8007c8e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007c90:	2303      	movs	r3, #3
 8007c92:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8007c94:	2300      	movs	r3, #0
 8007c96:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8007c98:	2308      	movs	r3, #8
 8007c9a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8007c9c:	2340      	movs	r3, #64	; 0x40
 8007c9e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8007ca0:	2340      	movs	r3, #64	; 0x40
 8007ca2:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8007ca4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007ca8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8007caa:	2340      	movs	r3, #64	; 0x40
 8007cac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007cae:	f107 030c 	add.w	r3, r7, #12
 8007cb2:	2104      	movs	r1, #4
 8007cb4:	4618      	mov	r0, r3
 8007cb6:	f7fa fe03 	bl	80028c0 <HAL_RCC_ClockConfig>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d001      	beq.n	8007cc4 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8007cc0:	f000 fbd0 	bl	8008464 <Error_Handler>
  }
}
 8007cc4:	bf00      	nop
 8007cc6:	3778      	adds	r7, #120	; 0x78
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}
 8007ccc:	58000400 	.word	0x58000400
 8007cd0:	58024800 	.word	0x58024800
 8007cd4:	58024400 	.word	0x58024400

08007cd8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8007cdc:	4b2e      	ldr	r3, [pc, #184]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007cde:	4a2f      	ldr	r2, [pc, #188]	; (8007d9c <MX_FDCAN1_Init+0xc4>)
 8007ce0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8007ce2:	4b2d      	ldr	r3, [pc, #180]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8007ce8:	4b2b      	ldr	r3, [pc, #172]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007cea:	2200      	movs	r2, #0
 8007cec:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8007cee:	4b2a      	ldr	r3, [pc, #168]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8007cf4:	4b28      	ldr	r3, [pc, #160]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8007cfa:	4b27      	ldr	r3, [pc, #156]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 8;
 8007d00:	4b25      	ldr	r3, [pc, #148]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d02:	2208      	movs	r2, #8
 8007d04:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8007d06:	4b24      	ldr	r3, [pc, #144]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d08:	2201      	movs	r2, #1
 8007d0a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 10;
 8007d0c:	4b22      	ldr	r3, [pc, #136]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d0e:	220a      	movs	r2, #10
 8007d10:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 8007d12:	4b21      	ldr	r3, [pc, #132]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d14:	2204      	movs	r2, #4
 8007d16:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 8;
 8007d18:	4b1f      	ldr	r3, [pc, #124]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d1a:	2208      	movs	r2, #8
 8007d1c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8007d1e:	4b1e      	ldr	r3, [pc, #120]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d20:	2201      	movs	r2, #1
 8007d22:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8007d24:	4b1c      	ldr	r3, [pc, #112]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d26:	220a      	movs	r2, #10
 8007d28:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8007d2a:	4b1b      	ldr	r3, [pc, #108]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8007d30:	4b19      	ldr	r3, [pc, #100]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d32:	2200      	movs	r2, #0
 8007d34:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8007d36:	4b18      	ldr	r3, [pc, #96]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d38:	2200      	movs	r2, #0
 8007d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8007d3c:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d3e:	2200      	movs	r2, #0
 8007d40:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 6;
 8007d42:	4b15      	ldr	r3, [pc, #84]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d44:	2206      	movs	r2, #6
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8007d48:	4b13      	ldr	r3, [pc, #76]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8007d4e:	4b12      	ldr	r3, [pc, #72]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d50:	2200      	movs	r2, #0
 8007d52:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8007d54:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d56:	2204      	movs	r2, #4
 8007d58:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8007d5a:	4b0f      	ldr	r3, [pc, #60]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8007d60:	4b0d      	ldr	r3, [pc, #52]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d62:	2204      	movs	r2, #4
 8007d64:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8007d6c:	4b0a      	ldr	r3, [pc, #40]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d6e:	2200      	movs	r2, #0
 8007d70:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 6;
 8007d72:	4b09      	ldr	r3, [pc, #36]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d74:	2206      	movs	r2, #6
 8007d76:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8007d78:	4b07      	ldr	r3, [pc, #28]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8007d7e:	4b06      	ldr	r3, [pc, #24]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d80:	2204      	movs	r2, #4
 8007d82:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8007d84:	4804      	ldr	r0, [pc, #16]	; (8007d98 <MX_FDCAN1_Init+0xc0>)
 8007d86:	f7f9 f941 	bl	800100c <HAL_FDCAN_Init>
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d001      	beq.n	8007d94 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8007d90:	f000 fb68 	bl	8008464 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8007d94:	bf00      	nop
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	240001a8 	.word	0x240001a8
 8007d9c:	4000a000 	.word	0x4000a000

08007da0 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8007da4:	4b2f      	ldr	r3, [pc, #188]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007da6:	4a30      	ldr	r2, [pc, #192]	; (8007e68 <MX_FDCAN2_Init+0xc8>)
 8007da8:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8007daa:	4b2e      	ldr	r3, [pc, #184]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8007db0:	4b2c      	ldr	r3, [pc, #176]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007db2:	2200      	movs	r2, #0
 8007db4:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = ENABLE;
 8007db6:	4b2b      	ldr	r3, [pc, #172]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007db8:	2201      	movs	r2, #1
 8007dba:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8007dbc:	4b29      	ldr	r3, [pc, #164]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8007dc2:	4b28      	ldr	r3, [pc, #160]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 8;
 8007dc8:	4b26      	ldr	r3, [pc, #152]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007dca:	2208      	movs	r2, #8
 8007dcc:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8007dce:	4b25      	ldr	r3, [pc, #148]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 10;
 8007dd4:	4b23      	ldr	r3, [pc, #140]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007dd6:	220a      	movs	r2, #10
 8007dd8:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 4;
 8007dda:	4b22      	ldr	r3, [pc, #136]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007ddc:	2204      	movs	r2, #4
 8007dde:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 8;
 8007de0:	4b20      	ldr	r3, [pc, #128]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007de2:	2208      	movs	r2, #8
 8007de4:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8007de6:	4b1f      	ldr	r3, [pc, #124]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007de8:	2201      	movs	r2, #1
 8007dea:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 10;
 8007dec:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007dee:	220a      	movs	r2, #10
 8007df0:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 4;
 8007df2:	4b1c      	ldr	r3, [pc, #112]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007df4:	2204      	movs	r2, #4
 8007df6:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 1024;
 8007df8:	4b1a      	ldr	r3, [pc, #104]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007dfa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007dfe:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8007e00:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8007e06:	4b17      	ldr	r3, [pc, #92]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 6;
 8007e0c:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e0e:	2206      	movs	r2, #6
 8007e10:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8007e12:	4b14      	ldr	r3, [pc, #80]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e14:	2204      	movs	r2, #4
 8007e16:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8007e18:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8007e1e:	4b11      	ldr	r3, [pc, #68]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e20:	2204      	movs	r2, #4
 8007e22:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8007e24:	4b0f      	ldr	r3, [pc, #60]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e2c:	2204      	movs	r2, #4
 8007e2e:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8007e30:	4b0c      	ldr	r3, [pc, #48]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8007e36:	4b0b      	ldr	r3, [pc, #44]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e38:	2200      	movs	r2, #0
 8007e3a:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 6;
 8007e3c:	4b09      	ldr	r3, [pc, #36]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e3e:	2206      	movs	r2, #6
 8007e40:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8007e42:	4b08      	ldr	r3, [pc, #32]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e44:	2200      	movs	r2, #0
 8007e46:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8007e48:	4b06      	ldr	r3, [pc, #24]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e4a:	2204      	movs	r2, #4
 8007e4c:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8007e4e:	4805      	ldr	r0, [pc, #20]	; (8007e64 <MX_FDCAN2_Init+0xc4>)
 8007e50:	f7f9 f8dc 	bl	800100c <HAL_FDCAN_Init>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d001      	beq.n	8007e5e <MX_FDCAN2_Init+0xbe>
  {
    Error_Handler();
 8007e5a:	f000 fb03 	bl	8008464 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8007e5e:	bf00      	nop
 8007e60:	bd80      	pop	{r7, pc}
 8007e62:	bf00      	nop
 8007e64:	24000248 	.word	0x24000248
 8007e68:	4000a400 	.word	0x4000a400

08007e6c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8007e70:	4b28      	ldr	r3, [pc, #160]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007e72:	4a29      	ldr	r2, [pc, #164]	; (8007f18 <MX_SPI1_Init+0xac>)
 8007e74:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8007e76:	4b27      	ldr	r3, [pc, #156]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007e78:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8007e7c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007e7e:	4b25      	ldr	r3, [pc, #148]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007e84:	4b23      	ldr	r3, [pc, #140]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007e86:	2207      	movs	r2, #7
 8007e88:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8007e8a:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007e8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8007e90:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8007e92:	4b20      	ldr	r3, [pc, #128]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007e94:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007e98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8007e9a:	4b1e      	ldr	r3, [pc, #120]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007e9c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8007ea0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007ea2:	4b1c      	ldr	r3, [pc, #112]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007ea4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8007ea8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007eaa:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8007eb0:	4b18      	ldr	r3, [pc, #96]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007eb6:	4b17      	ldr	r3, [pc, #92]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007eb8:	2200      	movs	r2, #0
 8007eba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8007ebc:	4b15      	ldr	r3, [pc, #84]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007ec2:	4b14      	ldr	r3, [pc, #80]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007ec4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007ec8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8007eca:	4b12      	ldr	r3, [pc, #72]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8007ed0:	4b10      	ldr	r3, [pc, #64]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007ed2:	2200      	movs	r2, #0
 8007ed4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007ed6:	4b0f      	ldr	r3, [pc, #60]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007ed8:	2200      	movs	r2, #0
 8007eda:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8007edc:	4b0d      	ldr	r3, [pc, #52]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007ede:	2200      	movs	r2, #0
 8007ee0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8007ee2:	4b0c      	ldr	r3, [pc, #48]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8007ee8:	4b0a      	ldr	r3, [pc, #40]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8007eee:	4b09      	ldr	r3, [pc, #36]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8007ef4:	4b07      	ldr	r3, [pc, #28]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8007efa:	4b06      	ldr	r3, [pc, #24]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007efc:	2200      	movs	r2, #0
 8007efe:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007f00:	4804      	ldr	r0, [pc, #16]	; (8007f14 <MX_SPI1_Init+0xa8>)
 8007f02:	f7fc fe95 	bl	8004c30 <HAL_SPI_Init>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d001      	beq.n	8007f10 <MX_SPI1_Init+0xa4>
  {
    Error_Handler();
 8007f0c:	f000 faaa 	bl	8008464 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007f10:	bf00      	nop
 8007f12:	bd80      	pop	{r7, pc}
 8007f14:	240002e8 	.word	0x240002e8
 8007f18:	40013000 	.word	0x40013000

08007f1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007f1c:	b580      	push	{r7, lr}
 8007f1e:	b088      	sub	sp, #32
 8007f20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f22:	f107 0310 	add.w	r3, r7, #16
 8007f26:	2200      	movs	r2, #0
 8007f28:	601a      	str	r2, [r3, #0]
 8007f2a:	605a      	str	r2, [r3, #4]
 8007f2c:	609a      	str	r2, [r3, #8]
 8007f2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f30:	1d3b      	adds	r3, r7, #4
 8007f32:	2200      	movs	r2, #0
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	605a      	str	r2, [r3, #4]
 8007f38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007f3a:	4b1e      	ldr	r3, [pc, #120]	; (8007fb4 <MX_TIM2_Init+0x98>)
 8007f3c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007f40:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 239;
 8007f42:	4b1c      	ldr	r3, [pc, #112]	; (8007fb4 <MX_TIM2_Init+0x98>)
 8007f44:	22ef      	movs	r2, #239	; 0xef
 8007f46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f48:	4b1a      	ldr	r3, [pc, #104]	; (8007fb4 <MX_TIM2_Init+0x98>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8007f4e:	4b19      	ldr	r3, [pc, #100]	; (8007fb4 <MX_TIM2_Init+0x98>)
 8007f50:	f04f 32ff 	mov.w	r2, #4294967295
 8007f54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f56:	4b17      	ldr	r3, [pc, #92]	; (8007fb4 <MX_TIM2_Init+0x98>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007f5c:	4b15      	ldr	r3, [pc, #84]	; (8007fb4 <MX_TIM2_Init+0x98>)
 8007f5e:	2200      	movs	r2, #0
 8007f60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007f62:	4814      	ldr	r0, [pc, #80]	; (8007fb4 <MX_TIM2_Init+0x98>)
 8007f64:	f7fc ffa3 	bl	8004eae <HAL_TIM_Base_Init>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d001      	beq.n	8007f72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007f6e:	f000 fa79 	bl	8008464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007f78:	f107 0310 	add.w	r3, r7, #16
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	480d      	ldr	r0, [pc, #52]	; (8007fb4 <MX_TIM2_Init+0x98>)
 8007f80:	f7fd f9f4 	bl	800536c <HAL_TIM_ConfigClockSource>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007f8a:	f000 fa6b 	bl	8008464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f92:	2300      	movs	r3, #0
 8007f94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007f96:	1d3b      	adds	r3, r7, #4
 8007f98:	4619      	mov	r1, r3
 8007f9a:	4806      	ldr	r0, [pc, #24]	; (8007fb4 <MX_TIM2_Init+0x98>)
 8007f9c:	f7fd fc3e 	bl	800581c <HAL_TIMEx_MasterConfigSynchronization>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d001      	beq.n	8007faa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007fa6:	f000 fa5d 	bl	8008464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007faa:	bf00      	nop
 8007fac:	3720      	adds	r7, #32
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	bd80      	pop	{r7, pc}
 8007fb2:	bf00      	nop
 8007fb4:	24000370 	.word	0x24000370

08007fb8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b088      	sub	sp, #32
 8007fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007fbe:	f107 0310 	add.w	r3, r7, #16
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	605a      	str	r2, [r3, #4]
 8007fc8:	609a      	str	r2, [r3, #8]
 8007fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fcc:	1d3b      	adds	r3, r7, #4
 8007fce:	2200      	movs	r2, #0
 8007fd0:	601a      	str	r2, [r3, #0]
 8007fd2:	605a      	str	r2, [r3, #4]
 8007fd4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8007fd6:	4b1d      	ldr	r3, [pc, #116]	; (800804c <MX_TIM4_Init+0x94>)
 8007fd8:	4a1d      	ldr	r2, [pc, #116]	; (8008050 <MX_TIM4_Init+0x98>)
 8007fda:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 239;
 8007fdc:	4b1b      	ldr	r3, [pc, #108]	; (800804c <MX_TIM4_Init+0x94>)
 8007fde:	22ef      	movs	r2, #239	; 0xef
 8007fe0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fe2:	4b1a      	ldr	r3, [pc, #104]	; (800804c <MX_TIM4_Init+0x94>)
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8007fe8:	4b18      	ldr	r3, [pc, #96]	; (800804c <MX_TIM4_Init+0x94>)
 8007fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fee:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007ff0:	4b16      	ldr	r3, [pc, #88]	; (800804c <MX_TIM4_Init+0x94>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007ff6:	4b15      	ldr	r3, [pc, #84]	; (800804c <MX_TIM4_Init+0x94>)
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8007ffc:	4813      	ldr	r0, [pc, #76]	; (800804c <MX_TIM4_Init+0x94>)
 8007ffe:	f7fc ff56 	bl	8004eae <HAL_TIM_Base_Init>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d001      	beq.n	800800c <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8008008:	f000 fa2c 	bl	8008464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800800c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008010:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008012:	f107 0310 	add.w	r3, r7, #16
 8008016:	4619      	mov	r1, r3
 8008018:	480c      	ldr	r0, [pc, #48]	; (800804c <MX_TIM4_Init+0x94>)
 800801a:	f7fd f9a7 	bl	800536c <HAL_TIM_ConfigClockSource>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8008024:	f000 fa1e 	bl	8008464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008028:	2300      	movs	r3, #0
 800802a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800802c:	2300      	movs	r3, #0
 800802e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008030:	1d3b      	adds	r3, r7, #4
 8008032:	4619      	mov	r1, r3
 8008034:	4805      	ldr	r0, [pc, #20]	; (800804c <MX_TIM4_Init+0x94>)
 8008036:	f7fd fbf1 	bl	800581c <HAL_TIMEx_MasterConfigSynchronization>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d001      	beq.n	8008044 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8008040:	f000 fa10 	bl	8008464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8008044:	bf00      	nop
 8008046:	3720      	adds	r7, #32
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}
 800804c:	240003bc 	.word	0x240003bc
 8008050:	40000800 	.word	0x40000800

08008054 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8008054:	b580      	push	{r7, lr}
 8008056:	b088      	sub	sp, #32
 8008058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800805a:	f107 0310 	add.w	r3, r7, #16
 800805e:	2200      	movs	r2, #0
 8008060:	601a      	str	r2, [r3, #0]
 8008062:	605a      	str	r2, [r3, #4]
 8008064:	609a      	str	r2, [r3, #8]
 8008066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008068:	1d3b      	adds	r3, r7, #4
 800806a:	2200      	movs	r2, #0
 800806c:	601a      	str	r2, [r3, #0]
 800806e:	605a      	str	r2, [r3, #4]
 8008070:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8008072:	4b1d      	ldr	r3, [pc, #116]	; (80080e8 <MX_TIM5_Init+0x94>)
 8008074:	4a1d      	ldr	r2, [pc, #116]	; (80080ec <MX_TIM5_Init+0x98>)
 8008076:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 239;
 8008078:	4b1b      	ldr	r3, [pc, #108]	; (80080e8 <MX_TIM5_Init+0x94>)
 800807a:	22ef      	movs	r2, #239	; 0xef
 800807c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800807e:	4b1a      	ldr	r3, [pc, #104]	; (80080e8 <MX_TIM5_Init+0x94>)
 8008080:	2200      	movs	r2, #0
 8008082:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8008084:	4b18      	ldr	r3, [pc, #96]	; (80080e8 <MX_TIM5_Init+0x94>)
 8008086:	f240 32e7 	movw	r2, #999	; 0x3e7
 800808a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800808c:	4b16      	ldr	r3, [pc, #88]	; (80080e8 <MX_TIM5_Init+0x94>)
 800808e:	2200      	movs	r2, #0
 8008090:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008092:	4b15      	ldr	r3, [pc, #84]	; (80080e8 <MX_TIM5_Init+0x94>)
 8008094:	2200      	movs	r2, #0
 8008096:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8008098:	4813      	ldr	r0, [pc, #76]	; (80080e8 <MX_TIM5_Init+0x94>)
 800809a:	f7fc ff08 	bl	8004eae <HAL_TIM_Base_Init>
 800809e:	4603      	mov	r3, r0
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d001      	beq.n	80080a8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80080a4:	f000 f9de 	bl	8008464 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80080ae:	f107 0310 	add.w	r3, r7, #16
 80080b2:	4619      	mov	r1, r3
 80080b4:	480c      	ldr	r0, [pc, #48]	; (80080e8 <MX_TIM5_Init+0x94>)
 80080b6:	f7fd f959 	bl	800536c <HAL_TIM_ConfigClockSource>
 80080ba:	4603      	mov	r3, r0
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80080c0:	f000 f9d0 	bl	8008464 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080c4:	2300      	movs	r3, #0
 80080c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080c8:	2300      	movs	r3, #0
 80080ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80080cc:	1d3b      	adds	r3, r7, #4
 80080ce:	4619      	mov	r1, r3
 80080d0:	4805      	ldr	r0, [pc, #20]	; (80080e8 <MX_TIM5_Init+0x94>)
 80080d2:	f7fd fba3 	bl	800581c <HAL_TIMEx_MasterConfigSynchronization>
 80080d6:	4603      	mov	r3, r0
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d001      	beq.n	80080e0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80080dc:	f000 f9c2 	bl	8008464 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80080e0:	bf00      	nop
 80080e2:	3720      	adds	r7, #32
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	24000408 	.word	0x24000408
 80080ec:	40000c00 	.word	0x40000c00

080080f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80080f4:	4b22      	ldr	r3, [pc, #136]	; (8008180 <MX_USART2_UART_Init+0x90>)
 80080f6:	4a23      	ldr	r2, [pc, #140]	; (8008184 <MX_USART2_UART_Init+0x94>)
 80080f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80080fa:	4b21      	ldr	r3, [pc, #132]	; (8008180 <MX_USART2_UART_Init+0x90>)
 80080fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008100:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008102:	4b1f      	ldr	r3, [pc, #124]	; (8008180 <MX_USART2_UART_Init+0x90>)
 8008104:	2200      	movs	r2, #0
 8008106:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008108:	4b1d      	ldr	r3, [pc, #116]	; (8008180 <MX_USART2_UART_Init+0x90>)
 800810a:	2200      	movs	r2, #0
 800810c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800810e:	4b1c      	ldr	r3, [pc, #112]	; (8008180 <MX_USART2_UART_Init+0x90>)
 8008110:	2200      	movs	r2, #0
 8008112:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008114:	4b1a      	ldr	r3, [pc, #104]	; (8008180 <MX_USART2_UART_Init+0x90>)
 8008116:	220c      	movs	r2, #12
 8008118:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800811a:	4b19      	ldr	r3, [pc, #100]	; (8008180 <MX_USART2_UART_Init+0x90>)
 800811c:	2200      	movs	r2, #0
 800811e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008120:	4b17      	ldr	r3, [pc, #92]	; (8008180 <MX_USART2_UART_Init+0x90>)
 8008122:	2200      	movs	r2, #0
 8008124:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8008126:	4b16      	ldr	r3, [pc, #88]	; (8008180 <MX_USART2_UART_Init+0x90>)
 8008128:	2200      	movs	r2, #0
 800812a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800812c:	4b14      	ldr	r3, [pc, #80]	; (8008180 <MX_USART2_UART_Init+0x90>)
 800812e:	2200      	movs	r2, #0
 8008130:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008132:	4b13      	ldr	r3, [pc, #76]	; (8008180 <MX_USART2_UART_Init+0x90>)
 8008134:	2200      	movs	r2, #0
 8008136:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008138:	4811      	ldr	r0, [pc, #68]	; (8008180 <MX_USART2_UART_Init+0x90>)
 800813a:	f7fd fc1b 	bl	8005974 <HAL_UART_Init>
 800813e:	4603      	mov	r3, r0
 8008140:	2b00      	cmp	r3, #0
 8008142:	d001      	beq.n	8008148 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8008144:	f000 f98e 	bl	8008464 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8008148:	2100      	movs	r1, #0
 800814a:	480d      	ldr	r0, [pc, #52]	; (8008180 <MX_USART2_UART_Init+0x90>)
 800814c:	f7fe fc1d 	bl	800698a <HAL_UARTEx_SetTxFifoThreshold>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8008156:	f000 f985 	bl	8008464 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800815a:	2100      	movs	r1, #0
 800815c:	4808      	ldr	r0, [pc, #32]	; (8008180 <MX_USART2_UART_Init+0x90>)
 800815e:	f7fe fc52 	bl	8006a06 <HAL_UARTEx_SetRxFifoThreshold>
 8008162:	4603      	mov	r3, r0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d001      	beq.n	800816c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8008168:	f000 f97c 	bl	8008464 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800816c:	4804      	ldr	r0, [pc, #16]	; (8008180 <MX_USART2_UART_Init+0x90>)
 800816e:	f7fe fbd3 	bl	8006918 <HAL_UARTEx_DisableFifoMode>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8008178:	f000 f974 	bl	8008464 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800817c:	bf00      	nop
 800817e:	bd80      	pop	{r7, pc}
 8008180:	24000454 	.word	0x24000454
 8008184:	40004400 	.word	0x40004400

08008188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08a      	sub	sp, #40	; 0x28
 800818c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800818e:	f107 0314 	add.w	r3, r7, #20
 8008192:	2200      	movs	r2, #0
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	605a      	str	r2, [r3, #4]
 8008198:	609a      	str	r2, [r3, #8]
 800819a:	60da      	str	r2, [r3, #12]
 800819c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800819e:	4b29      	ldr	r3, [pc, #164]	; (8008244 <MX_GPIO_Init+0xbc>)
 80081a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081a4:	4a27      	ldr	r2, [pc, #156]	; (8008244 <MX_GPIO_Init+0xbc>)
 80081a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80081aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80081ae:	4b25      	ldr	r3, [pc, #148]	; (8008244 <MX_GPIO_Init+0xbc>)
 80081b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b8:	613b      	str	r3, [r7, #16]
 80081ba:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80081bc:	4b21      	ldr	r3, [pc, #132]	; (8008244 <MX_GPIO_Init+0xbc>)
 80081be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081c2:	4a20      	ldr	r2, [pc, #128]	; (8008244 <MX_GPIO_Init+0xbc>)
 80081c4:	f043 0301 	orr.w	r3, r3, #1
 80081c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80081cc:	4b1d      	ldr	r3, [pc, #116]	; (8008244 <MX_GPIO_Init+0xbc>)
 80081ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081d2:	f003 0301 	and.w	r3, r3, #1
 80081d6:	60fb      	str	r3, [r7, #12]
 80081d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80081da:	4b1a      	ldr	r3, [pc, #104]	; (8008244 <MX_GPIO_Init+0xbc>)
 80081dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081e0:	4a18      	ldr	r2, [pc, #96]	; (8008244 <MX_GPIO_Init+0xbc>)
 80081e2:	f043 0302 	orr.w	r3, r3, #2
 80081e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80081ea:	4b16      	ldr	r3, [pc, #88]	; (8008244 <MX_GPIO_Init+0xbc>)
 80081ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	60bb      	str	r3, [r7, #8]
 80081f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80081f8:	4b12      	ldr	r3, [pc, #72]	; (8008244 <MX_GPIO_Init+0xbc>)
 80081fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80081fe:	4a11      	ldr	r2, [pc, #68]	; (8008244 <MX_GPIO_Init+0xbc>)
 8008200:	f043 0308 	orr.w	r3, r3, #8
 8008204:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008208:	4b0e      	ldr	r3, [pc, #56]	; (8008244 <MX_GPIO_Init+0xbc>)
 800820a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800820e:	f003 0308 	and.w	r3, r3, #8
 8008212:	607b      	str	r3, [r7, #4]
 8008214:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSS_GPIO_Port, CSS_Pin, GPIO_PIN_RESET);
 8008216:	2200      	movs	r2, #0
 8008218:	2110      	movs	r1, #16
 800821a:	480b      	ldr	r0, [pc, #44]	; (8008248 <MX_GPIO_Init+0xc0>)
 800821c:	f7f9 fea2 	bl	8001f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CSS_Pin */
  GPIO_InitStruct.Pin = CSS_Pin;
 8008220:	2310      	movs	r3, #16
 8008222:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008224:	2301      	movs	r3, #1
 8008226:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008228:	2300      	movs	r3, #0
 800822a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800822c:	2300      	movs	r3, #0
 800822e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CSS_GPIO_Port, &GPIO_InitStruct);
 8008230:	f107 0314 	add.w	r3, r7, #20
 8008234:	4619      	mov	r1, r3
 8008236:	4804      	ldr	r0, [pc, #16]	; (8008248 <MX_GPIO_Init+0xc0>)
 8008238:	f7f9 fce4 	bl	8001c04 <HAL_GPIO_Init>

}
 800823c:	bf00      	nop
 800823e:	3728      	adds	r7, #40	; 0x28
 8008240:	46bd      	mov	sp, r7
 8008242:	bd80      	pop	{r7, pc}
 8008244:	58024400 	.word	0x58024400
 8008248:	58020000 	.word	0x58020000

0800824c <send_to_all_slave>:

//int is_enable = 0;
//int motor_init_state = 0;

void send_to_all_slave()
{	
 800824c:	b580      	push	{r7, lr}
 800824e:	af00      	add	r7, sp, #0
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &rx_header, rx_data) == HAL_OK)
		{
			unpack_reply(&rx_header, rx_data);
			  
		}*/
	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &joint_1, joint_1_data) != HAL_OK)
 8008250:	4a07      	ldr	r2, [pc, #28]	; (8008270 <send_to_all_slave+0x24>)
 8008252:	4908      	ldr	r1, [pc, #32]	; (8008274 <send_to_all_slave+0x28>)
 8008254:	4808      	ldr	r0, [pc, #32]	; (8008278 <send_to_all_slave+0x2c>)
 8008256:	f7f9 f8e2 	bl	800141e <HAL_FDCAN_AddMessageToTxFifoQ>
 800825a:	4603      	mov	r3, r0
 800825c:	2b00      	cmp	r3, #0
 800825e:	d004      	beq.n	800826a <send_to_all_slave+0x1e>
	{
		can1_error_counter += 1;
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <send_to_all_slave+0x30>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	3301      	adds	r3, #1
 8008266:	4a05      	ldr	r2, [pc, #20]	; (800827c <send_to_all_slave+0x30>)
 8008268:	6013      	str	r3, [r2, #0]
//	if (HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan2, &joint_6, joint_6_data) != HAL_OK)
//	{
//		can2_error_counter += 1;
//	}*/

}
 800826a:	bf00      	nop
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	240005c0 	.word	0x240005c0
 8008274:	240004e8 	.word	0x240004e8
 8008278:	240001a8 	.word	0x240001a8
 800827c:	24000650 	.word	0x24000650

08008280 <HAL_TIM_PeriodElapsedCallback>:
	BufferIn.Cust.motor_status = motor_status_can;

}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b08a      	sub	sp, #40	; 0x28
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM5)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a49      	ldr	r2, [pc, #292]	; (80083b4 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800828e:	4293      	cmp	r3, r2
 8008290:	f040 808c 	bne.w	80083ac <HAL_TIM_PeriodElapsedCallback+0x12c>
	{		
		//pack_ethercat_data();                // change this !!!!!!!!!!!
		//main_task(&ethercat_slave);          // change this !!!!!!!!!!!!
		
		uint64_t tmp_hs_ = 1;//BufferOut.Cust.hs; // change this !!!!!!!!!!!!!
 8008294:	f04f 0201 	mov.w	r2, #1
 8008298:	f04f 0300 	mov.w	r3, #0
 800829c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		
		// 1. control
		if (tmp_hs_ > hs_ || tmp_hs_ == 1)
 80082a0:	4b45      	ldr	r3, [pc, #276]	; (80083b8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80082a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80082a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082aa:	4290      	cmp	r0, r2
 80082ac:	eb71 0303 	sbcs.w	r3, r1, r3
 80082b0:	d304      	bcc.n	80082bc <HAL_TIM_PeriodElapsedCallback+0x3c>
 80082b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082b6:	1e51      	subs	r1, r2, #1
 80082b8:	430b      	orrs	r3, r1
 80082ba:	d107      	bne.n	80082cc <HAL_TIM_PeriodElapsedCallback+0x4c>
		{
			//control_word = BufferOut.Cust.control_word; // and commit this !!!!!!!!!!!!
			control();			
 80082bc:	f7fe ff28 	bl	8007110 <control>
			hs_ = tmp_hs_;			
 80082c0:	493d      	ldr	r1, [pc, #244]	; (80083b8 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80082c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80082c6:	e9c1 2300 	strd	r2, r3, [r1]
 80082ca:	e02d      	b.n	8008328 <HAL_TIM_PeriodElapsedCallback+0xa8>
		}
		else
		{
			error_hs_++;
 80082cc:	4b3b      	ldr	r3, [pc, #236]	; (80083bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80082ce:	781b      	ldrb	r3, [r3, #0]
 80082d0:	3301      	adds	r3, #1
 80082d2:	b2da      	uxtb	r2, r3
 80082d4:	4b39      	ldr	r3, [pc, #228]	; (80083bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80082d6:	701a      	strb	r2, [r3, #0]
			if (error_hs_ == 20 || motor_status_can != 0x00)
 80082d8:	4b38      	ldr	r3, [pc, #224]	; (80083bc <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80082da:	781b      	ldrb	r3, [r3, #0]
 80082dc:	2b14      	cmp	r3, #20
 80082de:	d003      	beq.n	80082e8 <HAL_TIM_PeriodElapsedCallback+0x68>
 80082e0:	4b37      	ldr	r3, [pc, #220]	; (80083c0 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80082e2:	881b      	ldrh	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d01f      	beq.n	8008328 <HAL_TIM_PeriodElapsedCallback+0xa8>
			{
				motor_es(&joint_1, joint_1_data, 1);
 80082e8:	2201      	movs	r2, #1
 80082ea:	4936      	ldr	r1, [pc, #216]	; (80083c4 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80082ec:	4836      	ldr	r0, [pc, #216]	; (80083c8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80082ee:	f7fe fcc7 	bl	8006c80 <motor_es>
				motor_es(&joint_2, joint_2_data, 2);
 80082f2:	2202      	movs	r2, #2
 80082f4:	4935      	ldr	r1, [pc, #212]	; (80083cc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80082f6:	4836      	ldr	r0, [pc, #216]	; (80083d0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80082f8:	f7fe fcc2 	bl	8006c80 <motor_es>
				motor_es(&joint_3, joint_3_data, 3);
 80082fc:	2203      	movs	r2, #3
 80082fe:	4935      	ldr	r1, [pc, #212]	; (80083d4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8008300:	4835      	ldr	r0, [pc, #212]	; (80083d8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8008302:	f7fe fcbd 	bl	8006c80 <motor_es>
				motor_es(&joint_4, joint_4_data, 4);
 8008306:	2204      	movs	r2, #4
 8008308:	4934      	ldr	r1, [pc, #208]	; (80083dc <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800830a:	4835      	ldr	r0, [pc, #212]	; (80083e0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800830c:	f7fe fcb8 	bl	8006c80 <motor_es>
				motor_es(&joint_5, joint_5_data, 5);
 8008310:	2205      	movs	r2, #5
 8008312:	4934      	ldr	r1, [pc, #208]	; (80083e4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8008314:	4834      	ldr	r0, [pc, #208]	; (80083e8 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8008316:	f7fe fcb3 	bl	8006c80 <motor_es>
				motor_es(&joint_6, joint_6_data, 6);				
 800831a:	2206      	movs	r2, #6
 800831c:	4933      	ldr	r1, [pc, #204]	; (80083ec <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800831e:	4834      	ldr	r0, [pc, #208]	; (80083f0 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8008320:	f7fe fcae 	bl	8006c80 <motor_es>
				send_to_all_slave();
 8008324:	f7ff ff92 	bl	800824c <send_to_all_slave>
			}
		}
		
		
		// error check
		can1_last_error_code = READ_REG(hfdcan1.Instance->PSR);	
 8008328:	4b32      	ldr	r3, [pc, #200]	; (80083f4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800832e:	4a32      	ldr	r2, [pc, #200]	; (80083f8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8008330:	6013      	str	r3, [r2, #0]
		can1_last_error_code = can1_last_error_code & 0x0007; 
 8008332:	4b31      	ldr	r3, [pc, #196]	; (80083f8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	4a2f      	ldr	r2, [pc, #188]	; (80083f8 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800833c:	6013      	str	r3, [r2, #0]
		
		can2_last_error_code = READ_REG(hfdcan2.Instance->PSR);	
 800833e:	4b2f      	ldr	r3, [pc, #188]	; (80083fc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008344:	4a2e      	ldr	r2, [pc, #184]	; (8008400 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8008346:	6013      	str	r3, [r2, #0]
		can2_last_error_code = can2_last_error_code & 0x0007;
 8008348:	4b2d      	ldr	r3, [pc, #180]	; (8008400 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	4a2b      	ldr	r2, [pc, #172]	; (8008400 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8008352:	6013      	str	r3, [r2, #0]
		FDCAN_ErrorCountersTypeDef ErrorCounters;
		uint8_t error_counter1;
		uint8_t error_counter2;
		uint8_t error_counter3;
		uint8_t error_counter4;
		HAL_FDCAN_GetErrorCounters(&hfdcan1, &ErrorCounters);
 8008354:	f107 030c 	add.w	r3, r7, #12
 8008358:	4619      	mov	r1, r3
 800835a:	4826      	ldr	r0, [pc, #152]	; (80083f4 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800835c:	f7f9 fa28 	bl	80017b0 <HAL_FDCAN_GetErrorCounters>
		error_counter1 = (uint8_t)ErrorCounters.RxErrorCnt;
 8008360:	693b      	ldr	r3, [r7, #16]
 8008362:	77fb      	strb	r3, [r7, #31]
		error_counter2 = (uint8_t)ErrorCounters.TxErrorCnt; 
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	77bb      	strb	r3, [r7, #30]
		
		can1_error_counter += error_counter1;
 8008368:	7ffa      	ldrb	r2, [r7, #31]
 800836a:	4b26      	ldr	r3, [pc, #152]	; (8008404 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	4413      	add	r3, r2
 8008370:	4a24      	ldr	r2, [pc, #144]	; (8008404 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8008372:	6013      	str	r3, [r2, #0]
		can1_error_counter += error_counter2;
 8008374:	7fba      	ldrb	r2, [r7, #30]
 8008376:	4b23      	ldr	r3, [pc, #140]	; (8008404 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4413      	add	r3, r2
 800837c:	4a21      	ldr	r2, [pc, #132]	; (8008404 <HAL_TIM_PeriodElapsedCallback+0x184>)
 800837e:	6013      	str	r3, [r2, #0]
		
		HAL_FDCAN_GetErrorCounters(&hfdcan2, &ErrorCounters);
 8008380:	f107 030c 	add.w	r3, r7, #12
 8008384:	4619      	mov	r1, r3
 8008386:	481d      	ldr	r0, [pc, #116]	; (80083fc <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8008388:	f7f9 fa12 	bl	80017b0 <HAL_FDCAN_GetErrorCounters>
		error_counter3 = (uint8_t)ErrorCounters.RxErrorCnt;
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	777b      	strb	r3, [r7, #29]
		error_counter4 = (uint8_t)ErrorCounters.TxErrorCnt;
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	773b      	strb	r3, [r7, #28]
		
		can2_error_counter += error_counter3;
 8008394:	7f7a      	ldrb	r2, [r7, #29]
 8008396:	4b1c      	ldr	r3, [pc, #112]	; (8008408 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4413      	add	r3, r2
 800839c:	4a1a      	ldr	r2, [pc, #104]	; (8008408 <HAL_TIM_PeriodElapsedCallback+0x188>)
 800839e:	6013      	str	r3, [r2, #0]
		can2_error_counter += error_counter4;
 80083a0:	7f3a      	ldrb	r2, [r7, #28]
 80083a2:	4b19      	ldr	r3, [pc, #100]	; (8008408 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4413      	add	r3, r2
 80083a8:	4a17      	ldr	r2, [pc, #92]	; (8008408 <HAL_TIM_PeriodElapsedCallback+0x188>)
 80083aa:	6013      	str	r3, [r2, #0]
		//HAL_GPIO_TogglePin(GPIOA, ES_Pin);
	}
}
 80083ac:	bf00      	nop
 80083ae:	3728      	adds	r7, #40	; 0x28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}
 80083b4:	40000c00 	.word	0x40000c00
 80083b8:	24000670 	.word	0x24000670
 80083bc:	24000678 	.word	0x24000678
 80083c0:	2400067a 	.word	0x2400067a
 80083c4:	240005c0 	.word	0x240005c0
 80083c8:	240004e8 	.word	0x240004e8
 80083cc:	240005c8 	.word	0x240005c8
 80083d0:	2400050c 	.word	0x2400050c
 80083d4:	240005d0 	.word	0x240005d0
 80083d8:	24000530 	.word	0x24000530
 80083dc:	240005d8 	.word	0x240005d8
 80083e0:	24000554 	.word	0x24000554
 80083e4:	240005e0 	.word	0x240005e0
 80083e8:	24000578 	.word	0x24000578
 80083ec:	240005e8 	.word	0x240005e8
 80083f0:	2400059c 	.word	0x2400059c
 80083f4:	240001a8 	.word	0x240001a8
 80083f8:	24000658 	.word	0x24000658
 80083fc:	24000248 	.word	0x24000248
 8008400:	2400065c 	.word	0x2400065c
 8008404:	24000650 	.word	0x24000650
 8008408:	24000654 	.word	0x24000654

0800840c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b084      	sub	sp, #16
 8008410:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8008412:	463b      	mov	r3, r7
 8008414:	2200      	movs	r2, #0
 8008416:	601a      	str	r2, [r3, #0]
 8008418:	605a      	str	r2, [r3, #4]
 800841a:	609a      	str	r2, [r3, #8]
 800841c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800841e:	f7f8 fd79 	bl	8000f14 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8008422:	2301      	movs	r3, #1
 8008424:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8008426:	2300      	movs	r3, #0
 8008428:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 800842a:	2300      	movs	r3, #0
 800842c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800842e:	231f      	movs	r3, #31
 8008430:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8008432:	2387      	movs	r3, #135	; 0x87
 8008434:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8008436:	2300      	movs	r3, #0
 8008438:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 800843a:	2300      	movs	r3, #0
 800843c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800843e:	2301      	movs	r3, #1
 8008440:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8008442:	2301      	movs	r3, #1
 8008444:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8008446:	2300      	movs	r3, #0
 8008448:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800844a:	2300      	movs	r3, #0
 800844c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800844e:	463b      	mov	r3, r7
 8008450:	4618      	mov	r0, r3
 8008452:	f7f8 fd97 	bl	8000f84 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8008456:	2004      	movs	r0, #4
 8008458:	f7f8 fd74 	bl	8000f44 <HAL_MPU_Enable>

}
 800845c:	bf00      	nop
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}

08008464 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008464:	b480      	push	{r7}
 8008466:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8008468:	b672      	cpsid	i
}
 800846a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800846c:	e7fe      	b.n	800846c <Error_Handler+0x8>
	...

08008470 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008476:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <HAL_MspInit+0x30>)
 8008478:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800847c:	4a08      	ldr	r2, [pc, #32]	; (80084a0 <HAL_MspInit+0x30>)
 800847e:	f043 0302 	orr.w	r3, r3, #2
 8008482:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008486:	4b06      	ldr	r3, [pc, #24]	; (80084a0 <HAL_MspInit+0x30>)
 8008488:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	607b      	str	r3, [r7, #4]
 8008492:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008494:	bf00      	nop
 8008496:	370c      	adds	r7, #12
 8008498:	46bd      	mov	sp, r7
 800849a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849e:	4770      	bx	lr
 80084a0:	58024400 	.word	0x58024400

080084a4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b0bc      	sub	sp, #240	; 0xf0
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80084ac:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80084b0:	2200      	movs	r2, #0
 80084b2:	601a      	str	r2, [r3, #0]
 80084b4:	605a      	str	r2, [r3, #4]
 80084b6:	609a      	str	r2, [r3, #8]
 80084b8:	60da      	str	r2, [r3, #12]
 80084ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80084bc:	f107 0318 	add.w	r3, r7, #24
 80084c0:	22c0      	movs	r2, #192	; 0xc0
 80084c2:	2100      	movs	r1, #0
 80084c4:	4618      	mov	r0, r3
 80084c6:	f000 faf9 	bl	8008abc <memset>
  if(hfdcan->Instance==FDCAN1)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a57      	ldr	r2, [pc, #348]	; (800862c <HAL_FDCAN_MspInit+0x188>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d150      	bne.n	8008576 <HAL_FDCAN_MspInit+0xd2>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80084d4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80084d8:	f04f 0300 	mov.w	r3, #0
 80084dc:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80084e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80084e8:	f107 0318 	add.w	r3, r7, #24
 80084ec:	4618      	mov	r0, r3
 80084ee:	f7fa fd73 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80084f8:	f7ff ffb4 	bl	8008464 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80084fc:	4b4c      	ldr	r3, [pc, #304]	; (8008630 <HAL_FDCAN_MspInit+0x18c>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	3301      	adds	r3, #1
 8008502:	4a4b      	ldr	r2, [pc, #300]	; (8008630 <HAL_FDCAN_MspInit+0x18c>)
 8008504:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8008506:	4b4a      	ldr	r3, [pc, #296]	; (8008630 <HAL_FDCAN_MspInit+0x18c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b01      	cmp	r3, #1
 800850c:	d10e      	bne.n	800852c <HAL_FDCAN_MspInit+0x88>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800850e:	4b49      	ldr	r3, [pc, #292]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 8008510:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008514:	4a47      	ldr	r2, [pc, #284]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 8008516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800851a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800851e:	4b45      	ldr	r3, [pc, #276]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 8008520:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008528:	617b      	str	r3, [r7, #20]
 800852a:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800852c:	4b41      	ldr	r3, [pc, #260]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 800852e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008532:	4a40      	ldr	r2, [pc, #256]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 8008534:	f043 0308 	orr.w	r3, r3, #8
 8008538:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800853c:	4b3d      	ldr	r3, [pc, #244]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 800853e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008542:	f003 0308 	and.w	r3, r3, #8
 8008546:	613b      	str	r3, [r7, #16]
 8008548:	693b      	ldr	r3, [r7, #16]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800854a:	2303      	movs	r3, #3
 800854c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008550:	2302      	movs	r3, #2
 8008552:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008556:	2300      	movs	r3, #0
 8008558:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800855c:	2300      	movs	r3, #0
 800855e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8008562:	2309      	movs	r3, #9
 8008564:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008568:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800856c:	4619      	mov	r1, r3
 800856e:	4832      	ldr	r0, [pc, #200]	; (8008638 <HAL_FDCAN_MspInit+0x194>)
 8008570:	f7f9 fb48 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8008574:	e055      	b.n	8008622 <HAL_FDCAN_MspInit+0x17e>
  else if(hfdcan->Instance==FDCAN2)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a30      	ldr	r2, [pc, #192]	; (800863c <HAL_FDCAN_MspInit+0x198>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d150      	bne.n	8008622 <HAL_FDCAN_MspInit+0x17e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8008580:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008584:	f04f 0300 	mov.w	r3, #0
 8008588:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 800858c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008594:	f107 0318 	add.w	r3, r7, #24
 8008598:	4618      	mov	r0, r3
 800859a:	f7fa fd1d 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <HAL_FDCAN_MspInit+0x104>
      Error_Handler();
 80085a4:	f7ff ff5e 	bl	8008464 <Error_Handler>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80085a8:	4b21      	ldr	r3, [pc, #132]	; (8008630 <HAL_FDCAN_MspInit+0x18c>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	3301      	adds	r3, #1
 80085ae:	4a20      	ldr	r2, [pc, #128]	; (8008630 <HAL_FDCAN_MspInit+0x18c>)
 80085b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80085b2:	4b1f      	ldr	r3, [pc, #124]	; (8008630 <HAL_FDCAN_MspInit+0x18c>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b01      	cmp	r3, #1
 80085b8:	d10e      	bne.n	80085d8 <HAL_FDCAN_MspInit+0x134>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80085ba:	4b1e      	ldr	r3, [pc, #120]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 80085bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80085c0:	4a1c      	ldr	r2, [pc, #112]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 80085c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085c6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80085ca:	4b1a      	ldr	r3, [pc, #104]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 80085cc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80085d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085d4:	60fb      	str	r3, [r7, #12]
 80085d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085d8:	4b16      	ldr	r3, [pc, #88]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 80085da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085de:	4a15      	ldr	r2, [pc, #84]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 80085e0:	f043 0302 	orr.w	r3, r3, #2
 80085e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085e8:	4b12      	ldr	r3, [pc, #72]	; (8008634 <HAL_FDCAN_MspInit+0x190>)
 80085ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085ee:	f003 0302 	and.w	r3, r3, #2
 80085f2:	60bb      	str	r3, [r7, #8]
 80085f4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80085f6:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80085fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085fe:	2302      	movs	r3, #2
 8008600:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008604:	2300      	movs	r3, #0
 8008606:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800860a:	2300      	movs	r3, #0
 800860c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8008610:	2309      	movs	r3, #9
 8008612:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008616:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800861a:	4619      	mov	r1, r3
 800861c:	4808      	ldr	r0, [pc, #32]	; (8008640 <HAL_FDCAN_MspInit+0x19c>)
 800861e:	f7f9 faf1 	bl	8001c04 <HAL_GPIO_Init>
}
 8008622:	bf00      	nop
 8008624:	37f0      	adds	r7, #240	; 0xf0
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	4000a000 	.word	0x4000a000
 8008630:	24000750 	.word	0x24000750
 8008634:	58024400 	.word	0x58024400
 8008638:	58020c00 	.word	0x58020c00
 800863c:	4000a400 	.word	0x4000a400
 8008640:	58020400 	.word	0x58020400

08008644 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b0ba      	sub	sp, #232	; 0xe8
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800864c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008650:	2200      	movs	r2, #0
 8008652:	601a      	str	r2, [r3, #0]
 8008654:	605a      	str	r2, [r3, #4]
 8008656:	609a      	str	r2, [r3, #8]
 8008658:	60da      	str	r2, [r3, #12]
 800865a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800865c:	f107 0310 	add.w	r3, r7, #16
 8008660:	22c0      	movs	r2, #192	; 0xc0
 8008662:	2100      	movs	r1, #0
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fa29 	bl	8008abc <memset>
  if(hspi->Instance==SPI1)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a26      	ldr	r2, [pc, #152]	; (8008708 <HAL_SPI_MspInit+0xc4>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d144      	bne.n	80086fe <HAL_SPI_MspInit+0xba>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI1;
 8008674:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8008678:	f04f 0300 	mov.w	r3, #0
 800867c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8008680:	2300      	movs	r3, #0
 8008682:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008684:	f107 0310 	add.w	r3, r7, #16
 8008688:	4618      	mov	r0, r3
 800868a:	f7fa fca5 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d001      	beq.n	8008698 <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8008694:	f7ff fee6 	bl	8008464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8008698:	4b1c      	ldr	r3, [pc, #112]	; (800870c <HAL_SPI_MspInit+0xc8>)
 800869a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800869e:	4a1b      	ldr	r2, [pc, #108]	; (800870c <HAL_SPI_MspInit+0xc8>)
 80086a0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086a4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80086a8:	4b18      	ldr	r3, [pc, #96]	; (800870c <HAL_SPI_MspInit+0xc8>)
 80086aa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086ae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086b2:	60fb      	str	r3, [r7, #12]
 80086b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80086b6:	4b15      	ldr	r3, [pc, #84]	; (800870c <HAL_SPI_MspInit+0xc8>)
 80086b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086bc:	4a13      	ldr	r2, [pc, #76]	; (800870c <HAL_SPI_MspInit+0xc8>)
 80086be:	f043 0301 	orr.w	r3, r3, #1
 80086c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80086c6:	4b11      	ldr	r3, [pc, #68]	; (800870c <HAL_SPI_MspInit+0xc8>)
 80086c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	60bb      	str	r3, [r7, #8]
 80086d2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80086d4:	23e0      	movs	r3, #224	; 0xe0
 80086d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086da:	2302      	movs	r3, #2
 80086dc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80086e6:	2300      	movs	r3, #0
 80086e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80086ec:	2305      	movs	r3, #5
 80086ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086f2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80086f6:	4619      	mov	r1, r3
 80086f8:	4805      	ldr	r0, [pc, #20]	; (8008710 <HAL_SPI_MspInit+0xcc>)
 80086fa:	f7f9 fa83 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80086fe:	bf00      	nop
 8008700:	37e8      	adds	r7, #232	; 0xe8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	40013000 	.word	0x40013000
 800870c:	58024400 	.word	0x58024400
 8008710:	58020000 	.word	0x58020000

08008714 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008714:	b580      	push	{r7, lr}
 8008716:	b086      	sub	sp, #24
 8008718:	af00      	add	r7, sp, #0
 800871a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008724:	d10f      	bne.n	8008746 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008726:	4b22      	ldr	r3, [pc, #136]	; (80087b0 <HAL_TIM_Base_MspInit+0x9c>)
 8008728:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800872c:	4a20      	ldr	r2, [pc, #128]	; (80087b0 <HAL_TIM_Base_MspInit+0x9c>)
 800872e:	f043 0301 	orr.w	r3, r3, #1
 8008732:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008736:	4b1e      	ldr	r3, [pc, #120]	; (80087b0 <HAL_TIM_Base_MspInit+0x9c>)
 8008738:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800873c:	f003 0301 	and.w	r3, r3, #1
 8008740:	617b      	str	r3, [r7, #20]
 8008742:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8008744:	e030      	b.n	80087a8 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM4)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a1a      	ldr	r2, [pc, #104]	; (80087b4 <HAL_TIM_Base_MspInit+0xa0>)
 800874c:	4293      	cmp	r3, r2
 800874e:	d10f      	bne.n	8008770 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008750:	4b17      	ldr	r3, [pc, #92]	; (80087b0 <HAL_TIM_Base_MspInit+0x9c>)
 8008752:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008756:	4a16      	ldr	r2, [pc, #88]	; (80087b0 <HAL_TIM_Base_MspInit+0x9c>)
 8008758:	f043 0304 	orr.w	r3, r3, #4
 800875c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008760:	4b13      	ldr	r3, [pc, #76]	; (80087b0 <HAL_TIM_Base_MspInit+0x9c>)
 8008762:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008766:	f003 0304 	and.w	r3, r3, #4
 800876a:	613b      	str	r3, [r7, #16]
 800876c:	693b      	ldr	r3, [r7, #16]
}
 800876e:	e01b      	b.n	80087a8 <HAL_TIM_Base_MspInit+0x94>
  else if(htim_base->Instance==TIM5)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a10      	ldr	r2, [pc, #64]	; (80087b8 <HAL_TIM_Base_MspInit+0xa4>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d116      	bne.n	80087a8 <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800877a:	4b0d      	ldr	r3, [pc, #52]	; (80087b0 <HAL_TIM_Base_MspInit+0x9c>)
 800877c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008780:	4a0b      	ldr	r2, [pc, #44]	; (80087b0 <HAL_TIM_Base_MspInit+0x9c>)
 8008782:	f043 0308 	orr.w	r3, r3, #8
 8008786:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800878a:	4b09      	ldr	r3, [pc, #36]	; (80087b0 <HAL_TIM_Base_MspInit+0x9c>)
 800878c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	60fb      	str	r3, [r7, #12]
 8008796:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8008798:	2200      	movs	r2, #0
 800879a:	2100      	movs	r1, #0
 800879c:	2032      	movs	r0, #50	; 0x32
 800879e:	f7f8 fb84 	bl	8000eaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80087a2:	2032      	movs	r0, #50	; 0x32
 80087a4:	f7f8 fb9b 	bl	8000ede <HAL_NVIC_EnableIRQ>
}
 80087a8:	bf00      	nop
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	58024400 	.word	0x58024400
 80087b4:	40000800 	.word	0x40000800
 80087b8:	40000c00 	.word	0x40000c00

080087bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b0ba      	sub	sp, #232	; 0xe8
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80087c4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80087c8:	2200      	movs	r2, #0
 80087ca:	601a      	str	r2, [r3, #0]
 80087cc:	605a      	str	r2, [r3, #4]
 80087ce:	609a      	str	r2, [r3, #8]
 80087d0:	60da      	str	r2, [r3, #12]
 80087d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80087d4:	f107 0310 	add.w	r3, r7, #16
 80087d8:	22c0      	movs	r2, #192	; 0xc0
 80087da:	2100      	movs	r1, #0
 80087dc:	4618      	mov	r0, r3
 80087de:	f000 f96d 	bl	8008abc <memset>
  if(huart->Instance==USART2)
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a26      	ldr	r2, [pc, #152]	; (8008880 <HAL_UART_MspInit+0xc4>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d145      	bne.n	8008878 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80087ec:	f04f 0202 	mov.w	r2, #2
 80087f0:	f04f 0300 	mov.w	r3, #0
 80087f4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80087f8:	2300      	movs	r3, #0
 80087fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80087fe:	f107 0310 	add.w	r3, r7, #16
 8008802:	4618      	mov	r0, r3
 8008804:	f7fa fbe8 	bl	8002fd8 <HAL_RCCEx_PeriphCLKConfig>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d001      	beq.n	8008812 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800880e:	f7ff fe29 	bl	8008464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8008812:	4b1c      	ldr	r3, [pc, #112]	; (8008884 <HAL_UART_MspInit+0xc8>)
 8008814:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008818:	4a1a      	ldr	r2, [pc, #104]	; (8008884 <HAL_UART_MspInit+0xc8>)
 800881a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800881e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008822:	4b18      	ldr	r3, [pc, #96]	; (8008884 <HAL_UART_MspInit+0xc8>)
 8008824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008828:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882c:	60fb      	str	r3, [r7, #12]
 800882e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008830:	4b14      	ldr	r3, [pc, #80]	; (8008884 <HAL_UART_MspInit+0xc8>)
 8008832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008836:	4a13      	ldr	r2, [pc, #76]	; (8008884 <HAL_UART_MspInit+0xc8>)
 8008838:	f043 0301 	orr.w	r3, r3, #1
 800883c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008840:	4b10      	ldr	r3, [pc, #64]	; (8008884 <HAL_UART_MspInit+0xc8>)
 8008842:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008846:	f003 0301 	and.w	r3, r3, #1
 800884a:	60bb      	str	r3, [r7, #8]
 800884c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800884e:	230c      	movs	r3, #12
 8008850:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008854:	2302      	movs	r3, #2
 8008856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800885a:	2300      	movs	r3, #0
 800885c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008860:	2300      	movs	r3, #0
 8008862:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008866:	2307      	movs	r3, #7
 8008868:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800886c:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008870:	4619      	mov	r1, r3
 8008872:	4805      	ldr	r0, [pc, #20]	; (8008888 <HAL_UART_MspInit+0xcc>)
 8008874:	f7f9 f9c6 	bl	8001c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8008878:	bf00      	nop
 800887a:	37e8      	adds	r7, #232	; 0xe8
 800887c:	46bd      	mov	sp, r7
 800887e:	bd80      	pop	{r7, pc}
 8008880:	40004400 	.word	0x40004400
 8008884:	58024400 	.word	0x58024400
 8008888:	58020000 	.word	0x58020000

0800888c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800888c:	b480      	push	{r7}
 800888e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008890:	e7fe      	b.n	8008890 <NMI_Handler+0x4>

08008892 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008892:	b480      	push	{r7}
 8008894:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008896:	e7fe      	b.n	8008896 <HardFault_Handler+0x4>

08008898 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008898:	b480      	push	{r7}
 800889a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800889c:	e7fe      	b.n	800889c <MemManage_Handler+0x4>

0800889e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800889e:	b480      	push	{r7}
 80088a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80088a2:	e7fe      	b.n	80088a2 <BusFault_Handler+0x4>

080088a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80088a4:	b480      	push	{r7}
 80088a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80088a8:	e7fe      	b.n	80088a8 <UsageFault_Handler+0x4>

080088aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80088aa:	b480      	push	{r7}
 80088ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80088ae:	bf00      	nop
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80088b8:	b480      	push	{r7}
 80088ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80088bc:	bf00      	nop
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80088c6:	b480      	push	{r7}
 80088c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80088ca:	bf00      	nop
 80088cc:	46bd      	mov	sp, r7
 80088ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d2:	4770      	bx	lr

080088d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80088d8:	f7f8 f9bc 	bl	8000c54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80088dc:	bf00      	nop
 80088de:	bd80      	pop	{r7, pc}

080088e0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80088e4:	4802      	ldr	r0, [pc, #8]	; (80088f0 <TIM5_IRQHandler+0x10>)
 80088e6:	f7fc fc21 	bl	800512c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80088ea:	bf00      	nop
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	24000408 	.word	0x24000408

080088f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80088f4:	b480      	push	{r7}
 80088f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80088f8:	4b37      	ldr	r3, [pc, #220]	; (80089d8 <SystemInit+0xe4>)
 80088fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088fe:	4a36      	ldr	r2, [pc, #216]	; (80089d8 <SystemInit+0xe4>)
 8008900:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008904:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008908:	4b34      	ldr	r3, [pc, #208]	; (80089dc <SystemInit+0xe8>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f003 030f 	and.w	r3, r3, #15
 8008910:	2b06      	cmp	r3, #6
 8008912:	d807      	bhi.n	8008924 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008914:	4b31      	ldr	r3, [pc, #196]	; (80089dc <SystemInit+0xe8>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f023 030f 	bic.w	r3, r3, #15
 800891c:	4a2f      	ldr	r2, [pc, #188]	; (80089dc <SystemInit+0xe8>)
 800891e:	f043 0307 	orr.w	r3, r3, #7
 8008922:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008924:	4b2e      	ldr	r3, [pc, #184]	; (80089e0 <SystemInit+0xec>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a2d      	ldr	r2, [pc, #180]	; (80089e0 <SystemInit+0xec>)
 800892a:	f043 0301 	orr.w	r3, r3, #1
 800892e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008930:	4b2b      	ldr	r3, [pc, #172]	; (80089e0 <SystemInit+0xec>)
 8008932:	2200      	movs	r2, #0
 8008934:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008936:	4b2a      	ldr	r3, [pc, #168]	; (80089e0 <SystemInit+0xec>)
 8008938:	681a      	ldr	r2, [r3, #0]
 800893a:	4929      	ldr	r1, [pc, #164]	; (80089e0 <SystemInit+0xec>)
 800893c:	4b29      	ldr	r3, [pc, #164]	; (80089e4 <SystemInit+0xf0>)
 800893e:	4013      	ands	r3, r2
 8008940:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008942:	4b26      	ldr	r3, [pc, #152]	; (80089dc <SystemInit+0xe8>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f003 0308 	and.w	r3, r3, #8
 800894a:	2b00      	cmp	r3, #0
 800894c:	d007      	beq.n	800895e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800894e:	4b23      	ldr	r3, [pc, #140]	; (80089dc <SystemInit+0xe8>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f023 030f 	bic.w	r3, r3, #15
 8008956:	4a21      	ldr	r2, [pc, #132]	; (80089dc <SystemInit+0xe8>)
 8008958:	f043 0307 	orr.w	r3, r3, #7
 800895c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800895e:	4b20      	ldr	r3, [pc, #128]	; (80089e0 <SystemInit+0xec>)
 8008960:	2200      	movs	r2, #0
 8008962:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008964:	4b1e      	ldr	r3, [pc, #120]	; (80089e0 <SystemInit+0xec>)
 8008966:	2200      	movs	r2, #0
 8008968:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800896a:	4b1d      	ldr	r3, [pc, #116]	; (80089e0 <SystemInit+0xec>)
 800896c:	2200      	movs	r2, #0
 800896e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008970:	4b1b      	ldr	r3, [pc, #108]	; (80089e0 <SystemInit+0xec>)
 8008972:	4a1d      	ldr	r2, [pc, #116]	; (80089e8 <SystemInit+0xf4>)
 8008974:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008976:	4b1a      	ldr	r3, [pc, #104]	; (80089e0 <SystemInit+0xec>)
 8008978:	4a1c      	ldr	r2, [pc, #112]	; (80089ec <SystemInit+0xf8>)
 800897a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800897c:	4b18      	ldr	r3, [pc, #96]	; (80089e0 <SystemInit+0xec>)
 800897e:	4a1c      	ldr	r2, [pc, #112]	; (80089f0 <SystemInit+0xfc>)
 8008980:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008982:	4b17      	ldr	r3, [pc, #92]	; (80089e0 <SystemInit+0xec>)
 8008984:	2200      	movs	r2, #0
 8008986:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008988:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <SystemInit+0xec>)
 800898a:	4a19      	ldr	r2, [pc, #100]	; (80089f0 <SystemInit+0xfc>)
 800898c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800898e:	4b14      	ldr	r3, [pc, #80]	; (80089e0 <SystemInit+0xec>)
 8008990:	2200      	movs	r2, #0
 8008992:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008994:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <SystemInit+0xec>)
 8008996:	4a16      	ldr	r2, [pc, #88]	; (80089f0 <SystemInit+0xfc>)
 8008998:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800899a:	4b11      	ldr	r3, [pc, #68]	; (80089e0 <SystemInit+0xec>)
 800899c:	2200      	movs	r2, #0
 800899e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80089a0:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <SystemInit+0xec>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a0e      	ldr	r2, [pc, #56]	; (80089e0 <SystemInit+0xec>)
 80089a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80089aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80089ac:	4b0c      	ldr	r3, [pc, #48]	; (80089e0 <SystemInit+0xec>)
 80089ae:	2200      	movs	r2, #0
 80089b0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80089b2:	4b10      	ldr	r3, [pc, #64]	; (80089f4 <SystemInit+0x100>)
 80089b4:	681a      	ldr	r2, [r3, #0]
 80089b6:	4b10      	ldr	r3, [pc, #64]	; (80089f8 <SystemInit+0x104>)
 80089b8:	4013      	ands	r3, r2
 80089ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089be:	d202      	bcs.n	80089c6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80089c0:	4b0e      	ldr	r3, [pc, #56]	; (80089fc <SystemInit+0x108>)
 80089c2:	2201      	movs	r2, #1
 80089c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80089c6:	4b0e      	ldr	r3, [pc, #56]	; (8008a00 <SystemInit+0x10c>)
 80089c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80089cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80089ce:	bf00      	nop
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	e000ed00 	.word	0xe000ed00
 80089dc:	52002000 	.word	0x52002000
 80089e0:	58024400 	.word	0x58024400
 80089e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80089e8:	02020200 	.word	0x02020200
 80089ec:	01ff0000 	.word	0x01ff0000
 80089f0:	01010280 	.word	0x01010280
 80089f4:	5c001000 	.word	0x5c001000
 80089f8:	ffff0000 	.word	0xffff0000
 80089fc:	51008108 	.word	0x51008108
 8008a00:	52004000 	.word	0x52004000

08008a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008a3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008a08:	f7ff ff74 	bl	80088f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008a0c:	480c      	ldr	r0, [pc, #48]	; (8008a40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008a0e:	490d      	ldr	r1, [pc, #52]	; (8008a44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008a10:	4a0d      	ldr	r2, [pc, #52]	; (8008a48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008a12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008a14:	e002      	b.n	8008a1c <LoopCopyDataInit>

08008a16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008a16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008a18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008a1a:	3304      	adds	r3, #4

08008a1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008a1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008a1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008a20:	d3f9      	bcc.n	8008a16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008a22:	4a0a      	ldr	r2, [pc, #40]	; (8008a4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008a24:	4c0a      	ldr	r4, [pc, #40]	; (8008a50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008a26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008a28:	e001      	b.n	8008a2e <LoopFillZerobss>

08008a2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008a2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008a2c:	3204      	adds	r2, #4

08008a2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008a2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008a30:	d3fb      	bcc.n	8008a2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008a32:	f000 f811 	bl	8008a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008a36:	f7fe ff81 	bl	800793c <main>
  bx  lr
 8008a3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008a3c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8008a40:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008a44:	2400007c 	.word	0x2400007c
  ldr r2, =_sidata
 8008a48:	08009958 	.word	0x08009958
  ldr r2, =_sbss
 8008a4c:	24000080 	.word	0x24000080
  ldr r4, =_ebss
 8008a50:	24000754 	.word	0x24000754

08008a54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008a54:	e7fe      	b.n	8008a54 <ADC3_IRQHandler>
	...

08008a58 <__libc_init_array>:
 8008a58:	b570      	push	{r4, r5, r6, lr}
 8008a5a:	4d0d      	ldr	r5, [pc, #52]	; (8008a90 <__libc_init_array+0x38>)
 8008a5c:	4c0d      	ldr	r4, [pc, #52]	; (8008a94 <__libc_init_array+0x3c>)
 8008a5e:	1b64      	subs	r4, r4, r5
 8008a60:	10a4      	asrs	r4, r4, #2
 8008a62:	2600      	movs	r6, #0
 8008a64:	42a6      	cmp	r6, r4
 8008a66:	d109      	bne.n	8008a7c <__libc_init_array+0x24>
 8008a68:	4d0b      	ldr	r5, [pc, #44]	; (8008a98 <__libc_init_array+0x40>)
 8008a6a:	4c0c      	ldr	r4, [pc, #48]	; (8008a9c <__libc_init_array+0x44>)
 8008a6c:	f000 fe26 	bl	80096bc <_init>
 8008a70:	1b64      	subs	r4, r4, r5
 8008a72:	10a4      	asrs	r4, r4, #2
 8008a74:	2600      	movs	r6, #0
 8008a76:	42a6      	cmp	r6, r4
 8008a78:	d105      	bne.n	8008a86 <__libc_init_array+0x2e>
 8008a7a:	bd70      	pop	{r4, r5, r6, pc}
 8008a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a80:	4798      	blx	r3
 8008a82:	3601      	adds	r6, #1
 8008a84:	e7ee      	b.n	8008a64 <__libc_init_array+0xc>
 8008a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8008a8a:	4798      	blx	r3
 8008a8c:	3601      	adds	r6, #1
 8008a8e:	e7f2      	b.n	8008a76 <__libc_init_array+0x1e>
 8008a90:	08009950 	.word	0x08009950
 8008a94:	08009950 	.word	0x08009950
 8008a98:	08009950 	.word	0x08009950
 8008a9c:	08009954 	.word	0x08009954

08008aa0 <memcpy>:
 8008aa0:	440a      	add	r2, r1
 8008aa2:	4291      	cmp	r1, r2
 8008aa4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aa8:	d100      	bne.n	8008aac <memcpy+0xc>
 8008aaa:	4770      	bx	lr
 8008aac:	b510      	push	{r4, lr}
 8008aae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ab2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ab6:	4291      	cmp	r1, r2
 8008ab8:	d1f9      	bne.n	8008aae <memcpy+0xe>
 8008aba:	bd10      	pop	{r4, pc}

08008abc <memset>:
 8008abc:	4402      	add	r2, r0
 8008abe:	4603      	mov	r3, r0
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d100      	bne.n	8008ac6 <memset+0xa>
 8008ac4:	4770      	bx	lr
 8008ac6:	f803 1b01 	strb.w	r1, [r3], #1
 8008aca:	e7f9      	b.n	8008ac0 <memset+0x4>
 8008acc:	0000      	movs	r0, r0
	...

08008ad0 <sin>:
 8008ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ad2:	eeb0 7b40 	vmov.f64	d7, d0
 8008ad6:	ee17 3a90 	vmov	r3, s15
 8008ada:	4a21      	ldr	r2, [pc, #132]	; (8008b60 <sin+0x90>)
 8008adc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	dc07      	bgt.n	8008af4 <sin+0x24>
 8008ae4:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8008b58 <sin+0x88>
 8008ae8:	2000      	movs	r0, #0
 8008aea:	b005      	add	sp, #20
 8008aec:	f85d eb04 	ldr.w	lr, [sp], #4
 8008af0:	f000 bc82 	b.w	80093f8 <__kernel_sin>
 8008af4:	4a1b      	ldr	r2, [pc, #108]	; (8008b64 <sin+0x94>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	dd04      	ble.n	8008b04 <sin+0x34>
 8008afa:	ee30 0b40 	vsub.f64	d0, d0, d0
 8008afe:	b005      	add	sp, #20
 8008b00:	f85d fb04 	ldr.w	pc, [sp], #4
 8008b04:	4668      	mov	r0, sp
 8008b06:	f000 f82f 	bl	8008b68 <__ieee754_rem_pio2>
 8008b0a:	f000 0003 	and.w	r0, r0, #3
 8008b0e:	2801      	cmp	r0, #1
 8008b10:	d00a      	beq.n	8008b28 <sin+0x58>
 8008b12:	2802      	cmp	r0, #2
 8008b14:	d00f      	beq.n	8008b36 <sin+0x66>
 8008b16:	b9c0      	cbnz	r0, 8008b4a <sin+0x7a>
 8008b18:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b1c:	ed9d 0b00 	vldr	d0, [sp]
 8008b20:	2001      	movs	r0, #1
 8008b22:	f000 fc69 	bl	80093f8 <__kernel_sin>
 8008b26:	e7ea      	b.n	8008afe <sin+0x2e>
 8008b28:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b2c:	ed9d 0b00 	vldr	d0, [sp]
 8008b30:	f000 f95e 	bl	8008df0 <__kernel_cos>
 8008b34:	e7e3      	b.n	8008afe <sin+0x2e>
 8008b36:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b3a:	ed9d 0b00 	vldr	d0, [sp]
 8008b3e:	2001      	movs	r0, #1
 8008b40:	f000 fc5a 	bl	80093f8 <__kernel_sin>
 8008b44:	eeb1 0b40 	vneg.f64	d0, d0
 8008b48:	e7d9      	b.n	8008afe <sin+0x2e>
 8008b4a:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008b4e:	ed9d 0b00 	vldr	d0, [sp]
 8008b52:	f000 f94d 	bl	8008df0 <__kernel_cos>
 8008b56:	e7f5      	b.n	8008b44 <sin+0x74>
	...
 8008b60:	3fe921fb 	.word	0x3fe921fb
 8008b64:	7fefffff 	.word	0x7fefffff

08008b68 <__ieee754_rem_pio2>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	eeb0 7b40 	vmov.f64	d7, d0
 8008b6e:	ee17 5a90 	vmov	r5, s15
 8008b72:	4b99      	ldr	r3, [pc, #612]	; (8008dd8 <__ieee754_rem_pio2+0x270>)
 8008b74:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008b78:	429e      	cmp	r6, r3
 8008b7a:	b088      	sub	sp, #32
 8008b7c:	4604      	mov	r4, r0
 8008b7e:	dc07      	bgt.n	8008b90 <__ieee754_rem_pio2+0x28>
 8008b80:	2200      	movs	r2, #0
 8008b82:	2300      	movs	r3, #0
 8008b84:	ed84 0b00 	vstr	d0, [r4]
 8008b88:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008b8c:	2000      	movs	r0, #0
 8008b8e:	e01b      	b.n	8008bc8 <__ieee754_rem_pio2+0x60>
 8008b90:	4b92      	ldr	r3, [pc, #584]	; (8008ddc <__ieee754_rem_pio2+0x274>)
 8008b92:	429e      	cmp	r6, r3
 8008b94:	dc3b      	bgt.n	8008c0e <__ieee754_rem_pio2+0xa6>
 8008b96:	f5a3 231b 	sub.w	r3, r3, #634880	; 0x9b000
 8008b9a:	2d00      	cmp	r5, #0
 8008b9c:	ed9f 6b7e 	vldr	d6, [pc, #504]	; 8008d98 <__ieee754_rem_pio2+0x230>
 8008ba0:	f5a3 63f0 	sub.w	r3, r3, #1920	; 0x780
 8008ba4:	dd19      	ble.n	8008bda <__ieee754_rem_pio2+0x72>
 8008ba6:	ee30 7b46 	vsub.f64	d7, d0, d6
 8008baa:	429e      	cmp	r6, r3
 8008bac:	d00e      	beq.n	8008bcc <__ieee754_rem_pio2+0x64>
 8008bae:	ed9f 6b7c 	vldr	d6, [pc, #496]	; 8008da0 <__ieee754_rem_pio2+0x238>
 8008bb2:	ee37 5b46 	vsub.f64	d5, d7, d6
 8008bb6:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008bba:	ed84 5b00 	vstr	d5, [r4]
 8008bbe:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008bc2:	ed84 7b02 	vstr	d7, [r4, #8]
 8008bc6:	2001      	movs	r0, #1
 8008bc8:	b008      	add	sp, #32
 8008bca:	bd70      	pop	{r4, r5, r6, pc}
 8008bcc:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008da8 <__ieee754_rem_pio2+0x240>
 8008bd0:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008bd4:	ed9f 6b76 	vldr	d6, [pc, #472]	; 8008db0 <__ieee754_rem_pio2+0x248>
 8008bd8:	e7eb      	b.n	8008bb2 <__ieee754_rem_pio2+0x4a>
 8008bda:	429e      	cmp	r6, r3
 8008bdc:	ee30 7b06 	vadd.f64	d7, d0, d6
 8008be0:	d00e      	beq.n	8008c00 <__ieee754_rem_pio2+0x98>
 8008be2:	ed9f 6b6f 	vldr	d6, [pc, #444]	; 8008da0 <__ieee754_rem_pio2+0x238>
 8008be6:	ee37 5b06 	vadd.f64	d5, d7, d6
 8008bea:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008bee:	ed84 5b00 	vstr	d5, [r4]
 8008bf2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bfa:	ed84 7b02 	vstr	d7, [r4, #8]
 8008bfe:	e7e3      	b.n	8008bc8 <__ieee754_rem_pio2+0x60>
 8008c00:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008da8 <__ieee754_rem_pio2+0x240>
 8008c04:	ee37 7b06 	vadd.f64	d7, d7, d6
 8008c08:	ed9f 6b69 	vldr	d6, [pc, #420]	; 8008db0 <__ieee754_rem_pio2+0x248>
 8008c0c:	e7eb      	b.n	8008be6 <__ieee754_rem_pio2+0x7e>
 8008c0e:	4b74      	ldr	r3, [pc, #464]	; (8008de0 <__ieee754_rem_pio2+0x278>)
 8008c10:	429e      	cmp	r6, r3
 8008c12:	dc70      	bgt.n	8008cf6 <__ieee754_rem_pio2+0x18e>
 8008c14:	f000 fc48 	bl	80094a8 <fabs>
 8008c18:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008c1c:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8008db8 <__ieee754_rem_pio2+0x250>
 8008c20:	eea0 7b06 	vfma.f64	d7, d0, d6
 8008c24:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8008c28:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8008c2c:	ee17 0a90 	vmov	r0, s15
 8008c30:	eeb1 4b45 	vneg.f64	d4, d5
 8008c34:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008d98 <__ieee754_rem_pio2+0x230>
 8008c38:	eea5 0b47 	vfms.f64	d0, d5, d7
 8008c3c:	ed9f 7b58 	vldr	d7, [pc, #352]	; 8008da0 <__ieee754_rem_pio2+0x238>
 8008c40:	281f      	cmp	r0, #31
 8008c42:	ee25 7b07 	vmul.f64	d7, d5, d7
 8008c46:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008c4a:	dc08      	bgt.n	8008c5e <__ieee754_rem_pio2+0xf6>
 8008c4c:	4b65      	ldr	r3, [pc, #404]	; (8008de4 <__ieee754_rem_pio2+0x27c>)
 8008c4e:	1e42      	subs	r2, r0, #1
 8008c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c54:	42b3      	cmp	r3, r6
 8008c56:	d002      	beq.n	8008c5e <__ieee754_rem_pio2+0xf6>
 8008c58:	ed84 6b00 	vstr	d6, [r4]
 8008c5c:	e026      	b.n	8008cac <__ieee754_rem_pio2+0x144>
 8008c5e:	ee16 3a90 	vmov	r3, s13
 8008c62:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008c66:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 8008c6a:	2b10      	cmp	r3, #16
 8008c6c:	ea4f 5226 	mov.w	r2, r6, asr #20
 8008c70:	ddf2      	ble.n	8008c58 <__ieee754_rem_pio2+0xf0>
 8008c72:	eeb0 6b40 	vmov.f64	d6, d0
 8008c76:	ed9f 7b4c 	vldr	d7, [pc, #304]	; 8008da8 <__ieee754_rem_pio2+0x240>
 8008c7a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 8008db0 <__ieee754_rem_pio2+0x248>
 8008c7e:	eea4 6b07 	vfma.f64	d6, d4, d7
 8008c82:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008c86:	eea4 0b07 	vfma.f64	d0, d4, d7
 8008c8a:	eeb0 7b40 	vmov.f64	d7, d0
 8008c8e:	ee95 7b03 	vfnms.f64	d7, d5, d3
 8008c92:	ee36 3b47 	vsub.f64	d3, d6, d7
 8008c96:	ee13 3a90 	vmov	r3, s7
 8008c9a:	f3c3 530a 	ubfx	r3, r3, #20, #11
 8008c9e:	1ad3      	subs	r3, r2, r3
 8008ca0:	2b31      	cmp	r3, #49	; 0x31
 8008ca2:	dc17      	bgt.n	8008cd4 <__ieee754_rem_pio2+0x16c>
 8008ca4:	eeb0 0b46 	vmov.f64	d0, d6
 8008ca8:	ed84 3b00 	vstr	d3, [r4]
 8008cac:	ed94 6b00 	vldr	d6, [r4]
 8008cb0:	2d00      	cmp	r5, #0
 8008cb2:	ee30 0b46 	vsub.f64	d0, d0, d6
 8008cb6:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008cba:	ed84 0b02 	vstr	d0, [r4, #8]
 8008cbe:	da83      	bge.n	8008bc8 <__ieee754_rem_pio2+0x60>
 8008cc0:	eeb1 6b46 	vneg.f64	d6, d6
 8008cc4:	eeb1 0b40 	vneg.f64	d0, d0
 8008cc8:	ed84 6b00 	vstr	d6, [r4]
 8008ccc:	ed84 0b02 	vstr	d0, [r4, #8]
 8008cd0:	4240      	negs	r0, r0
 8008cd2:	e779      	b.n	8008bc8 <__ieee754_rem_pio2+0x60>
 8008cd4:	ed9f 3b3a 	vldr	d3, [pc, #232]	; 8008dc0 <__ieee754_rem_pio2+0x258>
 8008cd8:	eeb0 0b46 	vmov.f64	d0, d6
 8008cdc:	eea4 0b03 	vfma.f64	d0, d4, d3
 8008ce0:	ee36 7b40 	vsub.f64	d7, d6, d0
 8008ce4:	ed9f 6b38 	vldr	d6, [pc, #224]	; 8008dc8 <__ieee754_rem_pio2+0x260>
 8008ce8:	eea4 7b03 	vfma.f64	d7, d4, d3
 8008cec:	ee95 7b06 	vfnms.f64	d7, d5, d6
 8008cf0:	ee30 6b47 	vsub.f64	d6, d0, d7
 8008cf4:	e7b0      	b.n	8008c58 <__ieee754_rem_pio2+0xf0>
 8008cf6:	4b3c      	ldr	r3, [pc, #240]	; (8008de8 <__ieee754_rem_pio2+0x280>)
 8008cf8:	429e      	cmp	r6, r3
 8008cfa:	dd06      	ble.n	8008d0a <__ieee754_rem_pio2+0x1a2>
 8008cfc:	ee30 7b40 	vsub.f64	d7, d0, d0
 8008d00:	ed80 7b02 	vstr	d7, [r0, #8]
 8008d04:	ed80 7b00 	vstr	d7, [r0]
 8008d08:	e740      	b.n	8008b8c <__ieee754_rem_pio2+0x24>
 8008d0a:	1532      	asrs	r2, r6, #20
 8008d0c:	ee10 0a10 	vmov	r0, s0
 8008d10:	f2a2 4216 	subw	r2, r2, #1046	; 0x416
 8008d14:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 8008d18:	ec41 0b17 	vmov	d7, r0, r1
 8008d1c:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008d20:	ed9f 5b2b 	vldr	d5, [pc, #172]	; 8008dd0 <__ieee754_rem_pio2+0x268>
 8008d24:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008d28:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d2c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008d30:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008d34:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 8008d38:	a902      	add	r1, sp, #8
 8008d3a:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 8008d3e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008d42:	ed8d 6b04 	vstr	d6, [sp, #16]
 8008d46:	ee27 7b05 	vmul.f64	d7, d7, d5
 8008d4a:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008d4e:	2603      	movs	r6, #3
 8008d50:	4608      	mov	r0, r1
 8008d52:	ed91 7b04 	vldr	d7, [r1, #16]
 8008d56:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d5e:	4633      	mov	r3, r6
 8008d60:	f1a1 0108 	sub.w	r1, r1, #8
 8008d64:	f106 36ff 	add.w	r6, r6, #4294967295
 8008d68:	d0f3      	beq.n	8008d52 <__ieee754_rem_pio2+0x1ea>
 8008d6a:	4920      	ldr	r1, [pc, #128]	; (8008dec <__ieee754_rem_pio2+0x284>)
 8008d6c:	9101      	str	r1, [sp, #4]
 8008d6e:	2102      	movs	r1, #2
 8008d70:	9100      	str	r1, [sp, #0]
 8008d72:	4621      	mov	r1, r4
 8008d74:	f000 f8a8 	bl	8008ec8 <__kernel_rem_pio2>
 8008d78:	2d00      	cmp	r5, #0
 8008d7a:	f6bf af25 	bge.w	8008bc8 <__ieee754_rem_pio2+0x60>
 8008d7e:	ed94 7b00 	vldr	d7, [r4]
 8008d82:	eeb1 7b47 	vneg.f64	d7, d7
 8008d86:	ed84 7b00 	vstr	d7, [r4]
 8008d8a:	ed94 7b02 	vldr	d7, [r4, #8]
 8008d8e:	eeb1 7b47 	vneg.f64	d7, d7
 8008d92:	ed84 7b02 	vstr	d7, [r4, #8]
 8008d96:	e79b      	b.n	8008cd0 <__ieee754_rem_pio2+0x168>
 8008d98:	54400000 	.word	0x54400000
 8008d9c:	3ff921fb 	.word	0x3ff921fb
 8008da0:	1a626331 	.word	0x1a626331
 8008da4:	3dd0b461 	.word	0x3dd0b461
 8008da8:	1a600000 	.word	0x1a600000
 8008dac:	3dd0b461 	.word	0x3dd0b461
 8008db0:	2e037073 	.word	0x2e037073
 8008db4:	3ba3198a 	.word	0x3ba3198a
 8008db8:	6dc9c883 	.word	0x6dc9c883
 8008dbc:	3fe45f30 	.word	0x3fe45f30
 8008dc0:	2e000000 	.word	0x2e000000
 8008dc4:	3ba3198a 	.word	0x3ba3198a
 8008dc8:	252049c1 	.word	0x252049c1
 8008dcc:	397b839a 	.word	0x397b839a
 8008dd0:	00000000 	.word	0x00000000
 8008dd4:	41700000 	.word	0x41700000
 8008dd8:	3fe921fb 	.word	0x3fe921fb
 8008ddc:	4002d97b 	.word	0x4002d97b
 8008de0:	413921fb 	.word	0x413921fb
 8008de4:	0800976c 	.word	0x0800976c
 8008de8:	7fefffff 	.word	0x7fefffff
 8008dec:	080097ec 	.word	0x080097ec

08008df0 <__kernel_cos>:
 8008df0:	ee10 1a90 	vmov	r1, s1
 8008df4:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 8008df8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8008dfc:	f1b1 5f79 	cmp.w	r1, #1044381696	; 0x3e400000
 8008e00:	da05      	bge.n	8008e0e <__kernel_cos+0x1e>
 8008e02:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 8008e06:	ee17 3a90 	vmov	r3, s15
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d03d      	beq.n	8008e8a <__kernel_cos+0x9a>
 8008e0e:	ee20 3b00 	vmul.f64	d3, d0, d0
 8008e12:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 8008e90 <__kernel_cos+0xa0>
 8008e16:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008e98 <__kernel_cos+0xa8>
 8008e1a:	eea3 6b07 	vfma.f64	d6, d3, d7
 8008e1e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008ea0 <__kernel_cos+0xb0>
 8008e22:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008e26:	ed9f 6b20 	vldr	d6, [pc, #128]	; 8008ea8 <__kernel_cos+0xb8>
 8008e2a:	eea7 6b03 	vfma.f64	d6, d7, d3
 8008e2e:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8008eb0 <__kernel_cos+0xc0>
 8008e32:	4b23      	ldr	r3, [pc, #140]	; (8008ec0 <__kernel_cos+0xd0>)
 8008e34:	eea6 7b03 	vfma.f64	d7, d6, d3
 8008e38:	ed9f 6b1f 	vldr	d6, [pc, #124]	; 8008eb8 <__kernel_cos+0xc8>
 8008e3c:	4299      	cmp	r1, r3
 8008e3e:	eea7 6b03 	vfma.f64	d6, d7, d3
 8008e42:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8008e46:	ee26 5b03 	vmul.f64	d5, d6, d3
 8008e4a:	ee23 7b07 	vmul.f64	d7, d3, d7
 8008e4e:	ee21 6b40 	vnmul.f64	d6, d1, d0
 8008e52:	eea3 6b05 	vfma.f64	d6, d3, d5
 8008e56:	dc04      	bgt.n	8008e62 <__kernel_cos+0x72>
 8008e58:	ee37 6b46 	vsub.f64	d6, d7, d6
 8008e5c:	ee34 0b46 	vsub.f64	d0, d4, d6
 8008e60:	4770      	bx	lr
 8008e62:	4b18      	ldr	r3, [pc, #96]	; (8008ec4 <__kernel_cos+0xd4>)
 8008e64:	4299      	cmp	r1, r3
 8008e66:	dc0d      	bgt.n	8008e84 <__kernel_cos+0x94>
 8008e68:	2200      	movs	r2, #0
 8008e6a:	f5a1 1300 	sub.w	r3, r1, #2097152	; 0x200000
 8008e6e:	ec43 2b15 	vmov	d5, r2, r3
 8008e72:	ee34 0b45 	vsub.f64	d0, d4, d5
 8008e76:	ee37 7b45 	vsub.f64	d7, d7, d5
 8008e7a:	ee37 7b46 	vsub.f64	d7, d7, d6
 8008e7e:	ee30 0b47 	vsub.f64	d0, d0, d7
 8008e82:	4770      	bx	lr
 8008e84:	eeb5 5b02 	vmov.f64	d5, #82	; 0x3e900000  0.2812500
 8008e88:	e7f3      	b.n	8008e72 <__kernel_cos+0x82>
 8008e8a:	eeb0 0b44 	vmov.f64	d0, d4
 8008e8e:	4770      	bx	lr
 8008e90:	be8838d4 	.word	0xbe8838d4
 8008e94:	bda8fae9 	.word	0xbda8fae9
 8008e98:	bdb4b1c4 	.word	0xbdb4b1c4
 8008e9c:	3e21ee9e 	.word	0x3e21ee9e
 8008ea0:	809c52ad 	.word	0x809c52ad
 8008ea4:	be927e4f 	.word	0xbe927e4f
 8008ea8:	19cb1590 	.word	0x19cb1590
 8008eac:	3efa01a0 	.word	0x3efa01a0
 8008eb0:	16c15177 	.word	0x16c15177
 8008eb4:	bf56c16c 	.word	0xbf56c16c
 8008eb8:	5555554c 	.word	0x5555554c
 8008ebc:	3fa55555 	.word	0x3fa55555
 8008ec0:	3fd33332 	.word	0x3fd33332
 8008ec4:	3fe90000 	.word	0x3fe90000

08008ec8 <__kernel_rem_pio2>:
 8008ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ecc:	ed2d 8b06 	vpush	{d8-d10}
 8008ed0:	f5ad 7d13 	sub.w	sp, sp, #588	; 0x24c
 8008ed4:	460f      	mov	r7, r1
 8008ed6:	9002      	str	r0, [sp, #8]
 8008ed8:	49c5      	ldr	r1, [pc, #788]	; (80091f0 <__kernel_rem_pio2+0x328>)
 8008eda:	98a2      	ldr	r0, [sp, #648]	; 0x288
 8008edc:	f8dd e28c 	ldr.w	lr, [sp, #652]	; 0x28c
 8008ee0:	f851 9020 	ldr.w	r9, [r1, r0, lsl #2]
 8008ee4:	9301      	str	r3, [sp, #4]
 8008ee6:	f112 0f14 	cmn.w	r2, #20
 8008eea:	bfa8      	it	ge
 8008eec:	2018      	movge	r0, #24
 8008eee:	f103 31ff 	add.w	r1, r3, #4294967295
 8008ef2:	bfb8      	it	lt
 8008ef4:	2000      	movlt	r0, #0
 8008ef6:	f06f 0417 	mvn.w	r4, #23
 8008efa:	ed9f 6bb7 	vldr	d6, [pc, #732]	; 80091d8 <__kernel_rem_pio2+0x310>
 8008efe:	bfa4      	itt	ge
 8008f00:	f1a2 0a03 	subge.w	sl, r2, #3
 8008f04:	fb9a f0f0 	sdivge	r0, sl, r0
 8008f08:	fb00 4404 	mla	r4, r0, r4, r4
 8008f0c:	1a46      	subs	r6, r0, r1
 8008f0e:	4414      	add	r4, r2
 8008f10:	eb09 0c01 	add.w	ip, r9, r1
 8008f14:	ad1a      	add	r5, sp, #104	; 0x68
 8008f16:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 8008f1a:	2200      	movs	r2, #0
 8008f1c:	4562      	cmp	r2, ip
 8008f1e:	dd10      	ble.n	8008f42 <__kernel_rem_pio2+0x7a>
 8008f20:	9a01      	ldr	r2, [sp, #4]
 8008f22:	ab1a      	add	r3, sp, #104	; 0x68
 8008f24:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8008f28:	f50d 7ad4 	add.w	sl, sp, #424	; 0x1a8
 8008f2c:	f04f 0c00 	mov.w	ip, #0
 8008f30:	45cc      	cmp	ip, r9
 8008f32:	dc26      	bgt.n	8008f82 <__kernel_rem_pio2+0xba>
 8008f34:	ed9f 7ba8 	vldr	d7, [pc, #672]	; 80091d8 <__kernel_rem_pio2+0x310>
 8008f38:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008f3c:	4616      	mov	r6, r2
 8008f3e:	2500      	movs	r5, #0
 8008f40:	e015      	b.n	8008f6e <__kernel_rem_pio2+0xa6>
 8008f42:	42d6      	cmn	r6, r2
 8008f44:	d409      	bmi.n	8008f5a <__kernel_rem_pio2+0x92>
 8008f46:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
 8008f4a:	ee07 3a90 	vmov	s15, r3
 8008f4e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008f52:	eca5 7b02 	vstmia	r5!, {d7}
 8008f56:	3201      	adds	r2, #1
 8008f58:	e7e0      	b.n	8008f1c <__kernel_rem_pio2+0x54>
 8008f5a:	eeb0 7b46 	vmov.f64	d7, d6
 8008f5e:	e7f8      	b.n	8008f52 <__kernel_rem_pio2+0x8a>
 8008f60:	ecb8 5b02 	vldmia	r8!, {d5}
 8008f64:	ed96 6b00 	vldr	d6, [r6]
 8008f68:	3501      	adds	r5, #1
 8008f6a:	eea5 7b06 	vfma.f64	d7, d5, d6
 8008f6e:	428d      	cmp	r5, r1
 8008f70:	f1a6 0608 	sub.w	r6, r6, #8
 8008f74:	ddf4      	ble.n	8008f60 <__kernel_rem_pio2+0x98>
 8008f76:	ecaa 7b02 	vstmia	sl!, {d7}
 8008f7a:	f10c 0c01 	add.w	ip, ip, #1
 8008f7e:	3208      	adds	r2, #8
 8008f80:	e7d6      	b.n	8008f30 <__kernel_rem_pio2+0x68>
 8008f82:	ab06      	add	r3, sp, #24
 8008f84:	ed9f 9b96 	vldr	d9, [pc, #600]	; 80091e0 <__kernel_rem_pio2+0x318>
 8008f88:	ed9f ab97 	vldr	d10, [pc, #604]	; 80091e8 <__kernel_rem_pio2+0x320>
 8008f8c:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 8008f90:	9303      	str	r3, [sp, #12]
 8008f92:	eb0e 0a80 	add.w	sl, lr, r0, lsl #2
 8008f96:	464d      	mov	r5, r9
 8008f98:	00eb      	lsls	r3, r5, #3
 8008f9a:	9304      	str	r3, [sp, #16]
 8008f9c:	ab92      	add	r3, sp, #584	; 0x248
 8008f9e:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008fa2:	f10d 0b18 	add.w	fp, sp, #24
 8008fa6:	ab6a      	add	r3, sp, #424	; 0x1a8
 8008fa8:	ed12 0b28 	vldr	d0, [r2, #-160]	; 0xffffff60
 8008fac:	465e      	mov	r6, fp
 8008fae:	eb03 02c5 	add.w	r2, r3, r5, lsl #3
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	2800      	cmp	r0, #0
 8008fb6:	f1a2 0208 	sub.w	r2, r2, #8
 8008fba:	dc4c      	bgt.n	8009056 <__kernel_rem_pio2+0x18e>
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	9105      	str	r1, [sp, #20]
 8008fc0:	f000 faf2 	bl	80095a8 <scalbn>
 8008fc4:	eeb0 8b40 	vmov.f64	d8, d0
 8008fc8:	eeb4 0b00 	vmov.f64	d0, #64	; 0x3e000000  0.125
 8008fcc:	ee28 0b00 	vmul.f64	d0, d8, d0
 8008fd0:	f000 fa76 	bl	80094c0 <floor>
 8008fd4:	eeb2 7b00 	vmov.f64	d7, #32	; 0x41000000  8.0
 8008fd8:	eea0 8b47 	vfms.f64	d8, d0, d7
 8008fdc:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 8008fe0:	2c00      	cmp	r4, #0
 8008fe2:	eeb8 0be7 	vcvt.f64.s32	d0, s15
 8008fe6:	ee17 8a90 	vmov	r8, s15
 8008fea:	ee38 8b40 	vsub.f64	d8, d8, d0
 8008fee:	9905      	ldr	r1, [sp, #20]
 8008ff0:	dd43      	ble.n	800907a <__kernel_rem_pio2+0x1b2>
 8008ff2:	1e68      	subs	r0, r5, #1
 8008ff4:	ab06      	add	r3, sp, #24
 8008ff6:	f1c4 0c18 	rsb	ip, r4, #24
 8008ffa:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8008ffe:	fa46 f20c 	asr.w	r2, r6, ip
 8009002:	4490      	add	r8, r2
 8009004:	fa02 f20c 	lsl.w	r2, r2, ip
 8009008:	1ab6      	subs	r6, r6, r2
 800900a:	f1c4 0217 	rsb	r2, r4, #23
 800900e:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8009012:	4116      	asrs	r6, r2
 8009014:	2e00      	cmp	r6, #0
 8009016:	dd3f      	ble.n	8009098 <__kernel_rem_pio2+0x1d0>
 8009018:	f04f 0c00 	mov.w	ip, #0
 800901c:	f108 0801 	add.w	r8, r8, #1
 8009020:	4660      	mov	r0, ip
 8009022:	f06f 4e7f 	mvn.w	lr, #4278190080	; 0xff000000
 8009026:	4565      	cmp	r5, ip
 8009028:	dc6e      	bgt.n	8009108 <__kernel_rem_pio2+0x240>
 800902a:	2c00      	cmp	r4, #0
 800902c:	dd04      	ble.n	8009038 <__kernel_rem_pio2+0x170>
 800902e:	2c01      	cmp	r4, #1
 8009030:	d07f      	beq.n	8009132 <__kernel_rem_pio2+0x26a>
 8009032:	2c02      	cmp	r4, #2
 8009034:	f000 8087 	beq.w	8009146 <__kernel_rem_pio2+0x27e>
 8009038:	2e02      	cmp	r6, #2
 800903a:	d12d      	bne.n	8009098 <__kernel_rem_pio2+0x1d0>
 800903c:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 8009040:	ee30 8b48 	vsub.f64	d8, d0, d8
 8009044:	b340      	cbz	r0, 8009098 <__kernel_rem_pio2+0x1d0>
 8009046:	4620      	mov	r0, r4
 8009048:	9105      	str	r1, [sp, #20]
 800904a:	f000 faad 	bl	80095a8 <scalbn>
 800904e:	9905      	ldr	r1, [sp, #20]
 8009050:	ee38 8b40 	vsub.f64	d8, d8, d0
 8009054:	e020      	b.n	8009098 <__kernel_rem_pio2+0x1d0>
 8009056:	ee20 7b09 	vmul.f64	d7, d0, d9
 800905a:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800905e:	3801      	subs	r0, #1
 8009060:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 8009064:	eea7 0b4a 	vfms.f64	d0, d7, d10
 8009068:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800906c:	eca6 0a01 	vstmia	r6!, {s0}
 8009070:	ed92 0b00 	vldr	d0, [r2]
 8009074:	ee37 0b00 	vadd.f64	d0, d7, d0
 8009078:	e79c      	b.n	8008fb4 <__kernel_rem_pio2+0xec>
 800907a:	d105      	bne.n	8009088 <__kernel_rem_pio2+0x1c0>
 800907c:	1e6a      	subs	r2, r5, #1
 800907e:	ab06      	add	r3, sp, #24
 8009080:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8009084:	15f6      	asrs	r6, r6, #23
 8009086:	e7c5      	b.n	8009014 <__kernel_rem_pio2+0x14c>
 8009088:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 800908c:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009094:	da36      	bge.n	8009104 <__kernel_rem_pio2+0x23c>
 8009096:	2600      	movs	r6, #0
 8009098:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800909c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80090a0:	f040 80aa 	bne.w	80091f8 <__kernel_rem_pio2+0x330>
 80090a4:	f105 3bff 	add.w	fp, r5, #4294967295
 80090a8:	4658      	mov	r0, fp
 80090aa:	2200      	movs	r2, #0
 80090ac:	4548      	cmp	r0, r9
 80090ae:	da52      	bge.n	8009156 <__kernel_rem_pio2+0x28e>
 80090b0:	2a00      	cmp	r2, #0
 80090b2:	f000 8081 	beq.w	80091b8 <__kernel_rem_pio2+0x2f0>
 80090b6:	ab06      	add	r3, sp, #24
 80090b8:	3c18      	subs	r4, #24
 80090ba:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	f000 8087 	beq.w	80091d2 <__kernel_rem_pio2+0x30a>
 80090c4:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 80090c8:	4620      	mov	r0, r4
 80090ca:	f000 fa6d 	bl	80095a8 <scalbn>
 80090ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80090d2:	ed9f 6b43 	vldr	d6, [pc, #268]	; 80091e0 <__kernel_rem_pio2+0x318>
 80090d6:	a96a      	add	r1, sp, #424	; 0x1a8
 80090d8:	f103 0208 	add.w	r2, r3, #8
 80090dc:	1888      	adds	r0, r1, r2
 80090de:	4659      	mov	r1, fp
 80090e0:	2900      	cmp	r1, #0
 80090e2:	f280 80b7 	bge.w	8009254 <__kernel_rem_pio2+0x38c>
 80090e6:	4659      	mov	r1, fp
 80090e8:	2900      	cmp	r1, #0
 80090ea:	f2c0 80d5 	blt.w	8009298 <__kernel_rem_pio2+0x3d0>
 80090ee:	a86a      	add	r0, sp, #424	; 0x1a8
 80090f0:	eb00 05c1 	add.w	r5, r0, r1, lsl #3
 80090f4:	ed9f 7b38 	vldr	d7, [pc, #224]	; 80091d8 <__kernel_rem_pio2+0x310>
 80090f8:	f8df c0f8 	ldr.w	ip, [pc, #248]	; 80091f4 <__kernel_rem_pio2+0x32c>
 80090fc:	2400      	movs	r4, #0
 80090fe:	ebab 0001 	sub.w	r0, fp, r1
 8009102:	e0be      	b.n	8009282 <__kernel_rem_pio2+0x3ba>
 8009104:	2602      	movs	r6, #2
 8009106:	e787      	b.n	8009018 <__kernel_rem_pio2+0x150>
 8009108:	f8db 2000 	ldr.w	r2, [fp]
 800910c:	b958      	cbnz	r0, 8009126 <__kernel_rem_pio2+0x25e>
 800910e:	b122      	cbz	r2, 800911a <__kernel_rem_pio2+0x252>
 8009110:	f1c2 7280 	rsb	r2, r2, #16777216	; 0x1000000
 8009114:	f8cb 2000 	str.w	r2, [fp]
 8009118:	2201      	movs	r2, #1
 800911a:	f10c 0c01 	add.w	ip, ip, #1
 800911e:	f10b 0b04 	add.w	fp, fp, #4
 8009122:	4610      	mov	r0, r2
 8009124:	e77f      	b.n	8009026 <__kernel_rem_pio2+0x15e>
 8009126:	ebae 0202 	sub.w	r2, lr, r2
 800912a:	f8cb 2000 	str.w	r2, [fp]
 800912e:	4602      	mov	r2, r0
 8009130:	e7f3      	b.n	800911a <__kernel_rem_pio2+0x252>
 8009132:	f105 3cff 	add.w	ip, r5, #4294967295
 8009136:	ab06      	add	r3, sp, #24
 8009138:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 800913c:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8009140:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
 8009144:	e778      	b.n	8009038 <__kernel_rem_pio2+0x170>
 8009146:	f105 3cff 	add.w	ip, r5, #4294967295
 800914a:	ab06      	add	r3, sp, #24
 800914c:	f853 202c 	ldr.w	r2, [r3, ip, lsl #2]
 8009150:	f3c2 0215 	ubfx	r2, r2, #0, #22
 8009154:	e7f4      	b.n	8009140 <__kernel_rem_pio2+0x278>
 8009156:	ab06      	add	r3, sp, #24
 8009158:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800915c:	3801      	subs	r0, #1
 800915e:	431a      	orrs	r2, r3
 8009160:	e7a4      	b.n	80090ac <__kernel_rem_pio2+0x1e4>
 8009162:	f10c 0c01 	add.w	ip, ip, #1
 8009166:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800916a:	2800      	cmp	r0, #0
 800916c:	d0f9      	beq.n	8009162 <__kernel_rem_pio2+0x29a>
 800916e:	9b04      	ldr	r3, [sp, #16]
 8009170:	f503 7312 	add.w	r3, r3, #584	; 0x248
 8009174:	eb0d 0203 	add.w	r2, sp, r3
 8009178:	9b01      	ldr	r3, [sp, #4]
 800917a:	18e8      	adds	r0, r5, r3
 800917c:	ab1a      	add	r3, sp, #104	; 0x68
 800917e:	1c6e      	adds	r6, r5, #1
 8009180:	3a98      	subs	r2, #152	; 0x98
 8009182:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
 8009186:	4465      	add	r5, ip
 8009188:	42b5      	cmp	r5, r6
 800918a:	f6ff af05 	blt.w	8008f98 <__kernel_rem_pio2+0xd0>
 800918e:	f85a 3026 	ldr.w	r3, [sl, r6, lsl #2]
 8009192:	f8dd e008 	ldr.w	lr, [sp, #8]
 8009196:	ee07 3a90 	vmov	s15, r3
 800919a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800919e:	f04f 0c00 	mov.w	ip, #0
 80091a2:	eca0 7b02 	vstmia	r0!, {d7}
 80091a6:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80091d8 <__kernel_rem_pio2+0x310>
 80091aa:	4680      	mov	r8, r0
 80091ac:	458c      	cmp	ip, r1
 80091ae:	dd07      	ble.n	80091c0 <__kernel_rem_pio2+0x2f8>
 80091b0:	eca2 7b02 	vstmia	r2!, {d7}
 80091b4:	3601      	adds	r6, #1
 80091b6:	e7e7      	b.n	8009188 <__kernel_rem_pio2+0x2c0>
 80091b8:	9a03      	ldr	r2, [sp, #12]
 80091ba:	f04f 0c01 	mov.w	ip, #1
 80091be:	e7d2      	b.n	8009166 <__kernel_rem_pio2+0x29e>
 80091c0:	ecbe 5b02 	vldmia	lr!, {d5}
 80091c4:	ed38 6b02 	vldmdb	r8!, {d6}
 80091c8:	f10c 0c01 	add.w	ip, ip, #1
 80091cc:	eea5 7b06 	vfma.f64	d7, d5, d6
 80091d0:	e7ec      	b.n	80091ac <__kernel_rem_pio2+0x2e4>
 80091d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80091d6:	e76e      	b.n	80090b6 <__kernel_rem_pio2+0x1ee>
	...
 80091e4:	3e700000 	.word	0x3e700000
 80091e8:	00000000 	.word	0x00000000
 80091ec:	41700000 	.word	0x41700000
 80091f0:	08009938 	.word	0x08009938
 80091f4:	080098f8 	.word	0x080098f8
 80091f8:	4260      	negs	r0, r4
 80091fa:	eeb0 0b48 	vmov.f64	d0, d8
 80091fe:	f000 f9d3 	bl	80095a8 <scalbn>
 8009202:	ed9f 6b77 	vldr	d6, [pc, #476]	; 80093e0 <__kernel_rem_pio2+0x518>
 8009206:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800920a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800920e:	db18      	blt.n	8009242 <__kernel_rem_pio2+0x37a>
 8009210:	ed9f 7b75 	vldr	d7, [pc, #468]	; 80093e8 <__kernel_rem_pio2+0x520>
 8009214:	ee20 7b07 	vmul.f64	d7, d0, d7
 8009218:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800921c:	aa06      	add	r2, sp, #24
 800921e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 8009222:	eea5 0b46 	vfms.f64	d0, d5, d6
 8009226:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800922a:	f105 0b01 	add.w	fp, r5, #1
 800922e:	ee10 3a10 	vmov	r3, s0
 8009232:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009236:	ee17 3a10 	vmov	r3, s14
 800923a:	3418      	adds	r4, #24
 800923c:	f842 302b 	str.w	r3, [r2, fp, lsl #2]
 8009240:	e740      	b.n	80090c4 <__kernel_rem_pio2+0x1fc>
 8009242:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 8009246:	aa06      	add	r2, sp, #24
 8009248:	ee10 3a10 	vmov	r3, s0
 800924c:	46ab      	mov	fp, r5
 800924e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 8009252:	e737      	b.n	80090c4 <__kernel_rem_pio2+0x1fc>
 8009254:	ac06      	add	r4, sp, #24
 8009256:	f854 4021 	ldr.w	r4, [r4, r1, lsl #2]
 800925a:	9401      	str	r4, [sp, #4]
 800925c:	ee07 4a90 	vmov	s15, r4
 8009260:	3901      	subs	r1, #1
 8009262:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009266:	ee27 7b00 	vmul.f64	d7, d7, d0
 800926a:	ee20 0b06 	vmul.f64	d0, d0, d6
 800926e:	ed20 7b02 	vstmdb	r0!, {d7}
 8009272:	e735      	b.n	80090e0 <__kernel_rem_pio2+0x218>
 8009274:	ecbc 5b02 	vldmia	ip!, {d5}
 8009278:	ecb5 6b02 	vldmia	r5!, {d6}
 800927c:	3401      	adds	r4, #1
 800927e:	eea5 7b06 	vfma.f64	d7, d5, d6
 8009282:	454c      	cmp	r4, r9
 8009284:	dc01      	bgt.n	800928a <__kernel_rem_pio2+0x3c2>
 8009286:	4284      	cmp	r4, r0
 8009288:	ddf4      	ble.n	8009274 <__kernel_rem_pio2+0x3ac>
 800928a:	ac42      	add	r4, sp, #264	; 0x108
 800928c:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
 8009290:	ed80 7b00 	vstr	d7, [r0]
 8009294:	3901      	subs	r1, #1
 8009296:	e727      	b.n	80090e8 <__kernel_rem_pio2+0x220>
 8009298:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800929a:	2902      	cmp	r1, #2
 800929c:	dc0a      	bgt.n	80092b4 <__kernel_rem_pio2+0x3ec>
 800929e:	2900      	cmp	r1, #0
 80092a0:	dc2c      	bgt.n	80092fc <__kernel_rem_pio2+0x434>
 80092a2:	d045      	beq.n	8009330 <__kernel_rem_pio2+0x468>
 80092a4:	f008 0007 	and.w	r0, r8, #7
 80092a8:	f50d 7d13 	add.w	sp, sp, #588	; 0x24c
 80092ac:	ecbd 8b06 	vpop	{d8-d10}
 80092b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092b4:	9aa2      	ldr	r2, [sp, #648]	; 0x288
 80092b6:	2a03      	cmp	r2, #3
 80092b8:	d1f4      	bne.n	80092a4 <__kernel_rem_pio2+0x3dc>
 80092ba:	aa42      	add	r2, sp, #264	; 0x108
 80092bc:	4413      	add	r3, r2
 80092be:	461a      	mov	r2, r3
 80092c0:	4619      	mov	r1, r3
 80092c2:	4658      	mov	r0, fp
 80092c4:	2800      	cmp	r0, #0
 80092c6:	f1a1 0108 	sub.w	r1, r1, #8
 80092ca:	dc54      	bgt.n	8009376 <__kernel_rem_pio2+0x4ae>
 80092cc:	4659      	mov	r1, fp
 80092ce:	2901      	cmp	r1, #1
 80092d0:	f1a2 0208 	sub.w	r2, r2, #8
 80092d4:	dc5f      	bgt.n	8009396 <__kernel_rem_pio2+0x4ce>
 80092d6:	ed9f 7b46 	vldr	d7, [pc, #280]	; 80093f0 <__kernel_rem_pio2+0x528>
 80092da:	3308      	adds	r3, #8
 80092dc:	f1bb 0f01 	cmp.w	fp, #1
 80092e0:	dc69      	bgt.n	80093b6 <__kernel_rem_pio2+0x4ee>
 80092e2:	ed9d 5b42 	vldr	d5, [sp, #264]	; 0x108
 80092e6:	ed9d 6b44 	vldr	d6, [sp, #272]	; 0x110
 80092ea:	2e00      	cmp	r6, #0
 80092ec:	d16a      	bne.n	80093c4 <__kernel_rem_pio2+0x4fc>
 80092ee:	ed87 5b00 	vstr	d5, [r7]
 80092f2:	ed87 6b02 	vstr	d6, [r7, #8]
 80092f6:	ed87 7b04 	vstr	d7, [r7, #16]
 80092fa:	e7d3      	b.n	80092a4 <__kernel_rem_pio2+0x3dc>
 80092fc:	ed9f 6b3c 	vldr	d6, [pc, #240]	; 80093f0 <__kernel_rem_pio2+0x528>
 8009300:	ab42      	add	r3, sp, #264	; 0x108
 8009302:	441a      	add	r2, r3
 8009304:	465b      	mov	r3, fp
 8009306:	2b00      	cmp	r3, #0
 8009308:	da26      	bge.n	8009358 <__kernel_rem_pio2+0x490>
 800930a:	b35e      	cbz	r6, 8009364 <__kernel_rem_pio2+0x49c>
 800930c:	eeb1 7b46 	vneg.f64	d7, d6
 8009310:	ed87 7b00 	vstr	d7, [r7]
 8009314:	ed9d 7b42 	vldr	d7, [sp, #264]	; 0x108
 8009318:	aa44      	add	r2, sp, #272	; 0x110
 800931a:	2301      	movs	r3, #1
 800931c:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009320:	459b      	cmp	fp, r3
 8009322:	da22      	bge.n	800936a <__kernel_rem_pio2+0x4a2>
 8009324:	b10e      	cbz	r6, 800932a <__kernel_rem_pio2+0x462>
 8009326:	eeb1 7b47 	vneg.f64	d7, d7
 800932a:	ed87 7b02 	vstr	d7, [r7, #8]
 800932e:	e7b9      	b.n	80092a4 <__kernel_rem_pio2+0x3dc>
 8009330:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80093f0 <__kernel_rem_pio2+0x528>
 8009334:	ab42      	add	r3, sp, #264	; 0x108
 8009336:	441a      	add	r2, r3
 8009338:	f1bb 0f00 	cmp.w	fp, #0
 800933c:	da05      	bge.n	800934a <__kernel_rem_pio2+0x482>
 800933e:	b10e      	cbz	r6, 8009344 <__kernel_rem_pio2+0x47c>
 8009340:	eeb1 7b47 	vneg.f64	d7, d7
 8009344:	ed87 7b00 	vstr	d7, [r7]
 8009348:	e7ac      	b.n	80092a4 <__kernel_rem_pio2+0x3dc>
 800934a:	ed32 6b02 	vldmdb	r2!, {d6}
 800934e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009352:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009356:	e7ef      	b.n	8009338 <__kernel_rem_pio2+0x470>
 8009358:	ed32 7b02 	vldmdb	r2!, {d7}
 800935c:	3b01      	subs	r3, #1
 800935e:	ee36 6b07 	vadd.f64	d6, d6, d7
 8009362:	e7d0      	b.n	8009306 <__kernel_rem_pio2+0x43e>
 8009364:	eeb0 7b46 	vmov.f64	d7, d6
 8009368:	e7d2      	b.n	8009310 <__kernel_rem_pio2+0x448>
 800936a:	ecb2 6b02 	vldmia	r2!, {d6}
 800936e:	3301      	adds	r3, #1
 8009370:	ee37 7b06 	vadd.f64	d7, d7, d6
 8009374:	e7d4      	b.n	8009320 <__kernel_rem_pio2+0x458>
 8009376:	ed91 7b00 	vldr	d7, [r1]
 800937a:	ed91 5b02 	vldr	d5, [r1, #8]
 800937e:	3801      	subs	r0, #1
 8009380:	ee37 6b05 	vadd.f64	d6, d7, d5
 8009384:	ee37 7b46 	vsub.f64	d7, d7, d6
 8009388:	ed81 6b00 	vstr	d6, [r1]
 800938c:	ee37 7b05 	vadd.f64	d7, d7, d5
 8009390:	ed81 7b02 	vstr	d7, [r1, #8]
 8009394:	e796      	b.n	80092c4 <__kernel_rem_pio2+0x3fc>
 8009396:	ed92 7b00 	vldr	d7, [r2]
 800939a:	ed92 5b02 	vldr	d5, [r2, #8]
 800939e:	3901      	subs	r1, #1
 80093a0:	ee37 6b05 	vadd.f64	d6, d7, d5
 80093a4:	ee37 7b46 	vsub.f64	d7, d7, d6
 80093a8:	ed82 6b00 	vstr	d6, [r2]
 80093ac:	ee37 7b05 	vadd.f64	d7, d7, d5
 80093b0:	ed82 7b02 	vstr	d7, [r2, #8]
 80093b4:	e78b      	b.n	80092ce <__kernel_rem_pio2+0x406>
 80093b6:	ed33 6b02 	vldmdb	r3!, {d6}
 80093ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093be:	ee37 7b06 	vadd.f64	d7, d7, d6
 80093c2:	e78b      	b.n	80092dc <__kernel_rem_pio2+0x414>
 80093c4:	eeb1 5b45 	vneg.f64	d5, d5
 80093c8:	eeb1 6b46 	vneg.f64	d6, d6
 80093cc:	ed87 5b00 	vstr	d5, [r7]
 80093d0:	eeb1 7b47 	vneg.f64	d7, d7
 80093d4:	ed87 6b02 	vstr	d6, [r7, #8]
 80093d8:	e78d      	b.n	80092f6 <__kernel_rem_pio2+0x42e>
 80093da:	bf00      	nop
 80093dc:	f3af 8000 	nop.w
 80093e0:	00000000 	.word	0x00000000
 80093e4:	41700000 	.word	0x41700000
 80093e8:	00000000 	.word	0x00000000
 80093ec:	3e700000 	.word	0x3e700000
	...

080093f8 <__kernel_sin>:
 80093f8:	ee10 3a90 	vmov	r3, s1
 80093fc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009400:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8009404:	da04      	bge.n	8009410 <__kernel_sin+0x18>
 8009406:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800940a:	ee17 3a90 	vmov	r3, s15
 800940e:	b35b      	cbz	r3, 8009468 <__kernel_sin+0x70>
 8009410:	ee20 6b00 	vmul.f64	d6, d0, d0
 8009414:	ee20 5b06 	vmul.f64	d5, d0, d6
 8009418:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8009470 <__kernel_sin+0x78>
 800941c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009478 <__kernel_sin+0x80>
 8009420:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009424:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009480 <__kernel_sin+0x88>
 8009428:	eea4 7b06 	vfma.f64	d7, d4, d6
 800942c:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009488 <__kernel_sin+0x90>
 8009430:	eea7 4b06 	vfma.f64	d4, d7, d6
 8009434:	ed9f 7b16 	vldr	d7, [pc, #88]	; 8009490 <__kernel_sin+0x98>
 8009438:	eea4 7b06 	vfma.f64	d7, d4, d6
 800943c:	b930      	cbnz	r0, 800944c <__kernel_sin+0x54>
 800943e:	ed9f 4b16 	vldr	d4, [pc, #88]	; 8009498 <__kernel_sin+0xa0>
 8009442:	eea6 4b07 	vfma.f64	d4, d6, d7
 8009446:	eea4 0b05 	vfma.f64	d0, d4, d5
 800944a:	4770      	bx	lr
 800944c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 8009450:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
 8009454:	eea1 7b04 	vfma.f64	d7, d1, d4
 8009458:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800945c:	ed9f 7b10 	vldr	d7, [pc, #64]	; 80094a0 <__kernel_sin+0xa8>
 8009460:	eea5 1b07 	vfma.f64	d1, d5, d7
 8009464:	ee30 0b41 	vsub.f64	d0, d0, d1
 8009468:	4770      	bx	lr
 800946a:	bf00      	nop
 800946c:	f3af 8000 	nop.w
 8009470:	5acfd57c 	.word	0x5acfd57c
 8009474:	3de5d93a 	.word	0x3de5d93a
 8009478:	8a2b9ceb 	.word	0x8a2b9ceb
 800947c:	be5ae5e6 	.word	0xbe5ae5e6
 8009480:	57b1fe7d 	.word	0x57b1fe7d
 8009484:	3ec71de3 	.word	0x3ec71de3
 8009488:	19c161d5 	.word	0x19c161d5
 800948c:	bf2a01a0 	.word	0xbf2a01a0
 8009490:	1110f8a6 	.word	0x1110f8a6
 8009494:	3f811111 	.word	0x3f811111
 8009498:	55555549 	.word	0x55555549
 800949c:	bfc55555 	.word	0xbfc55555
 80094a0:	55555549 	.word	0x55555549
 80094a4:	3fc55555 	.word	0x3fc55555

080094a8 <fabs>:
 80094a8:	ec51 0b10 	vmov	r0, r1, d0
 80094ac:	ee10 2a10 	vmov	r2, s0
 80094b0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094b4:	ec43 2b10 	vmov	d0, r2, r3
 80094b8:	4770      	bx	lr
 80094ba:	0000      	movs	r0, r0
 80094bc:	0000      	movs	r0, r0
	...

080094c0 <floor>:
 80094c0:	ee10 1a90 	vmov	r1, s1
 80094c4:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80094c8:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80094cc:	2b13      	cmp	r3, #19
 80094ce:	b530      	push	{r4, r5, lr}
 80094d0:	ee10 0a10 	vmov	r0, s0
 80094d4:	ee10 5a10 	vmov	r5, s0
 80094d8:	dc31      	bgt.n	800953e <floor+0x7e>
 80094da:	2b00      	cmp	r3, #0
 80094dc:	da15      	bge.n	800950a <floor+0x4a>
 80094de:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8009598 <floor+0xd8>
 80094e2:	ee30 0b07 	vadd.f64	d0, d0, d7
 80094e6:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80094ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80094ee:	dd07      	ble.n	8009500 <floor+0x40>
 80094f0:	2900      	cmp	r1, #0
 80094f2:	da4e      	bge.n	8009592 <floor+0xd2>
 80094f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80094f8:	4318      	orrs	r0, r3
 80094fa:	d001      	beq.n	8009500 <floor+0x40>
 80094fc:	4928      	ldr	r1, [pc, #160]	; (80095a0 <floor+0xe0>)
 80094fe:	2000      	movs	r0, #0
 8009500:	460b      	mov	r3, r1
 8009502:	4602      	mov	r2, r0
 8009504:	ec43 2b10 	vmov	d0, r2, r3
 8009508:	e020      	b.n	800954c <floor+0x8c>
 800950a:	4a26      	ldr	r2, [pc, #152]	; (80095a4 <floor+0xe4>)
 800950c:	411a      	asrs	r2, r3
 800950e:	ea01 0402 	and.w	r4, r1, r2
 8009512:	4304      	orrs	r4, r0
 8009514:	d01a      	beq.n	800954c <floor+0x8c>
 8009516:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8009598 <floor+0xd8>
 800951a:	ee30 0b07 	vadd.f64	d0, d0, d7
 800951e:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009522:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009526:	ddeb      	ble.n	8009500 <floor+0x40>
 8009528:	2900      	cmp	r1, #0
 800952a:	bfbe      	ittt	lt
 800952c:	f44f 1080 	movlt.w	r0, #1048576	; 0x100000
 8009530:	fa40 f303 	asrlt.w	r3, r0, r3
 8009534:	18c9      	addlt	r1, r1, r3
 8009536:	ea21 0102 	bic.w	r1, r1, r2
 800953a:	2000      	movs	r0, #0
 800953c:	e7e0      	b.n	8009500 <floor+0x40>
 800953e:	2b33      	cmp	r3, #51	; 0x33
 8009540:	dd05      	ble.n	800954e <floor+0x8e>
 8009542:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009546:	d101      	bne.n	800954c <floor+0x8c>
 8009548:	ee30 0b00 	vadd.f64	d0, d0, d0
 800954c:	bd30      	pop	{r4, r5, pc}
 800954e:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8009552:	f04f 32ff 	mov.w	r2, #4294967295
 8009556:	40e2      	lsrs	r2, r4
 8009558:	4202      	tst	r2, r0
 800955a:	d0f7      	beq.n	800954c <floor+0x8c>
 800955c:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 8009598 <floor+0xd8>
 8009560:	ee30 0b07 	vadd.f64	d0, d0, d7
 8009564:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800956c:	ddc8      	ble.n	8009500 <floor+0x40>
 800956e:	2900      	cmp	r1, #0
 8009570:	da02      	bge.n	8009578 <floor+0xb8>
 8009572:	2b14      	cmp	r3, #20
 8009574:	d103      	bne.n	800957e <floor+0xbe>
 8009576:	3101      	adds	r1, #1
 8009578:	ea20 0002 	bic.w	r0, r0, r2
 800957c:	e7c0      	b.n	8009500 <floor+0x40>
 800957e:	2401      	movs	r4, #1
 8009580:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8009584:	fa04 f303 	lsl.w	r3, r4, r3
 8009588:	4418      	add	r0, r3
 800958a:	42a8      	cmp	r0, r5
 800958c:	bf38      	it	cc
 800958e:	1909      	addcc	r1, r1, r4
 8009590:	e7f2      	b.n	8009578 <floor+0xb8>
 8009592:	2000      	movs	r0, #0
 8009594:	4601      	mov	r1, r0
 8009596:	e7b3      	b.n	8009500 <floor+0x40>
 8009598:	8800759c 	.word	0x8800759c
 800959c:	7e37e43c 	.word	0x7e37e43c
 80095a0:	bff00000 	.word	0xbff00000
 80095a4:	000fffff 	.word	0x000fffff

080095a8 <scalbn>:
 80095a8:	ee10 1a90 	vmov	r1, s1
 80095ac:	b510      	push	{r4, lr}
 80095ae:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80095b2:	b98c      	cbnz	r4, 80095d8 <scalbn+0x30>
 80095b4:	ee10 3a10 	vmov	r3, s0
 80095b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80095bc:	430b      	orrs	r3, r1
 80095be:	d011      	beq.n	80095e4 <scalbn+0x3c>
 80095c0:	ed9f 7b31 	vldr	d7, [pc, #196]	; 8009688 <scalbn+0xe0>
 80095c4:	4b3c      	ldr	r3, [pc, #240]	; (80096b8 <scalbn+0x110>)
 80095c6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80095ca:	4298      	cmp	r0, r3
 80095cc:	da0b      	bge.n	80095e6 <scalbn+0x3e>
 80095ce:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8009690 <scalbn+0xe8>
 80095d2:	ee20 0b07 	vmul.f64	d0, d0, d7
 80095d6:	e005      	b.n	80095e4 <scalbn+0x3c>
 80095d8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80095dc:	429c      	cmp	r4, r3
 80095de:	d107      	bne.n	80095f0 <scalbn+0x48>
 80095e0:	ee30 0b00 	vadd.f64	d0, d0, d0
 80095e4:	bd10      	pop	{r4, pc}
 80095e6:	ee10 1a90 	vmov	r1, s1
 80095ea:	f3c1 540a 	ubfx	r4, r1, #20, #11
 80095ee:	3c36      	subs	r4, #54	; 0x36
 80095f0:	4404      	add	r4, r0
 80095f2:	f240 73fe 	movw	r3, #2046	; 0x7fe
 80095f6:	429c      	cmp	r4, r3
 80095f8:	dd0d      	ble.n	8009616 <scalbn+0x6e>
 80095fa:	ed9f 7b27 	vldr	d7, [pc, #156]	; 8009698 <scalbn+0xf0>
 80095fe:	ed9f 5b28 	vldr	d5, [pc, #160]	; 80096a0 <scalbn+0xf8>
 8009602:	eeb0 6b47 	vmov.f64	d6, d7
 8009606:	ee10 3a90 	vmov	r3, s1
 800960a:	2b00      	cmp	r3, #0
 800960c:	fe27 7b05 	vselge.f64	d7, d7, d5
 8009610:	ee27 0b06 	vmul.f64	d0, d7, d6
 8009614:	e7e6      	b.n	80095e4 <scalbn+0x3c>
 8009616:	2c00      	cmp	r4, #0
 8009618:	dd0a      	ble.n	8009630 <scalbn+0x88>
 800961a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800961e:	ec53 2b10 	vmov	r2, r3, d0
 8009622:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8009626:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800962a:	ec43 2b10 	vmov	d0, r2, r3
 800962e:	e7d9      	b.n	80095e4 <scalbn+0x3c>
 8009630:	f114 0f35 	cmn.w	r4, #53	; 0x35
 8009634:	da19      	bge.n	800966a <scalbn+0xc2>
 8009636:	f24c 3350 	movw	r3, #50000	; 0xc350
 800963a:	4298      	cmp	r0, r3
 800963c:	ee10 3a90 	vmov	r3, s1
 8009640:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009644:	dd09      	ble.n	800965a <scalbn+0xb2>
 8009646:	ed9f 0b14 	vldr	d0, [pc, #80]	; 8009698 <scalbn+0xf0>
 800964a:	ed9f 6b15 	vldr	d6, [pc, #84]	; 80096a0 <scalbn+0xf8>
 800964e:	eeb0 7b40 	vmov.f64	d7, d0
 8009652:	2b00      	cmp	r3, #0
 8009654:	fe00 0b06 	vseleq.f64	d0, d0, d6
 8009658:	e7bb      	b.n	80095d2 <scalbn+0x2a>
 800965a:	ed9f 0b0d 	vldr	d0, [pc, #52]	; 8009690 <scalbn+0xe8>
 800965e:	ed9f 6b12 	vldr	d6, [pc, #72]	; 80096a8 <scalbn+0x100>
 8009662:	eeb0 7b40 	vmov.f64	d7, d0
 8009666:	2b00      	cmp	r3, #0
 8009668:	e7f4      	b.n	8009654 <scalbn+0xac>
 800966a:	f021 41ff 	bic.w	r1, r1, #2139095040	; 0x7f800000
 800966e:	ec53 2b10 	vmov	r2, r3, d0
 8009672:	3436      	adds	r4, #54	; 0x36
 8009674:	f421 01e0 	bic.w	r1, r1, #7340032	; 0x700000
 8009678:	ea41 5304 	orr.w	r3, r1, r4, lsl #20
 800967c:	ed9f 7b0c 	vldr	d7, [pc, #48]	; 80096b0 <scalbn+0x108>
 8009680:	ec43 2b10 	vmov	d0, r2, r3
 8009684:	e7a5      	b.n	80095d2 <scalbn+0x2a>
 8009686:	bf00      	nop
 8009688:	00000000 	.word	0x00000000
 800968c:	43500000 	.word	0x43500000
 8009690:	c2f8f359 	.word	0xc2f8f359
 8009694:	01a56e1f 	.word	0x01a56e1f
 8009698:	8800759c 	.word	0x8800759c
 800969c:	7e37e43c 	.word	0x7e37e43c
 80096a0:	8800759c 	.word	0x8800759c
 80096a4:	fe37e43c 	.word	0xfe37e43c
 80096a8:	c2f8f359 	.word	0xc2f8f359
 80096ac:	81a56e1f 	.word	0x81a56e1f
 80096b0:	00000000 	.word	0x00000000
 80096b4:	3c900000 	.word	0x3c900000
 80096b8:	ffff3cb0 	.word	0xffff3cb0

080096bc <_init>:
 80096bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096be:	bf00      	nop
 80096c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096c2:	bc08      	pop	{r3}
 80096c4:	469e      	mov	lr, r3
 80096c6:	4770      	bx	lr

080096c8 <_fini>:
 80096c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ca:	bf00      	nop
 80096cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096ce:	bc08      	pop	{r3}
 80096d0:	469e      	mov	lr, r3
 80096d2:	4770      	bx	lr
